,description,tags,rating
1840/E,give two string equal length $$$ s_1 $$$ $$$ s_2 $$$ consist lowercase latin letter integer $$$ t $$$ need answer $$$ q $$$ query number $$$ 1 $$$ $$$ q $$$ $$$ i $$$ -th query come $$$ i $$$ -th second time query one three type : note query second type character swap string $$$ s_1 $$$ $$$ s_2 $$$ first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case follow descriptions test case first line test case contain a string $$$ s_1 $$$ consist lowercase latin letter ( length $$$ 200000 $$$ ) second line test case contain a string $$$ s_2 $$$ consist lowercase latin letter ( length $$$ 200000 $$$ ) string equal length third line test case contain two integers $$$ t $$$ $$$ q $$$ ( $$$ 1 \le t q \le 200000 $$$ ) number $$$ t $$$ indicate number second a character block number $$$ q $$$ correspond number query next $$$ q $$$ line test case contain a single query query one three type : query first type guarantee time query character position $$$ pos $$$ block query second type guarantee character swap block value $$$ pos pos_1 pos_2 $$$ range $$$ 1 $$$ length string sum value $$$ q $$$ test case well total length string $$$ s_1 $$$ exceed $$$ 200000 $$$ query third type output ` ` yes '' two string $$$ s_1 $$$ $$$ s_2 $$$ equal time query ignore block character ` ` '' otherwise output letter case ( lowercase uppercase ) example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' accept a positive answer let 's look string $$$ s_1 $$$ $$$ s_2 $$$ $$$ q $$$ query block character denote red first example input : ( $$$ codeforces $$$ $$$ codeblocks $$$ ) $$$ \rightarrow $$$ ( $$$ codeforces $$$ $$$ codeblocks $$$ ) $$$ \rightarrow $$$ ( $$$ code\color { red } { f } <unknown> $$$ $$$ code\color { red } { b } lock $$$ ) $$$ \rightarrow $$$ ( $$$ code\color { red } { fo } rces $$$ $$$ code\color { red } { bl } <unknown> $$$ ) $$$ \rightarrow $$$ ( $$$ code\color { red } { } <unknown> $$$ $$$ code\color { red } { blo } <unknown> $$$ ) $$$ \rightarrow $$$ ( $$$ code\color { red } { } c\color { red } { e } s $$$ $$$ code\color { red } { blo } c\color { red } { k } s $$$ ) $$$ \rightarrow $$$ ( $$$ code\color { red } { } c\color { red } { e } s $$$ $$$ code\color { red } { blo } c\color { red } { k } s $$$ ) $$$ \rightarrow $$$ ( $$$ <unknown> { red } { } c\color { red } { e } s $$$ $$$ <unknown> { red } { lo } c\color { red } { k } s $$$ ) second example input : ( $$$ cool $$$ $$$ club $$$ ) $$$ \rightarrow $$$ ( $$$ cuol $$$ $$$ <unknown> $$$ ) $$$ \rightarrow $$$ ( $$$ cuol $$$ $$$ cbol $$$ ) $$$ \rightarrow $$$ ( $$$ c\color { red } { u } ol $$$ $$$ c\color { red } { b } ol $$$ ) $$$ \rightarrow $$$ ( $$$ c\color { red } { u } ol $$$ $$$ c\color { red } { b } ol $$$ ) $$$ \rightarrow $$$ ( $$$ cuol $$$ $$$ cbol $$$ ),"['data structures', 'implementation']",1600.0
1834/E,"give array $$$ a $$$ length $$$ n $$$ a positive integer $$$ x $$$ call good impossible find a subsegment $$$ ^ { \dagger } $$$ array least common multiple elements equal $$$ x $$$ need find smallest good integer a subsegment $$$ ^ { \dagger } $$$ array $$$ a $$$ a set elements $$$ a_l a _ { l + 1 } \ldots a_r $$$ $$$ 1 \le l \le r \le n $$$ denote subsegment $$$ [ l r ] $$$ test consist multiple test case first line test case contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 50000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 300000 $$$ ) — length array $$$ a $$$ second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — elements array $$$ a $$$ guarantee sum $$$ n $$$ test case exceed $$$ 300000 $$$ test case output a single integer — smallest good integer first test case $$$ 4 $$$ a good integer smallest one since integers $$$ 1,2,3 $$$ appear array mean subsegments array length $$$ 1 $$$ least common multiples $$$ 1,2,3 $$$ however impossible find a subsegment array a least common multiple equal $$$ 4 $$$ second test case $$$ 7 $$$ a good integer integers $$$ 1,2,3,4,5 $$$ appear explicitly array integer $$$ 6 $$$ least common multiple subsegments $$$ [ 2 3 ] $$$ $$$ [ 1 3 ] $$$ third test case $$$ 1 $$$ a good integer since least common multiples integer subsegments $$$ [ 1 1 ] [ 1 2 ] [ 2 2 ] $$$ $$$ <unknown> $$$ respectively","['data structures', 'implementation', 'math']",2300.0
1834/D,"zinaida viktorovna $$$ n $$$ students history class homework today include $$$ m $$$ topics students little time prepare $$$ i $$$ -th student learn topics $$$ l_i $$$ $$$ r_i $$$ inclusive begin lesson student hold hand $$$ 0 $$$ teacher want ask topics go like : topic zinaida viktorovna ask one time find maximum difference heights highest lowest hand class survey note student 's hand go $$$ 0 $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n \le 100000 1 \le m \le 1000000000 $$$ ) — number students number topics respectively next $$$ n $$$ line test case contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le m $$$ ) — endpoints segment topics $$$ i $$$ -th student learn guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print one integer — maximum difference heights highest lowest hand class survey first test case zinaida viktorovna ask topics $$$ 5 6 7 8 $$$ hand $$$ 2 $$$ -nd student height $$$ 4 $$$ hand $$$ 4 $$$ -th height $$$ -2 $$$ , difference equal $$$ 6 $$$ second test case ask topics $$$ 1 $$$ $$$ 3 $$$ hand $$$ 1 $$$ -st student height $$$ 2 $$$ hand $$$ 3 $$$ -rd student height $$$ -2 $$$ difference $$$ 4 $$$ third test case difference highest lowest hand $$$ 0 $$$ set topics ask fifth test case ask topics difference heights $$$ 1 $$$ -st $$$ 3 $$$ -rd students ' hand $$$ 12 $$$","['brute force', 'data structures', 'greedy', 'implementation']",1900.0
1833/F,ira love <unknown> <unknown> dance much decide start dance studio find $$$ n $$$ students $$$ i $$$ th level $$$ a_i $$$ ira choose several students set a dance set a huge number dance interest magnificent dance dance call magnificent follow true : example $$$ m = 3 $$$ $$$ a = [ 4 2 2 3 6 ] $$$ follow dance magnificent ( students participate dance highlight red ) : $$$ [ \color { red } { 4 } 2 \color { red } { 2 } \color { red } { 3 } 6 ] $$$ $$$ [ \color { red } { 4 } \color { red } { 2 } 2 \color { red } { 3 } 6 ] $$$ time dance $$$ [ \color { red } { 4 } 2 2 \color { red } { 3 } 6 ] $$$ $$$ [ 4 \color { red } { 2 } \color { red } { 2 } \color { red } { 3 } 6 ] $$$ $$$ [ \color { red } { 4 } 2 2 \color { red } { 3 } \color { red } { 6 } ] $$$ magnificent dance $$$ [ \color { red } { 4 } 2 2 \color { red } { 3 } 6 ] $$$ $$$ 2 $$$ students participate although $$$ m = 3 $$$ dance $$$ [ 4 \color { red } { 2 } \color { red } { 2 } \color { red } { 3 } 6 ] $$$ involve students level $$$ 2 $$$ $$$ 2 $$$ although level dancers must pairwise distinct dance $$$ [ \color { red } { 4 } 2 2 \color { red } { 3 } \color { red } { 6 } ] $$$ students level $$$ 3 $$$ $$$ 6 $$$ participate $$$ |3 - 6| = 3 $$$ although $$$ m = 3 $$$ help ira count number magnificent dance set since number large count modulo $$$ 1000000000 + 7 $$$ two dance consider different set students participate different first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le m \le n \le 200000 $$$ ) — number ira students number dancers magnificent dance second line testcase contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — level students guarantee sum $$$ n $$$ testcases exceed $$$ 200000 $$$ testcase print a single integer — number magnificent dance since number large print modulo $$$ 1000000000 + 7 $$$ first testcase ira set magnificent dance : $$$ [ \color { red } { 8 } 10 10 \color { red } { 9 } \color { red } { 6 } 11 \color { red } { 7 } ] $$$ $$$ [ \color { red } { 8 } \color { red } { 10 } 10 \color { red } { 9 } 6 11 \color { red } { 7 } ] $$$ $$$ [ \color { red } { 8 } 10 \color { red } { 10 } \color { red } { 9 } 6 11 \color { red } { 7 } ] $$$ $$$ [ \color { red } { 8 } 10 \color { red } { 10 } \color { red } { 9 } 6 \color { red } { 11 } 7 ] $$$ $$$ [ \color { red } { 8 } \color { red } { 10 } 10 \color { red } { 9 } 6 \color { red } { 11 } 7 ] $$$ second testcase explain statements,"['constructive algorithms', 'data structures', 'implementation', 'math']",1700.0
1832/C,array integers $$$ [ a_1 a_2 \dots a_n ] $$$ let 's call value $$$ |a_1 - <unknown> - <unknown> _ { n-1 } <unknown> $$$ contrast array note contrast array size $$$ 1 $$$ equal $$$ 0 $$$ give array integers $$$ a $$$ task build array $$$ b $$$ a way follow condition meet : minimum possible size array $$$ b $$$ ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 300000 $$$ ) — size array $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \cdot a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) — elements array sum $$$ n $$$ test case n't exceed $$$ 300000 $$$ test case print a single integer — minimum possible size array $$$ b $$$,"['greedy', 'implementation']",1200.0
1829/C,"victor want become ` ` mr . perfectly fine '' , need acquire a certain set skills precisely $$$ 2 $$$ skills need acquire victor $$$ n $$$ book read book $$$ i $$$ take $$$ m_i $$$ minutes give ( possibly none ) require two skills represent a binary string length $$$ 2 $$$ minimum amount time require victor acquire two skills ? input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case description test case follow first line test case contain integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — number book available $$$ n $$$ line follow line $$$ i $$$ contain a positive integer $$$ m_i $$$ ( $$$ 1 \leq m_i \leq 200000 $$$ ) a binary string length $$$ 2 $$$ $$$ s _ { i1 } = 1 $$$ read book $$$ i $$$ acquire victor skill $$$ 1 $$$ $$$ s _ { i1 } = 0 $$$ otherwise $$$ s _ { i2 } = 1 $$$ read book $$$ i $$$ acquire victor skill $$$ 2 $$$ $$$ s _ { i2 } = 0 $$$ otherwise guarantee sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case output a single integer denote minimum amount minutes require victor obtain need skills $$$ -1 $$$ case 's impossible obtain two skills read amount book first test case use book $$$ 2 $$$ $$$ 3 $$$ a total amount minutes spend equal $$$ 3 + 4 = 7 $$$ second test case use book $$$ 1 $$$ $$$ 4 $$$ a total amount minutes spend equal $$$ 3 + 2 = 5 $$$ third test case one option read book $$$ 1 $$$ a total amount minutes spend equal $$$ 5 $$$","['greedy', 'implementation']",800.0
1829/B,give a binary array $$$ a $$$ $$$ n $$$ elements a binary array array consist $$$ 0 $$$ s $$$ 1 $$$ s. a blank space a segment consecutive elements consist $$$ 0 $$$ s. task find length longest blank space first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100 $$$ ) — length array second line test case contain $$$ n $$$ space - separated integers $$$ a_i $$$ ( $$$ 0 \leq a_i \leq 1 $$$ ) — elements array test case output a single integer — length longest blank space,['implementation'],800.0
1826/E,"a fashion tour consist $$$ m $$$ identical runway show different cities $$$ n $$$ model will participate tour number $$$ 1 $$$ $$$ n $$$ people different cities different view fashion industry rate model differently particular people city $$$ i $$$ rate model $$$ j $$$ rat $$$ r _ { i j } $$$ choose number $$$ k $$$ model order let choose model indices $$$ j_1 j_2 \dots j_k $$$ choose order city $$$ k $$$ model walk runway one another order make show excite city rat model strictly increase order performance formally city $$$ i $$$ index $$$ t $$$ ( $$$ 2 \leq t \leq k $$$ ) rat must satisfy $$$ r _ { i j _ { t - 1 } } < r _ { i <unknown> } $$$ , fashion industry money choose model $$$ j $$$ participate tour profit $$$ p_j $$$ money compute maximum total profit make choose model order satisfy requirements first line contain two integers $$$ m $$$ $$$ n $$$ ( $$$ 1 \leq m \leq 500 $$$ $$$ 1 \leq n \leq 5000 $$$ ) — number show number model will participate respectively second line contain $$$ n $$$ integers $$$ p_j $$$ ( $$$ 1 \leq p_j \leq 1000000000 $$$ ) — profit get invite $$$ j $$$ -th model tour next $$$ m $$$ line contain $$$ n $$$ integers line number $$$ i $$$ contain $$$ n $$$ integers $$$ r _ { i j } $$$ ( $$$ 1 \leq r _ { i j } \leq n $$$ ) — rat model city $$$ i $$$ output a single integer — largest total amount money get first example $$$ 3 $$$ invite model show consist model order $$$ [ 1 3 4 ] $$$ , correspond rat cities follow : see rat increase total profit $$$ 10 + 10 + 10 = 30 $$$ prove ca n't achieve a bigger profit second example invite fifth model tour would result a total profit $$$ 50 $$$ prove ca n't achieve a bigger profit third example invite single model tour result a total profit $$$ 1\,000\,000\,000 $$$ fourth test case invite model make show order $$$ [ 5 4 3 2 1 ] $$$ total profit $$$ 5 \cdot 1\,000\,000\,000 = <unknown> $$$","['brute force', 'data structures', 'dp', 'implementation']",2400.0
1819/B,"anton play favorite game ` ` defense <unknown> 2 '' favorite hero — butcher want make dinner take a rectangle height $$$ h $$$ width $$$ w $$$ make a vertical horizontal cut result part integer side , put one part box cut , formally a rectangle size $$$ h \times w $$$ cut two part size $$$ x \times w $$$ $$$ ( h - x ) \times w $$$ $$$ x $$$ integer $$$ 1 $$$ $$$ ( h - 1 ) $$$ two part size $$$ h \times y $$$ $$$ h \times ( w - y ) $$$ $$$ y $$$ integer $$$ 1 $$$ $$$ ( w - 1 ) $$$ repeat operation $$$ n - 1 $$$ time put remain rectangle box thus box contain $$$ n $$$ rectangles $$$ n - 1 $$$ rectangles put box a result cut $$$ n $$$ -th rectangle one butcher leave $$$ n - 1 $$$ cut unfortunately butcher forget number $$$ h $$$ $$$ w $$$ still $$$ n $$$ rectangles mix random order note butcher n't rotate rectangles shuffle want know possible pair $$$ ( h w ) $$$ set rectangles obtain help ! guarantee exist least one pair $$$ ( h w ) $$$ set rectangles obtain test consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number rectangles obtain $$$ i $$$ -th next $$$ n $$$ line contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le 1000000 $$$ ) — height width $$$ i $$$ -th rectangle guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case first line output a single integer $$$ m $$$ — number pair $$$ ( h w ) $$$ denote size rectangles give rectangles obtain two rectangles consider different different heights widths follow $$$ m $$$ line print output integers $$$ h_i $$$ $$$ w_i $$$ — height width rectangle give rectangles obtain output rectangles order first test case butcher could a rectangle size $$$ 4 \times 5 $$$ cut could look like ( first green cut make red one ) : second test case butcher could either a rectangle $$$ 1 \times 3 $$$ $$$ 3 \times 1 $$$ cut would look like ( first green cut make red cut ) : third test case butcher make cut rectangle $$$ 10 \times 10 $$$","['geometry', 'greedy', 'implementation']",1900.0
1811/B,"conveyor matrix $$$ m_n $$$ matrix size $$$ n \times n $$$ $$$ n $$$ even number matrix consist concentric ribbons move clockwise word conveyor matrix $$$ n = 2 $$$ simply a matrix $$$ 2 \times 2 $$$ whose cells form a cycle length $$$ 4 $$$ clockwise natural $$$ k \ge 2 $$$ matrix $$$ m _ { 2k } $$$ obtain add matrix $$$ m _ { 2k - 2 } $$$ outer layer form a clockwise cycle stand a cell coordinate $$$ x_1 y_1 $$$ want get a cell coordinate $$$ x_2 y_2 $$$ a cell coordinate $$$ x y $$$ locate intersection $$$ x $$$ th row $$$ y $$$ th column stand cell every second move cell next direction movement tape also move a neighbor cell spend one unit energy movements happen instantly make unlimited number time task find minimum amount energy spend get cell coordinate $$$ x_1 y_1 $$$ cell coordinate $$$ x_2 y_2 $$$ example $$$ n=8 $$$ initially a cell coordinate $$$ 1,3 $$$ want get a cell coordinate $$$ 6 4 $$$ immediately make $$$ 2 $$$ movements a cell coordinate $$$ 3 3 $$$ $$$ 8 $$$ second right cell first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 200000 $$$ ) — number test case descriptions test case follow description test case consist one string contain five integers $$$ n $$$ $$$ x_1 $$$ $$$ y_1 $$$ $$$ x_2 $$$ $$$ y_2 $$$ ( $$$ 1 \le x_1 y_1 x_2 y_2 \le n \le 1000000000 $$$ ) — matrix size coordinate start end cells guarantee number $$$ n $$$ even test case print one integer a separate line — minimum amount energy spend get cell coordinate $$$ x_1 y_1 $$$ cell coordinate $$$ x_2 y_2 $$$","['implementation', 'math']",1000.0
1809/A,a garland consist $$$ 4 $$$ color light bulbs color $$$ i $$$ -th light bulb $$$ s_i $$$ initially light bulbs turn task turn light bulbs perform follow operation number time : select a light bulb switch state ( turn turn ) restriction operation apply operation a light bulb previous operation apply a light bulb a different color ( first operation apply light bulb ) calculate minimum number operations turn light bulbs report impossible first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case single line test case contain $$$ s $$$ — a sequence $$$ 4 $$$ character character a decimal digit $$$ i $$$ -th character denote color $$$ i $$$ -th light bulb test case print one integer — minimum number operations turn light bulbs impossible turn bulbs print -1 . first example color different turn bulbs $$$ 4 $$$ operations second example impossible turn bulbs switch one light bulb impossible turn others third example proceed follow : turn first light bulb turn third light bulb turn fourth light bulb turn third light bulb turn second light bulb turn third light bulb,['implementation'],800.0
1808/A,"olympus city recently launch production personal starships everyone mar buy one fly planets inexpensively starship a number — some positive integer $$$ x $$$ let 's define luckiness a number $$$ x $$$ difference largest smallest digits number example $$$ 142857 $$$ $$$ 8 $$$ largest digit $$$ 1 $$$ smallest digit luckiness $$$ 8 - 1=7 $$$ number $$$ 111 $$$ digits equal $$$ 1 $$$ luckiness zero hateehc a famous martian blogger often fly different corner solar system release interest videos even faster decide buy a starship come store saw starships number $$$ l $$$ $$$ r $$$ inclusively store hateehc want find a starship luckiest number since a lot starships store hateehc ca n't program help blogger write a program answer question first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) — the number test case follow $$$ t $$$ line contain a description test case description consist two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le 1000000 $$$ ) — largest smallest number starships store print $$$ t $$$ line one line test case contain luckiest starship number store several ways choose luckiest number output let 's look two test examples : fifth test example luckiest number $$$ 90 $$$","['brute force', 'implementation']",900.0
1800/A,walk street hear a sound sound describe string $$$ s $$$ consist lowercase uppercase latin character want find sound a cat meow sound a meow string contain letter ' m ' ' e ' ' o ' ' w ' either uppercase lowercase also : example string ` ` meow '' ` ` <unknown> '' ` ` <unknown> '' describe a meow string ` ` <unknown> '' ` ` <unknown> '' ` ` <unknown> '' ` ` <unknown> '' ` ` <unknown> '' determine whether sound hear a cat meow something else first line input data contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — length string describe sound second line test case contain a string $$$ s $$$ $$$ n $$$ character string describe sound hear consist lowercase uppercase latin letter test case output a separate line : output yes case ( example string yes yes yes yes recognize positive response ) first test case string consist a sequence character ' m ' ' e ' ' o ' ' w ' satisfy definition meow second test case string consist a sequence $$$ 3 $$$ character ' m ' ' m ' one ' e ' a sequence $$$ 3 $$$ character ' o ' ' o ' a sequence $$$ 7 $$$ character ' w ' ' w ' satisfy definition meow third test case string describe a meow lack a sequence ' o ' ' o ' character ' e ' ' w ' fourth test case string contain character ' u ' describe a meow,"['implementation', 'strings']",800.0
1797/D,"li hua a tree $$$ n $$$ vertices $$$ n-1 $$$ edge root tree vertex $$$ 1 $$$ vertex $$$ i $$$ importance $$$ a_i $$$ denote size a subtree number vertices importance sum importance vertices denote heavy son a non - leaf vertex son largest subtree size multiple exist heavy son one minimum index li hua want perform $$$ m $$$ operations : suppose li hua please solve problem first line contain 2 integers $$$ n m $$$ ( $$$ 2\le n\le 10^ { 5 } , 1\le m\le 10^ { 5 } $$$ ) — number vertices tree number operations second line contain $$$ n $$$ integers $$$ a _ { 1 } a _ { 2 } \ldots a _ { n } $$$ ( $$$ -10^ { 9 } \le a _ { i } \le 10^ { 9 } $$$ ) — importance vertex next $$$ n-1 $$$ line contain edge tree $$$ i $$$ -th line contain two integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1\le u_i v_i\le n $$$ $$$ u_i\ne v_i $$$ ) — correspond edge give edge form a tree next $$$ m $$$ line contain operations — one operation per line $$$ j $$$ -th operation contain two integers $$$ t _ { j } x _ { j } $$$ ( $$$ t _ { j } \in \ { 1,2\ } $$$ $$$ 1 \leq x _ { j } \leq n $$$ $$$ x _ { j } \neq 1 $$$ $$$ t_j = 2 $$$ ) — $$$ j $$$ -th operation query ` ` 1 $$$ x $$$ ` ` output answer independent line first example : initial tree show follow picture : importance subtree $$$ 6 $$$ $$$ <unknown> $$$ rotate heavy son $$$ 3 $$$ ( $$$ 6 $$$ ) tree show follow picture : importance subtree $$$ 6 $$$ $$$ <unknown> $$$ importance subtree $$$ 2 $$$ $$$ <unknown> $$$","['brute force', 'data structures', 'dfs and similar', 'dp', 'implementation']",1900.0
1795/C,a tea manufacturer decide conduct a massive tea taste $$$ n $$$ sort tea taste $$$ n $$$ tasters sort tea tasters number $$$ 1 $$$ $$$ n $$$ manufacturer prepare $$$ a_i $$$ milliliters $$$ i $$$ -th sort tea $$$ j $$$ -th taster drink $$$ b_j $$$ milliliters tea taste conduct step first step $$$ i $$$ -th taster taste $$$ i $$$ -th sort tea $$$ i $$$ -th taster drink $$$ \min ( a_i b_i ) $$$ tea ( much available $$$ i $$$ -th sort much $$$ i $$$ -th taster drink ) $$$ a_i $$$ also decrease amount tasters move previous sort tea thus second step $$$ i $$$ -th taster taste $$$ ( i-1 ) $$$ -st sort tea $$$ i $$$ -th taster drink $$$ \min ( a _ { i-1 } b_i ) $$$ tea $$$ 1 $$$ -st person end taste third step $$$ i $$$ -th taster taste $$$ ( i-2 ) $$$ -nd sort tea $$$ 2 $$$ -nd taster end taste go everyone end taste take a look taste process $$$ n = 3 $$$ $$$ a = [ 10 20 15 ] $$$ $$$ b = [ 9 8 6 ] $$$ leave row current amount sort tea right column current amount tea taster drink total arrow tell taster tea go current step number arrow amount — minimum much available sort tea much taster drink taster print many milliliters tea he / she drink total first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number sort tea number tasters second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — amount sort tea third line contain $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ ( $$$ 1 \le b_i \le 1000000000 $$$ ) — amount tea taster drink sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print $$$ n $$$ integers — $$$ i $$$ -th value equal total amount tea $$$ i $$$ -th taster drink first testcase describe statement remain amount sort tea step total amount tea taster drink : second testcase taster drink $$$ \min ( 5 7 ) $$$ milliliters tea sort remain amount sort tea step total amount tea taster drink third testcase : remain amount sort tea step total amount tea taster drink fourth testcase :,"['data structures', 'implementation']",1500.0
1789/F,serval love brain power brain power problem serval define a string $$$ t $$$ powerful iff $$$ t $$$ obtain concatenate string $$$ t ' $$$ multiple time formally speak $$$ t $$$ powerful iff exist a string $$$ t ' $$$ integer $$$ <unknown> 2 $$$ $$$ $$$ <unknown> { <unknown> ' } _ { k\text { time } } $$$ $$$ example <unknown> powerful obtain concatenate go three time power powerful serval a string $$$ s $$$ consist lowercase english letter curious longest powerful subsequence $$$ s $$$ need find length non - empty subsequences $$$ s $$$ powerful answer consider $$$ 0 $$$ a string $$$ a $$$ a subsequence a string $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) character first line contain a single string $$$ s $$$ ( $$$ |s|\leq 80 $$$ ) consist lowercase english letter print a single integer — length longest powerful subsequence $$$ s $$$ non - empty subsequences $$$ s $$$ powerful print $$$ 0 $$$ first sample non - empty subsequences <unknown> list : since $$$ \texttt { aa } = \texttt { a } + \texttt { a } $$$ aa a powerful subsequence show aa powerful subsequence among answer $$$ 2 $$$ second sample longest powerful subsequence <unknown> <unknown> answer $$$ 6 $$$,"['brute force', 'dp', 'greedy', 'implementation', 'strings']",2700.0
1789/C,"toxel like array travel <unknown> region serval give array $$$ a $$$ a gift array $$$ n $$$ pairwise distinct elements order get array toxel perform $$$ m $$$ operations initial array $$$ i $$$ -th operation modify $$$ p _ { i } $$$ -th element $$$ ( i-1 ) $$$ -th array $$$ v _ { i } $$$ result $$$ i $$$ -th array ( initial array $$$ a $$$ number $$$ 0 $$$ ) modifications toxel guarantee elements array still pairwise distinct operation finally toxel get $$$ m+1 $$$ array denote $$$ a _ { 0 } = a a _ { 1 } \ldots a _ { m } $$$ pair $$$ ( i j ) $$$ ( $$$ 0\le i < j\le m $$$ ) toxel define value number distinct elements concatenation $$$ a _ { i } $$$ $$$ a _ { j } $$$ toxel wonder sum value pair ? please help calculate answer test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1\le <unknown> { 4 } $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1\le n <unknown> { 5 } $$$ ) — length array number operations second line test case contain $$$ n $$$ integers $$$ a _ { 1 } a _ { 2 } \dots a _ { n } $$$ ( $$$ 1\le a _ { i } \le n+m $$$ ) guarantee $$$ a_i $$$ pairwise distinct next $$$ m $$$ line test case contain two integers $$$ p _ { i } $$$ $$$ v _ { i } $$$ ( $$$ 1\le p _ { i } \le n $$$ $$$ 1\le v _ { i } \le n+m $$$ ) — position modify element new value guarantee elements array still pairwise distinct modification guarantee sum $$$ n $$$ sum $$$ m $$$ test case exceed $$$ 2\cdot10^ { 5 } $$$ test case print a single integer — sum value pair array first test case array change follow : $$$ [ 1,2,3 ] \to [ \underline { 4 } , 2,3 ] \to [ 4 \underline { 5 } , 3 ] $$$ concatenation $$$ 0 $$$ -th array $$$ 1 $$$ -st array $$$ \require { cancel } [ 1,2,3,4 \cancel { 2 } \cancel { 3 } ] $$$ $$$ 4 $$$ distinct elements concatenation $$$ 0 $$$ -th array $$$ 2 $$$ -nd array $$$ \require { cancel } [ 1,2,3,4,5 \cancel { 3 } ] $$$ $$$ 5 $$$ distinct elements concatenation $$$ 1 $$$ -st array $$$ 2 $$$ -nd array $$$ \require { cancel } [ 4,2,3 \cancel { 4 } , 5 \cancel { 3 } ] $$$ $$$ 4 $$$ distinct elements <unknown> elements duplicate array therefore answer $$$ 4 + 5 + <unknown> $$$ second test case note array may remain unchanged operations","['dp', 'implementation', 'math']",1500.0
1789/B,"serval a string $$$ s $$$ consist 0 1 length $$$ n $$$ $$$ i $$$ -th character $$$ s $$$ denote $$$ s_i $$$ $$$ 1\leq i\leq n $$$ serval perform follow operation call inversion magic string $$$ s $$$ : example let $$$ s $$$ <unknown> segment $$$ [ 2,5 ] $$$ choose string $$$ s $$$ 001010 perform inversion magic serval want make $$$ s $$$ a palindrome perform inversion magic exactly help determine whether possible a string a palindrome iff read backwards forward example <unknown> a palindrome <unknown> test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1\leq t\leq 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2\leq n\leq 100000 $$$ ) — length string $$$ s $$$ second line test case contain a binary string $$$ s $$$ length $$$ n $$$ character 0 1 appear $$$ s $$$ 's guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot 100000 $$$ test case print yes $$$ s $$$ a palindrome perform inversion magic exactly print output yes case ( example string yes yes yes yes recognize a positive response ) first test case serval perform inversion magic segment $$$ [ 1,4 ] $$$ string $$$ s $$$ 0110 magic second test case serval perform inversion magic segment $$$ [ 1,3 ] $$$ string $$$ s $$$ 01110 magic third test case serval ca n't make $$$ s $$$ a palindrome perform inversion magic exactly","['brute force', 'implementation', 'strings']",800.0
1772/G,monocarp play chess one popular website $$$ n $$$ opponents play $$$ i $$$ -th opponent rat equal $$$ a_i $$$ monocarp 's initial rat $$$ x $$$ monocarp want raise rat value $$$ y $$$ ( $$$ y > x $$$ ) monocarp play one opponents win current rat bigger equal opponent 's rat monocarp win rat increase $$$ 1 $$$ otherwise decrease $$$ 1 $$$ rat opponent change monocarp want gain rat $$$ y $$$ play game possible ca n't grind play weak opponents website a rule play opponents evenly possible speak formally monocarp want play opponent $$$ i $$$ opponent $$$ j $$$ monocarp play game $$$ i $$$ $$$ j $$$ calculate minimum possible number game monocarp need gain rat $$$ y $$$ say 's impossible note rat monocarp 's opponents n't change monocarp 's rat change first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain three integers $$$ n $$$ $$$ x $$$ $$$ y $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 1 \le x < y \le 10^ { 12 } $$$ ) — number monocarp 's opponents initial desire rat second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 10^ { 12 } $$$ ) — rat monocarp 's opponents additional constraint input : total sum $$$ n $$$ $$$ t $$$ test case n't exceed $$$ 200000 $$$ test case print a single integer — minimum number game monocarp need play gain rat $$$ y $$$ $$$ -1 $$$ 's impossible first test case monocarp use follow strategy : second test case prove whichever game monocarp play ca n't get rat higher $$$ 4 $$$,"['greedy', 'implementation', 'math']",2200.0
1768/C,"give array $$$ a $$$ $$$ n $$$ integers find two permutations $$$ ^\dagger $$$ $$$ p $$$ $$$ q $$$ length $$$ n $$$ $$$ \max ( p_i q_i ) = a_i $$$ $$$ 1 \leq i \leq n $$$ report $$$ p $$$ $$$ q $$$ exist $$$ ^\dagger $$$ a permutation length $$$ n $$$ array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq n $$$ ) — array $$$ a $$$ guarantee total sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case exist $$$ p $$$ $$$ q $$$ satisfy condition output ` ` '' ( without quote ) otherwise output ` ` yes '' ( without quote ) output $$$ 2 $$$ line first line contain $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$ second line contain $$$ n $$$ integers $$$ q_1 q_2 \ldots q_n $$$ multiple solutions may output output ` ` yes '' ` ` '' case ( example string ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive response ) first test case $$$ p = q= [ 1 ] $$$ correct since $$$ a_1 = max ( p_1 q_1 ) = 1 $$$ second test case $$$ p= [ <unknown> ] $$$ $$$ q= [ <unknown> ] $$$ correct since : third test case one show $$$ p $$$ $$$ q $$$ exist","['constructive algorithms', 'greedy', 'implementation']",1300.0
1763/B,destroy humanity monster association send $$$ n $$$ monsters earth 's surface $$$ i $$$ -th monster health $$$ h_i $$$ power $$$ p_i $$$ last resort attack true spiral <unknown> cannon genos deal $$$ k $$$ damage monsters alive word genos reduce health monsters $$$ k $$$ ( $$$ k > 0 $$$ ) a single attack however every attack genos make monsters advance combine efforts reduce genos ' attack damage power $$$ ^\dagger $$$ weakest monster $$$ ^\ddagger $$$ alive word minimum $$$ p_i $$$ among currently live monsters subtract value $$$ k $$$ attack $$$ ^\dagger $$$ weakest monster one least power $$$ ^\ddagger $$$ a monster alive health strictly greater $$$ 0 $$$ genos successful kill monsters ? first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n k \le 100000 $$$ ) — number monsters genos ' initial attack damage two line follow contain $$$ n $$$ integers describe array $$$ h $$$ $$$ p $$$ ( $$$ 1 \le h_i p_i \le 1000000000 $$$ ) 's guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print answer — ` ` yes '' ( without quote ) genos could kill monsters ` ` '' otherwise first example genos ' first attack $$$ h $$$ $$$ k $$$ update :,"['brute force', 'data structures', 'implementation', 'math']",1200.0
1760/D,give array $$$ a [ 0 \dots n-1 ] $$$ $$$ n $$$ integers array call a ` ` valley '' exist exactly one subarray $$$ a [ l \dots r ] $$$ : three examples : first image show array [ $$$ 3 2 2 1 2 2 3 $$$ ] a valley subarray indices $$$ l = r=3 $$$ satisfy condition second image show array [ $$$ 1 1 1 2 3 3 4 5 6 6 6 $$$ ] a valley subarray indices $$$ <unknown> r=2 $$$ satisfy <unknown> third image show array [ $$$ 1 2 3 4 3 2 1 $$$ ] a valley two subarrays $$$ l = r=0 $$$ $$$ l = r=6 $$$ satisfy condition ask whether give array a valley note consider array index $$$ 0 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 2\cdot100000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — elements array guarantee sum $$$ n $$$ test case smaller $$$ 2\cdot100000 $$$ test case output ` ` yes '' ( without quote ) array a valley ` ` '' ( without quote ) otherwise output answer case ( example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive answer ) first three test case explain statement,['implementation'],1000.0
1760/B,order write a string atilla need first learn letter contain string atilla need write a message represent a string $$$ s $$$ ask minimum alphabet size require one write message alphabet size $$$ x $$$ ( $$$ 1 \leq x \leq 26 $$$ ) contain first $$$ x $$$ latin letter example alphabet size $$$ 4 $$$ contain character $$$ \texttt { a } $$$ $$$ \texttt { b } $$$ $$$ \texttt { c } $$$ $$$ \texttt { d } $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100 $$$ ) — length string second line test case contain a string $$$ s $$$ length $$$ n $$$ consist lowercase latin letter test case output a single integer — minimum alphabet size require atilla write message $$$ s $$$ first test case atilla need know character $$$ \texttt { a } $$$ alphabet size $$$ 1 $$$ contain $$$ \texttt { a } $$$ enough second test case atilla need know character $$$ \texttt { d } $$$ $$$ \texttt { o } $$$ $$$ \texttt { w } $$$ $$$ \texttt { n } $$$ smallest alphabet size contain $$$ 23 $$$ ( alphabet represent string $$$ \texttt { <unknown> } $$$ ),"['greedy', 'implementation', 'strings']",800.0
1749/C,"alice bob play a game array positive integers $$$ a $$$ size $$$ n $$$ start game alice choose integer $$$ k \ge 0 $$$ game last $$$ k $$$ stag stag number $$$ 1 $$$ $$$ k $$$ $$$ i $$$ -th stage alice must remove element array less equal $$$ k - i + 1 $$$ , array empty bob must add $$$ k - i + 1 $$$ arbitrary element array note alice 's move bob 's move two part stage game alice ca n't delete element stage lose $$$ k $$$ -th stage end alice n't lose yet win task determine maximum value $$$ k $$$ alice win players play optimally bob play alice try make lose game 's possible first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — size array $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) test case print one integer — maximum value $$$ k $$$ alice win players play optimally","['data structures', 'greedy', 'implementation']",1400.0
1748/B,a non - empty digit string diverse number occurrences character n't exceed number distinct character example : give a string $$$ s $$$ length $$$ n $$$ consist digits $$$ 0 $$$ $$$ 9 $$$ find many $$$ \frac { n ( n+1 ) } { 2 } $$$ substrings diverse a string $$$ a $$$ a substring a string $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) character begin several ( possibly zero ) character end note diverse string appear $$$ s $$$ multiple time occurrence count independently example two diverse substrings ` ` 77 '' equal ` ` 7 '' answer string ` ` 77 '' $$$ 2 $$$ test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length string $$$ s $$$ second line test case contain a string $$$ s $$$ length $$$ n $$$ guarantee character $$$ s $$$ digits $$$ 0 $$$ $$$ 9 $$$ guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print one integer — number diverse substrings give string $$$ s $$$ first test case diverse substring ` ` 7 '' second test case diverse substring ` ` 7 '' appear twice answer $$$ 2 $$$ third test case diverse substrings ` ` 0 '' ( $$$ 2 $$$ time ) ` ` 01 '' ` ` 010 '' ` ` 1 '' ( $$$ 2 $$$ time ) ` ` 10 '' ( $$$ 2 $$$ time ) ` ` 101 '' ` ` 1010 '' fourth test case diverse substrings ` ` 0 '' ( $$$ 3 $$$ time ) ` ` 01 '' ` ` 011 '' ` ` 0110 '' ` ` 1 '' ( $$$ 2 $$$ time ) ` ` 10 '' ` ` 100 '' ` ` 110 '' ` ` 1100 '' fifth test case diverse substrings ` ` 3 '' ` ` 39 '' ` ` <unknown> '' ` ` 6 '' ` ` 9 '' ( $$$ 4 $$$ time ) ` ` 96 '' ` ` <unknown> '' sixth test case $$$ 15 $$$ non - empty substrings ` ` <unknown> '' diverse,"['brute force', 'implementation', 'strings']",1400.0
1746/G,"anton decide get ready olympiad informatics ilya prepare $$$ n $$$ task solve possible submit solution $$$ i $$$ -th task first $$$ d _ { i } $$$ days anton solve one task a day ilya estimate usefulness $$$ i $$$ -th task $$$ r _ { i } $$$ divide task three topics topic $$$ i $$$ -th task $$$ type _ { i } $$$ anton want solve exactly $$$ a $$$ task first topic $$$ b $$$ task second topic $$$ c $$$ task third topic tell anton possible , calculate maximum total usefulness task may solve first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain four integers $$$ n a b c $$$ ( $$$ 1 \le n \le 100000 $$$ $$$ 0 \le a b c \le n $$$ ) follow $$$ n $$$ line contain three integers — $$$ r_i type_i d_i $$$ ( $$$ 0 \le r_i \le 10^ { 9 } $$$ $$$ 1 \le type_i \le 3 $$$ $$$ 1 \le d_i \le n $$$ ) sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print $$$ -1 $$$ anton reach goal ; otherwise print maximum usefulness task solve first test case sample test anton solve task $$$ 2 $$$ $$$ 4 $$$ second test case sample test impossible fulfill anton 's wish third test case sample test optimal solve task $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ last test case sample test optimal solve task $$$ 1 $$$ $$$ 2 $$$ $$$ 4 $$$","['data structures', 'dp', 'geometry', 'implementation']",3500.0
1744/A,integer array $$$ a_1 a_2 \ldots a_n $$$ transform array lowercase english letter use follow <unknown> : least one number array : example initially array $$$ a = [ 2 3 2 4 1 ] $$$ could transform follow way : transformation letter unite a string example get string ` ` <unknown> '' array $$$ a $$$ string $$$ s $$$ determine string $$$ s $$$ could get array $$$ a $$$ describe transformation ? first line contain a single integer $$$ t $$$ $$$ ( 1 \leq t \leq 1000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 50 $$$ ) — length array $$$ a $$$ string $$$ s $$$ second line test case contain exactly $$$ n $$$ integers : $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 50 $$$ ) — elements array $$$ a $$$ third line test case contain a string $$$ s $$$ length $$$ n $$$ consist lowercase english letter test case output ` ` yes '' get string $$$ s $$$ array $$$ a $$$ ` ` '' otherwise output letter case first test case correspond sample describe statement second test case choose number $$$ 50 $$$ letter a. third test case choose number $$$ 11 $$$ letter a $$$ a = [ a 22 ] $$$ choose number $$$ 22 $$$ letter b get $$$ a = [ a b ] $$$ fifth test case change number one one letter a,"['greedy', 'implementation']",800.0
1732/C2,"hard version problem difference version $$$ q = n $$$ give array integers $$$ a_1 a_2 \ldots a_n $$$ cost a subsegment array $$$ [ l r ] $$$ $$$ 1 \leq l \leq r \leq n $$$ value $$$ f ( l r ) = \operatorname { sum } ( l r ) - \operatorname { xor } ( l r ) $$$ $$$ \operatorname { sum } ( l r ) = a_l + a _ { l+1 } + \ldots + a_r $$$ $$$ \operatorname { xor } ( l r ) = a_l \oplus a _ { l+1 } \oplus \ldots \oplus a_r $$$ ( $$$ \oplus $$$ stand bitwise xor ) $$$ q $$$ query query give a pair number $$$ l_i $$$ $$$ r_i $$$ $$$ 1 \leq l_i \leq r_i \leq n $$$ need find subsegment $$$ [ l r ] $$$ $$$ l_i \leq l \leq r \leq r_i $$$ maximum value $$$ f ( l r ) $$$ several answer among need find a subsegment minimum length , minimum value $$$ r - l + 1 $$$ test consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \leq n \leq 100000 $$$ $$$ q = n $$$ ) — length array number query second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a_i \leq 1000000000 $$$ ) — array elements $$$ i $$$ -th next $$$ q $$$ line test case contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \leq l_i \leq r_i \leq n $$$ ) — boundaries need find segment guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ guarantee $$$ l_1 = 1 $$$ $$$ r_1 = n $$$ test case print $$$ q $$$ pair number $$$ l_i \leq l \leq r \leq r_i $$$ value $$$ f ( l r ) $$$ maximum among length $$$ r - l + 1 $$$ minimum several correct answer print test case first query consider first test case $$$ f ( 1 1 ) = 0 - 0 = 0 $$$ second test case $$$ f ( 1 1 ) = 5 - 5 = 0 $$$ $$$ f ( 2 2 ) = 10 - 10 = 0 $$$ note $$$ f ( 1 2 ) = ( 10 + 5 ) - ( 10 \oplus 5 ) = 0 $$$ need find a subsegment minimum length among maximum value $$$ f ( l r ) $$$ , segment $$$ [ 1 1 ] $$$ $$$ [ 2 2 ] $$$ correct answer fourth test case $$$ f ( 2 3 ) = ( 12 + 8 ) - ( 12 \oplus 8 ) = 16 $$$ two correct answer fifth test case since $$$ f ( 2 3 ) = f ( 3 4 ) $$$ lengths equal","['brute force', 'greedy', 'implementation']",2100.0
1722/F,l - shape a figure <unknown> paper look like first four picture l - shape contain exactly three shade cells ( denote * ) rotate way give a rectangular grid determine contain l - shapes l - shapes ca n't touch edge corner formally : example last two grids picture satisfy condition two l - shapes touch corner edge respectively input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 50 $$$ ) — number row columns grid respectively $$$ n $$$ line follow contain $$$ m $$$ character character either ' . ' ' * ' — empty cell a shade cell respectively test case output ` ` yes '' grid make l - shape n't share edge corner ` ` '' otherwise output answer case ( example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive answer ),"['dfs and similar', 'implementation']",1700.0
1720/E,misha a square $$$ n \times n $$$ matrix number row $$$ i $$$ column $$$ j $$$ equal $$$ a _ { i j } $$$ misha want modify matrix contain exactly $$$ k $$$ distinct integers achieve goal misha perform follow operation zero time : please find minimum number operations misha need achieve goal first input line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq n \leq 500 1 \leq k \leq n^2 $$$ ) — size matrix desire amount distinct elements matrix $$$ n $$$ line follow $$$ i $$$ -th contain $$$ n $$$ integers $$$ a _ { i 1 } a _ { i 2 } \ldots a _ { i n } $$$ ( $$$ 1 \leq a _ { i j } \leq n^2 $$$ ) — elements $$$ i $$$ -th row matrix output one integer — minimum number operations require first test case answer $$$ 1 $$$ one change value bottom right corner matrix $$$ 1 $$$ result matrix find : second test case answer $$$ 2 $$$ first one change entire matrix contain $$$ 1 $$$ s change value single cell $$$ 2 $$$ one possible result matrices display :,"['constructive algorithms', 'data structures', 'greedy', 'implementation', 'math']",2700.0
1718/E,"burenka two picture $$$ a $$$ $$$ b $$$ table size $$$ n \times m $$$ cell paint a color — a number $$$ 0 $$$ $$$ 200000 $$$ repeat color row column two paint except color $$$ 0 $$$ burenka want get a picture $$$ b $$$ picture $$$ a $$$ achieve goal burenka perform one $$$ 2 $$$ operations : swap two row $$$ a $$$ two columns tell burenka fulfill want , tell sequence action row number $$$ 1 $$$ $$$ n $$$ top bottom columns number $$$ 1 $$$ $$$ m $$$ leave right first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n \cdot m \leq 200000 $$$ ) — size table $$$ i $$$ -th next $$$ n $$$ line contain $$$ m $$$ integers $$$ a _ { i 1 } a _ { i 2 } \ldots a _ { i m } $$$ ( $$$ 0 \leq a _ { i j } \leq 200000 $$$ ) — color $$$ i $$$ -th row picture $$$ a $$$ guarantee identical color row column except color $$$ 0 $$$ $$$ i $$$ -th follow $$$ n $$$ line contain $$$ m $$$ integers $$$ b _ { i 1 } b _ { i 2 } \ldots b _ { i m } $$$ ( $$$ 0 \leq b _ { i j } \leq 200000 $$$ ) — color $$$ i $$$ -th row picture $$$ b $$$ guarantee identical color row column except color $$$ 0 $$$ first line print number $$$ -1 $$$ impossible achieve burenka want otherwise print number action solution $$$ k $$$ ( $$$ 0 \le k \le 200000 $$$ ) prove a solution exist exist a solution $$$ k \le 200000 $$$ next $$$ k $$$ line print operations first print type operation ( $$$ 1 $$$ — swap row $$$ 2 $$$ — columns ) print two indices row columns operation apply note n't minimize number operations","['constructive algorithms', 'implementation', 'math']",3500.0
1714/B,polycarp present sequence integers $$$ a $$$ length $$$ n $$$ ( $$$ 1 \le a_i \le n $$$ ) a sequence make polycarp happy consist different number ( i.e distinct number ) order make sequence like polycarp go make ( possibly zero ) number move one move : example one move sequence $$$ [ 3 1 4 3 ] $$$ produce sequence $$$ [ 1 4 3 ] $$$ consist different number determine minimum number move need make remain sequence elements different word find length smallest prefix give sequence $$$ a $$$ remove value sequence unique first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case test case consist two line first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — length give sequence $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — elements give sequence $$$ a $$$ guarantee sum $$$ n $$$ value test case exceed $$$ 200000 $$$ test case print answer a separate line — minimum number elements must remove begin sequence remain elements different follow sequence remain removal prefix : easy see remain sequence contain distinct elements test case shortest match prefix remove,"['data structures', 'greedy', 'implementation']",800.0
1704/C,$$$ n $$$ house number $$$ 1 $$$ $$$ n $$$ a circle $$$ 1 \leq i \leq n - 1 $$$ house $$$ i $$$ house $$$ i + 1 $$$ neighbour ; additionally house $$$ n $$$ house $$$ 1 $$$ also neighbour initially $$$ m $$$ $$$ n $$$ house infect a deadly virus morning cirno choose a house uninfected protect house infect permanently every day follow things happen order : cirno want stop virus spread find minimum number house infect end optimally choose house protect note every day cirno always choose a house protect virus spread also a protect house infect forever input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case description test case follow first line test case consist two positive integers $$$ n m $$$ ( $$$ 5 \leq n \leq 1000000000 $$$ $$$ 1 \leq m \leq \min ( n 100000 ) $$$ ) — number house circle number house initially infect second line test case consist $$$ m $$$ distinct positive integers $$$ a_1 a_2 \cdots a_m $$$ ( $$$ 1 \leq a_i \leq n $$$ ) — indices house infect initially guarantee sum $$$ m $$$ test case exceed $$$ 100000 $$$ test case output integer a separate line minimum number infect house end first test case : start first day house $$$ 3 $$$ $$$ 6 $$$ $$$ 8 $$$ infect choose house $$$ 2 $$$ protect start second day house $$$ 3 $$$ $$$ 4 $$$ $$$ 5 $$$ $$$ 6 $$$ $$$ 7 $$$ $$$ 8 $$$ $$$ 9 $$$ infect choose house $$$ 10 $$$ protect start third day house infect second test case : start first day house $$$ 2 $$$ $$$ 5 $$$ infect choose house $$$ 1 $$$ protect start second day house $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ $$$ 5 $$$ $$$ 6 $$$ infect available house protect,"['greedy', 'implementation']",1200.0
1704/B,"luke like eat $$$ n $$$ pile food align a straight line front $$$ i $$$ -th pile contain $$$ a_i $$$ units food luke walk $$$ 1 $$$ -st pile towards $$$ n $$$ -th pile want eat every pile food without walk back luke reach $$$ i $$$ -th pile eat pile $$$ |v - <unknown> \leq x $$$ $$$ x $$$ a fix integer $$$ v $$$ luke 's food affinity luke start walk set $$$ v $$$ integer also $$$ i $$$ ( $$$ 1 \leq i \leq n $$$ ) luke change food affinity integer eat $$$ i $$$ -th pile find minimum number change need eat every pile food note initial choice $$$ v $$$ consider a change input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case description test case follow test case first line contain two integers $$$ n x $$$ ( $$$ 1 \leq n \leq 200000 $$$ $$$ 1 \leq x \leq 1000000000 $$$ ) — number pile maximum difference size a pile luke 's food affinity luke eat pile second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output integer a separate line minimum number change need first test case luke set $$$ v $$$ $$$ 5 $$$ start walk walk straight eat every pile food without change $$$ v $$$ second test case luke set $$$ v $$$ $$$ 3 $$$ start walk could change $$$ v $$$ $$$ 10 $$$ eat second pile , walk straight eat remain food without change $$$ v $$$ fourth test case luke set $$$ v $$$ $$$ 3 $$$ start walk could change $$$ v $$$ $$$ 8 $$$ eat sixth pile , walk straight eat remain food without change $$$ v $$$ fifth test case luke set $$$ v $$$ $$$ 4 $$$ start walk could change $$$ v $$$ $$$ 6 $$$ eat fourth pile could change $$$ v $$$ $$$ 12 $$$ eat seventh pile , walk straight eat remain food without change $$$ v $$$","['brute force', 'greedy', 'implementation']",1000.0
1703/B,icpc contest balloon distribute follow : determine total number balloon team receive note problems may solve none team first line input contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number testcases first line test case contain integer $$$ n $$$ ( $$$ 1 \leq n \leq 50 $$$ ) — length string second line test case contain a string $$$ s $$$ length $$$ n $$$ consist uppercase english letter denote order solve problems test case output a single integer — total number balloon team receive first test case $$$ 5 $$$ balloon give : second test case one problem solve team solve receive $$$ 2 $$$ balloon : one solve problem additional one first team solve problem $$$ <unknown> { a } $$$,"['data structures', 'implementation']",800.0
1698/B,"$$$ n $$$ pile sand $$$ i $$$ -th pile $$$ a_i $$$ block sand $$$ i $$$ -th pile call tall $$$ 1 < i < n $$$ $$$ a_i > a _ { i-1 } + a _ { i+1 } $$$ , a pile tall sand two neighbour combine ( note pile end array tall ) give integer $$$ k $$$ operation consist pick $$$ k $$$ consecutive pile sand add one unit sand formally pick $$$ 1 \leq l r \leq n $$$ $$$ r - l+1 = k $$$ $$$ l \leq i \leq r $$$ update $$$ a_i <unknown> a_i+1 $$$ maximum number pile simultaneously tall ( possibly zero ) operations ? input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 3 \leq n \leq 200000 $$$ ; $$$ 1 \leq k \leq n $$$ ) — number pile sand size operation respectively second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — size pile guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output a single integer — maximum number pile simultaneously tall ( possibly zero ) operations first test case perform follow three operations : second test case operation increase pile $$$ 1 $$$ unit number tall pile always $$$ 0 $$$ third test case increase pile $$$ 1 $$$ unit sand show maximum number tall pile $$$ 1 $$$","['constructive algorithms', 'greedy', 'implementation']",800.0
1697/A,walk a parkway near house parkway $$$ n+1 $$$ bench a row number $$$ 1 $$$ $$$ n+1 $$$ leave right distance bench $$$ i $$$ $$$ i+1 $$$ $$$ a_i $$$ meter initially $$$ m $$$ units energy walk $$$ 1 $$$ meter distance spend $$$ 1 $$$ unit energy ca n't walk energy also restore energy sit bench ( way restore energy ) sit restore integer amount energy want ( sit longer restore energy ) note amount energy exceed $$$ m $$$ task find minimum amount energy restore ( sit bench ) reach bench $$$ n+1 $$$ bench $$$ 1 $$$ ( end walk ) answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 100 $$$ ; $$$ 1 \le m \le 10000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 100 $$$ ) $$$ a_i $$$ distance bench $$$ i $$$ $$$ i+1 $$$ test case print one integer — minimum amount energy restore ( sit bench ) reach bench $$$ n+1 $$$ bench $$$ 1 $$$ ( end walk ) correspond test case first test case example walk bench $$$ 2 $$$ spend $$$ 1 $$$ unit energy restore $$$ 2 $$$ units energy second bench walk bench $$$ 3 $$$ spend $$$ 2 $$$ units energy restore $$$ 1 $$$ unit energy go bench $$$ 4 $$$ third test case example enough energy go bench $$$ 6 $$$ without sit,"['greedy', 'implementation']",800.0
1696/H,"give a positive integer $$$ k $$$ a multiset integers $$$ s $$$ define $$$ f ( s ) $$$ follow formally let $$$ |s| $$$ denote number elements $$$ s $$$ , give a multiset integers $$$ a $$$ compute $$$ \sum\limits _ { b\subseteq a } f ( b ) $$$ modulo $$$ 1000000000 + 7 $$$ note problem distinguish elements indices instead value , a multiset consist $$$ n $$$ elements always $$$ 2^n $$$ distinct subsets regardless whether elements equal first line input contain two integers $$$ n $$$ $$$ k $$$ $$$ n $$$ number elements $$$ a $$$ ( $$$ 1\le k\le n\le 600 $$$ ) second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ describe elements $$$ a $$$ ( $$$ -1000000000\le a_i\le 1000000000 $$$ ) output $$$ \sum\limits _ { b\subseteq a } f ( b ) $$$ modulo $$$ 1000000000 + 7 $$$ consider first sample definitions know <unknown> print $$$ ( 0 + 0 + 0 + 0 - 2 - 4 + 8 + 8 ) \bmod ( 1000000000 + 7 ) = 10 $$$ second example note although multiset consist three value still $$$ 8 $$$ distinct subsets : $$$ \varnothing \ { 1\ } \ { 1\ } \ { 1\ } \ { 1,1\ } \ { 1,1\ } \ { 1,1\ } \ { <unknown> } $$$","['brute force', 'dp', 'greedy', 'implementation', 'math']",3500.0
1679/B,upon a time mike mike decide come outstanding problem stage <unknown> ( rare olympiad informatics ) one come a problem prototype another steal idea propose problem another stage olympiad since first mike wait opportunity propose original idea contest ... mike wait moment ! give array $$$ a $$$ $$$ n $$$ integers also give $$$ q $$$ query two type : perform query calculate sum elements array first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \le n q \le 200000 $$$ ) — number elements array number query respectively second line contain $$$ n $$$ integers $$$ a_1 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — elements array $$$ a $$$ follow $$$ q $$$ line contain a description correspond query description begin integer $$$ t $$$ ( $$$ t \in \ { 1 2\ } $$$ ) denote a type query : print $$$ q $$$ integers a separate line $$$ i $$$ -th line print sum elements array perform first $$$ i $$$ query consider array example result perform query :,"['data structures', 'implementation']",1200.0
1678/B2,"hard version problem difference two versions harder version ask additionally a minimum number subsegments tokitsukaze a binary string $$$ s $$$ length $$$ n $$$ consist zero ones $$$ n $$$ even tokitsukaze divide $$$ s $$$ minimum number contiguous subsegments subsegment bits subsegment , $$$ s $$$ consider good lengths subsegments even example $$$ s $$$ ` ` 11001111 '' divide ` ` 11 '' ` ` 00 '' ` ` 1111 '' lengths $$$ 2 $$$ $$$ 2 $$$ $$$ 4 $$$ respectively even number ` ` 11001111 '' good another example $$$ s $$$ ` ` 1110011000 '' divide ` ` 111 '' ` ` 00 '' ` ` 11 '' ` ` 000 '' lengths $$$ 3 $$$ $$$ 2 $$$ $$$ 2 $$$ $$$ 3 $$$ obviously ` ` 1110011000 '' good tokitsukaze want make $$$ s $$$ good change value position $$$ s $$$ specifically perform operation number time : change value $$$ s_i $$$ ' 0 ' ' 1 ' ( $$$ 1 \leq i \leq n $$$ ) tell minimum number operations make $$$ s $$$ good ? meanwhile also want know minimum number subsegments $$$ s $$$ divide among solutions minimum number operations first contain a single positive integer $$$ t $$$ ( $$$ 1 \leq t \leq 10\,000 $$$ ) — number test case test case first line contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 200000 $$$ ) — length $$$ s $$$ guarantee $$$ n $$$ even second line contain a binary string $$$ s $$$ length $$$ n $$$ consist zero ones guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print a single line two integers — minimum number operations make $$$ s $$$ good minimum number subsegments $$$ s $$$ divide among solutions minimum number operations first test case one ways make $$$ s $$$ good follow change $$$ s_3 $$$ $$$ s_6 $$$ $$$ s_7 $$$ ' 0 ' $$$ s $$$ become ` ` 1100000000 '' divide ` ` 11 '' ` ` 00000000 '' lengths $$$ 2 $$$ $$$ 8 $$$ respectively number subsegments $$$ 2 $$$ ways operate $$$ 3 $$$ time make $$$ s $$$ good ` ` 1111110000 '' ` ` 1100001100 '' ` ` 1111001100 '' number subsegments $$$ 2 $$$ $$$ 4 $$$ $$$ 4 $$$ respectively 's easy find minimum number subsegments among solutions minimum number operations $$$ 2 $$$ second third fourth test case $$$ s $$$ good initially operation require","['dp', 'greedy', 'implementation']",1800.0
1675/B,give $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ perform follow operation : output minimum number operations must do a sequence integers become strictly increase ( condition $$$ a_1 \lt a_2 \lt \dots \lt a_n $$$ satisfy ) determine impossible obtain a sequence note elements swap possible operation describe example let $$$ n = 3 $$$ a sequence number $$$ [ 3 6 5 ] $$$ give enough perform two operations : result sequence strictly increase $$$ 1 \lt 3 \lt 5 $$$ first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case input descriptions test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 30 $$$ ) second line test case contain exactly $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 2000000000 $$$ ) test case print a single number a separate line — minimum number operations perform sequence make strictly increase a strictly increase sequence obtain print ` ` -1 '' first test case analyze statement second test case impossible obtain a strictly increase sequence third test case sequence already strictly increase,"['greedy', 'implementation']",900.0
1674/F,friend ivan ask help rearrange desktop desktop represent a rectangle matrix size $$$ n \times m $$$ consist character ' . ' ( empty cell desktop ) ' * ' ( icon ) desktop call good icons occupy prefix full columns possibly prefix next column ( icons outside figure ) word amount first columns fill icons possibly amount first cells next ( last full column ) column also fill icons ( icons desktop belong figure ) pretty much real life icons arrangement one move take one icon move empty cell desktop ivan love add icons desktop remove ask answer $$$ q $$$ query : minimum number move require make desktop good <unknown> / <unknown> one icon ? note query permanent change state desktop first line input contain three integers $$$ n $$$ $$$ m $$$ $$$ q $$$ ( $$$ 1 \le n m \le 1000 ; 1 \le q \le 200000 $$$ ) — number row desktop number columns desktop number query respectively next $$$ n $$$ line contain description desktop $$$ i $$$ -th contain $$$ m $$$ character ' . ' ' * ' — description $$$ i $$$ -th row desktop next $$$ q $$$ line describe query $$$ i $$$ -th contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1 \le x_i \le n ; 1 \le y_i \le m $$$ ) — position cell change state ( cell contain icon icon remove otherwise icon appear cell ) print $$$ q $$$ integers $$$ i $$$ -th minimum number move require make desktop good apply first $$$ i $$$ query,"['data structures', 'greedy', 'implementation']",1800.0
1672/A,"$$$ n $$$ log $$$ i $$$ -th log a length $$$ a_i $$$ meter since chop log tire work errorgorn maomao90 decide play a <unknown> maomao90 take turn chop log errorgorn chop first turn player pick a log chop $$$ 2 $$$ piece length choose log $$$ x $$$ lengths result piece $$$ y $$$ $$$ z $$$ $$$ y $$$ $$$ z $$$ positive integers $$$ x = y+z $$$ must hold example chop a log length $$$ 3 $$$ log lengths $$$ 2 $$$ $$$ 1 $$$ log lengths $$$ 3 $$$ $$$ 0 $$$ $$$ 2 $$$ $$$ 2 $$$ $$$ 1.5 $$$ $$$ 1.5 $$$ player unable make a chop loser assume errorgorn maomao90 play optimally winner ? test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 50 $$$ ) — number log second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 50 $$$ ) — lengths log note bind sum $$$ n $$$ test case test case print ` ` errorgorn '' errorgorn win ` ` maomao90 '' maomao90 win ( output without quote ) first test case errorgorn winner optimal move chop log length $$$ 4 $$$ $$$ 2 $$$ log length $$$ 2 $$$ $$$ 4 $$$ log length $$$ 2 $$$ $$$ 1 $$$ log length $$$ 1 $$$ , move player chop log length $$$ 2 $$$ $$$ 2 $$$ log length $$$ 1 $$$ $$$ 4 $$$ move maomao90 's turn able make a move therefore errorgorn winner second test case errorgorn able make a move first turn immediately lose make maomao90 winner","['implementation', 'math']",800.0
1670/D,<unknown> <unknown> infinite hexagonal grid picture control <unknown> <unknown> hosssam love equilateral triangles want create $$$ n $$$ equilateral triangles grid add straight line triangles must empty inside ( word straight line hexagon edge pass triangles ) allow add straight line parallel edge hexagons give $$$ n $$$ minimum number line need add create least $$$ n $$$ equilateral triangles describe ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case $$$ t $$$ test case follow test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 10^ { 9 } $$$ ) — require number equilateral triangles test case print minimum number line need $$$ n $$$ equilateral triangles first second test case 2 line need add first line equilateral triangles create matter add add second line two triangles create third test case minimum need 3 line show,"['brute force', 'geometry', 'greedy', 'implementation', 'math']",1700.0
1670/C,"search pizza baby hosssam come across two permutations $$$ a $$$ $$$ b $$$ length $$$ n $$$ recall a permutation array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) baby hosssam forget pizza start play around two permutations play elements first permutation get mix elements second permutation surprise elements also form a permutation size $$$ n $$$ specifically mix permutations form a new array $$$ c $$$ follow way know permutations $$$ a $$$ $$$ b $$$ value position $$$ c $$$ please count number different permutations $$$ c $$$ consistent describe process give value since answer large print modulo $$$ 1000000000 + 7 $$$ guarantee exist least one permutation $$$ c $$$ satisfy requirements first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1\le n\le 100000 $$$ ) — length permutations next line contain $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1\le a_i\le n $$$ ) — first permutation next line contain $$$ n $$$ distinct integers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1\le b_i\le n $$$ ) — second permutation next line contain $$$ n $$$ distinct integers $$$ d_1 d_2 \ldots d_n $$$ ( $$$ d_i $$$ either $$$ 0 $$$ $$$ a_i $$$ $$$ b_i $$$ ) — description know value $$$ c $$$ $$$ <unknown> $$$ requirements value $$$ c_i $$$ otherwise require $$$ c_i = d_i $$$ guarantee exist least one permutation $$$ c $$$ satisfy requirements guarantee sum $$$ n $$$ test case exceed $$$ 500000 $$$ test case print number possible permutations $$$ c $$$ modulo $$$ 1000000000 + 7 $$$ first test case $$$ 4 $$$ distinct permutation make use process : $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ second test case one distinct permutation make use process : $$$ [ 1 ] $$$ third test case $$$ 2 $$$ distinct permutation make use process : $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ fourth test case $$$ 2 $$$ distinct permutation make use process : $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ fifth test case one distinct permutation make use process : $$$ [ <unknown> ] $$$","['data structures', 'dfs and similar', 'implementation', 'math']",1400.0
1669/B,give array $$$ a $$$ $$$ n $$$ elements print value appear least three time print -1 value first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case first line test case contain integer $$$ n $$$ ( $$$ 1 \leq n \leq 2\cdot100000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \leq a_i \leq n $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case print value appear least three time print -1 value first test case a single element ca n't occur least three time answer -1 . second test case three elements array equal $$$ 2 $$$ $$$ 2 $$$ occur three time answer $$$ 2 $$$ third test case $$$ 2 $$$ occur four time answer $$$ 2 $$$ fourth test case $$$ 4 $$$ occur three time answer $$$ 4 $$$ fifth test case $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ occur least three time valid output sixth test case elements distinct none occur least three time answer -1,['implementation'],800.0
1667/F,"give a rectangular grid $$$ n $$$ row $$$ m $$$ columns $$$ n $$$ $$$ m $$$ divisible $$$ 4 $$$ cells already color black white guarantee two color cells share a corner edge color remain cells a way black white cells become orthogonally connect determine impossible consider a graph black cells nod two nod adjacent correspond cells share edge describe graph connect black cells orthogonally connect white cells input consist multiple test case first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 4000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 8 \le n m \le 500 $$$ $$$ n $$$ $$$ m $$$ divisible $$$ 4 $$$ ) — number row columns next $$$ n $$$ line contain $$$ m $$$ character character either ' b ' ' w ' ' ' represent black white empty cell respectively two color ( black white ) cell share a corner edge guarantee sum $$$ n \cdot m $$$ test case exceed $$$ 250\,000 $$$ testcase print ` ` '' solution otherwise print ` ` yes '' a grid format multiple solutions print solution test case 1 : test case 2 : one see black white part ca n't connect time answer ` ` ''",['implementation'],3500.0
1659/D,"suppose array $$$ a $$$ $$$ n $$$ elements $$$ 0 $$$ $$$ 1 $$$ let us define a function $$$ f ( k a ) $$$ return another array $$$ b $$$ result sort first $$$ k $$$ elements $$$ a $$$ non - decreasing order example $$$ f ( 4 [ <unknown> ] ) = [ <unknown> ] $$$ note first $$$ 4 $$$ elements sort consider array $$$ b_1 b_2 \ldots b_n $$$ generate $$$ f ( 1 a ) f ( 2 a ) \ldots f ( n a ) $$$ let $$$ c $$$ array obtain take element - wise sum $$$ b_1 b_2 \ldots b_n $$$ example let $$$ a= [ 0,1,0,1 ] $$$ $$$ <unknown> [ 0,1,0,1 ] $$$ $$$ <unknown> [ 0,1,0,1 ] $$$ $$$ <unknown> [ 0,0,1,1 ] $$$ $$$ <unknown> [ 0,0,1,1 ] $$$ $$$ c = <unknown> [ 0,1,0,1 ] + [ 0,1,0,1 ] + [ 0,0,1,1 ] + [ 0,0,1,1 ] = [ <unknown> ] $$$ give $$$ c $$$ determine a binary array $$$ a $$$ would give $$$ c $$$ process guarantee array $$$ a $$$ exist give $$$ c $$$ input first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case test case two line first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) second line contain $$$ n $$$ integers $$$ c_1 c_2 \ldots c_n $$$ ( $$$ 0 \leq c_i \leq n $$$ ) guarantee a valid array $$$ a $$$ exist give $$$ c $$$ sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output a single line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ a_i $$$ $$$ 0 $$$ $$$ 1 $$$ ) multiple answer may output 's explanation first test case give $$$ a= [ <unknown> ] $$$ construct $$$ b_i $$$ :","['constructive algorithms', 'data structures', 'greedy', 'implementation', 'math']",1900.0
1659/A,team red team blue compete a competitive fps match stream around world play a series $$$ n $$$ match end turn team red $$$ r $$$ time team blue $$$ b $$$ time team blue less skilled team red $$$ b $$$ strictly less $$$ r $$$ miss stream since oversleep think match must neck neck since many people watch imagine a string length $$$ n $$$ $$$ i $$$ -th character denote $$$ i $$$ -th match — r team red b team blue imagine string maximum number time a team a row small possible example series match <unknown> team red $$$ 3 $$$ time a row maximum must find a string satisfy condition multiple answer print first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case test case a single line contain three integers $$$ n $$$ $$$ r $$$ $$$ b $$$ ( $$$ 3 \leq n \leq 100 $$$ ; $$$ 1 \leq b < r \leq n $$$ $$$ <unknown> = n $$$ ) test case output a single line contain a string satisfy give condition multiple answer print first test case first example give optimal answer example statement maximum number time a team win a row <unknown> $$$ 1 $$$ minimize answer second test case second example <unknown> maximum number time a team win a row $$$ 2 $$$ give rr begin minimize answer,"['constructive algorithms', 'greedy', 'implementation', 'math']",1000.0
1650/E,dmitry a session pass $$$ n $$$ exams session start day $$$ 1 $$$ last $$$ d $$$ days $$$ i $$$ th exam take place day $$$ a_i $$$ ( $$$ 1 \le a_i \le d $$$ ) $$$ a_i $$$ — different session schedule dmitry consider a special value $$$ \mu $$$ — smallest rest time exam exams example image $$$ <unknown> $$$ word schedule count exactly $$$ n $$$ number — many days rest exam $$$ i-1 $$$ $$$ i $$$ ( $$$ i=0 $$$ start session exam $$$ i $$$ ) find $$$ \mu $$$ — minimum among $$$ n $$$ number dmitry believe improve schedule session may ask change date one exam ( change one arbitrary value $$$ a_i $$$ ) help change date $$$ a_i $$$ remain different value $$$ \mu $$$ large possible example schedule <unknown> dmitry move second exam end session new schedule take form : dmitry leave propose schedule unchanged ( way move one exam lead improvement situation ) first line input data contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number input test case descriptions test case follow empty line write test case first line test case contain two integers $$$ n $$$ $$$ d $$$ ( $$$ 2 \le n \le 2 \cdot 100000 1 \le d \le 1000000000 $$$ ) — number exams length session respectively second line test case contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le d a_i < a _ { i+1 } $$$ ) $$$ i $$$ -th number mean date $$$ i $$$ -th exam guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output maximum possible value $$$ \mu $$$ dmitry move one exam arbitrary day value $$$ a_i $$$ remain distinct first sample parse statement one optimal schedule change second sample : initial schedule new schedule third sample need move exam day $$$ 1 $$$ day $$$ 4 $$$ $$$ 100 $$$ fourth sample change schedule reduce $$$ \mu $$$ schedule leave fifth sample need move exam day $$$ 1 $$$ day $$$ 100000000 $$$ $$$ 300000000 $$$ one optimal schedule change sixth sample : initial schedule new schedule seventh sample every day exam day impossible rearrange schedule,"['data structures', 'greedy', 'implementation', 'math']",1900.0
1650/C,"number line $$$ m $$$ point $$$ i $$$ -th integer coordinate $$$ x_i $$$ integer weight $$$ w_i $$$ coordinate point different point number $$$ 1 $$$ $$$ m $$$ a sequence $$$ n $$$ segment $$$ [ l_1 r_1 ] [ l_2 r_2 ] \dots [ l_n r_n ] $$$ call system nest segment pair $$$ i j $$$ ( $$$ 1 \le i < j \le n $$$ ) condition $$$ l_i < l_j < r_j < r_i $$$ satisfy word second segment strictly inside first one third segment strictly inside second one , a give number $$$ n $$$ find a system nest segment : example let $$$ m = 8 $$$ give point mark picture weight mark red coordinate mark blue make a system three nest segment : first line input data contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — the number input test case empty line write test case first line test case contain two positive integers $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) $$$ m $$$ ( $$$ 2 \cdot n \le m \le 200000 $$$ ) next $$$ m $$$ line contain pair integers $$$ x_i $$$ ( $$$ -1000000000 \le x_i \le 1000000000 $$$ ) $$$ w_i $$$ ( $$$ -10000 \le w_i \le 10000 $$$ ) — coordinate weight point number $$$ i $$$ ( $$$ 1 \le i \le m $$$ ) respectively $$$ x_i $$$ different guarantee sum $$$ m $$$ value test case exceed $$$ 200000 $$$ test case output $$$ n + 1 $$$ line : first output weight compose system next $$$ n $$$ line output exactly two number — indices point endpoints $$$ i $$$ -th segment ( $$$ 1 \le i \le n $$$ ) order output endpoints a segment important — output index leave endpoint first number right endpoint way around several ways make a system nest segment minimal weight output first test case coincide example condition show weight compose system minimal second test case $$$ 6 $$$ point need use compose $$$ 3 $$$ segment","['greedy', 'implementation']",1200.0
1649/B,daniel watch a football team play a game train session want improve pass skills session game involve $$$ n $$$ players make multiple pass towards unfortunately since ball move fast session daniel unable know many ball involve game thing know number pass deliver player session find minimum possible amount ball involve game several test case input data first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 50000 $$$ ) — number test case follow test case description first line test case contain one integer $$$ n $$$ ( $$$ 2 \leq n \leq 100000 $$$ ) — number players second line test case contain a sequence integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a_i \leq 1000000000 $$$ ) $$$ a_i $$$ number pass deliver $$$ i $$$ -th player guarantee sum $$$ n $$$ test case n't exceed $$$ 100000 $$$ test case print a single integer — answer problem first test case ball game go like : $$$ 2 \rightarrow 1 \rightarrow 3 \rightarrow 4 \rightarrow 1 \rightarrow 2 \rightarrow 3 \rightarrow 4 \rightarrow 2 \rightarrow 3 \rightarrow 2 $$$ second test case possible way play game one ball one possible way play two ball : $$$ 2 \rightarrow 1 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 1 $$$ $$$ 2 \rightarrow 3 \rightarrow 2 \rightarrow 1 $$$ third example pass $$$ 0 $$$ ball possible,"['greedy', 'implementation']",1300.0
1648/E,"berland a large country develop airlines total $$$ n $$$ cities country historically serve berlaflot airline airline operate bi - directional flight $$$ m $$$ pair cities $$$ i $$$ -th connect cities number $$$ a_i $$$ $$$ b_i $$$ a price $$$ c_i $$$ a flight directions know berlaflot flight use get city ( possibly transfer ) cost route consist several consequent flight equal cost expensive formally cost route a city $$$ t_1 $$$ a city $$$ t_k $$$ $$$ ( k-2 ) $$$ transfer use cities $$$ t_2 \ t_3 \ t_4 \ \ldots \ t _ { k - 1 } $$$ equal maximum cost flight $$$ t_1 $$$ $$$ t_2 $$$ $$$ t_2 $$$ $$$ t_3 $$$ $$$ t_3 $$$ $$$ t_4 $$$ flight $$$ t _ { k - 1 } $$$ $$$ t_k $$$ course flight must operate berlaflot a new airline s8 airlines recently start operate berland airline provide bi - directional flight pair cities connect berlaflot direct flight thus pair cities a flight either berlaflot s8 airlines cost s8 airlines flight calculate follow : pair cities $$$ x $$$ $$$ y $$$ connect a s8 airlines flight cost flight equal minimum cost route cities $$$ x $$$ $$$ y $$$ berlaflot accord price describe earlier know help s8 airlines flight get city possible transfer , similarly berlaflot cost a route two cities consist several s8 airlines flight equal cost expensive flight due increase competition s8 airlines berlaflot decide introduce air reform change cost flight namely $$$ i $$$ -th flight cities $$$ a_i $$$ $$$ b_i $$$ berlaflot want make cost flight equal minimum cost route cities $$$ a_i $$$ $$$ b_i $$$ s8 airlines help berlaflot managers calculate new flight cost test consist multiple test case first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) — amount test case first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 4 \le n \le 200\,000 $$$ $$$ n - 1 \le m \le 200\,000 $$$ $$$ m \le \frac { ( n - 1 ) ( n - 2 ) } { 2 } $$$ ) — amount cities berland amount berlaflot flight next $$$ m $$$ line contain description berlaflot flight $$$ i $$$ -th line contain three integers $$$ a_i $$$ $$$ b_i $$$ $$$ c_i $$$ ( $$$ 1 \le a_i b_i \le n $$$ $$$ 1 \le c_i \le 1000000000 $$$ ) — number cities connect $$$ i $$$ -th berlaflot flight price $$$ i $$$ -th berlaflot flight guarantee flight connect a city two flight connect pair cities guarantee use berlaflot flight possible get city use s8 airlines flight possible get city let $$$ n $$$ sum $$$ n $$$ test case $$$ m $$$ sum $$$ m $$$ test case guarantee $$$ n m \le 200\,000 $$$ test case print $$$ m $$$ integers a single line $$$ i $$$ -th price $$$ i $$$ -th berlaflot flight air reform first test case s8 airlines provide flight pair cities : $$$ ( 1 3 ) $$$ $$$ ( 1 4 ) $$$ $$$ ( 2 4 ) $$$ cost a flight cities $$$ 1 $$$ $$$ 3 $$$ equal $$$ 2 $$$ since minimum cost berlaflot route $$$ 2 $$$ — route consist a flight cities $$$ 1 $$$ $$$ 2 $$$ cost $$$ 1 $$$ a flight cities $$$ 2 $$$ $$$ 3 $$$ cost $$$ 2 $$$ maximum cost $$$ 2 $$$ cost a flight cities $$$ 1 $$$ $$$ 4 $$$ $$$ 3 $$$ since minimum cost berlaflot route $$$ 3 $$$ — route consist a flight cities $$$ 1 $$$ $$$ 2 $$$ cost $$$ 1 $$$ a flight cities $$$ 2 $$$ $$$ 3 $$$ cost $$$ 2 $$$ a flight cities $$$ 3 $$$ $$$ 4 $$$ cost $$$ 3 $$$ maximum cost $$$ 3 $$$ cost a flight cities $$$ 2 $$$ $$$ 4 $$$ $$$ 3 $$$ since minimum cost berlaflot route $$$ 3 $$$ — route consist a flight cities $$$ 2 $$$ $$$ 3 $$$ cost $$$ 2 $$$ a flight cities $$$ 3 $$$ $$$ 4 $$$ cost $$$ 3 $$$ maximum cost $$$ 3 $$$ air reform cost berlaflot flight cities $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ since minimum cost s8 airlines route cities $$$ 3 $$$ — route consist a flight cities $$$ 1 $$$ $$$ 4 $$$ cost $$$ 3 $$$ a flight cities $$$ 2 $$$ $$$ 4 $$$ cost $$$ 3 $$$ maximum cost $$$ 3 $$$ cost berlaflot flight cities $$$ 2 $$$ $$$ 3 $$$ $$$ 3 $$$ since minimum cost s8 airlines route cities $$$ 3 $$$ — route consist a flight cities $$$ 2 $$$ $$$ 4 $$$ cost $$$ 3 $$$ a flight cities $$$ 1 $$$ $$$ 4 $$$ cost $$$ 3 $$$ a flight $$$ 1 $$$ $$$ 3 $$$ cost $$$ 2 $$$ maximum cost $$$ 3 $$$ cost berlaflot flight cities $$$ 3 $$$ $$$ 4 $$$ $$$ 3 $$$ since minimum cost s8 airlines route cities $$$ 3 $$$ — route consist a flight cities $$$ 1 $$$ $$$ 3 $$$ cost $$$ 2 $$$ a flight cities $$$ 1 $$$ $$$ 4 $$$ cost $$$ 3 $$$ maximum cost $$$ 3 $$$ second test case s8 airlines follow flight : cities $$$ 1 $$$ $$$ 4 $$$ cost $$$ 1 $$$ cities $$$ 2 $$$ $$$ 3 $$$ cost $$$ 1 $$$ cities $$$ 2 $$$ $$$ 5 $$$ cost $$$ 2 $$$ cities $$$ 3 $$$ $$$ 4 $$$ cost $$$ 1 $$$ cities $$$ 3 $$$ $$$ 5 $$$ cost $$$ 2 $$$","['data structures', 'dfs and similar', 'implementation']",3200.0
1647/B,madoka 's father reach $$$ 1 $$$ million <unknown> <unknown> ! website decide send a personalize award — <unknown> 's bite button ! bite button a rectangular table $$$ n $$$ row $$$ m $$$ columns $$$ 0 $$$ $$$ 1 $$$ cell explore table madoka find : example first illustration red subrectangle nice second one 's 's contain purple subrectangle help madoka determine whether table elegant test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 200 $$$ ) — number test case description test case follow first line test case contain two positive integers $$$ n m $$$ ( $$$ 1 \le n m \le 100 $$$ ) next $$$ n $$$ line contain string length $$$ m $$$ consist zero ones — description table guarantee sum value $$$ n $$$ sum value $$$ m $$$ test case exceed $$$ 777 $$$ test case print ` ` yes '' table elegant print ` ` '' otherwise may print letter case ( example ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize positive answer ) second test case table elegant red purple subrectangles nice intersect fourth test case table elegant red purple subrectangles nice intersect,"['brute force', 'constructive algorithms', 'implementation']",1200.0
1644/E,"consider a grid size $$$ n \times n $$$ row number top bottom $$$ 1 $$$ $$$ n $$$ columns number leave right $$$ 1 $$$ $$$ n $$$ robot position a cell $$$ ( 1 1 ) $$$ perform two type move : robot allow move outside grid give a sequence move $$$ s $$$ — initial path robot path n't lead robot outside grid allow perform arbitrary number modifications ( possibly zero ) one modification duplicate one move sequence , replace a single occurrence d dd a single occurrence r rr count number cells exist least one sequence modifications robot visit cell modify path n't move outside grid first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain single integer $$$ n $$$ ( $$$ 2 \le n \le 100000000 $$$ ) — number row columns grid second line testcase contain a non - empty string $$$ s $$$ consist character d r — initial path robot path n't lead robot outside grid total length string $$$ s $$$ testcases n't exceed $$$ 200000 $$$ testcase print a single integer — number cells exist least one sequence modifications robot visit cell modify path n't move outside grid first testcase 's enough consider follow modify paths : thus cells visit least one modify path : $$$ ( 1 1 ) $$$ $$$ ( 1 2 ) $$$ $$$ ( 1 3 ) $$$ $$$ ( 1 4 ) $$$ $$$ ( 2 2 ) $$$ $$$ ( 2 3 ) $$$ $$$ ( 2 4 ) $$$ $$$ ( 3 2 ) $$$ $$$ ( 3 3 ) $$$ $$$ ( 3 4 ) $$$ $$$ ( 4 2 ) $$$ $$$ ( 4 3 ) $$$ $$$ ( 4 4 ) $$$ second testcase way modify sequence without move robot outside grid visit cells ones visit path <unknown> third testcase cells visit least one modify path : $$$ ( 1 1 ) $$$ $$$ ( 2 1 ) $$$ $$$ ( 3 1 ) $$$ cells testcases :","['brute force', 'data structures', 'implementation', 'math']",1900.0
1644/D,"a sheet paper represent a grid size $$$ n \times m $$$ : $$$ n $$$ row $$$ m $$$ columns cells cells color white initially $$$ q $$$ operations apply sheet $$$ i $$$ -th describe follow : sheet apply $$$ q $$$ operations call a color two color different exist least one cell color different color many different color ? print number modulo $$$ 998\,244\,353 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain four integers $$$ n m k $$$ $$$ q $$$ ( $$$ 1 \le n m k q \le 200000 $$$ ) — size sheet number non - white color number operations $$$ i $$$ -th follow $$$ q $$$ line contain a description $$$ i $$$ -th operation — two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1 \le x_i \le n $$$ ; $$$ 1 \le y_i \le m $$$ ) — row column operation apply sum $$$ q $$$ testcases n't exceed $$$ 200000 $$$ testcase print a single integer — number different color modulo $$$ 998\,244\,353 $$$","['data structures', 'implementation', 'math']",1700.0
1634/F,fibonacci addition operation array $$$ x $$$ integers <unknown> indices $$$ l $$$ $$$ r $$$ fibonacci addition increase $$$ x_l $$$ $$$ f_1 $$$ increase $$$ x _ { l + 1 } $$$ $$$ f_2 $$$ $$$ x_r $$$ increase $$$ f _ { r - l + 1 } $$$ $$$ f_i $$$ denote $$$ i $$$ -th fibonacci number ( $$$ f_1 = 1 $$$ $$$ f_2 = 1 $$$ $$$ f _ { i } = f _ { i - 1 } + f _ { i - 2 } $$$ $$$ i > 2 $$$ ) operations perform modulo $$$ mod $$$ give two array $$$ a $$$ $$$ b $$$ length ask perform several fibonacci additions array different parameters operation report whether array $$$ a $$$ $$$ b $$$ equal modulo $$$ mod $$$ first line contain 3 number $$$ n $$$ $$$ q $$$ $$$ mod $$$ ( $$$ 1 \le n q \le 3\cdot 100000 1 \le mod \le 1000000000 + 7 $$$ ) — length array number operations number modulo operations perform second line contain $$$ n $$$ number — array $$$ a $$$ ( $$$ 0 \le a_i < mod $$$ ) third line also contain $$$ n $$$ number — array $$$ b $$$ ( $$$ 0 \le b_i < mod $$$ ) next $$$ q $$$ line contain character $$$ c $$$ two number $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le n $$$ ) — operation parameters $$$ c $$$ ` ` a '' fibonacci addition perform array $$$ a $$$ ` ` b '' operation perform $$$ b $$$ operation print ` ` yes '' ( without quote ) array equal ` ` '' otherwise letter case matter explanation test condition :,"['brute force', 'data structures', 'implementation', 'math']",2700.0
1626/C,monocarp play a computer game a wizard apprentice know a single spell luckily spell damage monsters level 's currently contain $$$ n $$$ monsters $$$ i $$$ -th appear $$$ k_i $$$ second start level $$$ h_i $$$ health point additional constraint $$$ h_i \le k_i $$$ $$$ 1 \le i \le n $$$ $$$ k_i $$$ different monocarp cast spell moments positive integer amount second start level : $$$ 1 2 3 \dots $$$ damage spell calculate follow n't cast spell previous second damage $$$ 1 $$$ otherwise let damage previous second $$$ x $$$ choose damage either $$$ x + 1 $$$ $$$ 1 $$$ a spell use mana : cast a spell damage $$$ x $$$ use $$$ x $$$ mana mana n't <unknown> kill $$$ i $$$ -th monster monocarp cast a spell damage least $$$ h_i $$$ exact moment monster appear $$$ k_i $$$ note monocarp cast spell even monster current second mana amount require cast spell sum mana usages cast spell calculate least amount mana require monocarp kill monsters show 's always possible kill monsters constraints problem first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — number monsters level second line testcase contain $$$ n $$$ integers $$$ k_1 < k_2 < \dots < k_n $$$ ( $$$ 1 \le k_i \le 1000000000 $$$ ) — number second start $$$ i $$$ -th monster appear $$$ k_i $$$ different $$$ k_i $$$ provide increase order third line testcase contain $$$ n $$$ integers $$$ h_1 h_2 \dots h_n $$$ ( $$$ 1 \le h_i \le k_i \le 1000000000 $$$ ) — health $$$ i $$$ -th monster sum $$$ n $$$ testcases n't exceed $$$ 10000 $$$ testcase print a single integer — least amount mana require monocarp kill monsters first testcase example monocarp cast spell $$$ 3 4 5 $$$ $$$ 6 $$$ second start damage $$$ 1 2 3 $$$ $$$ 4 $$$ respectively damage deal $$$ 6 $$$ second $$$ 4 $$$ indeed greater equal health monster appear second testcase example monocarp cast spell $$$ 3 4 $$$ $$$ 5 $$$ second start damage $$$ 1 2 $$$ $$$ 3 $$$ respectively third testcase example monocarp cast spell $$$ 4 5 7 8 $$$ $$$ 9 $$$ second start damage $$$ 1 2 1 1 $$$ $$$ 2 $$$ respectively,"['data structures', 'dp', 'greedy', 'implementation', 'math']",1700.0
1623/B,alice bob play follow game alice a set $$$ s $$$ disjoint range integers initially contain one range $$$ [ 1 n ] $$$ one turn alice pick a range $$$ [ l r ] $$$ set $$$ s $$$ ask bob pick a number range bob choose a number $$$ d $$$ ( $$$ l \le d \le r $$$ ) alice remove $$$ [ l r ] $$$ $$$ s $$$ put set $$$ s $$$ range $$$ [ l d - 1 ] $$$ ( $$$ l \le d - 1 $$$ ) range $$$ [ d + 1 r ] $$$ ( $$$ d + 1 \le r $$$ ) game end set $$$ s $$$ empty show number turn game exactly $$$ n $$$ play game alice remember range $$$ [ l r ] $$$ pick set $$$ s $$$ bob remember number pick bob smart know find number $$$ d $$$ alice 's range ask help program skill give list range alice pick ( $$$ [ l r ] $$$ ) range help bob find number $$$ d $$$ bob pick show always a unique way bob choose number a list valid range pick alice test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) next $$$ n $$$ line contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le n $$$ ) denote range $$$ [ l r ] $$$ alice pick point note range give particular order guarantee sum $$$ n $$$ test case exceed $$$ 1000 $$$ range test case a valid game test case print $$$ n $$$ line line contain three integers $$$ l $$$ $$$ r $$$ $$$ d $$$ denote alice 's range $$$ [ l r ] $$$ bob pick number $$$ d $$$ print line order show answer unique require print a new line test case new line output example readability first test case 1 range $$$ [ 1 1 ] $$$ one range $$$ [ 1 1 ] $$$ alice pick one number $$$ 1 $$$ bob pick second test case $$$ n = 3 $$$ initially set contain one range $$$ [ 1 3 ] $$$ fourth test case game play $$$ n = 5 $$$ initially set contain one range $$$ [ 1 5 ] $$$ game 's turn describe follow table,"['brute force', 'dfs and similar', 'implementation']",1100.0
1621/B,integers shop sell $$$ n $$$ segment $$$ i $$$ -th contain integers $$$ l_i $$$ $$$ r_i $$$ cost $$$ c_i $$$ coin tomorrow vasya go shop buy segment get integers appear least one buy segment total cost purchase sum cost segment shop vasya get integers a gift get integer $$$ x $$$ a gift follow condition satisfy : vasya get integer $$$ x $$$ a gift wo n't integers receive a gift example vasya buy segment $$$ [ 2 4 ] $$$ $$$ 20 $$$ coin segment $$$ [ 7 8 ] $$$ $$$ 22 $$$ coin spend $$$ 42 $$$ coin receive integers $$$ 2 3 4 7 8 $$$ segment also get integers $$$ 5 $$$ $$$ 6 $$$ a gift due technical issue first $$$ s $$$ segment ( segment $$$ [ l_1 r_1 ] [ l_2 r_2 ] \ldots [ <unknown> r_s ] $$$ ) available tomorrow shop vasya want get ( buy get a gift ) many integers possible <unknown> ways select cheapest $$$ s $$$ $$$ 1 $$$ $$$ n $$$ find many coin vasya spend first $$$ s $$$ segment available first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case first line test case contain single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100000 $$$ ) — number segment shop next $$$ n $$$ line contain three integers $$$ l_i $$$ $$$ r_i $$$ $$$ c_i $$$ ( $$$ 1 \leq l_i \leq r_i \leq 1000000000 1 \leq c_i \leq 1000000000 $$$ ) — end $$$ i $$$ -th segment cost guarantee total sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case output $$$ n $$$ integers : $$$ s $$$ -th ( $$$ 1 \leq s \leq n $$$ ) number coin <unknown> spend shop first $$$ s $$$ segment available first test case $$$ s = 1 $$$ vasya buy segment $$$ [ 2 4 ] $$$ $$$ 20 $$$ coin get $$$ 3 $$$ integers way get $$$ 7 $$$ integers $$$ 42 $$$ coin case $$$ s = 2 $$$ describe statement second test case note segment shop,"['data structures', 'greedy', 'implementation']",1500.0
1619/B,polycarp like square cub positive integers begin sequence number like : $$$ 1 $$$ $$$ 4 $$$ $$$ 8 $$$ $$$ 9 $$$ .... a give number $$$ n $$$ count number integers $$$ 1 $$$ $$$ n $$$ polycarp like word find number $$$ x $$$ $$$ x $$$ a square a positive integer number a cube a positive integer number ( a square a cube simultaneously ) first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 20 $$$ ) — number test case $$$ t $$$ line contain test case one per line line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 1000000000 $$$ ) test case print answer look — number integers $$$ 1 $$$ $$$ n $$$ polycarp like,"['implementation', 'math']",800.0
1617/E,christmas come icy receive a box chocolates grandparents ! box contain $$$ n $$$ chocolates $$$ i $$$ -th chocolate a non - negative integer type $$$ a_i $$$ icy believe good things come pair unfortunately type chocolates distinct ( $$$ a_i $$$ distinct ) icy want make least one pair chocolates type a result ask grandparents perform chocolate exchange perform chocolate exchange icy choose two chocolates indices $$$ x $$$ $$$ y $$$ ( $$$ 1 \le x y \le n $$$ $$$ x \ne y $$$ ) a chocolate exchange icy 's grandparents choose a non - negative integer $$$ k $$$ $$$ 2^k \ge a_x $$$ change type chocolate $$$ x $$$ $$$ a_x $$$ $$$ 2^k - a_x $$$ ( perform $$$ a_x : = 2^k - a_x $$$ ) chocolate exchange stop $$$ a_x = a_y $$$ note pair equal chocolate type stop procedure icy 's grandparents smart would choose sequence chocolate exchange minimize number exchange need since icy like cause trouble want maximize minimum number exchange need choose $$$ x $$$ $$$ y $$$ appropriately wonder optimal pair $$$ ( x y ) $$$ minimum number exchange need maximize across possible choices $$$ ( x y ) $$$ since icy good math hop help solve problem first line input contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number chocolates second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) guarantee $$$ a_i $$$ distinct output three integers $$$ x $$$ $$$ y $$$ $$$ m $$$ $$$ x $$$ $$$ y $$$ indices optimal chocolates perform exchange output must satisfy $$$ 1 \le x y \le n $$$ $$$ x \ne y $$$ $$$ m $$$ number exchange need obtain $$$ a_x = a_y $$$ show $$$ m \le 1000000000 $$$ pair chocolates multiple solutions output first test case minimum number exchange need exchange a chocolate type $$$ 6 $$$ a chocolate type $$$ 9 $$$ $$$ 5 $$$ sequence exchange follow : $$$ 6 \rightarrow 2 \rightarrow 0 \rightarrow 1 \rightarrow 7 \rightarrow 9 $$$ second test case minimum number exchange need exchange a chocolate type $$$ 4 $$$ a chocolate type $$$ 8 $$$ $$$ 2 $$$ sequence exchange follow : $$$ 4 \rightarrow 0 \rightarrow 8 $$$,"['dfs and similar', 'dp', 'implementation', 'math']",2700.0
1610/E,let 's call array $$$ k $$$ integers $$$ c_1 c_2 \ldots c_k $$$ terrible follow condition hold : let $$$ avg $$$ $$$ \frac { c_1 + c_2 + \ldots + c_k } { k } $$$ ( average elements array n't integer ) number elements array bigger $$$ avg $$$ strictly larger number elements array smaller $$$ avg $$$ note elements equal $$$ avg $$$ n't count example $$$ c = \ { 1 4 4 5 6\ } $$$ terrible $$$ avg = 4.0 $$$ $$$ 5 $$$ -th $$$ 4 $$$ -th elements greater $$$ avg $$$ $$$ 1 $$$ -st element smaller $$$ avg $$$ let 's call array $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ bad least one non - empty subsequences terrible good otherwise give array $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ find minimum number elements delete obtain a good array array a subsequence another array obtain deletion several ( possibly zero ) elements first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — size $$$ a $$$ second line testcase contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — elements array $$$ a $$$ testcase $$$ 1 \le i \lt n $$$ guarantee $$$ a_i \le a _ { i+1 } $$$ guarantee sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print minimum number elements delete obtain a good array first sample array $$$ a $$$ already good second sample 's enough delete $$$ 1 $$$ obtain array $$$ [ 4 4 5 6 ] $$$ good,"['brute force', 'greedy', 'implementation', 'math']",2300.0
1607/E,"robot locate a checker rectangular board size $$$ n \times m $$$ ( $$$ n $$$ row $$$ m $$$ columns ) row board number $$$ 1 $$$ $$$ n $$$ top bottom columns — $$$ 1 $$$ $$$ m $$$ leave right robot able move current cell one four cells adjacent side sequence command $$$ s $$$ execute robot give command denote one symbols ' l ' ' r ' 'd ' ' u ' trigger movement leave right , respectively robot start movement cell robot execute command start first one strictly order list $$$ s $$$ robot move beyond edge board fall break a command cause robot break consider successfully execute robot 's task execute many command possible without fall board example board $$$ 3 \times 3 $$$ robot start a sequence action $$$ s= $$$ ` ` <unknown> '' ( ` ` right '' ` ` right '' ` ` '' ` ` leave '' ` ` '' ` ` '' ) central cell robot perform one command next command force cross edge robot start move cell $$$ ( 2 1 ) $$$ ( second row first column ) command execute successfully robot stop cell $$$ ( 1 2 ) $$$ ( first row second column ) determine cell robot start movement order execute many command possible first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case next $$$ 2 t $$$ line contain descriptions test case description test case first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 1000000 $$$ ) — height width field robot locate second line description a string $$$ s $$$ consist solely character ' l ' ' r ' 'd ' ' u ' — sequence command robot execute string a length $$$ 1 $$$ $$$ 1000000 $$$ command guarantee total length $$$ s $$$ test case exceed $$$ 1000000 $$$ print $$$ t $$$ line contain answer correspond test case answer test case two integers $$$ r $$$ ( $$$ 1 \leq r \leq n $$$ ) $$$ c $$$ ( $$$ 1 \leq c \leq m $$$ ) separate a space — coordinate cell ( row number column number ) robot start move perform many command possible several cells may output",['implementation'],1600.0
1606/D,"give a matrix consist $$$ n $$$ row $$$ m $$$ columns $$$ j $$$ -th cell $$$ i $$$ -th row contain integer $$$ a _ { ij } $$$ first color row matrix either red blue a way least one row color red least one row color blue , choose integer $$$ k $$$ ( $$$ 1 \le k < m $$$ ) cut color matrix a way first $$$ k $$$ columns become a separate matrix ( leave matrix ) last $$$ m - k $$$ columns become a separate matrix ( right matrix ) color cut call perfect two properties hold : find perfect color cut report none first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number testcases descriptions $$$ t $$$ testcases follow first line testcase contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n m \le 500000 $$$ ; $$$ n \cdot m \le 1000000 $$$ ) — number row number columns matrix respectively $$$ i $$$ -th next $$$ n $$$ line contain $$$ m $$$ integers $$$ a _ { i1 } a _ { i2 } \dots a _ { i m } $$$ ( $$$ 1 \le a _ { ij } \le 1000000 $$$ ) sum $$$ n \cdot m $$$ testcases n't exceed $$$ 1000000 $$$ testcase print answer perfect color cut matrix print ` ` '' otherwise first print ` ` yes '' a string consist $$$ n $$$ character : $$$ i $$$ -th character ' r ' $$$ i $$$ -th row color red ' b ' 's color blue string contain least one ' r ' least one ' b ' finally print integer $$$ k $$$ ( $$$ 1 \le k < m $$$ ) — number columns leave cut color cut first testcase :","['brute force', 'constructive algorithms', 'implementation']",2400.0
1605/D,"eikooc sushi play a game game play a tree $$$ n $$$ nod number $$$ 1 $$$ $$$ n $$$ recall a tree $$$ n $$$ nod undirected connect graph $$$ n-1 $$$ edge take turn alternately move a token tree eikooc make first move place token node choice sushi make next move follow eikooc follow sushi , turn first a player must move token a node $$$ u $$$ $$$ x \oplus y $$$ denote bitwise xor operation integers $$$ x $$$ $$$ y $$$ players play optimally player unable make a move lose follow examples demonstrate rule game game begin eikooc decide <unknown> <unknown> nod tree favour formally a relabeling a permutation $$$ p $$$ length $$$ n $$$ ( sequence $$$ n $$$ integers wherein integer $$$ 1 $$$ $$$ n $$$ occur exactly ) $$$ p_i $$$ denote new number node $$$ i $$$ want maximize number nod choose first turn guarantee a win help eikooc find relabeling help first line contain a single integer $$$ <unknown> ( 1 \le t \le 100000 ) $$$ — number test case description test case follow first line test case contain integer $$$ n~ ( 1 \le n \le 2 \cdot 100000 ) $$$ — number nod tree next $$$ n-1 $$$ line contain two integers $$$ u $$$ $$$ v $$$ $$$ ( 1 \le u v \le n ; u \neq v ) $$$ — denote edge nod $$$ u $$$ $$$ v $$$ guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print suitable relabeling — a permutation length $$$ n $$$ maximize number nod choose first turn guarantee a win eikooc multiple relabelings may print first test case eikooc one choice sushi move play eikooc choose node eikooc win second test case $$$ 1 \oplus 2 = 3 <unknown> min ( 1 2 ) $$$ hence eikooc pick either nod sushi move play eikooc win $$$ \ { 1 2\ } $$$ $$$ \ { 2 1\ } $$$ optimal relabelings","['constructive algorithms', 'dfs and similar', 'greedy', 'implementation']",2100.0
1578/K,"kingdom islands consist $$$ p $$$ islands king rule whole kingdom island rule one several jarls rule total $$$ n $$$ jarls <unknown> island kingdom strong traditions jarls rule island support never conflict <unknown> strength cultural conflict people inhabit different islands thus two jarls rule different islands conflict however recent years bring a change traditional relations jarls knowledge exactly $$$ k $$$ pair jarls relationships two jarls pair different traditional , two jarls pair know rule island jarls conflict rule different islands overcome cultural disagreement conflict anymore a true responsible king worry whether kingdom close a major conflict order estimate current situation would like find largest possible group jarls every two jarls group conflict first line input consist two integers $$$ p $$$ $$$ n $$$ ( $$$ 1 \le p \le n \le 100000 $$$ ; $$$ 1 \le p \le 10000 $$$ ) second line consist $$$ n $$$ integers $$$ s_1 s_2 \ldots s_n $$$ ( $$$ 1 \le s_i \le p $$$ ) integer $$$ s_i $$$ denote $$$ i $$$ -th jarl rule island number $$$ s_i $$$ guarantee island rule least one jarl third line consist a single integer $$$ k $$$ ( $$$ 0 \le k \le 20 $$$ ) $$$ k $$$ line follow $$$ j $$$ -th line consist two distinct integers $$$ a_j $$$ $$$ b_j $$$ ( $$$ 1 \le a_j < b_j \le n $$$ ) denote relation $$$ a_j $$$ -th jarl $$$ b_j $$$ -th jarl differ traditional guarantee pair jarls appear twice list first line print a single integer $$$ q $$$ $$$ 1 $$$ $$$ n $$$ — largest possible number jarls a pairwise conflict group second line print $$$ q $$$ distinct integers $$$ 1 $$$ $$$ n $$$ — number jarls group number jarls print order conflict graph last sample testcase give circle represent island","['brute force', 'implementation']",2800.0
1578/E,"<unknown> <unknown> decide learn magic <unknown> systems a full binary tree task height $$$ h $$$ begin one ready task tree — task root moment time $$$ p $$$ process choose $$$ p $$$ ready task perform , task whose parent perform become ready next moment time task become ready stay ready perform shall calculate smallest number time moments system need perform task first line input contain number test $$$ t $$$ ( $$$ 1 \leq t \leq 5\cdot 100000 $$$ ) next $$$ t $$$ line contain description a test a test describe two integers $$$ h $$$ ( $$$ 1 \leq h \leq 50 $$$ ) $$$ p $$$ ( $$$ 1 \leq p \leq 10000 $$$ ) — height full binary tree number process guarantee test different test output one integer a separate line — smallest number time moments system need perform task let us consider second test sample input a full binary tree height $$$ 3 $$$ two process first moment time one ready task $$$ 1 $$$ $$$ p_1 $$$ perform second moment time two ready task $$$ 2 $$$ $$$ 3 $$$ process perform third moment time four ready task $$$ 4 $$$ $$$ 5 $$$ $$$ 6 $$$ $$$ 7 $$$ $$$ p_1 $$$ perform $$$ 6 $$$ $$$ p_2 $$$ perform $$$ 5 $$$ fourth moment time two ready task $$$ 4 $$$ $$$ 7 $$$ process perform thus system spend $$$ 4 $$$ moments time perform task","['implementation', 'math']",1200.0
1575/K,mr . chanek want knit a batik a traditional cloth indonesia cloth form a grid $$$ a $$$ size $$$ n \times m $$$ $$$ k $$$ color cell grid one $$$ k $$$ color define a sub - rectangle order pair two cells $$$ ( ( x_1 y_1 ) ( x_2 y_2 ) ) $$$ denote top - left cell bottom - right cell ( inclusively ) a sub - rectangle $$$ a $$$ two sub - rectangles $$$ ( ( x_1 y_1 ) ( x_2 y_2 ) ) $$$ $$$ ( ( x_3 y_3 ) ( x_4 y_4 ) ) $$$ pattern follow hold : count number possible batik color combinations subrectangles $$$ ( ( a_x a_y ) ( a_x + r - 1 a_y + c - 1 ) ) $$$ $$$ ( ( b_x b_y ) ( b_x + r - 1 b_y + c - 1 ) ) $$$ pattern output answer modulo $$$ 1000000000 + 7 $$$ first line contain five integers $$$ n $$$ $$$ m $$$ $$$ k $$$ $$$ r $$$ $$$ c $$$ ( $$$ 1 \leq n m \leq 1000000000 $$$ $$$ 1 \leq k \leq 1000000000 $$$ $$$ 1 \leq r \leq \min ( 1000000 n ) $$$ $$$ 1 \leq c \leq \min ( 1000000 m ) $$$ ) — size batik number color size sub - rectangle second line contain four integers $$$ a_x $$$ $$$ a_y $$$ $$$ b_x $$$ $$$ b_y $$$ ( $$$ 1 \leq a_x b_x \leq n $$$ $$$ 1 \leq a_y b_y \leq m $$$ ) — top - left corner first second sub - rectangle sub - rectangles give inside grid ( $$$ 1 \leq a_x + r - 1 $$$ $$$ b_x + r - 1 \leq n $$$ $$$ 1 \leq a_y + c - 1 $$$ $$$ b_y + c - 1 \leq m $$$ ) output integer denote number possible batik color combinations modulo $$$ 1000000000 + 7 $$$ follow $$$ 32 $$$ possible color combinations first example,"['implementation', 'math']",2200.0
1575/J,"mr . chanek a new game call drop ball initially mr . chanek a grid $$$ a $$$ size $$$ n \times m $$$ cell $$$ ( x y ) $$$ contain integer $$$ a _ { x y } $$$ denote direction ball move every time a ball leave a cell $$$ ( x y ) $$$ integer $$$ a _ { x y } $$$ change $$$ 2 $$$ mr . chanek drop $$$ k $$$ ball sequentially start first row $$$ c_1 c_2 \dots c_k $$$ -th ( $$$ 1 \leq c_i \leq m $$$ ) columns determine column ball end ( position ball leave grid ) first line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \leq n m \leq 1000 $$$ $$$ 1 \leq k \leq 100000 $$$ ) — size grid number ball drop mr . chanek $$$ i $$$ -th next $$$ n $$$ line contain $$$ m $$$ integers $$$ a _ { i,1 } a _ { i,2 } \ldots a _ { i m } $$$ ( $$$ 1 \leq a _ { i j } \leq 3 $$$ ) satisfy $$$ a _ { i 1 } \ne 3 $$$ $$$ a _ { i m } \ne 1 $$$ next line contain $$$ k $$$ integers $$$ c_1 c_2 \ldots c_k $$$ ( $$$ 1 \leq c_i \leq m $$$ ) — ball ' column position drop mr . chanek sequentially output $$$ k $$$ integers — $$$ i $$$ -th integer denote column $$$ i $$$ -th ball end first example first ball drop follow note cell $$$ ( 1 1 ) $$$ change direction bottom direction second third ball drop follow ball drop first row $$$ c_1 c_2 \dots c_k $$$ -th columns respectively a ball stop drop leave grid","['brute force', 'implementation']",1500.0
1574/D,"ivan play yet another <unknown> computer game control a single hero game hero $$$ n $$$ equipment slot a list $$$ c_i $$$ items $$$ i $$$ -th slot $$$ j $$$ -th increase hero strength $$$ a _ { i j } $$$ items slot pairwise distinct list increase order strength increase , $$$ a _ { i,1 } < a _ { i,2 } < \dots < a _ { i c_i } $$$ slot ivan choose exactly one item let choose item $$$ i $$$ -th slot $$$ b_i $$$ -th item correspond list sequence choices $$$ [ b_1 b_2 \dots b_n ] $$$ call a build strength a build sum strength increase items build ban game a list $$$ m $$$ pairwise distinct ban build 's guarantee 's least one build 's ban build maximum strength ban game ? multiple build maximum strength print first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 10 $$$ ) — number equipment slot $$$ i $$$ -th next $$$ n $$$ line contain description items $$$ i $$$ -th slot first one integer $$$ c_i $$$ ( $$$ 1 \le c_i \le 200000 $$$ ) — number items $$$ i $$$ -th slot $$$ c_i $$$ integers $$$ a _ { i,1 } a _ { i,2 } \dots a _ { i c_i } $$$ ( $$$ 1 \le a _ { i,1 } < a _ { i,2 } < \dots < a _ { i c_i } \le 100000000 $$$ ) sum $$$ c_i $$$ n't exceed $$$ 200000 $$$ next line contain a single integer $$$ m $$$ ( $$$ 0 \le m \le 100000 $$$ ) — number ban build next $$$ m $$$ line contain a description a ban build — a sequence $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ ( $$$ 1 \le b_i \le c_i $$$ ) build pairwise distinct 's least one build 's ban print build maximum strength ban game multiple build maximum strength print","['brute force', 'data structures', 'dfs and similar', 'greedy', 'implementation']",2000.0
1572/A,"give a book $$$ n $$$ chapters chapter a specify list chapters need understand order understand chapter understand a chapter must read understand every chapter require list currently n't understand chapters go read book begin till end repeatedly understand whole book note read a chapter a moment n't understand require chapters n't understand chapter determine many time read book understand every chapter determine never understand every chapter matter many time read book test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le <unknown> $$$ ) first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 2\cdot100000 $$$ ) — number chapters $$$ n $$$ line follow $$$ i $$$ -th line begin integer $$$ k_i $$$ ( $$$ 0 \le k_i \le n-1 $$$ ) — number chapters require understand $$$ i $$$ -th chapter $$$ k_i $$$ integers $$$ a _ { i,1 } a _ { i,2 } \dots a _ { i k_i } $$$ ( $$$ 1 \le a _ { i j } \le n a _ { i j } \ne i a _ { i j } \ne a _ { i l } $$$ $$$ j \ne l $$$ ) follow — chapters require understand $$$ i $$$ -th chapter guarantee sum $$$ n $$$ sum $$$ k_i $$$ testcases exceed $$$ 2\cdot100000 $$$ test case entire book understand print many time read otherwise print $$$ -1 $$$ first example understand chapters $$$ \ { 2 4\ } $$$ first read chapters $$$ \ { 1 3\ } $$$ second read book second example every chapter require understand chapter impossible understand book third example every chapter require chapters appear earlier book understand everything one go fourth example understand chapters $$$ \ { 2 3 4\ } $$$ first read chapter $$$ 1 $$$ second read book fifth example understand one chapter every read $$$ 5 $$$ $$$ 1 $$$","['brute force', 'data structures', 'dp', 'implementation']",1800.0
1569/D,a city represent a square grid corner point $$$ ( 0 0 ) $$$ $$$ ( 1000000 1000000 ) $$$ city $$$ n $$$ vertical $$$ m $$$ horizontal streets go across whole city i. e. $$$ i $$$ -th vertical streets go $$$ ( x_i 0 ) $$$ $$$ ( x_i 1000000 ) $$$ $$$ j $$$ -th horizontal street go $$$ ( 0 y_j ) $$$ $$$ ( 1000000 y_j ) $$$ streets bidirectional border city streets well $$$ k $$$ persons stay streets : $$$ p $$$ -th person point $$$ ( x_p y_p ) $$$ ( either $$$ x_p $$$ equal $$$ x_i $$$ $$$ y_p $$$ equal $$$ y_j $$$ ) let 's say a pair persons form inconvenient pair shortest path one person another go streets strictly greater manhattan distance calculate number inconvenient pair persons ( pair $$$ ( x y ) $$$ $$$ ( y x ) $$$ pair ) let 's recall manhattan distance point $$$ ( x_1 y_1 ) $$$ $$$ ( x_2 y_2 ) $$$ $$$ |x_1 - x_2| + |y_1 - y_2| $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case first line test case contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 2 \le n m \le 200000 $$$ ; $$$ 2 \le k \le 300000 $$$ ) — number vertical horizontal streets number persons second line test case contain $$$ n $$$ integers $$$ x_1 x_2 \dots x_n $$$ ( $$$ 0 = x_1 < x_2 < \dots < x _ { n - 1 } < x_n = 1000000 $$$ ) — $$$ x $$$ -coordinates vertical streets third line contain $$$ m $$$ integers $$$ y_1 y_2 \dots y_m $$$ ( $$$ 0 = y_1 < y_2 < \dots < y _ { m - 1 } < y_m = 1000000 $$$ ) — $$$ y $$$ -coordinates horizontal streets next $$$ k $$$ line contain description people $$$ p $$$ -th line contain two integers $$$ x_p $$$ $$$ y_p $$$ ( $$$ 0 \le x_p y_p \le 1000000 $$$ ; $$$ x_p \in \ { x_1 \dots <unknown> } $$$ $$$ y_p \in \ { y_1 \dots <unknown> } $$$ ) — coordinate $$$ p $$$ -th person point distinct guarantee sum $$$ n $$$ n't exceed $$$ 200000 $$$ sum $$$ m $$$ n't exceed $$$ 200000 $$$ sum $$$ k $$$ n't exceed $$$ 300000 $$$ test case print number inconvenient pair second test case picture : example point $$$ 3 $$$ $$$ 4 $$$ form inconvenient pair since shortest path ( show red equal $$$ 7 $$$ ) greater manhattan distance ( equal $$$ 5 $$$ ) point $$$ 3 $$$ $$$ 5 $$$ also form inconvenient pair : shortest path equal $$$ 1000001 $$$ ( show green ) greater manhattan distance equal $$$ 999999 $$$ point $$$ 5 $$$ $$$ 9 $$$ n't form inconvenient pair since shortest path ( show purple ) equal manhattan distance,"['data structures', 'implementation']",1900.0
1567/D,board bob write $$$ n $$$ positive integers base $$$ 10 $$$ sum $$$ s $$$ ( i. e. decimal numeral system ) alice see board accidentally interpret number board <unknown> $$$ 11 $$$ integers add ( base $$$ 11 $$$ ) number bob write board alice 's sum large possible ? input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number test case description test case follow line test case contain two integers $$$ s $$$ $$$ n $$$ ( $$$ 1 \leq s \leq 1000000000 $$$ ; $$$ 1 \leq n \leq \min ( 100 s ) $$$ ) — sum amount number board respectively number $$$ s $$$ $$$ n $$$ give decimal notation ( base $$$ 10 $$$ ) test case output $$$ n $$$ positive integers — number bob write board alice 's sum large possible multiple answer print first test case $$$ 70 _ { 10 } + 27 _ { 10 } = 97 _ { 10 } $$$ alice 's sum $$$ $$$ 70 _ { 11 } + 27 _ { 11 } = 97 _ { 11 } = 99 + 7 = 106 _ { 10 } $$$ $$$ ( $$$ x_b $$$ represent number $$$ x $$$ base $$$ b $$$ . ) show impossible alice get a larger sum $$$ 106 _ { 10 } $$$ second test case bob write a single number board must write $$$ 17 $$$ third test case $$$ 3 _ { 10 } + 4 _ { 10 } + 100 _ { 10 } + 4 _ { 10 } = 111 _ { 10 } $$$ alice 's sum $$$ $$$ 3 _ { 11 } + 4 _ { 11 } + 100 _ { 11 } + 4 _ { 11 } = 110 _ { 11 } = 1 \cdot 11 ^ 2 + 11 = 132 _ { 10 } $$$ $$$ show impossible alice get a larger sum $$$ 132 _ { 10 } $$$,"['constructive algorithms', 'greedy', 'implementation', 'math']",2000.0
1566/F,$$$ n $$$ point $$$ m $$$ segment coordinate line initial coordinate $$$ i $$$ -th point $$$ a_i $$$ endpoints $$$ j $$$ -th segment $$$ l_j $$$ $$$ r_j $$$ — leave right endpoints respectively move point one move move point current coordinate $$$ x $$$ coordinate $$$ x - 1 $$$ coordinate $$$ x + 1 $$$ cost move $$$ 1 $$$ move point a way segment visit least one point a point visit segment $$$ [ l r ] $$$ a moment coordinate segment $$$ [ l r ] $$$ ( include endpoints ) find minimal possible total cost move segment visit input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 200000 $$$ ) — number point segment respectively next line contain $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) — initial coordinate point next $$$ m $$$ line contain two integers $$$ l_j $$$ $$$ r_j $$$ ( $$$ -1000000000 \le l_j \le r_j \le 1000000000 $$$ ) — leave right endpoints $$$ j $$$ -th segment 's guarantee sum $$$ n $$$ sum $$$ m $$$ test case exceed $$$ 200000 $$$ test case print a single integer — minimal total cost move segment visit first test case point move follow : total cost move $$$ 5 $$$ easy see segment visit movements example tenth segment ( $$$ [ 7 13 ] $$$ ) visit second move third point image describe first test case :,"['data structures', 'dp', 'greedy', 'implementation']",2600.0
1562/B,"<unknown> session nicholas suddenly remember a positive integer $$$ n $$$ n't contain zero decimal notation soon return home get curious : maximum number digits remove number number become prime , either composite equal one ? number impossible : example number $$$ 53 $$$ 's impossible delete digits obtain a prime integer however $$$ n $$$ test case problem 's guarantee 's possible delete digits obtain a prime number note remove digits number a prime number a number divisors except one a composite a number two divisors $$$ 1 $$$ neither a prime a composite number test contain multiple test case first line contain one positive integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) denote number test case description test case follow first line test case contain one positive integer $$$ k $$$ ( $$$ 1 \le k \le 50 $$$ ) — number digits number second line test case contain a positive integer $$$ n $$$ n't contain zero decimal notation ( $$$ 10^ { k-1 } \le n < 10^ { k } $$$ ) guarantee always possible remove less $$$ k $$$ digits make number prime guarantee sum $$$ k $$$ test case exceed $$$ 10000 $$$ every test case print two number two line first line print number digits leave number second line print digits leave <unknown> multiple solutions print first test case ca n't delete $$$ 2 $$$ digits number $$$ <unknown> $$$ number $$$ 2 $$$ $$$ 3 $$$ $$$ 7 $$$ prime however delete $$$ 1 $$$ digit obtain a number $$$ 27 = 3 ^ 3 $$$ second test case delete digits except one $$$ 4 = 2 ^ 2 $$$ a composite number","['brute force', 'constructive algorithms', 'implementation', 'math']",1000.0
1555/C,"alice bob play a game a matrix consist $$$ 2 $$$ row $$$ m $$$ columns cell $$$ i $$$ -th row $$$ j $$$ -th column contain $$$ a _ { i j } $$$ coin initially alice bob stand a cell $$$ ( 1 1 ) $$$ go perform a sequence move reach a cell $$$ ( 2 m ) $$$ possible move : first alice make move reach $$$ ( 2 m ) $$$ collect coin cells visit ( include start cell ) alice finish bob start journey also perform move reach $$$ ( 2 m ) $$$ collect coin cells visit alice n't score game total number coin bob collect alice want minimize score bob want maximize score score game players play optimally ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases descriptions $$$ t $$$ testcases follow first line testcase contain a single integer $$$ m $$$ ( $$$ 1 \le m \le 100000 $$$ ) — number columns matrix $$$ i $$$ -th next $$$ 2 $$$ line contain $$$ m $$$ integers $$$ a _ { i,1 } a _ { i,2 } \dots a _ { i m } $$$ ( $$$ 1 \le a _ { i j } \le 10000 $$$ ) — number coin cell $$$ i $$$ -th row $$$ j $$$ -th column matrix sum $$$ m $$$ testcases n't exceed $$$ 100000 $$$ testcase print a single integer — score game players play optimally paths testcases show follow picture alice 's path depict red bob 's path depict blue","['brute force', 'constructive algorithms', 'dp', 'implementation']",1300.0
1554/C,"give two integers $$$ n $$$ $$$ m $$$ find $$$ \operatorname { mex } $$$ sequence $$$ n \oplus 0 n \oplus 1 \ldots n \oplus m $$$ , $$$ \oplus $$$ bitwise xor operator $$$ \operatorname { mex } $$$ sequence non - negative integers smallest non - negative integer n't appear sequence example $$$ \operatorname { mex } ( 0 1 2 4 ) = 3 $$$ $$$ \operatorname { mex } ( 1 2021 ) = 0 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 30\,000 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 0 \le n m \le 1000000000 $$$ ) test case print a single integer — answer problem first test case sequence $$$ 3 \oplus 0 3 \oplus 1 3 \oplus 2 3 \oplus 3 3 \oplus 4 3 \oplus 5 $$$ $$$ 3 2 1 0 7 6 $$$ smallest non - negative integer n't present sequence i. e. $$$ \operatorname { mex } $$$ sequence $$$ 4 $$$ second test case sequence $$$ 4 \oplus 0 4 \oplus 1 4 \oplus 2 4 \oplus 3 4 \oplus 4 4 \oplus 5 4 \oplus 6 $$$ $$$ 4 5 6 7 0 1 2 $$$ smallest non - negative integer n't present sequence i. e. $$$ \operatorname { mex } $$$ sequence $$$ 3 $$$ third test case sequence $$$ 3 \oplus 0 3 \oplus 1 3 \oplus 2 $$$ $$$ 3 2 1 $$$ smallest non - negative integer n't present sequence i. e. $$$ \operatorname { mex } $$$ sequence $$$ 0 $$$","['greedy', 'implementation']",1800.0
1549/B,a chessboard size $$$ n $$$ $$$ n $$$ square $$$ i $$$ -th row top $$$ j $$$ -th column leave label $$$ ( i j ) $$$ currently gregor pawn $$$ n $$$ -th row also enemy pawn $$$ 1 $$$ -st row one turn gregor move one pawn a pawn move one square ( $$$ ( i j ) $$$ $$$ ( i-1 j ) $$$ ) pawn destination square additionally a pawn move one square diagonally ( $$$ ( i j ) $$$ either $$$ ( i-1 j-1 ) $$$ $$$ ( i-1 j+1 ) $$$ ) enemy pawn square enemy pawn also remove gregor want know maximum number pawn reach row $$$ 1 $$$ ? note gregor take turn game enemy pawn never move also gregor 's pawn reach row $$$ 1 $$$ stick make move first line input contain one integer $$$ t $$$ ( $$$ 1\le t\le 2\cdot 10000 $$$ ) — number test case $$$ t $$$ test case follow test case consist three line first line contain a single integer $$$ n $$$ ( $$$ 2\le n\le 2\cdot { 10 } ^ { 5 } $$$ ) — size chessboard second line consist a string binary digits length $$$ n $$$ a $$$ 1 $$$ $$$ i $$$ -th position correspond enemy pawn $$$ i $$$ -th cell leave $$$ 0 $$$ correspond empty cell third line consist a string binary digits length $$$ n $$$ a $$$ 1 $$$ $$$ i $$$ -th position correspond a gregor 's pawn $$$ i $$$ -th cell leave $$$ 0 $$$ correspond empty cell guarantee sum $$$ n $$$ across test case less $$$ 2\cdot { 10 } ^ { 5 } $$$ test case print one integer : maximum number gregor 's pawn reach $$$ 1 $$$ -st row first example gregor simply advance $$$ 3 $$$ pawn forward thus answer $$$ 3 $$$ second example gregor guarantee $$$ 4 $$$ pawn reach enemy row follow color paths demonstrate diagram remember gregor take turn ` ` game '' ! third example gregor 's pawn stick behind enemy pawn reach end fourth example gregor pawn answer clearly $$$ 0 $$$,"['dfs and similar', 'dp', 'greedy', 'implementation']",800.0
1547/B,a string $$$ s $$$ length $$$ n $$$ ( $$$ 1 \le n \le 26 $$$ ) call alphabetical obtain use follow algorithm : word iterate $$$ n $$$ first letter latin alphabet start ' a ' etc time prepend a letter leave string $$$ s $$$ append a letter right string $$$ s $$$ string obtain way alphabetical example follow string alphabetical : ` ` a '' ` ` ba '' ` ` ab '' ` ` bac '' ` ` <unknown> '' follow string alphabetical : ` ` z '' ` ` aa '' ` ` ca '' ` ` acb '' ` ` xyz '' ` ` <unknown> '' give string determine alphabetical first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case $$$ t $$$ test case follow test case write a separate line contain one string $$$ s $$$ string $$$ s $$$ consist lowercase letter latin alphabet a length $$$ 1 $$$ $$$ 26 $$$ inclusive output $$$ t $$$ line must contain answer correspond test case output yes give string $$$ s $$$ alphabetical otherwise output yes case ( example string yes yes yes yes recognize a positive answer ) example contain test case main part condition,"['greedy', 'implementation', 'strings']",800.0
1542/D,"give a sequence $$$ a $$$ elements either form + x - $$$ x $$$ integer a sequence $$$ s $$$ elements either form + x - define $$$ f ( s ) $$$ follow : sequence $$$ b $$$ a subsequence sequence $$$ a $$$ $$$ b $$$ derive $$$ a $$$ remove zero elements without change order remain elements $$$ a $$$ 's subsequences $$$ b $$$ compute sum $$$ f ( b ) $$$ modulo $$$ 998\,244\,353 $$$ first line contain integer $$$ n $$$ ( $$$ 1\leq n\leq 500 $$$ ) — length $$$ a $$$ next $$$ n $$$ line begin operator + - operator + 's follow integer $$$ x $$$ ( $$$ 1\le x < 998\,244\,353 $$$ ) $$$ i $$$ -th line $$$ n $$$ line describe $$$ i $$$ -th element $$$ a $$$ print one integer answer problem modulo $$$ 998\,244\,353 $$$ first example follow possible pair $$$ b $$$ $$$ f ( b ) $$$ : sum value $$$ 16 $$$","['dp', 'implementation', 'math']",2200.0
1539/B,"petya write a sad love song share vasya song a string consist lowercase english letter vasya make $$$ q $$$ question song question a subsegment song start $$$ l $$$ -th letter $$$ r $$$ -th letter vasya consider a substring make character segment repeat letter subsegment $$$ k $$$ time $$$ k $$$ index correspond letter alphabet example question substring ` ` <unknown> '' vasya repeat letter ' a ' letter ' b ' twice letter ' c '' three time result string ` ` <unknown> '' length $$$ 10 $$$ vasya interest length result string help petya find length string obtain vasya first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1\leq n\leq 100\,000 $$$ $$$ 1\leq q \leq 100\,000 $$$ ) — length song number question second line contain one string $$$ s $$$ — song consist $$$ n $$$ lowercase letter english letter vasya 's question contain next $$$ q $$$ line line contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \leq l \leq r \leq n $$$ ) — bound question print $$$ q $$$ line : question print length string obtain vasya first example vasya interest three question first question vasya consider substring ` ` aba '' transform ` ` abba '' answer equal $$$ 4 $$$ second question vasya consider ` ` baca '' transform ` ` <unknown> '' answer $$$ 7 $$$ third question vasya consider string ` ` abacaba '' transform ` ` <unknown> '' length $$$ 11 $$$","['dp', 'implementation', 'strings']",800.0
1534/B,little dormi receive a histogram $$$ n $$$ bar height $$$ a_1 a_2 \ldots a_n $$$ christmas however play new histogram realize <unknown> today want modify like modify histogram little dormi able perform follow operation arbitrary number time : little dormi define ugliness score histogram ( perform number operations ) sum vertical length outline number operations perform make histogram perfect possible would like minimize ugliness score modify number operations however histogram large little dormi trouble minimize ugliness score little dormi 's older brother help find minimal ugliness consider follow example histogram $$$ 4 $$$ columns heights $$$ <unknown> $$$ : blue region represent histogram red line represent vertical portion outline currently vertical length outline $$$ 4 + 4 + 1 + 3 + 6 = 18 $$$ little dormi modify histogram ugliness would $$$ 18 $$$ however little dormi apply operation column $$$ 2 $$$ twice column $$$ 3 $$$ result a histogram heights $$$ <unknown> $$$ : total vertical length outline ( red line ) $$$ 4 + 3 + 1 + 6=14 $$$ ugliness $$$ 14 + <unknown> $$$ dollars prove optimal test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 400000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 400000 $$$ test case output one integer minimal ugliness little dormi achieve histogram test case example $$$ 1 $$$ example describe statement initial histogram example $$$ 2 $$$ give : ugliness currently $$$ 2 + 1 + 6 + 3 + 4=16 $$$ apply operation column $$$ 1 $$$ six time column $$$ 3 $$$ three time column $$$ 4 $$$ end a histogram heights $$$ <unknown> $$$ : vertical length outline $$$ 1 + 1=2 $$$ little dormi make $$$ 1 + 6 + 3=10 $$$ operations final ugliness $$$ 2 + <unknown> $$$ prove optimal,"['greedy', 'implementation', 'math']",1100.0
1527/D,give a tree $$$ n $$$ nod numerate $$$ 0 $$$ $$$ n-1 $$$ $$$ k $$$ $$$ 0 $$$ $$$ n $$$ inclusive count number unordered pair $$$ ( u v ) $$$ $$$ u \neq v $$$ mex node label shortest path $$$ u $$$ $$$ v $$$ ( include end point ) $$$ k $$$ mex a sequence integers smallest non - negative integer belong sequence first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 2 \cdot 10^ { 5 } $$$ ) next $$$ n-1 $$$ line test case describe tree construct line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 0 \le u v \le n-1 $$$ ) denote edge $$$ u $$$ $$$ v $$$ ( $$$ u \neq v $$$ ) guarantee give edge form a tree also guarantee sum $$$ n $$$ test case exceed $$$ 2 \cdot 10^ { 5 } $$$ test case print $$$ n+1 $$$ integers : number paths tree mex node label path $$$ k $$$ $$$ k $$$ $$$ 0 $$$ $$$ n $$$,"['dfs and similar', 'implementation', 'math']",2400.0
1520/A,polycarp $$$ 26 $$$ task task designate a capital letter latin alphabet teacher ask polycarp solve task follow way : polycarp begin solve task must solve end without distract another task switch another task polycarp return previous task polycarp solve one task day every day write task solve teacher want know polycarp follow advice example polycarp solve task follow order : ` ` <unknown> '' teacher see third day polycarp begin solve task ' b ' fifth day get distract begin solve task ' c ' eighth day polycarp return task ' b ' examples teacher suspicious : ` ` bab '' ` ` <unknown> '' ` ` <unknown> '' polycarp solve task follow : ` ` <unknown> '' teacher suspicions please note polycarp obligate solve task examples teacher n't suspicious : ` ` ba '' ` ` <unknown> '' ` ` <unknown> '' help polycarp find teacher might suspicious first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — number days polycarp solve task second line contain a string length $$$ n $$$ consist uppercase latin letter order polycarp solve task test case output : may print every letter case want ( example string yes yes yes yes recognize positive answer ),"['brute force', 'implementation']",800.0
1504/B,"a binary string $$$ a $$$ length $$$ n $$$ one operation select prefix $$$ a $$$ equal number $$$ 0 $$$ $$$ 1 $$$ symbols symbols prefix invert : $$$ 0 $$$ become $$$ 1 $$$ $$$ 1 $$$ become $$$ 0 $$$ example suppose $$$ <unknown> $$$ transform string $$$ a $$$ string $$$ b $$$ use finite number operations ( possibly none ) ? first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1\le n\le 3\cdot 100000 $$$ ) — length string $$$ a $$$ $$$ b $$$ follow two line contain string $$$ a $$$ $$$ b $$$ length $$$ n $$$ consist symbols $$$ 0 $$$ $$$ 1 $$$ sum $$$ n $$$ across test case exceed $$$ 3\cdot 100000 $$$ test case output ` ` yes '' possible transform $$$ a $$$ $$$ b $$$ ` ` '' impossible print letter case ( upper lower ) first test case show statement second test case transform $$$ a $$$ $$$ b $$$ use zero operations third test case legal operation impossible transform $$$ a $$$ $$$ b $$$ fourth test case one transformation : fifth test case legal operation transform $$$ a $$$ $$$ 111000 $$$ , legal operation return string start transform $$$ a $$$ $$$ b $$$","['constructive algorithms', 'greedy', 'implementation', 'math']",1200.0
1499/B,"give a string $$$ s $$$ consist character ' 0 ' ' 1 ' let $$$ |s| $$$ length $$$ s $$$ ask choose integer $$$ k $$$ ( $$$ k > 0 $$$ ) find a sequence $$$ a $$$ length $$$ k $$$ : character position $$$ a_1 a_2 \dots a_k $$$ remove remain character concatenate without change order , word position sequence $$$ a $$$ adjacent let result string $$$ s ' $$$ $$$ s ' $$$ call sort $$$ i $$$ $$$ 2 $$$ $$$ |s'| $$$ $$$ s ' _ { i-1 } \le <unknown> $$$ exist a sequence $$$ a $$$ result string $$$ s ' $$$ sort ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number testcases descriptions $$$ t $$$ testcases follow line testcase contain a string $$$ s $$$ ( $$$ 2 \le |s| \le 100 $$$ ) character either ' 0 ' ' 1 ' testcase print ` ` yes '' exist a sequence $$$ a $$$ remove character position $$$ a_1 a_2 \dots a_k $$$ concatenate part without change order produce a sort string otherwise print ` ` '' may print every letter case want ( example string yes yes yes yes recognize positive answer ) first testcase choose a sequence $$$ a= [ <unknown> ] $$$ remove underline letter ` ` <unknown> '' produce a string ` ` <unknown> '' sort second third testcases sequence already sort fourth testcase choose a sequence $$$ a= [ 3 ] $$$ $$$ <unknown> $$$ ` ` 11 '' sort fifth testcase way choose a sequence $$$ a $$$ $$$ s ' $$$ sort","['brute force', 'dp', 'greedy', 'implementation']",1000.0
1493/B,time planet lapituletti go way go earth a day last $$$ h $$$ hours hour last $$$ m $$$ minutes inhabitants planet use digital clock similar earth ones clock display time a format hh : mm ( number hours decimal display first ( colon ) follow number minutes decimal ; number minutes hours write lead zero need form a two - digit number ) hours number $$$ 0 $$$ $$$ h-1 $$$ minutes number $$$ 0 $$$ $$$ m-1 $$$ 's digits display clock please note digit $$$ 1 $$$ place middle position a standard mirror use planet lapituletti inhabitants often look reflection digital clock mirror feel happy see reflect clock a valid time ( mean see valid digits reflection time see normal clock moment a day ) image clock mirror reflect a vertical axis reflection a valid time reflection a valid time $$$ <unknown> $$$ $$$ m = 60 $$$ however example $$$ h=10 $$$ $$$ <unknown> $$$ reflection a valid time inhabitant planet lapituletti begin look a mirror image clock time moment $$$ s $$$ want know nearest future time moment ( possibly happen next day ) reflect clock time valid show $$$ h $$$ $$$ m $$$ $$$ s $$$ a moment exist reflect time correct moment inhabitant begin look clock moment consider nearest ask solve problem several test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case next $$$ 2 \cdot t $$$ line contain description test case description test case consist two line first line a test case contain two integers $$$ h $$$ $$$ m $$$ ( $$$ 1 \le h m \le 100 $$$ ) second line contain start time $$$ s $$$ describe format hh : mm test case output a separate line nearest moment format hh : mm reflect time correct second test case hard show reflection 23:59 incorrect reflection moment 00:00 next day correct,"['brute force', 'implementation']",1300.0
1482/D,"arkady a playlist initially consist $$$ n $$$ songs numerate $$$ 1 $$$ $$$ n $$$ order appear playlist arkady start listen songs playlist one one start song $$$ 1 $$$ playlist cycle i. e. listen last song arkady continue listen begin song a genre $$$ a_i $$$ a positive integer let arkady finish listen a song genre $$$ y $$$ genre next - to - last listen song $$$ x $$$ $$$ \operatorname { gcd } ( x y ) = 1 $$$ delete last listen song ( genre $$$ y $$$ ) playlist continue listen normally skip delete songs forget songs listen word delete a song ca n't delete next song immediately $$$ \operatorname { gcd } ( x y ) $$$ denote greatest common divisor ( gcd ) integers $$$ x $$$ $$$ y $$$ example initial songs ' genres $$$ [ 5 9 2 10 15 ] $$$ playlist convert follow : [ 5 9 2 10 15 ] $$$ \to $$$ [ 5 9 2 10 15 ] $$$ \to $$$ [ 5 2 10 15 ] ( $$$ \operatorname { gcd } ( 5 9 ) = 1 $$$ ) $$$ \to $$$ [ 5 2 10 15 ] $$$ \to $$$ [ 5 2 10 15 ] $$$ \to $$$ [ 5 2 10 15 ] $$$ \to $$$ [ 5 2 10 15 ] $$$ \to $$$ [ 5 2 10 15 ] $$$ \to $$$ [ 5 10 15 ] ( $$$ \operatorname { gcd } ( 5 2 ) = 1 $$$ ) $$$ \to $$$ [ 5 10 15 ] $$$ \to $$$ [ 5 10 15 ] $$$ \to $$$ ... bold number represent two last play songs note a song delete arkady forget listen previous songs give initial playlist please determine songs eventually delete order songs delete test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number songs second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — genres songs guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print a single line first print a single integer $$$ k $$$ — number delete songs print $$$ k $$$ distinct integers : delete songs order deletion explanation first test case give statement second test case playlist convert follow : [ 1 2 4 2 4 2 ] $$$ \to $$$ [ 1 2 4 2 4 2 ] $$$ \to $$$ [ 1 4 2 4 2 ] ( $$$ \operatorname { gcd } ( 1 2 ) = 1 $$$ ) $$$ \to $$$ [ 1 4 2 4 2 ] $$$ \to $$$ [ 1 4 2 4 2 ] $$$ \to $$$ [ 1 4 2 4 2 ] $$$ \to $$$ [ 1 4 2 4 2 ] $$$ \to $$$ [ 1 4 2 4 2 ] $$$ \to $$$ [ 4 2 4 2 ] ( $$$ \operatorname { gcd } ( 2 1 ) = 1 $$$ ) $$$ \to $$$ [ 4 2 4 2 ] $$$ \to $$$ ... third test case playlist convert follow : [ 1 2 ] $$$ \to $$$ [ 1 2 ] $$$ \to $$$ [ 1 ] ( $$$ \operatorname { gcd } ( 1 2 ) = 1 $$$ ) $$$ \to $$$ [ 1 ] $$$ \to $$$ [ 1 ] ( arkady listen song twice a row ) $$$ \to $$$ [ ] ( $$$ \operatorname { gcd } ( 1 1 ) = 1 $$$ ) fourth test case third deletion second song fifth test case song listen since $$$ \operatorname { gcd } ( 2 2 ) \ne 1 $$$ delete","['data structures', 'implementation']",1900.0
1482/B,first place competition alex many array integers assure array expensive award ceremony alex decide sell a rule array <unknown> : sell array compress a generator generator take four non - negative number $$$ n $$$ $$$ m $$$ $$$ c $$$ $$$ s $$$ $$$ n $$$ $$$ m $$$ must positive $$$ s $$$ non - negative $$$ c $$$ must true $$$ 0 \leq c < m $$$ array $$$ a $$$ length $$$ n $$$ create accord follow rule : example $$$ n = 5 $$$ $$$ m = 7 $$$ $$$ c = 4 $$$ $$$ s = 10 $$$ $$$ a = [ 3 0 4 1 5 ] $$$ price array value $$$ m $$$ generator alex a question : much money get array please help understand every array whether exist four number $$$ n $$$ $$$ m $$$ $$$ c $$$ $$$ s $$$ generate array yes maximize $$$ m $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) — number array first line array description contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100000 $$$ ) — size array second line array description contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a_i \leq 1000000000 $$$ ) — elements array guarantee sum array size exceed $$$ 100000 $$$ every array print :,"['implementation', 'math']",1500.0
1474/C,find a useless array $$$ a $$$ $$$ 2n $$$ positive integers realize actually n't need array decide throw elements $$$ a $$$ could easy task turn follow rule : example initially $$$ a = [ 3 5 1 2 ] $$$ select $$$ x = 6 $$$ select second third elements $$$ a $$$ sum $$$ 5 + 1 = 6 $$$ throw operation $$$ x $$$ equal $$$ 5 $$$ two elements array : $$$ 3 $$$ $$$ 2 $$$ throw next operation note choose $$$ x $$$ start ca n't change want operations determine behave throw elements $$$ a $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case first line test case contain single integer $$$ n $$$ ( $$$ 1 \leq n \leq 1000 $$$ ) second line test case contain $$$ 2n $$$ integers $$$ a_1 a_2 \dots a _ { 2n } $$$ ( $$$ 1 \leq a_i \leq 1000000 $$$ ) — initial array $$$ a $$$ guarantee total sum $$$ n $$$ test case n't exceed $$$ 1000 $$$ test case first line print yes possible throw elements array otherwise possible throw elements print initial value $$$ x $$$ ' ve choose print description $$$ n $$$ operations next operation print pair integers remove first test case describe statement second third test case show impossible throw elements array $$$ a $$$,"['brute force', 'constructive algorithms', 'data structures', 'greedy', 'implementation']",1700.0
1473/D,give a program consist $$$ n $$$ instructions initially a single variable $$$ x $$$ assign $$$ 0 $$$ afterwards instructions two type : give $$$ m $$$ query follow format : first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number testcases description $$$ t $$$ testcases follow first line testcase contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 200000 $$$ ) — number instructions program number query second line testcase contain a program — a string $$$ n $$$ character : character either ' + ' ' - ' — increment decrement instruction respectively next $$$ m $$$ line contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le n $$$ ) — description query sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ sum $$$ m $$$ testcases n't exceed $$$ 200000 $$$ testcase print $$$ m $$$ integers — query $$$ l $$$ $$$ r $$$ print number distinct value variable $$$ x $$$ assign instructions $$$ l $$$ -th one $$$ r $$$ -th one inclusive ignore rest execute without change order instructions remain query first testcase :,"['data structures', 'dp', 'implementation', 'strings']",1700.0
1468/M,"give $$$ n $$$ set integers $$$ i $$$ -th set contain $$$ k_i $$$ integers two set call similar share least two common elements i. e. exist two integers $$$ x $$$ $$$ y $$$ $$$ x \ne y $$$ belong two set task find two similar set among give ones report pair set first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 50000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ) number give set follow $$$ n $$$ line describe set $$$ i $$$ -th line start integer $$$ k_i $$$ ( $$$ 2 \le k_i \le 100000 $$$ ) — number integers $$$ i $$$ -th set $$$ k_i $$$ integers $$$ a _ { i,1 } $$$ $$$ a _ { i,2 } $$$ ... $$$ a _ { i k_i } $$$ ( $$$ 1 \le a _ { i j } \le 1000000000 $$$ ) follow — elements $$$ i $$$ -th set guarantee elements set different total number elements set test case greater $$$ 2\cdot 100000 $$$ test case print answer a single line pair similar set print -1 . otherwise print two different integers — indices similar set set number $$$ 1 $$$ $$$ n $$$ order give input multiple answer print","['data structures', 'implementation']",2300.0
1468/K,"a robot a checker field endless directions initially robot locate cell coordinate $$$ ( 0 0 ) $$$ execute command describe a string capital latin letter ' l ' ' r ' 'd ' ' u ' a command execute robot simply move correspond direction : task put obstacle one cell field execute command robot return original cell path $$$ ( 0 0 ) $$$ course obstacle place start cell $$$ ( 0 0 ) $$$ guarantee obstacle place robot return start cell obstacle affect movement robot follow way : try go a certain direction obstacle simply remain place ( obstacle also remain , disappear ) find cell field ( $$$ ( 0 0 ) $$$ ) put obstacle robot return cell $$$ ( 0 0 ) $$$ execution command solution report first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 500 $$$ ) — number test case test case consist a single line contain $$$ s $$$ — sequence command uppercase latin letter ' l ' ' r ' 'd ' ' u ' length $$$ s $$$ $$$ 1 $$$ $$$ 5000 $$$ inclusive additional constraint $$$ s $$$ : execute sequence command lead robot cell $$$ ( 0 0 ) $$$ obstacles sum lengths $$$ s $$$ a test n't exceed $$$ 5000 $$$ test case print a single line : multiple answer print","['brute force', 'implementation']",1600.0
1462/E2,"hard version problem difference easy hard versions constraints $$$ k $$$ $$$ m $$$ version problem need output answer modulo $$$ 1000000000 + 7 $$$ give a sequence $$$ a $$$ length $$$ n $$$ consist integers $$$ 1 $$$ $$$ n $$$ sequence may contain duplicate ( i.e elements equal ) find number tuples $$$ m $$$ elements maximum number tuple differ minimum $$$ k $$$ formally need find number tuples $$$ m $$$ indices $$$ i_1 < i_2 < \ldots < i_m $$$ $$$ $$$ \max ( a _ { i_1 } a _ { i_2 } \ldots a _ { i_m } ) - \min ( a _ { i_1 } a _ { i_2 } \ldots a _ { i_m } ) \le k. $$$ $$$ example $$$ n=4 $$$ $$$ m=3 $$$ $$$ k=2 $$$ $$$ a= [ 1,2,4,3 ] $$$ two triple ( $$$ i=1 j=2 z=4 $$$ $$$ i=2 j=3 z=4 $$$ ) $$$ n=4 $$$ $$$ m=2 $$$ $$$ k=1 $$$ $$$ a= [ 1,1,1,1 ] $$$ six possible pair suitable result large print value modulo $$$ 1000000000 + 7 $$$ ( remainder divide $$$ 1000000000 + 7 $$$ ) first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 200000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 1 \le m \le 100 $$$ $$$ 1 \le k \le n $$$ ) — length sequence $$$ a $$$ number elements tuples maximum difference elements tuple next line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — sequence $$$ a $$$ guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ output $$$ t $$$ answer give test case answer require number tuples $$$ m $$$ elements modulo $$$ 1000000000 + 7 $$$ maximum value tuple differ minimum $$$ k $$$","['implementation', 'math']",1700.0
1453/A,"gildong 's town a train system $$$ 100 $$$ train travel bottom end top end $$$ 100 $$$ train travel leave end right end train start side number $$$ 1 $$$ $$$ 100 $$$ respectively train speed let 's take a look picture train system represent coordinate a 2d plane $$$ i $$$ -th train start bottom end initially $$$ ( i,0 ) $$$ $$$ ( i t ) $$$ $$$ t $$$ minutes $$$ i $$$ -th train start leave end initially $$$ ( 0 i ) $$$ $$$ ( t i ) $$$ $$$ t $$$ minutes train arrive destinations $$$ 101 $$$ minutes however gildong find train schedule depart a specific time simultaneously dangerous time $$$ n $$$ train schedule depart bottom end $$$ m $$$ train schedule depart leave end two train $$$ ( x y ) $$$ time $$$ x $$$ $$$ y $$$ crash therefore ask find minimum number train cancel prevent crash test contain one test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) test case contain three line first line test case consist two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 100 $$$ ) — number train schedule depart bottom end number train schedule depart leave end respectively second line test case contain $$$ n $$$ integers integer a train number schedule start bottom end number give strictly increase order $$$ 1 $$$ $$$ 100 $$$ inclusive third line test case contain $$$ m $$$ integers integer a train number schedule start leave end number give strictly increase order $$$ 1 $$$ $$$ 100 $$$ inclusive test case print a single integer : minimum number train cancel order prevent crash first case show crash current schedule follow therefore answer zero second case $$$ t=4 $$$ a crash see picture prove cancel one train remain train crash therefore answer one",['implementation'],800.0
1433/B,"a bookshelf fit $$$ n $$$ book $$$ i $$$ -th position bookshelf $$$ a_i = 1 $$$ a book position $$$ a_i = 0 $$$ otherwise guarantee least one book bookshelf one move choose contiguous segment $$$ [ l ; r ] $$$ consist book ( i.e $$$ i $$$ $$$ l $$$ $$$ r $$$ condition $$$ a_i = 1 $$$ hold ) : task find minimum number move require collect book shelf a contiguous ( consecutive ) segment ( i.e segment without gap ) example $$$ a = [ 0 0 1 0 1 ] $$$ a gap book ( $$$ a_4 = 0 $$$ $$$ a_3 = 1 $$$ $$$ a_5 = 1 $$$ ) $$$ a = [ 1 1 0 ] $$$ gap book $$$ a = [ 0 0,0 ] $$$ also gap book answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 200 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — number place a bookshelf second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1 $$$ ) $$$ a_i $$$ $$$ 1 $$$ a book position $$$ 0 $$$ otherwise guarantee least one book bookshelf test case print one integer : minimum number move require collect book shelf a contiguous ( consecutive ) segment ( i.e segment without gap ) first test case example shift segment $$$ [ 3 ; 3 ] $$$ right segment $$$ [ 4 ; 5 ] $$$ right move book form contiguous segment $$$ [ 5 ; 7 ] $$$ answer $$$ 2 $$$ second test case example nothing book bookshelf form contiguous segment already third test case example shift segment $$$ [ 5 ; 5 ] $$$ leave segment $$$ [ 4 ; 4 ] $$$ leave move book form contiguous segment $$$ [ 1 ; 3 ] $$$ answer $$$ 2 $$$ fourth test case example shift segment $$$ [ 1 ; 1 ] $$$ right segment $$$ [ 2 ; 2 ] $$$ right segment $$$ [ 6 ; 6 ] $$$ leave segment $$$ [ 5 ; 5 ] $$$ leave move book form contiguous segment $$$ [ 3 ; 4 ] $$$ answer $$$ 4 $$$ fifth test case example shift segment $$$ [ 1 ; 2 ] $$$ right move book form contiguous segment $$$ [ 2 ; 5 ] $$$ answer $$$ 1 $$$","['greedy', 'implementation']",800.0
1431/C,"a local shop area get prepare great holiday black friday $$$ n $$$ items price $$$ p_1 p_2 \dots p_n $$$ display order price $$$ p_1 \le p_2 \le \dots \le p_n $$$ shop a <unknown> discount value $$$ k $$$ black friday discount apply follow way : a single purchase $$$ x $$$ items get cheapest $$$ \lfloor \frac x k \rfloor $$$ items free ( $$$ \lfloor \frac x k \rfloor $$$ $$$ x $$$ divide $$$ k $$$ round nearest integer ) include item purchase example items price $$$ [ 1 1 2 2 2 3 4 5 6 ] $$$ shop buy items price $$$ [ 1 2 2 4 5 ] $$$ $$$ k = 2 $$$ get cheapest $$$ \lfloor \frac 5 2 \rfloor = 2 $$$ free items price $$$ 1 $$$ $$$ 2 $$$ , naive customer n't care much money spend however want total price items get free large possible maximum total price items get free a single purchase ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 500 $$$ ) — number testcases description $$$ t $$$ testcases follow first line testcase contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 200 $$$ ; $$$ 1 \le k \le n $$$ ) — number items shop discount value respectively second line testcase contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 1 \le p_i \le 1000000 $$$ ) — price items display shop items order price $$$ p_1 \le p_2 \le \dots \le p_n $$$ print a single integer testcase : maximum total price items get free a single purchase",['implementation'],1600.0
1431/B,polycarp finish write lecture <unknown> languages language week ` ` vwv '' ( pronounce ` ` <unknown> '' ) write system language consist two lowercase latin letter : ' v ' ' w ' unfortunately polycarp write lecture <unknown> without space note look like a <unknown> sequence squiggles exact polycarp ca n't tell ' w ' apart ' vv ' note consist two squiggles luckily brother monocarp better write habit polycarp manage take note want make note readable follow note monocarp underline letter note a way ambiguity underline a ' v ' ca n't mistake a part ' w ' underline a ' w ' ca n't mistake two adjacent letter ' v ' minimum number letter polycarp underline make note unambiguous ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number testcases next $$$ t $$$ line contain a non - empty string vwv language consist lowercase latin letter ' v ' ' w ' length string exceed $$$ 100 $$$ testcase print a single integer : minimum number letter polycarp underline ambiguity note first testcase 's enough underline two letter ' v ' second testcase letter ' v ' ambiguous already n't underline anything third testcase underline ' w ' n't mix two letter ' v ' fourth testcase underline ' w ' avoid ambiguity fifth testcase underline letter ' w ' two letter ' v ',['implementation'],1400.0
1430/C,number $$$ 1 2 3 \dots n $$$ ( integer $$$ 1 $$$ $$$ n $$$ ) write a board one operation erase two number $$$ a $$$ $$$ b $$$ board write one integer $$$ \frac { a + b } { 2 } $$$ round instead perform give operation $$$ n - 1 $$$ time make result number leave board small possible example $$$ n = 4 $$$ follow course action optimal : 's easy see $$$ n - 1 $$$ operations leave one number goal minimize first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case line test case contain one integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number integers write board initially 's guarantee total sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case first line print minimum possible number leave board $$$ n - 1 $$$ operations next $$$ n - 1 $$$ line contain two integers — number $$$ a $$$ $$$ b $$$ choose erase operation,"['constructive algorithms', 'data structures', 'greedy', 'implementation', 'math']",1000.0
1426/A,"vasya go visit classmate petya vasya know petya 's apartment number $$$ n $$$ one entrance petya 's house distribution apartments follow : first floor contain $$$ 2 $$$ apartments every floor contain $$$ x $$$ apartments apartments number start one first floor i.e apartments first floor number $$$ 1 $$$ $$$ 2 $$$ apartments second floor number $$$ 3 $$$ $$$ ( x + 2 ) $$$ apartments third floor number $$$ ( x + 3 ) $$$ $$$ ( 2 \cdot x + 2 ) $$$ , task find number floor petya live assume house always high enough fit least $$$ n $$$ apartments answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case $$$ t $$$ test case follow line test case contain two integers $$$ n $$$ $$$ x $$$ ( $$$ 1 \le n x \le 1000 $$$ ) — number petya 's apartment number apartments floor house except first one ( two apartments first floor ) test case print answer : number floor petya live consider first test case example : first floor contain apartments number $$$ 1 $$$ $$$ 2 $$$ second one contain apartments number $$$ 3 $$$ $$$ 4 $$$ $$$ 5 $$$ third one contain apartments number $$$ 6 $$$ $$$ 7 $$$ $$$ 8 $$$ therefore petya live third floor second test case example petya live apartment $$$ 1 $$$ first floor","['implementation', 'math']",800.0
1425/E,mr . chanek currently participate a science fair popular town find excite puzzle fair want solve $$$ n $$$ atoms number $$$ 1 $$$ $$$ n $$$ atoms especially <unknown> initially atom normal state atom excite excite atom $$$ i $$$ require $$$ d_i $$$ energy atom $$$ i $$$ excite give $$$ a_i $$$ energy excite number atoms ( include zero ) atoms also form a peculiar one - way bond $$$ i $$$ $$$ ( 1 \le i < n ) $$$ atom $$$ i $$$ excite atom $$$ e_i $$$ also excite cost initially $$$ e_i $$$ = $$$ i+1 $$$ note atom $$$ n $$$ form a bond atom mr . chanek must change exactly $$$ k $$$ bond exactly $$$ k $$$ time mr . chanek choose atom $$$ i $$$ $$$ ( 1 \le i < n ) $$$ change $$$ e_i $$$ a different value $$$ i $$$ current $$$ e_i $$$ note atom 's bond remain unchanged change help mr . chanek determine maximum energy achieve ! note : must first change exactly $$$ k $$$ bond start excite atoms first line contain two integers $$$ n $$$ $$$ k $$$ $$$ ( 4 \le n \le 100000 0 \le k < n ) $$$ number atoms number bond must change second line contain $$$ n $$$ integers $$$ a_i $$$ $$$ ( 1 \le a_i \le 1000000 ) $$$ denote energy give atom $$$ i $$$ excite state third line contain $$$ n $$$ integers $$$ d_i $$$ $$$ ( 1 \le d_i \le 1000000 ) $$$ denote energy need excite atom $$$ i $$$ a line integer denote maximum number energy mr . chanek get optimal solution change $$$ <unknown> $$$ 1 excite atom 5 energy 1 . cause atoms 1 2 3 4 5 excite total energy gain mr . chanek ( 5 + 6 + 7 + 8 + 10 ) - 1 = 35 . another possible way change $$$ <unknown> $$$ 1 excite atom 3 ( excite atom 1 2 3 ) excite atom 4 ( excite atom 4 5 6 ) total energy gain mr . chanek ( 5 + 6 + 7 + 8 + 10 + 2 ) - ( 6 + 7 ) = 25 optimal,"['greedy', 'implementation']",2200.0
1422/B,a matrix size $$$ n \times m $$$ call nice row columns matrix palindromes a sequence integers $$$ ( a_1 a_2 \dots a_k ) $$$ a palindrome integer $$$ i $$$ ( $$$ 1 \le i \le k $$$ ) equality $$$ a_i = a _ { k - i + 1 } $$$ hold sasha own a matrix $$$ a $$$ size $$$ n \times m $$$ one operation increase decrease number matrix one sasha want make matrix nice interest minimum number operations need help ! first line contain a single integer $$$ t $$$ — number test case ( $$$ 1 \le t \le 10 $$$ ) $$$ t $$$ test follow first line test contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 100 $$$ ) — size matrix next $$$ n $$$ line contain $$$ m $$$ integers $$$ a _ { i j } $$$ ( $$$ 0 \le a _ { i j } \le 1000000000 $$$ ) — elements matrix test output smallest number operations require make matrix nice first test case example obtain follow nice matrix $$$ 8 $$$ operations : second test case example obtain follow nice matrix $$$ 42 $$$ operations :,"['greedy', 'implementation', 'math']",1300.0
1421/E,play yet another strategy game man recruit $$$ n $$$ <unknown> heroes whose power represent array $$$ a $$$ unfortunately mighty heroes create capable want decide something order accomplish goal pick two consecutive heroes power $$$ a_i $$$ $$$ a _ { i+1 } $$$ remove insert a hero power $$$ - ( a_i+a _ { i+1 } ) $$$ back position example array contain elements $$$ [ 5 6 7 8 ] $$$ pick $$$ 6 $$$ $$$ 7 $$$ get $$$ [ 5 - ( 6 + 7 ) 8 ] = [ 5 -13 8 ] $$$ perform operation $$$ n-1 $$$ time man end one hero want power big possible 's largest possible power achieve ? first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) — power heroes print largest possible power achieve $$$ n-1 $$$ operations suitable list operations first sample : $$$ [ 5 6 7 8 ] \rightarrow [ -11 7 8 ] \rightarrow [ -11 -15 ] \rightarrow [ 26 ] $$$,"['brute force', 'dp', 'implementation']",2700.0
1419/F,"$$$ n $$$ detachments surface number $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th detachment place a point coordinate $$$ ( x_i y_i ) $$$ detachments place different point brimstone visit detachment least choose detachment brimstone start move one detachment another first choose one four directions movement ( right leave ) start move constant speed one unit interval a second come a detachment reach arbitrary detachment repeat process $$$ t $$$ second <unknown> strike cover whole surface moment brimstone a point detachment locate stay detachment long need brimstone a good commander 's create one detachment place empty point integer coordinate want trip keep mind brimstone need visit detachment , help brimstone find minimal $$$ t $$$ possible check detachment $$$ t $$$ report first line contain a single integer $$$ n $$$ $$$ ( 2 \le n \le 1000 ) $$$ — number detachments next $$$ n $$$ line a pair integers $$$ x_i $$$ $$$ y_i $$$ $$$ ( |x_i| |y_i| \le 1000000000 ) $$$ — coordinate $$$ i $$$ -th detachment guarantee point different output minimal integer $$$ t $$$ possible check detachments add one new detachment $$$ t $$$ print $$$ -1 $$$ first test possible place a detachment $$$ ( 0 0 ) $$$ possible check detachments $$$ t = 100 $$$ prove impossible check detachments $$$ t < 100 $$$ ; thus answer $$$ 100 $$$ second test $$$ t $$$ possible check detachments even add one new detachment answer $$$ -1 $$$ third test possible place a detachment $$$ ( 1 0 ) $$$ brimstone check detachments $$$ t = 2 $$$ prove minimal $$$ t $$$ fourth test need add detachments answer get better ( $$$ t = 2 $$$ ) prove minimal $$$ t $$$","['data structures', 'dfs and similar', 'implementation']",2800.0
1416/D,give undirected graph consist $$$ n $$$ vertices $$$ m $$$ edge initially a single integer write every vertex : vertex $$$ i $$$ $$$ p_i $$$ write $$$ p_i $$$ distinct integers $$$ 1 $$$ $$$ n $$$ process $$$ q $$$ query two type : note a query first type possible vertices reachable $$$ v $$$ $$$ 0 $$$ write case $$$ u $$$ explicitly define since selection $$$ u $$$ affect anything choose vertex reachable $$$ v $$$ print value ( $$$ 0 $$$ ) first line contain three integers $$$ n $$$ $$$ m $$$ $$$ q $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 1 \le m \le 300000 $$$ ; $$$ 1 \le q \le 500000 $$$ ) second line contain $$$ n $$$ distinct integers $$$ p_1 $$$ $$$ p_2 $$$ ... $$$ p_n $$$ $$$ p_i $$$ number initially write vertex $$$ i $$$ ( $$$ 1 \le p_i \le n $$$ ) $$$ m $$$ line follow $$$ i $$$ -th contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le n $$$ $$$ a_i \ne b_i $$$ ) mean $$$ i $$$ -th edge connect vertices $$$ a_i $$$ $$$ b_i $$$ guarantee graph contain multi - edges $$$ q $$$ line follow describe query line give one follow format : every query first type print value $$$ p_u $$$ write choose vertex $$$ u $$$,"['data structures', 'implementation']",2600.0
1416/A,give array $$$ a $$$ consist $$$ n $$$ integers number $$$ 1 $$$ $$$ n $$$ let 's define $$$ k $$$ -amazing number array minimum number occur subsegments array length $$$ k $$$ ( recall a subsegment $$$ a $$$ length $$$ k $$$ a contiguous part $$$ a $$$ contain exactly $$$ k $$$ elements ) integer occur subsegments length $$$ k $$$ value $$$ k $$$ $$$ k $$$ -amazing number $$$ -1 $$$ $$$ k $$$ $$$ 1 $$$ $$$ n $$$ calculate $$$ k $$$ -amazing number array $$$ a $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 300000 $$$ ) — number elements array second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 300000 $$$ test case print $$$ n $$$ integers $$$ i $$$ -th integer equal $$$ i $$$ -amazing number array,"['data structures', 'implementation']",1500.0
1413/D,tenten run a weapon shop ninjas today will sell $$$ n $$$ shurikens cost $$$ 1 $$$ $$$ 2 $$$ ... $$$ n $$$ <unknown> ( local currency ) a day tenten place shurikens onto showcase empty begin day job fairly simple : sometimes tenten place another shuriken ( available shurikens ) showcase sometimes a ninja come buy a shuriken showcase since ninjas thrifty always buy cheapest shuriken showcase tenten keep a record events end a list follow type record : today a lucky day shurikens buy tenten wonder list consistent could a possible order place shurikens showcase help find ! first line contain integer $$$ n $$$ ( $$$ 1\leq n\leq 100000 $$$ ) stand number shurikens follow $$$ 2n $$$ line describe events format describe 's guarantee exactly $$$ n $$$ events first type price $$$ 1 $$$ $$$ n $$$ occur exactly events second type list consistent print ` ` yes '' otherwise ( list contradictory valid order shurikens placement ) print ` ` '' first case second line must contain $$$ n $$$ space - separated integers denote price shurikens order place multiple answer print first example tenten first place shurikens price $$$ 4 $$$ $$$ 2 $$$ a customer come buy cheapest shuriken cost $$$ 2 $$$ next tenten add a shuriken price $$$ 3 $$$ showcase already place $$$ 4 $$$ -ryo a new customer buy $$$ 3 $$$ -ryo shuriken add a $$$ 1 $$$ -ryo shuriken finally last two customers buy shurikens $$$ 1 $$$ $$$ 4 $$$ respectively note order $$$ [ 2 4 3 1 ] $$$ also valid second example first customer buy a shuriken anything place clearly impossible third example tenten put shurikens onto showcase a customer come buy a shuriken price $$$ 2 $$$ impossible since shuriken cheapest know $$$ 1 $$$ -ryo shuriken also,"['data structures', 'greedy', 'implementation']",1700.0
1408/C,"a road length $$$ l $$$ meter start road coordinate $$$ 0 $$$ end road coordinate $$$ l $$$ two cars first stand start road second stand end road start drive simultaneously first car drive start end second car drive end start initially drive a speed $$$ 1 $$$ meter per second $$$ n $$$ flag different coordinate $$$ a_1 a_2 \ldots a_n $$$ time two cars drive a flag speed car increase $$$ 1 $$$ meter per second find long take cars meet ( reach coordinate ) first line contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) : number test case first line test case contain two integers $$$ n $$$ $$$ l $$$ ( $$$ 1 \leq n \leq 100000 $$$ $$$ 1 \leq l \leq 1000000000 $$$ ) : number flag length road second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ increase order ( $$$ 1 \leq a_1 < a_2 < \ldots < a_n < l $$$ ) guarantee sum $$$ n $$$ among test case exceed $$$ 100000 $$$ test case print a single real number : time require cars meet answer consider correct absolute relative error exceed $$$ 10^ { -6 } $$$ formally answer $$$ a $$$ jury 's answer $$$ b $$$ answer consider correct $$$ \frac { |a - b| } { \max { ( 1 b ) } } \leq 10^ { -6 } $$$ first test case cars meet coordinate $$$ 5 $$$ first car coordinate $$$ 1 $$$ $$$ 1 $$$ second speed increase $$$ 1 $$$ equal $$$ 2 $$$ meter per second $$$ 2 $$$ second coordinate $$$ 5 $$$ , coordinate $$$ 5 $$$ $$$ 3 $$$ second second car coordinate $$$ 9 $$$ $$$ 1 $$$ second speed increase $$$ 1 $$$ equal $$$ 2 $$$ meter per second $$$ 2 $$$ second coordinate $$$ 5 $$$ , coordinate $$$ 5 $$$ $$$ 3 $$$ second second test case $$$ 1 $$$ second first car coordinate $$$ 1 $$$ speed equal $$$ 2 $$$ meter per second second car coordinate $$$ 9 $$$ speed equal $$$ 1 $$$ meter per second , meet $$$ \frac { 9 - 1 } { 2 + 1 } = \frac { 8 } { 3 } $$$ second , answer equal $$$ 1 + \frac { 8 } { 3 } = \frac { 11 } { 3 } $$$","['dp', 'implementation', 'math']",1500.0
1396/C,ziota find a video game call ` ` monster invaders '' similar every shoot rpg game ` ` monster invaders '' involve kill monsters boss gun sake simplicity consider two different type monsters three different type gun namely two type monsters : three type gun : gun initially load ziota reload 1 gun a time level game consider array $$$ a_1 a_2 \ldots a_n $$$ $$$ i $$$ -th stage $$$ a_i $$$ normal monsters 1 boss due nature game ziota use pistol ( first type gun ) <unknown> ( third type gun ) shoot boss kill $$$ a_i $$$ normal monsters ziota damage boss kill immediately force move current level arbitrary adjacent level ( adjacent level level $$$ i $$$ $$$ ( 1 < i < n ) $$$ level $$$ i - 1 $$$ $$$ i + 1 $$$ adjacent level level $$$ 1 $$$ level $$$ 2 $$$ adjacent level level $$$ n $$$ level $$$ n - 1 $$$ ) ziota also choose move adjacent level time move adjacent level manage portals $$$ d $$$ teleportation time order disrupt space - time <unknown> within game strictly forbid reload shoot monsters teleportation ziota start game level 1 . objective game rather simple kill boss level curious minimum time finish game ( assume take time shoot monsters a load gun ziota infinite ammo three gun ) please help find value first line input contain five integers separate single space : $$$ n $$$ $$$ ( 2 \le n \le 1000000 ) $$$ — number stag $$$ r_1 r_2 r_3 $$$ $$$ ( 1 \le r_1 \le r_2 \le r_3 \le 1000000000 ) $$$ — reload time three gun respectively $$$ d $$$ $$$ ( 1 \le d \le 1000000000 ) $$$ — time move adjacent level second line input contain $$$ n $$$ integers separate single space $$$ a_1 a_2 \dots a_n $$$ $$$ ( 1 \le a_i \le 1000000 1 \le i \le n ) $$$ print one integer minimum time finish game first test case optimal strategy : note finish level $$$ n $$$ boss kill,"['dp', 'greedy', 'implementation']",2300.0
1393/B,year equestria a year plenty applejack decide build new apple storages accord advice farm designers choose build two storages non - zero area : one shape a square another one shape a rectangle ( possibly a square well ) applejack build storages use plank go spend exactly one plank side storage get plank friend 's company initially company storehouse $$$ n $$$ plank applejack know lengths company keep work receive order order plank applejack 's friend provide information operation convenience give information accord follow format : applejack still unsure go order plank want know order plank build rectangular square storages every event storehouse applejack busy collect apples completely time calculations ask help ! remind four side a square equal a rectangle two pair equal side first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) : initial amount plank company 's storehouse second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 100000 $$$ ) : lengths plank third line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) : number events company next $$$ q $$$ line contain a description events a give format : type event ( a symbol $$$ + $$$ $$$ - $$$ ) give first go integer $$$ x $$$ ( $$$ 1 \le x \le 100000 $$$ ) every event company print ` ` yes '' two storages require shape build plank company 's set print ` ` '' otherwise print letter case ( upper lower ) second event applejack build a rectangular storage use plank lengths $$$ 1 $$$ $$$ 2 $$$ $$$ 1 $$$ $$$ 2 $$$ a square storage use plank lengths $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$ sixth event applejack build a rectangular storage use plank lengths $$$ 2 $$$ $$$ 2 $$$ $$$ 2 $$$ $$$ 2 $$$ a square storage use plank lengths $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$,"['constructive algorithms', 'data structures', 'greedy', 'implementation']",1400.0
1392/B,stick home ray become extremely bore pass time ask lord omkar use time bend power : infinity clock ! however lord omkar listen mortals solve follow problem : give array $$$ a $$$ $$$ n $$$ integers also give integer $$$ k $$$ lord omkar want $$$ k $$$ operations array define one operation follow : goal predict content array $$$ k $$$ operations please help ray determine final sequence look like ! test contain multiple test case first line contain number case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq n \leq 2 \cdot 100000 1 \leq k \leq 10^ { 18 } $$$ ) – length array number operations perform second line test case contain $$$ n $$$ integers $$$ a _ { 1 } a _ { 2 } ... a _ { n } $$$ $$$ ( -1000000000 \leq a _ { i } \leq 1000000000 ) $$$ – initial content array guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ case print final version array $$$ a $$$ $$$ k $$$ operations describe first test case array change follow : initially array $$$ [ -199 192 ] $$$ $$$ d = 192 $$$ operation array become $$$ [ <unknown> ( -199 ) <unknown> ] = [ 391 0 ] $$$,"['implementation', 'math']",800.0
1391/D,"a binary matrix call good every even length square sub - matrix odd number ones give a binary matrix $$$ a $$$ consist $$$ n $$$ row $$$ m $$$ columns determine minimum number cells need change make good report way make good term usual mean — refer note section formal definitions first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n \leq m \leq 1000000 $$$ $$$ n\cdot m \leq 1000000 $$$ ) — number row columns $$$ a $$$ respectively follow $$$ n $$$ line contain $$$ m $$$ character one 0 1 . $$$ j $$$ -th character $$$ i $$$ -th line 1 $$$ a _ { i j } = 1 $$$ similarly $$$ j $$$ -th character $$$ i $$$ -th line 0 $$$ a _ { i j } = 0 $$$ output minimum number cells need change make $$$ a $$$ good output $$$ -1 $$$ 's possible first case change $$$ a _ { 1,1 } $$$ $$$ 0 $$$ $$$ a _ { 2,2 } $$$ $$$ 1 $$$ enough verify way make matrix second case good definitions —","['brute force', 'constructive algorithms', 'dp', 'greedy', 'implementation']",2000.0
1385/D,give a string $$$ s [ 1 \dots n ] $$$ consist lowercase latin letter guarantee $$$ n = 2^k $$$ integer $$$ k \ge 0 $$$ string $$$ s [ 1 \dots n ] $$$ call $$$ c $$$ -good least one follow three condition satisfy : example : ` ` aabc '' ' a'-good ` ` <unknown> '' ' <unknown> one move choose one index $$$ i $$$ $$$ 1 $$$ $$$ n $$$ replace $$$ s_i $$$ lowercase latin letter ( character ' a ' ' z ' ) task find minimum number move require obtain ' a'-good string $$$ s $$$ ( i.e $$$ c $$$ -good string $$$ c= $$$ ' a ' ) guarantee answer always exist answer $$$ t $$$ independent test case another example ' a'-good string follow consider string $$$ s = $$$ ` ` <unknown> '' ' a'-good string : first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 20000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le <unknown> $$$ ) — length $$$ s $$$ guarantee $$$ n = 2^k $$$ integer $$$ k \ge 0 $$$ second line test case contain string $$$ s $$$ consist $$$ n $$$ lowercase latin letter guarantee sum $$$ n $$$ exceed $$$ 200000 $$$ ( $$$ \sum n \le 200000 $$$ ) test case print answer — minimum number move require obtain ' a'-good string $$$ s $$$ ( i.e $$$ c $$$ -good string $$$ c = $$$ ' a ' ) guarantee answer exist,"['brute force', 'dp', 'implementation']",1500.0
1381/C,"game mastermind two players — alice bob alice a secret code bob try guess , a code define a sequence $$$ n $$$ color exactly $$$ n+1 $$$ color entire universe number $$$ 1 $$$ $$$ n+1 $$$ inclusive bob guess a code alice tell information good a guess form two integers $$$ x $$$ $$$ y $$$ first integer $$$ x $$$ number indices bob 's guess correctly match alice 's code second integer $$$ y $$$ size intersection two cod multisets , bob change order color guess $$$ y $$$ maximum number indices could get correct example suppose $$$ n=5 $$$ alice 's code $$$ [ <unknown> ] $$$ bob 's guess $$$ [ <unknown> ] $$$ indices $$$ 1 $$$ $$$ 2 $$$ color equal indices equal $$$ x=2 $$$ two cod four color $$$ <unknown> $$$ common $$$ y=4 $$$ give bob 's guess two value $$$ x $$$ $$$ y $$$ find one possibility alice 's code value $$$ x $$$ $$$ y $$$ correct ? first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 1000 $$$ ) — number test case next $$$ 2 t $$$ line contain descriptions test case first line test case contain three integers $$$ n x y $$$ ( $$$ 1\le n\le 100000 0\le x\le y\le n $$$ ) — length cod two value alice respond second line test case contain $$$ n $$$ integers $$$ b_1 \ldots b_n $$$ ( $$$ 1\le b_i\le n+1 $$$ ) — bob 's guess $$$ b_i $$$ $$$ i $$$ -th color guess guarantee sum $$$ n $$$ across test case exceed $$$ 100000 $$$ test case first line output ` ` yes '' a solution ` ` '' possible secret code consistent describe situation print character case ( upper lower ) answer ` ` yes '' next line output $$$ n $$$ integers $$$ a_1 \ldots a_n $$$ ( $$$ 1\le a_i\le n+1 $$$ ) — alice 's secret code $$$ a_i $$$ $$$ i $$$ -th color code multiple solutions output first test case describe statement second test case $$$ x=3 $$$ color equal indices $$$ 2,4,5 $$$ $$$ y=4 $$$ share color $$$ 1,1,1,2 $$$ third test case $$$ x=0 $$$ index color $$$ y=4 $$$ share color $$$ <unknown> $$$ fourth test case prove solution exist","['constructive algorithms', 'greedy', 'implementation']",2500.0
1365/F,ayush ashish vivek busy prepare a new problem next codeforces round need help check test case valid test case consist integer $$$ n $$$ two array $$$ a $$$ $$$ b $$$ size $$$ n $$$ ( possibly zero ) operations describe array $$$ a $$$ transform array $$$ b $$$ input say valid otherwise invalid operation array $$$ a $$$ : example array $$$ a $$$ initially $$$ \ { 1 2 3 4 5 6\ } $$$ perform operation $$$ k = 2 $$$ transform $$$ \ { 5 6 3 4 1 2\ } $$$ give set test case help determine one valid invalid first line contain one integer $$$ t $$$ $$$ ( 1 \le t \le 500 ) $$$ — number test case description test case follow first line test case contain a single integer $$$ n $$$ $$$ ( 1 \le n \le 500 ) $$$ — size array second line test case contain $$$ n $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_n $$$ $$$ ( 1 \le a_i \le 1000000000 ) $$$ — elements array $$$ a $$$ third line test case contain $$$ n $$$ integers $$$ b_1 $$$ $$$ b_2 $$$ ... $$$ b_n $$$ $$$ ( 1 \le b_i \le 1000000000 ) $$$ — elements array $$$ b $$$ test case print ` ` yes '' give input valid otherwise print ` ` '' may print answer case first test case swap prefix $$$ a [ 1:1 ] $$$ suffix $$$ a [ 2:2 ] $$$ get $$$ a= [ 2 1 ] $$$ second test case $$$ a $$$ already equal $$$ b $$$ third test case impossible since obtain $$$ 3 $$$ $$$ a $$$ fourth test case first swap prefix $$$ a [ 1:1 ] $$$ suffix $$$ a [ 4:4 ] $$$ obtain $$$ a= [ 2 2 3 1 ] $$$ swap prefix $$$ a [ 1:2 ] $$$ suffix $$$ a [ 3:4 ] $$$ obtain $$$ a= [ 3 1 2 2 ] $$$ fifth test case impossible convert $$$ a $$$ $$$ b $$$,"['constructive algorithms', 'implementation']",2100.0
1365/C,mysterious disappearance ashish two favourite disciples ishika hriday leave one half a secret message message represent a permutation size $$$ n $$$ let 's call $$$ a $$$ $$$ b $$$ note a permutation $$$ n $$$ elements a sequence number $$$ a_1 a_2 \ldots a_n $$$ every number $$$ 1 $$$ $$$ n $$$ appear exactly message decode arrangement sequence $$$ a $$$ $$$ b $$$ number match pair elements maximum a pair elements $$$ a_i $$$ $$$ b_j $$$ say match : two disciples allow perform follow operation number time : a single cyclic shift leave permutation $$$ c $$$ operation set $$$ c_1 : = c_2 c_2 : = c_3 \ldots c_n : = c_1 $$$ simultaneously <unknown> a single cyclic shift right permutation $$$ c $$$ operation set $$$ c_1 : = c_n c_2 : = c_1 \ldots c_n : = c _ { n-1 } $$$ simultaneously help ishika hriday find maximum number pair elements match perform operation ( possibly zero ) number time first line input contain a single integer $$$ n $$$ $$$ ( 1 \le n \le 2 \cdot 100000 ) $$$ — size array second line contain $$$ n $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_n $$$ $$$ ( 1 \le a_i \le n ) $$$ — elements first permutation third line contain $$$ n $$$ integers $$$ b_1 $$$ $$$ b_2 $$$ ... $$$ b_n $$$ $$$ ( 1 \le b_i \le n ) $$$ — elements second permutation print maximum number match pair elements perform operations ( possibly zero ) time first case : $$$ b $$$ shift right $$$ k = 1 $$$ result permutations $$$ \ { 1 2 3 4 5\ } $$$ $$$ \ { 1 2 3 4 5\ } $$$ second case : operation require possible rotations $$$ a $$$ $$$ b $$$ number match pair wo n't exceed $$$ 1 $$$ third case : $$$ b $$$ shift leave $$$ k = 1 $$$ result permutations $$$ \ { 1 3 2 4\ } $$$ $$$ \ { 2 3 1 4\ } $$$ position $$$ 2 $$$ $$$ 4 $$$ match pair elements possible rotations $$$ a $$$ $$$ b $$$ number match pair wo n't exceed $$$ 2 $$$,"['constructive algorithms', 'data structures', 'greedy', 'implementation']",1400.0
1365/A,ashish vivek play a game a matrix consist $$$ n $$$ row $$$ m $$$ columns take turn claim cells unclaimed cells represent $$$ 0 $$$ claim cells represent $$$ 1 $$$ initial state matrix give claim cells initial state turn a player must claim a cell a cell may claim unclaimed share a row column already claim cells a player unable make a move lose game end ashish vivek take turn move ashish go first determine winner game play optimally optimal play two players mean players choose best possible strategy achieve best possible outcome first line consist a single integer $$$ t $$$ $$$ ( 1 \le t \le 50 ) $$$ — number test case description test case follow first line test case consist two space - separated integers $$$ n $$$ $$$ m $$$ $$$ ( 1 \le n m \le 50 ) $$$ — number row columns matrix follow $$$ n $$$ line consist $$$ m $$$ integers $$$ j $$$ -th integer $$$ i $$$ -th line denote $$$ a _ { i j } $$$ $$$ ( a _ { i j } \in \ { 0 1\ } ) $$$ test case ashish win game print ` ` ashish '' otherwise print ` ` vivek '' ( without quote ) first case : one possible scenario could : ashish claim cell $$$ ( 1 1 ) $$$ vivek claim cell $$$ ( 2 2 ) $$$ ashish neither claim cell $$$ ( 1 2 ) $$$ cell $$$ ( 2 1 ) $$$ cells $$$ ( 1 1 ) $$$ $$$ ( 2 2 ) $$$ already claim thus ashish lose show matter ashish play case vivek win second case : ashish claim cell $$$ ( 1 1 ) $$$ cell claim first move vivek move leave third case : ashish make a move vivek win fourth case : ashish claim cell $$$ ( 2 3 ) $$$ vivek move leave,"['greedy', 'implementation']",1100.0
1360/E,polygon best platform develop problems also a square matrix side $$$ n $$$ initially fill character 0 . polygon military train hold soldier place a cannon cell first row a cannon leave cell first column thus exactly $$$ 2n $$$ cannon place cannon shoot character 1 . moment time one cannon shoot a 1 fly a cannon fly forward ( direction shoot ) collide a polygon border another 1 . take cell collision remain take a look examples better understand formally : example consider follow sequence shots : 1 . shoot cannon row $$$ 2 $$$ 2 . shoot cannon row $$$ 2 $$$ 3 . shoot cannon column $$$ 3 $$$ a report military train desk report a square matrix side length $$$ n $$$ consist 0 1 . wonder train actually happen word a sequence shots train get give matrix ? cannon make arbitrary number shots train cell polygon contain 0 . first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case $$$ t $$$ test case follow test case start a line contain integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — size polygon follow $$$ n $$$ line length $$$ n $$$ consist 0 1 — polygon matrix train total area matrices test case one test exceed $$$ 100000 $$$ test case print : letter word yes print case first test case explain statement answer second test case since a 1 a cell ( $$$ 1 1 $$$ ) fly cannon would continue flight,"['dp', 'implementation']",1300.0
1358/F,oh ! coronavirus catch 're sit a dark <unknown> tie legs ( hand ) a delicious cookie a laptop front ideal development environment open coronavirus convince solve follow problem give two array $$$ a $$$ $$$ b $$$ size $$$ n $$$ operations two type array $$$ a $$$ : need understand get array $$$ b $$$ array $$$ a $$$ possible restore order operations minimize number operations second type fortunately coronavirus good today allow restore action minimum number second type operations $$$ 2\cdot 100000 $$$ coronavirus <unknown> restore answer total number operations exceed $$$ 5\cdot 100000 $$$ solve problem get cookie coronavirus extend quarantine five years make whole economy collapse ! first line contain a single integer $$$ n $$$ ( $$$ 1\le n \le 2\cdot 100000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 10 ^ { 12 } $$$ ) third line contain $$$ n $$$ integers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1 \le b_i \le 10 ^ { 12 } $$$ ) get $$$ b $$$ $$$ a $$$ array print ` ` impossible '' ( without quote ) a single line minimum number operations second type exceed $$$ 2\cdot 100000 $$$ print ` ` big '' ( without quote ) second line print number operations second type need apply get array $$$ b $$$ $$$ a $$$ otherwise first line print ` ` small '' ( without quote ) second line print total number operations first second type $$$ m \le 5\cdot 100000 $$$ ( guarantee case a sequence action ) third line print a line length $$$ m $$$ consist character ' r '' ' p ' ( without quote ) $$$ i $$$ -th character ' r ' $$$ i $$$ -th action first type ' p ' otherwise several sequence print print character uppercase lowercase first example array $$$ a $$$ $$$ b $$$ already equal number require operations $$$ = 0 $$$ second example need replace $$$ a $$$ prefix sum $$$ 299999 $$$ time reverse array since $$$ 299999 > 2\cdot 100000 $$$ need restore answer fourth example get $$$ b $$$ $$$ a $$$,"['constructive algorithms', 'greedy', 'implementation']",2700.0
1354/B,give a string $$$ s $$$ character either 1 2 3 . choose shortest contiguous substring $$$ s $$$ contain three character least a contiguous substring string $$$ s $$$ a string obtain $$$ s $$$ remove ( possibly zero ) character begin $$$ s $$$ ( possibly zero ) character end $$$ s $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 20000 $$$ ) — number test case test case consist one line contain string $$$ s $$$ ( $$$ 1 \le |s| \le 200000 $$$ ) guarantee character $$$ s $$$ either 1 2 3 . sum lengths string test case exceed $$$ 200000 $$$ test case print one integer — length shortest contiguous substring $$$ s $$$ contain three type character least substring print $$$ 0 $$$ instead consider example test : first test case substring 123 use second test case substring <unknown> use third test case substring 1223 use fourth test case substring <unknown> use fifth test case character 3 $$$ s $$$ sixth test case character 1 $$$ s $$$ seventh test case substring <unknown> use,"['dp', 'implementation']",1200.0
1352/D,"$$$ n $$$ candy a row number leave right $$$ 1 $$$ $$$ n $$$ size $$$ i $$$ -th candy $$$ a_i $$$ alice bob play interest tasty game : eat candy alice eat candy leave right bob — right leave game end candy eat process consist move a move player eat one sweets her / his side ( alice eat leave bob — right ) alice make first move first move eat $$$ 1 $$$ candy ( size $$$ a_1 $$$ ) , successive move players alternate — bob make second move alice bob move a player count total size candy eat current move number become strictly greater total size candy eat player previous move current player stop eat move end word a move a player eat smallest possible number candy sum size candy eat move strictly greater sum size candy player eat previous move enough candy make a move way player eat remain candy game end example $$$ <unknown> $$$ $$$ a= [ <unknown> ] $$$ : print number move game two number : first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 5000 $$$ ) — number test case input follow descriptions $$$ t $$$ test case test case consist two line first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — number candy second line contain a sequence integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000 $$$ ) — size candy order arrange leave right guarantee sum value $$$ n $$$ set input data a test exceed $$$ 2\cdot100000 $$$ set input data print three integers — number move game require value $$$ a $$$ $$$ b $$$",['implementation'],1300.0
1351/B,vasya claim a paper square cut two rectangular part use one vertical horizontal cut vasya inform dimension two rectangular part need check whether vasya originally a square word check possible make a square use two give rectangles first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case input $$$ t $$$ test case follow test case give two line first line contain two integers $$$ a_1 $$$ $$$ b_1 $$$ ( $$$ 1 \le a_1 b_1 \le 100 $$$ ) — dimension first one obtain cut rectangle size give random order ( know number width number length ) second line contain two integers $$$ a_2 $$$ $$$ b_2 $$$ ( $$$ 1 \le a_2 b_2 \le 100 $$$ ) — dimension second obtain cut rectangle size give random order ( know number width number length ) print $$$ t $$$ answer a string ` ` yes '' ( case a positive answer ) ` ` '' ( case a negative answer ) letter word print case ( upper lower ),"['brute force', 'implementation', 'math']",900.0
1343/F,guess a permutation $$$ p $$$ consist $$$ n $$$ integers permutation length $$$ n $$$ array length $$$ n $$$ element $$$ 1 $$$ $$$ n $$$ appear exactly permutation a secret position $$$ r $$$ $$$ 2 $$$ $$$ n $$$ choose index $$$ l $$$ ( $$$ l < r $$$ ) give segment $$$ p_l p _ { l + 1 } \dots p_r $$$ sort order ( i.e rearrange elements segment a way elements segment sort ) thus give exactly $$$ n-1 $$$ segment initial permutation elements inside segment sort segment give random order example secret permutation $$$ p= [ 3 1 4 6 2 5 ] $$$ possible give set segment : task find suitable permutation ( i.e permutation correspond give input data ) guarantee input data correspond permutation ( i.e permutation exist ) answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 2 \le n \le 200 $$$ ) — length permutation next $$$ n-1 $$$ line describe give segment $$$ i $$$ -th line contain description $$$ i $$$ -th segment line start integer $$$ k_i $$$ ( $$$ 2 \le k_i \le n $$$ ) — length $$$ i $$$ -th segment $$$ k_i $$$ integers follow integers a line distinct sort ascend order $$$ 1 $$$ $$$ n $$$ inclusive guarantee require $$$ p $$$ exist test case also guarantee sum $$$ n $$$ test case exceed $$$ 200 $$$ ( $$$ \sum n \le 200 $$$ ) test case print answer : $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 1 \le p_i \le n $$$ $$$ p_i $$$ distinct ) — suitable permutation ( i.e permutation correspond test case input ),"['brute force', 'constructive algorithms', 'data structures', 'greedy', 'implementation']",2400.0
1335/D,give a correct solution sudoku puzzle n't know sudoku read picture show correct sudoku solution : block border bold black color task change $$$ 9 $$$ elements field ( i.e choose $$$ 1 \le i j \le 9 $$$ change number position $$$ ( i j ) $$$ number range $$$ [ 1 ; 9 ] $$$ ) make anti - sudoku anti - sudoku $$$ 9 \times 9 $$$ field : guarantee answer exist answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case $$$ t $$$ test case follow test case consist $$$ 9 $$$ line line consist $$$ 9 $$$ character $$$ 1 $$$ $$$ 9 $$$ without whitespaces — correct solution sudoku puzzle test case print answer — initial field $$$ 9 $$$ change elements obtain field anti - sudoku several solutions print guarantee answer exist,"['constructive algorithms', 'implementation']",1300.0
1335/C,"$$$ n $$$ students control compose exactly two team consist subset students student skill $$$ i $$$ -th student skill denote integer $$$ a_i $$$ ( different students skills ) , team firstly two team size two constraints : note permissible student first team skill a student second team consider examples ( skills give ) : task find maximum possible size $$$ x $$$ possible compose a valid pair team team size $$$ x $$$ ( skills first team need unique skills second team ) a student part one team answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number students second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) $$$ a_i $$$ skill $$$ i $$$ -th student different students skills guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ ( $$$ \sum n \le 200000 $$$ ) test case print answer — maximum possible size $$$ x $$$ possible compose a valid pair team team size $$$ x $$$ first test case example possible construct two team size $$$ 3 $$$ : first team $$$ [ 1 2 4 ] $$$ second team $$$ [ 4 4 4 ] $$$ note ways construct two valid team size $$$ 3 $$$","['greedy', 'implementation']",1100.0
1334/D,give a complete direct graph $$$ k_n $$$ $$$ n $$$ vertices : pair vertices $$$ u \neq v $$$ $$$ k_n $$$ direct edge $$$ ( u v ) $$$ $$$ ( v u ) $$$ ; self - loops find a cycle $$$ k_n $$$ visit every direct edge exactly ( allow revisit vertices ) write cycle a list $$$ n ( n - 1 ) + 1 $$$ vertices $$$ v_1 v_2 v_3 \dots v _ { n ( n - 1 ) - 1 } v _ { n ( n - 1 ) } v _ { n ( n - 1 ) + 1 } = v_1 $$$ — a visit order $$$ ( v_i v _ { i + 1 } ) $$$ occur exactly find lexicographically smallest cycle 's hard prove cycle always exist since answer large print $$$ [ l r ] $$$ segment word $$$ v_l v _ { l + 1 } \dots v_r $$$ first line contain single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case next $$$ t $$$ line contain test case — one per line first line test case contain three integers $$$ n $$$ $$$ l $$$ $$$ r $$$ ( $$$ 2 \le n \le 100000 $$$ $$$ 1 \le l \le r \le n ( n - 1 ) + 1 $$$ $$$ r - l + 1 \le 100000 $$$ ) — number vertices $$$ k_n $$$ segment cycle print 's guarantee total sum $$$ n $$$ n't exceed $$$ 100000 $$$ total sum $$$ r - l + 1 $$$ n't exceed $$$ 100000 $$$ test case print segment $$$ v_l v _ { l + 1 } \dots v_r $$$ lexicographically smallest cycle visit every edge exactly second test case lexicographically minimum cycle look like : $$$ 1 2 1 3 2 3 1 $$$ third test case 's quite obvious cycle start end vertex $$$ 1 $$$,"['constructive algorithms', 'greedy', 'implementation']",1800.0
1333/B,", boris need help anton create a task time anton need solve follow problem : two array integers $$$ a $$$ $$$ b $$$ length $$$ n $$$ turn array $$$ a $$$ contain elements set $$$ \ { -1 0 1\ } $$$ anton perform follow sequence operations number time : example give array $$$ [ 1 -1 0 ] $$$ transform $$$ [ 1 -1 -1 ] $$$ $$$ [ 1 0 0 ] $$$ $$$ [ 1 -1 1 ] $$$ one operation anton want predict possible apply number ( zero ) operations array $$$ a $$$ become equal array $$$ b $$$ help ? test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ -1 \le a_i \le 1 $$$ ) — elements array $$$ a $$$ duplicate among elements third line test case contain $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ ( $$$ -1000000000 \le b_i \le 1000000000 $$$ ) — elements array $$$ b $$$ duplicate among elements guarantee sum $$$ n $$$ test case n't exceed $$$ 100000 $$$ test case output one line contain ` ` yes '' 's possible make array $$$ a $$$ $$$ b $$$ equal perform describe operations ` ` '' 's impossible print letter case ( upper lower ) first test - case choose $$$ ( i j ) = ( 2 3 ) $$$ twice choose $$$ ( i j ) = ( 1 2 ) $$$ twice operations transform $$$ [ 1 -1 0 ] \to [ 1 -1 -2 ] \to [ 1 1 -2 ] $$$ second test case ca n't make equal number second position third test case choose $$$ ( i j ) = ( 1 2 ) $$$ $$$ 41 $$$ time fourth test case last <unknown> case impossible make array $$$ a $$$ equal array $$$ b $$$","['greedy', 'implementation']",1100.0
1330/B,"sequence $$$ m $$$ integers call permutation contain integers $$$ 1 $$$ $$$ m $$$ exactly number $$$ m $$$ call length permutation dreamoon two permutations $$$ p_1 $$$ $$$ p_2 $$$ non - zero lengths $$$ l_1 $$$ $$$ l_2 $$$ dreamoon concatenate two permutations another sequence $$$ a $$$ length $$$ l_1 + l_2 $$$ first $$$ l_1 $$$ elements $$$ a $$$ permutation $$$ p_1 $$$ next $$$ l_2 $$$ elements $$$ a $$$ permutation $$$ p_2 $$$ give sequence $$$ a $$$ need find two permutations $$$ p_1 $$$ $$$ p_2 $$$ several possible ways restore find ( note also possible ways ) first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) denote number test case input test case contain two line first line contain one integer $$$ n $$$ ( $$$ 2 \leq n \leq 200\,000 $$$ ) : length $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq n-1 $$$ ) total sum $$$ n $$$ less $$$ 200\,000 $$$ test case first line output contain one integer $$$ k $$$ : number ways divide $$$ a $$$ permutations $$$ p_1 $$$ $$$ p_2 $$$ next $$$ k $$$ line contain two integers $$$ l_1 $$$ $$$ l_2 $$$ ( $$$ 1 \leq l_1 l_2 \leq n l_1 + l_2 = n $$$ ) denote possible divide $$$ a $$$ two permutations length $$$ l_1 $$$ $$$ l_2 $$$ ( $$$ p_1 $$$ first $$$ l_1 $$$ elements $$$ a $$$ $$$ p_2 $$$ last $$$ l_2 $$$ elements $$$ a $$$ ) print solutions order first example two possible ways divide $$$ a $$$ permutations $$$ \ { 1\ } + \ { 4 3 2 1\ } $$$ $$$ \ { <unknown> } + \ { 1\ } $$$ second example way divide $$$ a $$$ permutations $$$ \ { <unknown> } + \ { <unknown> } $$$ third example possible ways","['implementation', 'math']",1400.0
1325/B,"ehab array $$$ a $$$ length $$$ n $$$ enough free time make a new array consist $$$ n $$$ copy old array write back - to - back length new array 's longest increase subsequence ? a sequence $$$ a $$$ a subsequence array $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) elements longest increase subsequence array longest subsequence elements order strictly increase order first line contain integer $$$ t $$$ — number test case need solve description test case follow first line test case contain integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number elements array $$$ a $$$ second line contain $$$ n $$$ space - separated integers $$$ a_1 $$$ $$$ a_2 $$$ $$$ \ldots $$$ $$$ a _ { n } $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — elements array $$$ a $$$ sum $$$ n $$$ across test case n't exceed $$$ 100000 $$$ testcase output length longest increase subsequence $$$ a $$$ concatenate $$$ n $$$ time first sample new array $$$ [ 3,2 \textbf { 1 } , 3 \textbf { 2 } , 1 \textbf { 3 } , 2,1 ] $$$ longest increase subsequence mark bold second sample longest increase subsequence $$$ [ <unknown> ] $$$","['greedy', 'implementation']",800.0
1323/A,give array $$$ a $$$ consist $$$ n $$$ positive integers find a non - empty subset elements sum even ( i.e divisible $$$ 2 $$$ ) determine subset give array require subset may contain equal value first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) number test case solve descriptions $$$ t $$$ test case follow a description test case consist two line first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100 $$$ ) length array $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 100 $$$ ) elements $$$ a $$$ give array $$$ a $$$ contain equal value ( duplicate ) test case output $$$ -1 $$$ subset elements otherwise output positive integer $$$ k $$$ number elements require subset output $$$ k $$$ distinct integers ( $$$ 1 \leq p_i \leq n $$$ ) index choose elements multiple solutions output three test case example first test case choose subset consist second element sum $$$ 4 $$$ even second test case one non - empty subset elements consist first element however sum odd solution third test case subset consist array 's elements even sum,"['brute force', 'dp', 'greedy', 'implementation']",800.0
1312/C,suppose perform follow algorithm array $$$ v_1 v_2 \dots v_n $$$ fill zero start follow operation apply array several time — $$$ i $$$ -th step ( $$$ 0 $$$ -indexed ) : choose algorithm would behave step stop question : make array $$$ v $$$ equal give array $$$ a $$$ ( $$$ v_j = a_j $$$ $$$ j $$$ ) step ? first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case next $$$ 2 t $$$ line contain test case — two line per test case first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 30 $$$ $$$ 2 \le k \le 100 $$$ ) — size array $$$ v $$$ $$$ a $$$ value $$$ k $$$ use algorithm second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 10^ { 16 } $$$ ) — array 'd like achieve test case print yes ( case insensitive ) achieve array $$$ a $$$ step ( case insensitive ) otherwise first test case stop algorithm $$$ 0 $$$ -th step n't choose position several time stop algorithm second test case add $$$ <unknown> $$$ $$$ v_1 $$$ stop algorithm third test case ca n't make two $$$ 1 $$$ array $$$ v $$$ fifth test case skip $$$ 9 ^ 0 $$$ $$$ 9 ^ 1 $$$ add $$$ 9 ^ 2 $$$ $$$ 9 ^ 3 $$$ $$$ v_3 $$$ skip $$$ 9 ^ 4 $$$ finally add $$$ 9 ^ 5 $$$ $$$ v_2 $$$,"['greedy', 'implementation', 'math']",1400.0
1311/A,give two positive integers $$$ a $$$ $$$ b $$$ one move change $$$ a $$$ follow way : perform many operations want choose number $$$ x $$$ $$$ y $$$ different move task find minimum number move require obtain $$$ b $$$ $$$ a $$$ guarantee always obtain $$$ b $$$ $$$ a $$$ answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case $$$ t $$$ test case follow test case give two space - separated integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a b \le 1000000000 $$$ ) test case print answer — minimum number move require obtain $$$ b $$$ $$$ a $$$ perform number move describe problem statement guarantee always obtain $$$ b $$$ $$$ a $$$ first test case add $$$ 1 $$$ second test case n't need anything third test case add $$$ 1 $$$ two time fourth test case subtract $$$ 4 $$$ add $$$ 1 $$$ fifth test case subtract $$$ 6 $$$,"['greedy', 'implementation', 'math']",800.0
1301/D,"bashar practice national program contest sit much front computer without physical movements eat a lot bashar become much <unknown> bashar go quit program national contest go become actor ( like father ) lose weight order lose weight bashar go run $$$ k $$$ kilometers bashar go run a place look like a grid $$$ n $$$ row $$$ m $$$ columns grid two one - way roads one - kilometer length pair adjacent side cells one road go first cell second one road go second cell first one , exactly $$$ ( 4 n m - 2n - 2 m ) $$$ roads let 's take example $$$ n = 3 $$$ $$$ m = 4 $$$ case $$$ 34 $$$ roads picture case ( arrows describe roads ) : bashar want run rule : bashar ask possible run rule possible tell run give $$$ a $$$ step since bashar ca n't remember many step $$$ a $$$ exceed $$$ 3000 $$$ every step give integer $$$ f $$$ a string move $$$ s $$$ length $$$ 4 $$$ mean repeat move string $$$ s $$$ $$$ f $$$ time perform step order print example step $$$ 2 $$$ rud $$$ 3 $$$ uul move go move rud $$$ + $$$ rud $$$ + $$$ uul $$$ + $$$ uul $$$ + $$$ uul $$$ = $$$ <unknown> help give a correct sequence move total distance run equal $$$ k $$$ kilometers say impossible ? line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \leq n m \leq 500 $$$ $$$ 1 \leq k \leq 10 ^ { 9 } $$$ ) number row number columns grid total distance bashar want run possible way run $$$ k $$$ kilometers print ` ` '' ( without quote ) otherwise print ` ` yes '' ( without quote ) first line answer ` ` yes '' second line print integer $$$ a $$$ ( $$$ 1 \leq a \leq 3000 $$$ ) — number step print $$$ a $$$ line describe step describe a step print integer $$$ f $$$ ( $$$ 1 \leq f \leq 10^ { 9 } $$$ ) a string move $$$ s $$$ length $$$ 4 $$$ every character $$$ s $$$ ' u ' 'd ' ' l ' ' r ' bashar start top - left cell make sure move exactly $$$ k $$$ move without visit road twice without go outside grid finish cell show possible run exactly $$$ k $$$ kilometers possible describe path output constraints move bashar go move first example : ` ` <unknown> '' possible run $$$ 1000000000 $$$ kilometers second example total length roads smaller bashar ca n't run road twice move bashar go move third example : ` ` <unknown> '' move bashar go move fifth example : ` ` <unknown> '' picture run ( roads way mark red number order run ) :","['constructive algorithms', 'implementation']",2000.0
1290/A,"$$$ n - 1 $$$ friends find array integers $$$ a_1 a_2 \dots a_n $$$ decide share follow way : $$$ n $$$ stand a line a particular order minute person front line choose either first last element array remove keep get line next person line continue process stand $$$ m $$$ -th position line process start may choose $$$ k $$$ different people line persuade always take either first last element array turn ( person choice necessarily equal people ) matter elements process start persuade people change choices people already persuade suppose 're choices optimally greatest integer $$$ x $$$ matter choices friends n't choose control element take array greater equal $$$ x $$$ ? please note friends n't control may choice arbitrarily necessarily take biggest element available input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case description test case follow first line test case contain three space - separated integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \le m \le n \le 3500 $$$ $$$ 0 \le k \le n - 1 $$$ ) — number elements array position line number people whose choices fix second line test case contain $$$ n $$$ positive integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 3500 $$$ test case print largest integer $$$ x $$$ guarantee obtain least $$$ x $$$ first test case optimal strategy force first person take last element second person take first element thus strategy guarantee end least $$$ 8 $$$ prove strategy guarantee end least $$$ 9 $$$ hence answer $$$ 8 $$$ second test case optimal strategy force first person take first element , worst case second third person take first element : end $$$ 4 $$$","['brute force', 'data structures', 'implementation']",1600.0
1286/F,defeat lord voldemort harry need destroy horcruxes first last horcrux array $$$ a $$$ $$$ n $$$ integers also need destroy array consider destroy elements zero destroy array harry perform two type operations : note $$$ x $$$ positive harry a hurry please help find minimum number operations require destroy array exterminate lord voldemort first line contain a single integer $$$ n $$$ — size array $$$ a $$$ ( $$$ 1 \le n \le 20 $$$ ) follow line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ — array elements ( $$$ -10^ { 15 } \le a_i \le 10^ { 15 } $$$ ) output a single integer — minimum number operations require destroy array $$$ a $$$ first example one apply operation first kind three time second example one apply operation second kind two time : first choose $$$ i = 2 j = 1 x = 4 $$$ transform array $$$ ( 0 -1 -2 ) $$$ choose $$$ i = 3 j = 2 x = -2 $$$ destroy array third example nothing do since array already destroy,"['brute force', 'constructive algorithms', 'dp', 'implementation', 'math']",3100.0
1272/B,recently buy a snow walk robot bring home suppose home a cell $$$ ( 0 0 ) $$$ infinite grid also sequence instructions robot write string $$$ s $$$ consist character ' l ' ' r ' ' u ' 'd ' robot cell $$$ ( x y ) $$$ right move one adjacent cells ( depend current instruction ) ' ve notice warn last page manual : robot visit cell ( except $$$ ( 0 0 ) $$$ ) twice break sequence instructions valid robot start cell $$$ ( 0 0 ) $$$ perform give instructions visit cell $$$ ( 0 0 ) $$$ two time end path cell $$$ ( 0 0 ) $$$ also cell $$$ ( 0 0 ) $$$ visit two time : begin end ( path empty visit ) example follow sequence instructions consider valid : ` ` ud '' ` ` rl '' ` ` <unknown> '' follow consider invalid : ` ` u '' ( endpoint $$$ ( 0 0 ) $$$ ) ` ` <unknown> '' ( cell $$$ ( 0 1 ) $$$ visit twice ) initial sequence instructions however might valid n't want robot break decide <unknown> follow way : remove ( possibly none ) instructions initial sequence instructions rearrange remain instructions wish turn robot move task remove instructions initial sequence possible rearrange remain ones sequence valid report valid sequence maximum length obtain note choose order remain instructions ( n't need minimize number swap similar metric ) answer $$$ q $$$ independent test case first line input contain one integer $$$ q $$$ ( $$$ 1 \le q \le 20000 $$$ ) — number test case next $$$ q $$$ line contain test case $$$ i $$$ -th test case give string $$$ s $$$ consist least $$$ 1 $$$ $$$ 100000 $$$ character ' l ' ' r ' ' u ' 'd ' — initial sequence instructions guarantee sum $$$ |s| $$$ ( $$$ |s| $$$ length $$$ s $$$ ) exceed $$$ 100000 $$$ test case ( $$$ \sum |s| \le 100000 $$$ ) test case print answer first line print maximum number remain instructions second line print valid sequence remain instructions $$$ t $$$ robot perform move perform leave right order print sequence several answer print answer $$$ 0 $$$ allow print empty line ( n't print ) two possible answer first test case : ` ` lr '' ` ` rl '' picture correspond second test case : another correct answer third test case : ` ` <unknown> '',"['constructive algorithms', 'greedy', 'implementation']",1200.0
1267/J,"berphone x almost ready release $$$ n $$$ applications <unknown> phone a category application characterize a genre a theme application ( like ` ` game '' ` ` business '' ` ` education '' ) categories give integers $$$ 1 $$$ $$$ n $$$ inclusive ; $$$ i $$$ -th application category $$$ c_i $$$ choose $$$ m $$$ — number screen $$$ s $$$ — size screen need fit $$$ n $$$ icons applications ( one icon represent one application ) meet follow requirements : task find minimal possible number screen $$$ m $$$ first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) — number test case input $$$ t $$$ test case follow first line test case contain integer $$$ n $$$ ( $$$ 1 \le n \le 2\cdot1000000 $$$ ) — number icons second line contain $$$ n $$$ integers $$$ c_1 c_2 \dots c_n $$$ ( $$$ 1 \le c_i \le n $$$ ) $$$ c_i $$$ category $$$ i $$$ -th application guarantee sum value $$$ n $$$ test case input exceed $$$ 2\cdot1000000 $$$ print $$$ t $$$ integers — answer give test case order follow input answer a test case integer $$$ m $$$ — minimum number screen $$$ n $$$ icons place satisfy give requirements first test case example icons place three screen size $$$ 4 $$$ : a screen $$$ 4 $$$ icons category $$$ 1 $$$ a screen $$$ 3 $$$ icons category $$$ 1 $$$ a screen $$$ 4 $$$ icons category $$$ 5 $$$","['greedy', 'implementation', 'math']",1800.0
1266/E,"bob play a game spaceship solitaire goal game build a spaceship order first need accumulate enough resources construction $$$ n $$$ type resources number $$$ 1 $$$ $$$ n $$$ bob need least $$$ a_i $$$ piece $$$ i $$$ -th resource build spaceship number $$$ a_i $$$ call goal resource $$$ i $$$ resource take $$$ 1 $$$ turn produce turn one resource produce however certain milestones speed production every milestone a triple $$$ ( s_j t_j u_j ) $$$ mean soon bob $$$ t_j $$$ units resource $$$ s_j $$$ receive one unit resource $$$ u_j $$$ free without need spend a turn possible get free resource allow bob claim reward another milestone way obtain a large number resources a single turn game construct a way never two milestones $$$ s_j $$$ $$$ t_j $$$ , award reach $$$ t_j $$$ units resource $$$ s_j $$$ one additional resource a bonus never award $$$ 0 $$$ resource neither reach goal $$$ a_i $$$ go past goal — formally every milestone $$$ 0 < t_j < a _ { s_j } $$$ a bonus reach certain amount a resource resource , $$$ s_j = u_j $$$ initially milestones process $$$ q $$$ update add remove modify a milestone every update output minimum number turn need finish game , accumulate least $$$ a_i $$$ $$$ i $$$ -th resource $$$ i \in [ 1 n ] $$$ first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — number type resources second line contain $$$ n $$$ space separate integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) $$$ i $$$ -th goal $$$ i $$$ -th resource third line contain a single integer $$$ q $$$ ( $$$ 1 \leq q \leq 100000 $$$ ) — number update game milestones $$$ q $$$ line follow $$$ j $$$ -th contain three space separate integers $$$ s_j $$$ $$$ t_j $$$ $$$ u_j $$$ ( $$$ 1 \leq s_j \leq n $$$ $$$ 1 \leq t_j < a _ { s_j } $$$ $$$ 0 \leq u_j \leq n $$$ ) triple perform follow action : output $$$ q $$$ line consist a single integer $$$ i $$$ -th represent answer $$$ i $$$ -th update first update optimal strategy follow first produce $$$ 2 $$$ give a free resource $$$ 1 $$$ , produce $$$ 2 $$$ twice $$$ 1 $$$ a total four turn second update optimal strategy produce $$$ 2 $$$ three time — first two time a single unit resource $$$ 1 $$$ also grant third update game follow final count resources $$$ [ 3 3 ] $$$ three turn need reach situation notice resource $$$ 1 $$$ goal use","['data structures', 'greedy', 'implementation']",2100.0
1263/E,development a text editor a hard problem need implement extra module bracket color text editor consist a line infinite length cursor point current character please note point one character ( a pair character ) thus point index character user move cursor leave right one position cursor already first ( leftmost ) position move leave initially cursor first ( leftmost ) character also user write a letter bracket ( either ( ) ) position cursor currently point a new character always overwrite old value position editor must check whether current line correct text text correct bracket form correct bracket sequence formally correct text ( ct ) must satisfy follow rule : examples correct texts : hello ( codeforces ) round ( ( i ) ( write ) ) <unknown> ( tor ) s ( ) examples incorrect texts : hello ) <unknown> ( round ) ( ( ) user use special command work editor command symbol must write execute command correspondence command character follow : a complete understand take a look first example illustrations note give a string contain character user enter bracket color module 's work command need : two pair bracket nest ( first second vice versa ) pair bracket paint different color two pair bracket nest paint different color example bracket sequence ( ) ( ( ) ) ( ) ( ) least number color $$$ 2 $$$ bracket sequence ( ( ) ( ( ) ( ) ) ( ) ) ( ( ) ) — $$$ 3 $$$ write a program print minimal number color process command first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 1000000 $$$ ) — number command second line contain $$$ s $$$ — a sequence command string $$$ s $$$ consist $$$ n $$$ character guarantee character a string valid command a single line print $$$ n $$$ integers $$$ i $$$ -th number : first example text editor take follow form :,"['data structures', 'implementation']",2100.0
1255/C,bob avid fan video game ` ` league leesins '' today celebrate league leesins world championship come end ! tournament consist $$$ n $$$ ( $$$ n \ge 5 $$$ ) team around world tournament start bob make a prediction rank team $$$ 1 $$$ -st $$$ n $$$ -th final compare prediction actual result find $$$ i $$$ -th team accord prediction end $$$ p_i $$$ -th position ( $$$ 1 \le p_i \le n $$$ $$$ p_i $$$ unique ) word $$$ p $$$ a permutation $$$ 1 2 \dots n $$$ bob 's favorite league player famous ` ` <unknown> '' decide write every $$$ 3 $$$ consecutive elements permutation $$$ p $$$ formally bob create array $$$ q $$$ $$$ n-2 $$$ triple $$$ q_i = ( p_i p _ { i+1 } p _ { i+2 } ) $$$ $$$ 1 \le i \le n-2 $$$ bob proud array show friend alice learn bob 's array alice declare could retrieve permutation $$$ p $$$ even bob rearrange elements $$$ q $$$ elements within triple course bob believe magic see alice 's respond example $$$ n = 5 $$$ $$$ p = [ 1 4 2 3 5 ] $$$ original array $$$ q $$$ $$$ [ ( 1 4 2 ) ( 4 2 3 ) ( 2 3 5 ) ] $$$ bob rearrange number within triple position triple get $$$ [ ( 4 3 2 ) ( 2 3 5 ) ( 4 1 2 ) ] $$$ note $$$ [ ( 1 4 2 ) ( 4 2 2 ) ( 3 3 5 ) ] $$$ a valid rearrangement $$$ q $$$ bob allow swap number belong different triple alice 's friend know sure alice try show decide save face give permutation $$$ p $$$ consistent array $$$ q $$$ give first line contain a single integer $$$ n $$$ ( $$$ 5 \le n \le 100000 $$$ ) — size permutation $$$ p $$$ $$$ i $$$ -th next $$$ n-2 $$$ line contain $$$ 3 $$$ integers $$$ q _ { i 1 } $$$ $$$ q _ { i 2 } $$$ $$$ q _ { i 3 } $$$ ( $$$ 1 \le q _ { i j } \le n $$$ ) — elements $$$ i $$$ -th triple rearrange ( shuffle ) array $$$ q_i $$$ random order remember number within triple rearrange also position triple rearrange guarantee least one permutation $$$ p $$$ consistent input print $$$ n $$$ distinct integers $$$ p_1 p_2 \ldots p_n $$$ ( $$$ 1 \le p_i \le n $$$ ) $$$ p $$$ consistent array $$$ q $$$ multiple answer print,"['constructive algorithms', 'implementation']",1600.0
1255/B,hanh live a share apartment $$$ n $$$ people ( include hanh ) live a private fridge $$$ n $$$ fridges secure several steel chain steel chain connect two different fridges protect a digital lock owner a fridge know <unknown> chain connect a fridge open chain connect unlock example a fridge chain connect $$$ n $$$ people open weight fridges $$$ a_1 a_2 \ldots a_n $$$ make a steel chain connect fridges $$$ u $$$ $$$ v $$$ pay $$$ a_u + a_v $$$ dollars note landlord allow create multiple chain connect pair fridges hanh 's apartment landlord ask create exactly $$$ m $$$ steel chain fridges private a fridge private among $$$ n $$$ people live apartment owner open ( i.e person act alone ) word fridge $$$ i $$$ private exist person $$$ j $$$ ( $$$ i \ne j $$$ ) person $$$ j $$$ open fridge $$$ i $$$ example picture fridges private hand $$$ n=2 $$$ fridges one chain ( connect ) fridges private ( fridges open owner also another person ) course landlord want minimize total cost steel chain fulfill request determine whether exist way make exactly $$$ m $$$ chain yes output solution minimize total cost test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10 $$$ ) descriptions test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n \le 1000 $$$ $$$ 1 \le m \le n $$$ ) — number people live hanh 's apartment number steel chain landlord require respectively second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 10000 $$$ ) — weight fridges test case : multiple answer print,['implementation'],1100.0
1252/C,"<unknown> a task find a route two point often appear many problems example a gps navigation software a driver query a suggest route a robot motion plan find a valid sequence movements task a simple maze solver find a valid path one point another point problem relate solve a maze maze consider problem form a matrix integers $$$ a $$$ $$$ n \times n $$$ value cell generate a give array $$$ r $$$ $$$ c $$$ $$$ n $$$ integers specifically value $$$ i^ { th } $$$ row $$$ j^ { th } $$$ column cell $$$ ( i j ) $$$ equal $$$ r_i + c_j $$$ note index problem $$$ 1 $$$ $$$ n $$$ a path maze define a sequence cells $$$ ( r_1 c_1 ) ( r_2 c_2 ) \dots ( r_k c_k ) $$$ $$$ |r_i - r _ { i+1 } | + <unknown> - c _ { i+1 } | = 1 $$$ $$$ 1 \le i < k $$$ word adjacent cell differ $$$ 1 $$$ row $$$ 1 $$$ column even path maze define a path cells path contain even number give a tuple $$$ \langle r_a c_a r_b c_b \rangle $$$ a query task determine whether exist even path cell $$$ ( r_a c_a ) $$$ cell $$$ ( r_b c_b ) $$$ simplify problem guarantee cell $$$ ( r_a c_a ) $$$ cell $$$ ( r_b c_b ) $$$ contain even number example let $$$ n = 5 $$$ $$$ r = \ { 6 2 7 8 3\ } $$$ $$$ c = \ { 3 4 8 5 1\ } $$$ follow figure depict matrix $$$ a $$$ $$$ 5 \times 5 $$$ generate give array $$$ r $$$ $$$ c $$$ let us consider several query : input begin a line contain two integers : $$$ n $$$ $$$ q $$$ ( $$$ 2 \le n \le 100\,000 $$$ ; $$$ 1 \le q \le 100\,000 $$$ ) represent size maze number query respectively next line contain $$$ n $$$ integers : $$$ r_i $$$ ( $$$ 0 \le r_i \le 1000000 $$$ ) represent array $$$ r $$$ next line contain $$$ n $$$ integers : $$$ c_i $$$ ( $$$ 0 \le c_i \le 1000000 $$$ ) represent array $$$ c $$$ next $$$ q $$$ line contain four integers : $$$ r_a $$$ $$$ c_a $$$ $$$ r_b $$$ $$$ c_b $$$ ( $$$ 1 \le r_a c_a r_b c_b \le n $$$ ) represent a query $$$ \langle r_a c_a r_b c_b \rangle $$$ guarantee $$$ ( r_a c_a ) $$$ $$$ ( r_b c_b ) $$$ two different cells maze contain even number query order input output a line a string ` ` yes '' ( without quote ) ` ` '' ( without quote ) whether exist even path cell $$$ ( r_a c_a ) $$$ cell $$$ ( r_b c_b ) $$$ explanation sample input / output # 1this example problem description","['data structures', 'implementation']",1600.0
1239/F,"<unknown> new adventure boot want a good deed discussion map backpack decide gift dora a connect graph a long search boot choose $$$ t $$$ graph 's variants dora might like however fox swiper want spoil plan swiper know dora able count $$$ 3 $$$ come a follow idea want steal non - empty set vertices dora wo n't notice loss decide steal non - empty set vertices deletion steal vertices edge adjacent every remain vertex would n't change 's degree modulo $$$ 3 $$$ degree a vertex number edge adjacent would ' ve suspicious steal vertices swiper need another plan boot sure crime allow however afraid wo n't able handle alone boot decide ask help please determine every graph 's variant whether swiper perform theft first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100\,000 $$$ ) — number graph variants first line variant contain integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 500\,000 $$$ $$$ 0 \le m \le 500\,000 $$$ ) number vertexes edge graph $$$ m $$$ line follow contain integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le n $$$ ) indices vertices connect a correspond edge 's guarantee graph connect n't contain multiple edge self - loops 's guarantee sum $$$ n $$$ variants $$$ 500\,000 $$$ sum $$$ m $$$ variants $$$ 500\,000 $$$ descriptions graph 's variants separate empty line variant : first line contain integer $$$ c $$$ ( $$$ 1 < c < n $$$ ) number vertices crook steal without dora notice loss next line print $$$ c $$$ distinct integers indices graph 's vertices arbitrary order case several correct ways steal vertices print please note 's require maximize number steal vertices picture show third variant example test set vertices crook steal denote bold",['implementation'],3400.0
1239/B,"a harder version problem version $$$ n \le 300\,000 $$$ vasya experience developer program competitions ' problems great mind time vasya face a creative crisis improve situation petya gift a string consist open close bracket petya believe beauty bracket string a number cyclical shift form a correct bracket sequence digress problems vasya decide select two position string ( necessarily distinct ) swap character locate position vasya apply operation exactly curious maximum possible beauty achieve way please help remind bracket sequence $$$ s $$$ call correct : example ` ` ( ( ) ( ) ) '' ` ` ( ) '' correct ` ` ) ( ` ` ` ` ( ) ) '' cyclical shift string $$$ s $$$ length $$$ n $$$ $$$ k $$$ ( $$$ 0 \leq k < n $$$ ) a string form a concatenation last $$$ k $$$ symbols string $$$ s $$$ first $$$ n - k $$$ symbols string $$$ s $$$ example cyclical shift string ` ` ( ( ) ) ( ) '' $$$ 2 $$$ equal ` ` ( ) ( ( ) ) '' cyclical shift $$$ i $$$ $$$ j $$$ consider different $$$ i \ne j $$$ first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 300\,000 $$$ ) length string second line contain a string consist exactly $$$ n $$$ character character either ` ` ( ` ` ` ` ) '' first line contain a single integer — largest beauty string achieve swap two character second line contain integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \leq l r \leq n $$$ ) — indices two character swap order maximize string 's beauty case several possible swap print first example swap $$$ 7 $$$ -th $$$ 8 $$$ -th character obtain a string ` ` ( ) ( ) ( ) ( ) ( ) '' cyclical shift $$$ 0 2 4 6 8 $$$ string form a correct bracket sequence second example swap $$$ 5 $$$ -th $$$ 10 $$$ -th character obtain a string ` ` ) ( ( ) ) ( ) ( ) ( ( ) '' cyclical shift $$$ 11 7 5 3 $$$ string form a correct bracket sequence third example swap two bracket result $$$ 0 $$$ cyclical shift correct bracket sequence",['implementation'],2500.0
1237/A,another codeforces round finish ! gather $$$ n $$$ participants accord result expect rat change participant $$$ i $$$ $$$ a_i $$$ rat change perfectly balance — sum equal $$$ 0 $$$ unfortunately due minor technical <unknown> round declare semi - rated mean rat change must divide two two condition though : help ? first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le <unknown> $$$ ) denote number participants next $$$ n $$$ line contain a single integer $$$ a_i $$$ ( $$$ <unknown> \le a_i \le <unknown> $$$ ) denote rat change $$$ i $$$ -th participant sum $$$ a_i $$$ equal $$$ 0 $$$ output $$$ n $$$ integers $$$ b_i $$$ denote modify rat change $$$ i $$$ -th participant order input $$$ i $$$ must true either $$$ b_i = \lfloor \frac { a_i } { 2 } \rfloor $$$ $$$ b_i = \lceil \frac { a_i } { 2 } \rceil $$$ sum $$$ b_i $$$ must equal $$$ 0 $$$ multiple solutions print show a solution exist valid input first example $$$ b_1 = 5 $$$ $$$ b_2 = -3 $$$ $$$ b_3 = -2 $$$ another correct solution second example $$$ 6 $$$ possible solutions one show example output,"['implementation', 'math']",1000.0
1236/D,"alice get a new doll days even walk ! alice build a maze doll want test maze a grid $$$ n $$$ row $$$ m $$$ columns $$$ k $$$ obstacles $$$ i $$$ -th cell $$$ ( x_i y_i ) $$$ mean cell intersection $$$ x_i $$$ -th row $$$ y_i $$$ -th column however doll clumsy ways walk straight turn right cell ( include start cell ) get a cell obstacle get maze formally exist $$$ 4 $$$ directions doll look : stand cell doll move cell direction look turn right turn right doll switch 's direction follow rule : $$$ 1 \to 2 $$$ $$$ 2 \to 3 $$$ $$$ 3 \to 4 $$$ $$$ 4 \to 1 $$$ stand one cell doll make one turn right alice control doll 's move put doll cell $$$ ( 1 1 ) $$$ ( upper - left cell maze ) initially doll look direction $$$ 1 $$$ along row first cell last want let doll walk across cells without obstacles exactly end place achieve ? first line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ separate space ( $$$ 1 \leq n m \leq 100000 0 \leq k \leq 100000 $$$ ) — size maze number obstacles next $$$ k $$$ line describe obstacles $$$ i $$$ -th line contain two integer number $$$ x_i $$$ $$$ y_i $$$ separate space ( $$$ 1 \leq x_i \leq n,1 \leq y_i \leq m $$$ ) describe position $$$ i $$$ -th obstacle guarantee two obstacles cell obstacle cell $$$ ( 1 1 ) $$$ print ' yes ' ( without quote ) doll walk across cells without obstacles exactly rule describe statement impossible walk across maze rule print ' no ' ( without quote ) picture maze describe first example : first example doll walk way :","['brute force', 'data structures', 'greedy', 'implementation']",2300.0
1236/C,order research $$$ n^2 $$$ labs build different heights a mountain let 's enumerate integers $$$ 1 $$$ $$$ n^2 $$$ lab number $$$ 1 $$$ lowest place lab number $$$ 2 $$$ second - lowest place $$$ \ldots $$$ lab number $$$ n^2 $$$ highest place transport water labs pip build every pair labs a pipe transport one unit water a time lab number $$$ u $$$ lab number $$$ v $$$ $$$ u > v $$$ labs need divide $$$ n $$$ group group contain exactly $$$ n $$$ labs labs different group transport water sum units water send a group $$$ a $$$ a group $$$ b $$$ equal number pair labs ( $$$ u v $$$ ) lab number $$$ u $$$ group $$$ a $$$ lab number $$$ v $$$ group $$$ b $$$ $$$ u > v $$$ let 's denote value $$$ f ( a b ) $$$ ( i.e $$$ f ( a b ) $$$ sum units water send a group $$$ a $$$ a group $$$ b $$$ ) example $$$ n=3 $$$ $$$ 3 $$$ group $$$ x $$$ $$$ y $$$ $$$ z $$$ : $$$ x = \ { 1 5 6\ } y = \ { 2 4 9\ } $$$ $$$ z = \ { 3 7 8\ } $$$ case value $$$ f $$$ equal : please divide labs $$$ n $$$ group size $$$ n $$$ value $$$ \min f ( a b ) $$$ possible pair group $$$ a $$$ $$$ b $$$ ( $$$ a \neq b $$$ ) maximal word divide labs $$$ n $$$ group size $$$ n $$$ minimum number sum units water transport a group $$$ a $$$ a group $$$ b $$$ every pair different group $$$ a $$$ $$$ b $$$ ( $$$ a \neq b $$$ ) big possible note example n't demonstrate optimal division demonstrate calculate value $$$ f $$$ division many optimal divisions find line contain one number $$$ n $$$ ( $$$ 2 \leq n \leq 300 $$$ ) output $$$ n $$$ line : $$$ i $$$ -th line print $$$ n $$$ number number labs $$$ i $$$ -th group order want multiple answer maximize minimum number sum units water transport one group another print first test divide $$$ 9 $$$ labs group $$$ \ { 2 8 5\ } \ { 9 3 4\ } \ { 7 6 1\ } $$$ first group second group transport $$$ 4 $$$ units water ( $$$ 8 \rightarrow 3 8 \rightarrow 4 5 \rightarrow 3 5 \rightarrow 4 $$$ ) first group third group transport $$$ 5 $$$ units water ( $$$ 2 \rightarrow 1 8 \rightarrow 7 8 \rightarrow 6 8 \rightarrow 1 5 \rightarrow 1 $$$ ) second group first group transport $$$ 5 $$$ units water ( $$$ 9 \rightarrow 2 9 \rightarrow 8 9 \rightarrow 5 3 \rightarrow 2 4 \rightarrow 2 $$$ ) second group third group transport $$$ 5 $$$ units water ( $$$ 9 \rightarrow 7 9 \rightarrow 6 9 \rightarrow 1 3 \rightarrow 1 4 \rightarrow 1 $$$ ) third group first group transport $$$ 4 $$$ units water ( $$$ 7 \rightarrow 2 7 \rightarrow 5 6 \rightarrow 2 6 \rightarrow 5 $$$ ) third group second group transport $$$ 4 $$$ units water ( $$$ 7 \rightarrow 3 7 \rightarrow 4 6 \rightarrow 3 6 \rightarrow 4 $$$ ) minimal number sum units water transport one group another equal $$$ 4 $$$ prove impossible make a better division,"['constructive algorithms', 'greedy', 'implementation']",1300.0
1228/A,two integers $$$ l $$$ $$$ r $$$ find integer $$$ x $$$ satisfy condition : multiple answer print first line contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le 10^ { 5 } $$$ ) answer exist print otherwise print $$$ -1 $$$ first example $$$ 123 $$$ one possible answer however $$$ 121 $$$ ca n't answer multiple $$$ 1 $$$ s different digits second example valid answer,"['brute force', 'implementation']",800.0
1225/B2,"difference easy hard versions constraints bertv channel every day broadcast one episode one $$$ k $$$ tv show know schedule next $$$ n $$$ days : a sequence integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le k $$$ ) $$$ a_i $$$ show episode show $$$ i $$$ -th day subscription show buy entire show ( i.e episodes ) show subscription buy separately many minimum subscriptions need buy order opportunity watch episodes purchase show $$$ d $$$ ( $$$ 1 \le d \le n $$$ ) days a row ? word want buy minimum number tv show segment $$$ d $$$ consecutive days episodes belong purchase show first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case input $$$ t $$$ test case descriptions follow first line test case contain three integers $$$ n k $$$ $$$ d $$$ ( $$$ 1 \le n \le 2\cdot100000 $$$ $$$ 1 \le k \le 1000000 $$$ $$$ 1 \le d \le n $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le k $$$ ) $$$ a_i $$$ show broadcast $$$ i $$$ -th day guarantee sum value ​​of $$$ n $$$ test case input exceed $$$ 2\cdot100000 $$$ print $$$ t $$$ integers — answer test case input order follow answer a test case minimum number tv show need purchase a subscription watch episodes purchase tv show bertv $$$ d $$$ consecutive days please note permissible able watch $$$ d $$$ days a row first test case opportunity watch show two consecutive days need buy a subscription show $$$ 1 $$$ show $$$ 2 $$$ answer two second test case buy a subscription show show find a segment three consecutive days consist episodes show third test case unique segment four days four different show need buy a subscription four show fourth test case buy subscriptions show $$$ 3,5,7,8,9 $$$ able watch show last eight days",['implementation'],1300.0
1219/G,bubble cup finals season farmer johnny bubble must harvest bubble bubble a rectangular bubblefield form $$$ n $$$ x $$$ m $$$ square parcel divide $$$ n $$$ row $$$ m $$$ columns parcel $$$ i^ { th } $$$ row $$$ j^ { th } $$$ column yield $$$ a _ { i j } $$$ bubble johnny bubble available a special self - <unknown> bubble harvester manually position begin a row column automatically harvest bubble row column harvester reach end row column stop must <unknown> harvester pass parcel number time collect bubble parcel johnny busy farmer available manually position harvester four time per day johnny also impatient want harvest many bubble possible first day please help johnny calculate maximum number bubble collect first day first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 $$$ $$$ \leq $$$ $$$ n $$$ $$$ m $$$ $$$ \leq $$$ $$$ n $$$ * $$$ m $$$ $$$ \leq $$$ $$$ 10^ { 5 } $$$ ) - bubblefield size next $$$ n $$$ line contain $$$ m $$$ integers $$$ j^ { th } $$$ element $$$ i^ { th } $$$ line $$$ a _ { i j } $$$ ( $$$ 0 $$$ $$$ \leq $$$ $$$ a _ { i j } $$$ $$$ \leq $$$ $$$ 10^ { 9 } $$$ ) — yield parcel locate $$$ i^ { th } $$$ row $$$ j^ { th } $$$ column output contain one integer number - maximum number bubble johnny harvest first day first example farmer johnny harvest bubble position harvester first second row second example one way johnny harvest maximum number bubble position harvester second row fourth row second column fourth column,['implementation'],2000.0
1219/C,alice become interest periods integer number say positive $$$ x $$$ integer number periodic length $$$ l $$$ exist positive integer number $$$ p $$$ $$$ l $$$ digits $$$ x $$$ write $$$ pppp … p $$$ example : $$$ x = <unknown> $$$ periodic number length $$$ l = 3 $$$ $$$ l = 9 $$$ $$$ x = <unknown> $$$ periodic number length $$$ l = 2 l = 4 $$$ $$$ l = 8 $$$ $$$ x = 12345 $$$ periodic number length $$$ l = 5 $$$ give positive period length $$$ l $$$ positive integer number $$$ a $$$ alice want find smallest integer number $$$ x $$$ strictly greater $$$ a $$$ periodic length l. first line contain one positive integer number $$$ l \ ( 1 \leq l \leq 100000 ) $$$ represent length period second line contain one positive integer number $$$ a \ ( 1 \leq a \leq 10^ { 100 000 } ) $$$ one positive integer number represent smallest positive number periodic length $$$ l $$$ greater $$$ a $$$ first example <unknown> smallest number greater 123456 write period l = 3 ( p = 124 ) second example <unknown> smallest number greater 12345 period l = 3 ( <unknown> ),"['implementation', 'strings']",1700.0
1211/F,polycarp really like write word ` ` kotlin '' write word several time a row without space example could write string like ` ` <unknown> '' polycarp slice ( cut ) write string $$$ n $$$ piece mix a result $$$ n $$$ string $$$ s_1 s_2 \dots s_n $$$ arrange right order concatenate ( join ) get a string like ` ` kotlinkotlin ... kotlin '' help polycarp find right order string $$$ s_1 s_2 \dots s_n $$$ write string order get word ` ` kotlin '' sequence word pay attention must use give string must use string first line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number polycarp 's string next line input contain $$$ n $$$ polycarp 's string total sum lengths n't exceed $$$ 3\cdot100000 $$$ 's guarantee right order arrangement string concatenate one string get non - empty sequence word ` ` kotlin '' print $$$ n $$$ different integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 1 \le p_i \le n $$$ ) $$$ p_i $$$ index string $$$ i $$$ -th a require concatenation word result concatenation $$$ s _ { p_1 } + s _ { p_2 } + <unknown> _ { p_n } $$$ must form ` ` kotlinkotlin ... kotlin '' many solutions print,"['implementation', 'strings']",2300.0
1209/B,a holiday season koala decorate house cool light ! own $$$ n $$$ light flash periodically take a quick glance koala realize light describe two parameters $$$ a_i $$$ $$$ b_i $$$ light parameters $$$ a_i $$$ $$$ b_i $$$ toggle ( ) every $$$ a_i $$$ second start $$$ b_i $$$ -th second word toggle moments $$$ b_i $$$ $$$ b_i + a_i $$$ $$$ b_i + 2 \cdot a_i $$$ know light whether 's initially correspond parameters $$$ a_i $$$ $$$ b_i $$$ koala wonder maximum number light ever time need find first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) number light next line contain a string $$$ s $$$ $$$ n $$$ character $$$ i $$$ -th character ` ` 1 '' $$$ i $$$ -th lamp initially otherwise $$$ i $$$ -th character ` ` 0 '' $$$ i $$$ -th follow $$$ n $$$ line contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le 5 $$$ ) — parameters $$$ i $$$ -th light print a single integer — maximum number light ever time first example lamps ' state show picture largest number simultaneously lamps $$$ 2 $$$ ( e.g moment $$$ 2 $$$ ) second example light initially answer $$$ 4 $$$,"['implementation', 'math']",1300.0
1208/B,give array $$$ a _ { 1 } a _ { 2 } \ldots a _ { n } $$$ remove one subsegment remain elements pairwise distinct word one time choose two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \leq l \leq r \leq n $$$ ) delete integers $$$ a_l a _ { l+1 } \ldots a_r $$$ array remain elements pairwise distinct find minimum size subsegment need remove make remain elements distinct first line input contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 2000 $$$ ) — number elements give array next line contain $$$ n $$$ space integers $$$ a _ { 1 } a _ { 2 } \ldots a _ { n } $$$ ( $$$ 1 \le a _ { i } \le 10^ { 9 } $$$ ) — elements array print a single integer — minimum size subsegment need remove make elements array pairwise distinct subsegment need remove print $$$ 0 $$$ first example elements already distinct therefore subsegment need remove second example remove subsegment index $$$ 2 $$$ $$$ 3 $$$ third example remove subsegments index $$$ 1 $$$ $$$ 2 $$$ index $$$ 2 $$$ $$$ 3 $$$ index $$$ 3 $$$ $$$ 4 $$$,"['brute force', 'implementation']",1500.0
1203/D2,difference easy hard versions length string give a string $$$ s $$$ a string $$$ t $$$ consist lowercase latin letter guarantee $$$ t $$$ obtain $$$ s $$$ remove ( possibly zero ) number character ( necessary contiguous ) $$$ s $$$ without change order remain character ( word guarantee $$$ t $$$ a subsequence $$$ s $$$ ) example string ` ` test '' ` ` tst '' ` ` tt '' ` ` et '' ` ` '' subsequences string ` ` test '' string ` ` tset '' ` ` se '' ` ` contest '' subsequences string ` ` test '' want remove substring ( contiguous subsequence ) $$$ s $$$ maximum possible length remove substring $$$ t $$$ remain a subsequence $$$ s $$$ want remove substring $$$ s [ l ; r ] $$$ string $$$ s $$$ transform $$$ s_1 s_2 \dots s _ { l-1 } s _ { r+1 } s _ { r+2 } \dots s _ { |s|-1 } s _ { |s| } $$$ ( $$$ |s| $$$ length $$$ s $$$ ) task find maximum possible length substring remove $$$ t $$$ still a subsequence $$$ s $$$ first line input contain one string $$$ s $$$ consist least $$$ 1 $$$ $$$ 200000 $$$ lowercase latin letter second line input contain one string $$$ t $$$ consist least $$$ 1 $$$ $$$ 200000 $$$ lowercase latin letter guarantee $$$ t $$$ a subsequence $$$ s $$$ print one integer — maximum possible length substring remove $$$ t $$$ still a subsequence $$$ s $$$,"['greedy', 'implementation']",1700.0
1197/B,"$$$ n $$$ pillars align a row number $$$ 1 $$$ $$$ n $$$ initially pillar contain exactly one disk $$$ i $$$ -th pillar contain a disk radius $$$ a_i $$$ move disk one pillar another take a disk pillar $$$ i $$$ place top pillar $$$ j $$$ condition meet : place a disk a pillar already disk put new disk top previously place disk new disk use check third condition try place another disk pillar may take disk place pillar number time provide every time three aforementioned condition meet wonder possible place $$$ n $$$ disk pillar simultaneously ? first line contain one integer $$$ n $$$ ( $$$ 3 \le n \le 200000 $$$ ) — number pillars second line contain $$$ n $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_i $$$ ( $$$ 1 \le a_i \le n $$$ ) $$$ a_i $$$ radius disk initially place $$$ i $$$ -th pillar number $$$ a_i $$$ distinct print yes possible place disk pillar simultaneously otherwise may print letter case ( yes yes yes recognize positive answer , recognize negative answer ) first case possible place disk pillar $$$ 3 $$$ use follow sequence action :","['greedy', 'implementation']",1000.0
1196/C,"$$$ n $$$ robots escape laboratory ! find soon possible robots experimental behavior test yet may really dangerous ! fortunately even though robots escape still control first know location robot : world live model infinite coordinate plane $$$ i $$$ -th robot currently locate point coordinate ( $$$ x_i $$$ $$$ y_i $$$ ) furthermore may send exactly one command robots command contain two integer number $$$ x $$$ $$$ y $$$ robot receive command start move towards point coordinate ( $$$ x $$$ $$$ y $$$ ) robot stop movement two case : normally robots able get point coordinate plane point robot usually perform four action move let 's denote current coordinate robot ( $$$ x_c $$$ $$$ y_c $$$ ) movement system allow move four adjacent point : unfortunately seem movement systems robots malfunction robot know action perform perform want send a command robots gather point , choose a pair integer number $$$ x $$$ $$$ y $$$ robot reach point ( $$$ x $$$ $$$ y $$$ ) possible find a point ? first line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) — number query $$$ q $$$ query follow query begin one line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number robots query $$$ n $$$ line follow $$$ i $$$ -th line describe $$$ i $$$ -th robot current query : contain six integer number $$$ x_i $$$ $$$ y_i $$$ $$$ f _ { i 1 } $$$ $$$ f _ { i 2 } $$$ $$$ f _ { i 3 } $$$ $$$ f _ { i 4 } $$$ ( $$$ -100000 \le x_i y_i \le 100000 $$$ $$$ 0 \le f _ { i j } \le 1 $$$ ) first two number describe initial location $$$ i $$$ -th robot follow four number describe action $$$ i $$$ -th robot use move ( $$$ f _ { i j } = 1 $$$ $$$ i $$$ -th robot use $$$ j $$$ -th action $$$ f _ { i j } = 0 $$$ use $$$ j $$$ -th action ) guarantee total number robots query exceed $$$ 100000 $$$ answer query independently order query appear input answer a query one follow :",['implementation'],1500.0
1194/B,"give a picture consist $$$ n $$$ row $$$ m $$$ columns row number $$$ 1 $$$ $$$ n $$$ top bottom columns number $$$ 1 $$$ $$$ m $$$ leave right cell paint either black white think picture interest enough consider a picture interest least one cross a cross represent a pair number $$$ x $$$ $$$ y $$$ $$$ 1 \le x \le n $$$ $$$ 1 \le y \le m $$$ cells row $$$ x $$$ cells column $$$ y $$$ paint black examples picture contain cross : fourth picture contain 4 cross : $$$ ( 1 3 ) $$$ $$$ ( 1 5 ) $$$ $$$ ( 3 3 ) $$$ $$$ ( 3 5 ) $$$ follow image n't contain cross : a brush a black paint make picture interest minute may choose a white cell paint black minimum number minutes spend result picture contain least one cross ? also ask answer multiple independent query first line contain integer $$$ q $$$ ( $$$ 1 \le q \le 50000 $$$ ) — number query first line query contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 50000 $$$ $$$ n \cdot m \le 400000 $$$ ) — number row number columns picture next $$$ n $$$ line contain $$$ m $$$ character — ' . ' cell paint white ' * ' cell paint black guarantee $$$ \sum n \le 50000 $$$ $$$ \sum n \cdot m \le 400000 $$$ print $$$ q $$$ line $$$ i $$$ -th line contain a single integer — answer $$$ i $$$ -th query minimum number minutes spend result picture contain least one cross example contain picture order first 5 picture already contain a cross thus n't paint anything paint $$$ ( 1 3 ) $$$ $$$ ( 3 1 ) $$$ $$$ ( 5 3 ) $$$ $$$ ( 3 5 ) $$$ $$$ 6 $$$ -th picture get a cross $$$ ( 3 3 ) $$$ 'll take $$$ 4 $$$ minutes paint $$$ ( 1 2 ) $$$ $$$ 7 $$$ -th picture get a cross $$$ ( 4 2 ) $$$ paint $$$ ( 2 2 ) $$$ $$$ 8 $$$ -th picture get a cross $$$ ( 2 2 ) $$$ , example paint $$$ ( 1 3 ) $$$ $$$ ( 3 1 ) $$$ $$$ ( 3 3 ) $$$ get a cross $$$ ( 3 3 ) $$$ take $$$ 3 $$$ minutes instead $$$ 1 $$$ 9 possible cross get minimum time $$$ 9 $$$ -th picture one $$$ ( 1 1 ) $$$ : paint $$$ ( 1 2 ) $$$ $$$ ( 2 1 ) $$$",['implementation'],1300.0
1183/G,"problem a version problem d contest additional constraints task $$$ n $$$ candy a candy box type $$$ i $$$ -th candy $$$ a_i $$$ ( $$$ 1 \le a_i \le n $$$ ) prepare a gift use candy follow restriction : number candy type present a gift distinct ( i. e. example a gift two candy type $$$ 1 $$$ two candy type $$$ 2 $$$ bad ) possible multiple type candy completely absent gift also possible candy type take a gift really like candy n't want include gift want eat instead candy a number $$$ f_i $$$ give equal $$$ 0 $$$ really want keep $$$ i $$$ -th candy $$$ 1 $$$ n't mind include gift possible two candy type different value $$$ f_i $$$ want gift large possible n't want include many candy want eat gift , want calculate maximum possible number candy include a gift among ways choose maximum number candy want maximize number candy $$$ f_i = 1 $$$ gift answer $$$ q $$$ independent query python programmer consider use pypy instead python submit code first line input contain one integer $$$ q $$$ ( $$$ 1 \le q \le 200000 $$$ ) — number query first line query contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number candy $$$ n $$$ line follow contain two integers $$$ a_i $$$ $$$ f_i $$$ ( $$$ 1 \le a_i \le n $$$ $$$ 0 \le f_i \le 1 $$$ ) $$$ a_i $$$ type $$$ i $$$ -th candy $$$ f_i $$$ denote whether want keep $$$ i $$$ -th candy ( $$$ 0 $$$ want keep $$$ 1 $$$ n't mind give away ) guarantee sum $$$ n $$$ query exceed $$$ 200000 $$$ query print two integers : first query include two candy type $$$ 4 $$$ one candy type $$$ 5 $$$ $$$ f_i = 1 $$$ n't mind give away part gift","['greedy', 'implementation']",2000.0
1183/A,"polycarp know sum digits a number divisible $$$ 3 $$$ number divisible $$$ 3 $$$ assume number sum digits divisible $$$ 4 $$$ also somewhat interest thus consider a positive integer $$$ n $$$ interest sum digits divisible $$$ 4 $$$ help polycarp find nearest larger equal interest number give number $$$ a $$$ , find interest number $$$ n $$$ $$$ n \ge a $$$ $$$ n $$$ minimal line input contain integer $$$ a $$$ ( $$$ 1 \le a \le 1000 $$$ ) print nearest greater equal interest number give number $$$ a $$$ word print interest number $$$ n $$$ $$$ n \ge a $$$ $$$ n $$$ minimal",['implementation'],800.0
1181/C,"innokenty work a flea market sell random stuff rare items recently find old rectangular blanket turn blanket split $$$ n \cdot m $$$ color piece form a rectangle $$$ n $$$ row $$$ m $$$ columns color piece attract innokenty 's attention immediately come follow business plan cut a subrectangle consist three color strip sell a flag country innokenty decide a subrectangle similar enough a flag country consist three strip equal heights place one another stripe consist cells equal color course color top stripe must different color middle stripe ; color middle stripe must different color bottom stripe innokenty yet decide part cut sure flag 's boundaries go along grid line also innokenty wo n't rotate blanket please help innokenty count number different subrectangles innokenty cut sell a flag two subrectangles locate different place form flag still consider different subrectangles flag subrectangles flag first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 1\,000 $$$ ) — number row number columns blanket next $$$ n $$$ line contain $$$ m $$$ lowercase english letter ' a ' ' z ' describe a row blanket equal letter correspond equal color different letter correspond different color line print number subrectangles form valid flag select subrectangles flag first example","['brute force', 'dp', 'implementation']",1900.0
1179/C,serge come school din room discover a big queue $$$ m $$$ pupils queue 's sure want wait queue clear want know dish receive serge tire ask compute instead initially $$$ n $$$ dish cost $$$ a_1 a_2 \ldots a_n $$$ already know queue $$$ m $$$ pupils $$$ b_1 \ldots b_m $$$ togrogs respectively ( pupils enumerate queue order i.e first pupil queue $$$ b_1 $$$ togrogs last one $$$ b_m $$$ togrogs ) pupils think expensive dish delicious one every pupil buy expensive dish money ( every dish a single copy a pupil buy nobody buy later ) a pupil n't money dish leave queue ( <unknown> <unknown> ... ) money n't a problem serge serge buy expensive dish least one remain moreover serge 's school a unstable economic situation cost dish number togrogs pupils change formally must process $$$ q $$$ query : nobody leave queue query a <unknown> late every query must tell serge price dish buy wait queue clear $$$ -1 $$$ dish point accord rule describe first line contain integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 300\ 000 $$$ ) — number dish pupils respectively second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 10^ { 6 } $$$ ) — elements array $$$ a $$$ third line contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b _ { m } $$$ ( $$$ 1 \leq b_i \leq 10^ { 6 } $$$ ) — elements array $$$ b $$$ fourth line conatins integer $$$ q $$$ ( $$$ 1 \leq q \leq 300\ 000 $$$ ) — number query follow $$$ q $$$ line contain follow : $$$ q $$$ query print answer statement describe answer $$$ i $$$ -th query $$$ i $$$ -th line ( price dish serge buy $$$ -1 $$$ nothing remain ) first sample first query one dish price $$$ 100 $$$ togrogs one pupil one togrog serge buy dish price $$$ 100 $$$ togrogs second sample first query one dish price one togrog one pupil $$$ 100 $$$ togrogs serge get nothing third sample first query nobody buy dish price $$$ 8 $$$ serge take second query dish buy third one third fifth pupils first second dish respectively nobody fourth one,"['data structures', 'greedy', 'implementation', 'math']",2200.0
1175/E,give $$$ n $$$ intervals form $$$ [ l ; r ] $$$ a number line also give $$$ m $$$ query form $$$ [ x ; y ] $$$ minimal number intervals take every point ( necessarily integer ) $$$ x $$$ $$$ y $$$ cover least one ? ca n't choose intervals every point $$$ x $$$ $$$ y $$$ cover print -1 query first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 200000 $$$ ) — number intervals number query respectively next $$$ n $$$ line contain two integer number $$$ l_i $$$ $$$ r_i $$$ ( $$$ 0 \le l_i < r_i \le 500000 $$$ ) — give intervals next $$$ m $$$ line contain two integer number $$$ x_i $$$ $$$ y_i $$$ ( $$$ 0 \le x_i < y_i \le 500000 $$$ ) — query print $$$ m $$$ integer number $$$ i $$$ -th number answer $$$ i $$$ -th query : either minimal number intervals take every point ( necessarily integer ) $$$ x_i $$$ $$$ y_i $$$ cover least one -1 ca n't choose intervals every point $$$ x_i $$$ $$$ y_i $$$ cover first example three query : second example four query :,"['data structures', 'dfs and similar', 'dp', 'greedy', 'implementation']",2200.0
1175/A,give integer $$$ n $$$ integer $$$ k $$$ one step one follow move : example $$$ n = 27 $$$ $$$ k = 3 $$$ follow step : $$$ 27 \rightarrow 26 \rightarrow 25 \rightarrow 24 \rightarrow 8 \rightarrow 7 \rightarrow 6 \rightarrow 2 \rightarrow 1 \rightarrow 0 $$$ ask calculate minimum number step reach $$$ 0 $$$ $$$ n $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number query line query contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 10^ { 18 } $$$ $$$ 2 \le k \le 10^ { 18 } $$$ ) query print minimum number step reach $$$ 0 $$$ $$$ n $$$ single line step first test case : $$$ 59 \rightarrow 58 \rightarrow 57 \rightarrow 19 \rightarrow 18 \rightarrow 6 \rightarrow 2 \rightarrow 1 \rightarrow 0 $$$ second test case divide $$$ n $$$ $$$ k $$$ $$$ 18 $$$ time decrease $$$ n $$$ $$$ 1 $$$,"['implementation', 'math']",900.0
1169/A,circle line roflanpolis subway $$$ n $$$ station two parallel rout subway first one visit station order $$$ 1 \to 2 \to \ldots \to n \to 1 \to 2 \to \ldots $$$ ( next stop station $$$ x $$$ equal $$$ ( x+1 ) $$$ $$$ x < n $$$ $$$ 1 $$$ otherwise ) second route visit station order $$$ n \to ( n-1 ) \to \ldots \to 1 \to n \to ( n-1 ) \to \ldots $$$ ( next stop station $$$ x $$$ equal $$$ ( x-1 ) $$$ $$$ x > 1 $$$ $$$ n $$$ otherwise ) train depart station simultaneously take exactly $$$ 1 $$$ minute arrive next station two <unknown> live city name daniel vlad daniel currently a train first route station $$$ a $$$ exit subway train reach station $$$ x $$$ coincidentally vlad currently a train second route station $$$ b $$$ exit subway train reach station $$$ y $$$ surprisingly number $$$ a x b y $$$ distinct toad ilya ask check daniel vlad ever station time journey word check a moment train stop station note include moments daniel vlad enter leave subway first line contain five space - separated integers $$$ n $$$ $$$ a $$$ $$$ x $$$ $$$ b $$$ $$$ y $$$ ( $$$ 4 \leq n \leq 100 $$$ $$$ 1 \leq a x b y \leq n $$$ number among $$$ a $$$ $$$ x $$$ $$$ b $$$ $$$ y $$$ distinct ) — number station roflanpolis daniel 's start station daniel 's finish station vlad 's start station vlad 's finish station respectively output ` ` yes '' a time moment vlad daniel station ` ` '' otherwise print letter case ( upper lower ) first example daniel vlad start station $$$ ( 1 3 ) $$$ one minute later station $$$ ( 2 2 ) $$$ station moment note vlad leave subway right consider second example let 's look station vlad daniel : leave subway finish station moment station,"['implementation', 'math']",900.0
1155/B,a telephone number a sequence exactly $$$ 11 $$$ digits first digit 8 . vasya petya play a game initially a string $$$ s $$$ length $$$ n $$$ ( $$$ n $$$ odd ) consist digits vasya make first move players alternate turn one move player must choose a character erase current string example current string 1121 player 's move may 112 111 121 . game end length string $$$ s $$$ become 11 . result string a telephone number vasya win otherwise petya win determine vasya a win strategy ( vasya win game matter character petya choose move ) first line contain one integer $$$ n $$$ ( $$$ 13 \le n < 100000 $$$ $$$ n $$$ odd ) — length string $$$ s $$$ second line contain string $$$ s $$$ ( $$$ |s| = n $$$ ) consist decimal digits vasya a strategy guarantee victory print yes otherwise print first example vasya need erase second character petya erase a character remain string <unknown> become a telephone number second example vasya 's turn petya erase one character character 8 . result string ca n't a telephone number digit 8,"['greedy', 'implementation']",1200.0
1141/A,polycarp play ` ` game 23 '' initially a number $$$ n $$$ goal transform $$$ m $$$ one move multiply $$$ n $$$ $$$ 2 $$$ multiply $$$ n $$$ $$$ 3 $$$ perform number move print number move need transform $$$ n $$$ $$$ m $$$ print -1 impossible easy prove way transform $$$ n $$$ $$$ m $$$ contain number move ( i.e number move n't depend way transformation ) line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le m \le <unknown> $$$ ) print number move transform $$$ n $$$ $$$ m $$$ -1 solution first example possible sequence move : $$$ 120 \rightarrow 240 \rightarrow 720 \rightarrow 1440 \rightarrow <unknown> \rightarrow <unknown> \rightarrow <unknown> \rightarrow <unknown> $$$ $$$ 7 $$$ step total second example move need thus answer $$$ 0 $$$ third example impossible transform $$$ 48 $$$ $$$ 72 $$$,"['implementation', 'math']",1000.0
1139/B,go store sell $$$ n $$$ type chocolates $$$ a_i $$$ chocolates type $$$ i $$$ stock unlimited amount cash ( restrict price ) want buy many chocolates possible however buy $$$ x_i $$$ chocolates type $$$ i $$$ ( clearly $$$ 0 \le x_i \le a_i $$$ ) $$$ 1 \le j < i $$$ least one follow must hold : example array $$$ x = [ 0 0 1 2 10 ] $$$ satisfy requirement ( assume $$$ a_i \ge x_i $$$ ) array $$$ x = [ 0 1 0 ] $$$ $$$ x = [ 5 5 ] $$$ $$$ x = [ 3 2 ] $$$ n't calculate maximum number chocolates buy first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) denote number type chocolate next line contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) denote number chocolates type print maximum number chocolates buy first example optimal buy : $$$ 0 + 0 + 1 + 3 + 6 $$$ chocolates second example optimal buy : $$$ 1 + 2 + 3 + 4 + 10 $$$ chocolates third example optimal buy : $$$ 0 + 0 + 0 + 1 $$$ chocolates,"['greedy', 'implementation']",1000.0
1138/A,"arkady invite anna a dinner a sushi restaurant restaurant a bite unusual : offer $$$ n $$$ piece sushi align a row a customer choose a continuous subsegment sushi buy piece sushi two type : either tuna eel let 's denote type $$$ i $$$ -th leave sushi $$$ t_i $$$ $$$ t_i = 1 $$$ mean tuna $$$ t_i = 2 $$$ mean eel arkady like tuna anna like eel arkady want choose a continuous subsegment sushi equal number sushi type half subsegment sushi one type example subsegment $$$ [ 2 2 2 1 1 1 ] $$$ valid subsegment $$$ [ 1 2 1 2 1 2 ] $$$ halve contain type sushi find length longest continuous subsegment sushi arkady buy first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 100\,000 $$$ ) — number piece sushi second line contain $$$ n $$$ integers $$$ t_1 $$$ $$$ t_2 $$$ ... $$$ t_n $$$ ( $$$ t_i = 1 $$$ denote a sushi tuna $$$ t_i = 2 $$$ denote a sushi eel ) represent type sushi leave right guarantee least one piece sushi type note mean least one valid continuous segment print a single integer — maximum length a valid continuous segment first example arkady choose subsegment $$$ [ 2 2 1 1 ] $$$ subsegment $$$ [ 1 1 2 2 ] $$$ length $$$ 4 $$$ second example way choose one subsegments $$$ [ 2 1 ] $$$ $$$ [ 1 2 ] $$$ length $$$ 2 $$$ third example arkady 's best choice subsegment $$$ [ 1 1 1 2 2 2 ] $$$","['greedy', 'implementation']",900.0
1133/A,polycarp go participate contest start $$$ h_1 : m_1 $$$ end $$$ h_2 : m_2 $$$ guarantee contest last even number minutes ( i.e $$$ m_1 \ % 2 = m_2 \ % 2 $$$ $$$ x \ % y $$$ $$$ x $$$ modulo $$$ y $$$ ) also guarantee entire contest hold a single day finally guarantee contest last least two minutes polycarp want know time midpoint contest example contest last $$$ <unknown> $$$ $$$ <unknown> $$$ answer $$$ <unknown> $$$ contest last $$$ <unknown> $$$ $$$ <unknown> $$$ answer $$$ 11:11 $$$ first line input contain two integers $$$ h_1 $$$ $$$ m_1 $$$ format hh : mm second line input contain two integers $$$ h_2 $$$ $$$ m_2 $$$ format ( hh : mm ) guarantee $$$ 0 \le h_1 h_2 \le 23 $$$ $$$ 0 \le m_1 m_2 \le 59 $$$ guarantee contest last even number minutes ( i.e $$$ m_1 \ % 2 = m_2 \ % 2 $$$ $$$ x \ % y $$$ $$$ x $$$ modulo $$$ y $$$ ) also guarantee entire contest hold a single day finally guarantee contest last least two minutes print two integers $$$ h_3 $$$ $$$ m_3 $$$ ( $$$ 0 \le h_3 \le 23 0 \le m_3 \le 59 $$$ ) correspond midpoint contest format hh : mm print number exactly two digits ( prepend a number lead zero need ) separate ' : ',['implementation'],1000.0
1131/B,"still partial information score historic football match give a set pair $$$ ( a_i b_i ) $$$ indicate point match score ` ` $$$ a_i $$$ : $$$ b_i $$$ ` ` know current score « $$$ x $$$ : $$$ y $$$ » goal change ` ` $$$ x+1 $$$ : $$$ y $$$ ` ` ` ` $$$ x $$$ : $$$ y+1 $$$ ` ` largest number time a draw could appear scoreboard ? pair ` ` $$$ a_i $$$ : $$$ b_i $$$ ` ` give chronological order ( time increase ) give score moments time last pair correspond end match first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 10000 $$$ ) — number know moments match next $$$ n $$$ line contain integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 0 \le a_i b_i \le 1000000000 $$$ ) denote score match moment ( number goals first team number goals second team ) moments give chronological order , sequence $$$ x_i $$$ $$$ y_j $$$ non - decreasing last score denote final result match print maximum number moments time score a draw start moment match ( a score 0:0 ) also count example one possible score sequence lead maximum number draw follow : 0:0 1:0 2:0 2:1 <unknown> 3:2 <unknown> 3:4","['greedy', 'implementation']",1400.0
1120/A,first holiday spring town shortriver traditionally conduct a flower festival <unknown> wear traditional wreaths festivals wreath contain exactly $$$ k $$$ flower work material wreaths $$$ n $$$ citizens shortriver cut longest flower liana grow town year liana a sequence $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_m $$$ $$$ a_i $$$ integer denote type flower position $$$ i $$$ year liana long ( $$$ m \ge n \cdot k $$$ ) mean every citizen get a wreath soon liana insert a special cut machine order make work material wreaths machine work a simple manner : cut $$$ k $$$ flower begin liana another $$$ k $$$ flower piece $$$ k $$$ flower call a workpiece machine work less $$$ k $$$ flower liana diana find a weave schematic beautiful wreath <unknown> order weave $$$ k $$$ flower must contain flower type $$$ b_1 $$$ $$$ b_2 $$$ ... $$$ b_s $$$ type a type appear sequence several time least many flower type number occurrences flower sequence order flower a workpiece matter diana a chance remove flower liana insert cut machine remove flower part liana without break liana piece diana remove many flower may happen citizens get a wreath could flower remove liana least one workpiece would conform schematic machine would still able create least $$$ n $$$ workpieces ? first line contain four integers $$$ m $$$ $$$ k $$$ $$$ n $$$ $$$ s $$$ ( $$$ 1 \le n k m \le 500000 $$$ $$$ k \cdot n \le m $$$ $$$ 1 \le s \le k $$$ ) : number flower liana number flower one wreath amount citizens length diana 's flower sequence respectively second line contain $$$ m $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_m $$$ ( $$$ 1 \le a_i \le 500000 $$$ ) — type flower liana third line contain $$$ s $$$ integers $$$ b_1 $$$ $$$ b_2 $$$ ... $$$ b_s $$$ ( $$$ 1 \le b_i \le 500000 $$$ ) — sequence diana 's schematic 's impossible remove flower would least $$$ n $$$ workpieces least one <unknown> diana 's schematic requirements output $$$ -1 $$$ otherwise first line output one integer $$$ d $$$ — number flower remove diana next line output $$$ d $$$ different integers — position flower remove multiple answer print first example n't remove flower machine would put two workpieces flower type $$$ [ 1 2 3 ] $$$ $$$ [ 3 2 1 ] $$$ workpieces n't fit diana 's schematic remove flower $$$ 4 $$$ -th place machine would output workpieces $$$ [ 1 2 3 ] $$$ $$$ [ 2 1 2 ] $$$ second workpiece fit diana 's schematic second example way remove flower every citizen get a wreath diana get a workpiece fit schematic third example diana citizen town mean example remove flower except ones need,"['greedy', 'implementation']",1900.0
1119/C,ram come university algorithms practice professor a fairly know programmer give follow task give two matrices $$$ a $$$ $$$ b $$$ size $$$ n \times m $$$ consist $$$ 0 $$$ $$$ 1 $$$ apply follow operation matrix $$$ a $$$ arbitrary number time : take submatrix matrix $$$ a $$$ least two row two columns invert value corner ( i.e corner submatrix contain $$$ 0 $$$ replace $$$ 1 $$$ corner submatrix contain $$$ 1 $$$ replace $$$ 0 $$$ ) answer whether obtain matrix $$$ b $$$ matrix $$$ a $$$ ram n't want perform operations ask answer question a submatrix matrix $$$ m $$$ a matrix consist elements come one row indices $$$ x_1 x_1 + 1 \ldots x_2 $$$ matrix $$$ m $$$ one columns indices $$$ y_1 y_1 + 1 \ldots y_2 $$$ matrix $$$ m $$$ $$$ x_1 x_2 y_1 y_2 $$$ edge row columns submatrix word a submatrix a set elements source matrix form a solid rectangle ( i.e without hole ) side parallel side original matrix corner submatrix cells $$$ ( x_1 y_1 ) $$$ $$$ ( x_1 y_2 ) $$$ $$$ ( x_2 y_1 ) $$$ $$$ ( x_2 y_2 ) $$$ cell $$$ ( i j ) $$$ denote cell intersection $$$ i $$$ -th row $$$ j $$$ -th column first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 500 $$$ ) — number row number columns matrices $$$ a $$$ $$$ b $$$ next $$$ n $$$ line contain $$$ m $$$ integers : $$$ j $$$ -th integer $$$ i $$$ -th line $$$ j $$$ -th element $$$ i $$$ -th row matrix $$$ a $$$ ( $$$ 0 \leq a _ { ij } \leq 1 $$$ ) next $$$ n $$$ line contain $$$ m $$$ integers : $$$ j $$$ -th integer $$$ i $$$ -th line $$$ j $$$ -th element $$$ i $$$ -th row matrix $$$ b $$$ ( $$$ 0 \leq b _ { ij } \leq 1 $$$ ) print ` ` yes '' ( without quote ) possible transform matrix $$$ a $$$ matrix $$$ b $$$ use operations describe ` ` '' ( without quote ) possible print letter case ( upper lower ) examples explain,"['constructive algorithms', 'greedy', 'implementation', 'math']",1500.0
1114/A,simplicity 'll assume three type grapes : green grapes purple grapes black grapes andrew dmitry michal grapes ' lovers however preferences grapes different make happy follow happen : know friends fond grapes aki decide host a grape party prepare a box $$$ a $$$ green grapes $$$ b $$$ purple grapes $$$ c $$$ black grapes however aki n't sure box prepare contain enough grapes make everyone happy please find whether 's possible distribute grapes everyone happy aki buy grapes ? require distribute grapes 's possible remain unused first line contain three integers $$$ x $$$ $$$ y $$$ $$$ z $$$ ( $$$ 1 \le x y z \le 100000 $$$ ) — number grapes andrew dmitry michal want eat second line contain three integers $$$ a $$$ $$$ b $$$ $$$ c $$$ ( $$$ 1 \le a b c \le 100000 $$$ ) — number green purple black grapes box a grape distribution allow everyone happy print ` ` yes '' otherwise print ` ` '' first example one possible distribution : andrew take $$$ 1 $$$ green grape dmitry take $$$ 3 $$$ remain green grapes $$$ 3 $$$ purple grapes michal take $$$ 2 $$$ $$$ 3 $$$ available black grapes second test possible distribution since andrew able eat enough green grapes : (,"['brute force', 'greedy', 'implementation']",800.0
1111/A,know a superhero transform certain superheroes superheroes transform superhero a superhero name $$$ s $$$ transform another superhero name $$$ t $$$ $$$ s $$$ make equal $$$ t $$$ change vowel $$$ s $$$ vowel consonant $$$ s $$$ consonant multiple change make problem consider letter ' a ' ' e ' ' i ' ' o ' ' u ' vowels letter consonants give name two superheroes determine superhero name $$$ s $$$ transform superhero name $$$ t $$$ first line contain string $$$ s $$$ length $$$ 1 $$$ $$$ 1000 $$$ inclusive second line contain string $$$ t $$$ length $$$ 1 $$$ $$$ 1000 $$$ inclusive string $$$ s $$$ $$$ t $$$ guarantee different consist lowercase english letter output ` ` yes '' ( without quote ) superhero name $$$ s $$$ transform superhero name $$$ t $$$ ` ` '' ( without quote ) otherwise print letter case ( upper lower ) first sample since ' a ' ' u ' vowels possible convert string $$$ s $$$ $$$ t $$$ third sample ' k ' a consonant whereas ' a ' a vowel possible convert string $$$ s $$$ $$$ t $$$,"['implementation', 'strings']",1000.0
1109/C,"fedya sasha friends 's sasha know everything fedya fedya keep patience infinitely large bowl , unlike bowl fedya 's patience n't infinite let $$$ v $$$ number liters fedya 's patience , soon $$$ v $$$ become equal $$$ 0 $$$ bowl burst immediately one tap bowl pump $$$ s $$$ liters patience per second notice $$$ s $$$ negative case tap pump patience sasha different things able change tap 's speed action sasha represent $$$ q $$$ query three type query : since sasha want check happen fedya 's patience end already come query ask help find answer query $$$ 3 $$$ -rd type guarantee moment time wo n't two events happen second first line <unknown> one integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) — number query next $$$ q $$$ line one follow format : guarantee $$$ t $$$ $$$ s $$$ $$$ l $$$ $$$ r $$$ $$$ v $$$ query integers also guarantee least one query $$$ 3 $$$ -rd type wo n't a query $$$ 1 $$$ -st type $$$ t $$$ already exist event happen second $$$ t $$$ query $$$ 3 $$$ -rd type print a new line moment bowl burst print $$$ -1 $$$ wo n't happen answer consider correct 's absolute relative error exceed $$$ 10^ { -6 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ answer accept $$$ \frac { |a - b| } { \max { ( 1 |b| ) } } \le 10^ { -6 } $$$ first example query $$$ 3 $$$ -rd type cover events 's simulation follow :","['data structures', 'implementation']",2800.0
1106/C,lunar new year approach bob struggle homework – a number division problem $$$ n $$$ positive integers $$$ a_1 a_2 \ldots a_n $$$ bob 's homework paper $$$ n $$$ always even number bob ask divide number group group must contain least $$$ 2 $$$ number suppose number divide $$$ m $$$ group sum number $$$ j $$$ -th group $$$ s_j $$$ bob 's aim minimize sum square $$$ s_j $$$ $$$ $$$ \sum _ { j = 1 } ^ { m } s_j^2 $$$ $$$ bob puzzle hard problem could please help solve ? first line contain even integer $$$ n $$$ ( $$$ 2 \leq n \leq 300000 $$$ ) denote $$$ n $$$ integers bob 's homework paper second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 10000 $$$ ) describe number need deal a single line contain one integer denote minimum sum square $$$ s_j $$$ $$$ $$$ \sum _ { i = j } ^ { m } s_j^2 $$$ $$$ $$$ m $$$ number group first sample one optimal solutions divide $$$ 4 $$$ number $$$ 2 $$$ group $$$ \ { 2 8\ } \ { 5 3\ } $$$ thus answer $$$ ( 2 + 8 ) ^2 + ( 5 + 3 ) ^2 = <unknown> $$$ second sample one optimal solutions divide $$$ 6 $$$ number $$$ 3 $$$ group $$$ \ { 1 2\ } \ { 1 2\ } \ { 1 2\ } $$$ thus answer $$$ ( 1 + 2 ) ^2 + ( 1 + 2 ) ^2 + ( 1 + 2 ) ^2 = 27 $$$,"['greedy', 'implementation', 'math']",900.0
1106/B,lunar new year approach bob plan go a famous restaurant — ` ` alice 's '' restaurant ` ` alice 's '' serve $$$ n $$$ kinds food cost $$$ i $$$ -th kind always $$$ c_i $$$ initially restaurant enough ingredients serve exactly $$$ a_i $$$ dish $$$ i $$$ -th kind new year 's eve $$$ m $$$ customers visit alice 's one another $$$ j $$$ -th customer order $$$ d_j $$$ dish $$$ t_j $$$ -th kind food $$$ ( i + 1 ) $$$ -st customer come $$$ i $$$ -th customer completely serve suppose $$$ r_i $$$ dish $$$ i $$$ -th kind remain ( initially $$$ r_i = a_i $$$ ) a customer order $$$ 1 $$$ dish $$$ i $$$ -th kind follow principles process customer n't leave $$$ d_j $$$ dish serve cost customer sum cost $$$ d_j $$$ dish please determine total cost $$$ m $$$ customers first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 100000 $$$ ) represent number different kinds food number customers respectively second line contain $$$ n $$$ positive integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 10000000 $$$ ) $$$ a_i $$$ denote initial remain $$$ i $$$ -th kind dish third line contain $$$ n $$$ positive integers $$$ c_1 c_2 \ldots c_n $$$ ( $$$ 1 \leq c_i \leq 1000000 $$$ ) $$$ c_i $$$ denote cost one dish $$$ i $$$ -th kind follow $$$ m $$$ line describe order $$$ m $$$ customers respectively $$$ j $$$ -th line contain two positive integers $$$ t_j $$$ $$$ d_j $$$ ( $$$ 1 \leq t_j \leq n $$$ $$$ 1 \leq d_j \leq 10000000 $$$ ) represent kind food number dish $$$ j $$$ -th customer order respectively print $$$ m $$$ line $$$ j $$$ -th line print cost $$$ j $$$ -th customer first sample $$$ 5 $$$ customers serve follow second sample customer serve order except last one leave <unknown> without pay example second customer serve $$$ 6 $$$ dish second kind cost $$$ 396 = 396 $$$ third sample customers may serve order example second customer serve $$$ 6 $$$ dish second kind $$$ 6 $$$ third $$$ 1 $$$ fourth cost $$$ 396 + <unknown> + <unknown> = <unknown> $$$,"['data structures', 'implementation']",1500.0
1106/A,lunar new year approach buy a matrix lot ` ` cross '' matrix $$$ m $$$ size $$$ n \times n $$$ contain ' x ' ' . ' ( without quote ) element $$$ i $$$ -th row $$$ j $$$ -th column $$$ ( i j ) $$$ define $$$ m ( i j ) $$$ $$$ 1 \leq i j \leq n $$$ define a cross appear $$$ i $$$ -th row $$$ j $$$ -th column ( $$$ 1 < i j < n $$$ ) $$$ m ( i j ) = m ( i - 1 j - 1 ) = m ( i - 1 j + 1 ) = m ( i + 1 j - 1 ) = m ( i + 1 j + 1 ) = $$$ ' x ' follow figure illustrate a cross appear position $$$ ( 2 2 ) $$$ a $$$ 3 \times 3 $$$ matrix task find number cross give matrix $$$ m $$$ two cross different appear different row columns first line contain one positive integer $$$ n $$$ ( $$$ 1 \leq n \leq 500 $$$ ) denote size matrix $$$ m $$$ follow $$$ n $$$ line illustrate matrix $$$ m $$$ line contain exactly $$$ n $$$ character ' x ' ' . ' $$$ j $$$ -th element $$$ i $$$ -th line represent $$$ m ( i j ) $$$ $$$ 1 \leq i j \leq n $$$ output a single line contain one integer number $$$ k $$$ — number cross give matrix $$$ m $$$ first sample a cross appear $$$ ( 3 3 ) $$$ answer $$$ 1 $$$ second sample cross appear since $$$ n < 3 $$$ answer $$$ 0 $$$ third sample cross appear $$$ ( 3 2 ) $$$ $$$ ( 3 4 ) $$$ $$$ ( 4 3 ) $$$ $$$ ( 4 5 ) $$$ answer $$$ 4 $$$,['implementation'],800.0
1105/A,salem give $$$ n $$$ stick integer positive lengths $$$ a_1 a_2 \ldots a_n $$$ every stick change length positive integer length ( either shrink stretch ) cost change stick 's length $$$ a $$$ $$$ b $$$ $$$ |a - b| $$$ $$$ |x| $$$ mean absolute value $$$ x $$$ a stick length $$$ a_i $$$ call almost good integer $$$ t $$$ $$$ |a_i - <unknown> \le 1 $$$ salem ask change lengths stick ( possibly none ) stick ' lengths almost good positive integer $$$ t $$$ total cost change minimum possible value $$$ t $$$ fix advance choose positive integer answer print value $$$ t $$$ minimum cost multiple optimal choices $$$ t $$$ print first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — number stick second line contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le 100 $$$ ) — lengths stick print value $$$ t $$$ minimum possible cost multiple optimal choices $$$ t $$$ print first example change $$$ 1 $$$ $$$ 2 $$$ $$$ 10 $$$ $$$ 4 $$$ cost $$$ |1 - 2| + |10 - 4| = 1 + 6 = 7 $$$ result lengths $$$ [ 2 4 4 ] $$$ almost good $$$ t = 3 $$$ second example stick lengths already almost good $$$ t = 2 $$$ n't anything,"['brute force', 'implementation']",1100.0
1104/B,"two people play a game a string $$$ s $$$ consist lowercase latin letter a player 's turn choose two consecutive equal letter string delete example string equal ` ` <unknown> '' one possible turn : delete ` ` aa '' string become ` ` xx '' a player able make a turn lose task determine player win play optimally line contain string $$$ s $$$ consist lowercase latin letter ( $$$ 1 \leq |s| \leq 100\,000 $$$ ) $$$ |s| $$$ mean length a string $$$ s $$$ first player win print ` ` yes '' second player win print ` ` '' first example first player unable make a turn lose second example first player turn string ` ` q '' second player unable move lose","['data structures', 'implementation', 'math']",1200.0
1091/B,"bob a pirate look greatest treasure world ever see treasure locate point $$$ t $$$ coordinate find bob travel around world collect clue treasure location $$$ n $$$ obelisks clue ancient language decrypt home since know clue belong obelisk find treasure might pose a challenge help ? everyone know world a two - dimensional plane $$$ i $$$ -th obelisk integer coordinate $$$ ( x_i y_i ) $$$ $$$ j $$$ -th clue consist $$$ 2 $$$ integers $$$ ( a_j b_j ) $$$ belong obelisk $$$ p_j $$$ $$$ p $$$ ( unknown ) permutation $$$ n $$$ elements mean treasure locate $$$ t= ( x _ { p_j } + a_j y _ { p_j } + b_j ) $$$ point $$$ t $$$ clue word clue belong exactly one obelisks obelisk exactly one clue belong a clue represent vector obelisk treasure clue must distribute among obelisks a way point position treasure task find coordinate treasure multiple solutions may print note n't need find permutation permutations use order explain problem first line contain integer $$$ n $$$ ( $$$ 1 \leq n \leq 1000 $$$ ) — number obelisks also equal number clue next $$$ n $$$ line contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ -1000000 \leq x_i y_i \leq 1000000 $$$ ) — coordinate $$$ i $$$ -th obelisk coordinate distinct $$$ x_i \neq x_j $$$ $$$ y_i \neq y_j $$$ satisfy every $$$ ( i j ) $$$ $$$ i \neq j $$$ next $$$ n $$$ line contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ -2 \cdot 1000000 \leq a_i b_i \leq 2000000 $$$ ) — direction $$$ i $$$ -th clue coordinate distinct $$$ a_i \neq a_j $$$ $$$ b_i \neq b_j $$$ satisfy every $$$ ( i j ) $$$ $$$ i \neq j $$$ guarantee exist a permutation $$$ p $$$ $$$ i j $$$ hold $$$ \left ( x _ { p_i } + a_i y _ { p_i } + <unknown> ) = \left ( x _ { p_j } + a_j y _ { p_j } + <unknown> ) $$$ output a single line contain two integers $$$ <unknown> <unknown> $$$ — coordinate treasure multiple answer may print $$$ n = 2 $$$ consider permutations two elements $$$ p = [ 1 2 ] $$$ obelisk $$$ ( 2 5 ) $$$ hold clue $$$ ( 7 -2 ) $$$ mean treasure hide $$$ ( 9 3 ) $$$ second obelisk $$$ ( -6 4 ) $$$ would give clue $$$ ( -1 -3 ) $$$ treasure $$$ ( -7 1 ) $$$ however obelisks must give location hence clearly correct permutation hide permutation $$$ [ 2 1 ] $$$ first clue belong second obelisk second clue belong first obelisk hence $$$ ( -6 4 ) + ( 7 -2 ) = ( 2,5 ) + ( -1 -3 ) = ( 1 2 ) $$$ $$$ t = ( 1,2 ) $$$ location treasure second sample hide permutation $$$ [ 2 3 4 1 ] $$$","['brute force', 'constructive algorithms', 'greedy', 'implementation']",1200.0
1084/C,fair nut find a string $$$ s $$$ string consist lowercase latin letter nut a curious guy want find number strictly increase sequence $$$ p_1 p_2 \ldots p_k $$$ : nut upset n't know find number help number calculate modulo $$$ 1000000000 + 7 $$$ first line contain string $$$ s $$$ ( $$$ 1 \leq |s| \leq 100000 $$$ ) consist lowercase latin letter a single line print answer problem — number sequence $$$ p_1 p_2 \ldots p_k $$$ modulo $$$ 1000000000 + 7 $$$ first example $$$ 5 $$$ possible sequence $$$ [ 1 ] $$$ $$$ [ 4 ] $$$ $$$ [ 5 ] $$$ $$$ [ 1 4 ] $$$ $$$ [ 1 5 ] $$$ second example $$$ 4 $$$ possible sequence $$$ [ 2 ] $$$ $$$ [ 3 ] $$$ $$$ [ 4 ] $$$ $$$ [ 5 ] $$$ third example $$$ 3 $$$ possible sequence $$$ [ 1 ] $$$ $$$ [ 3 ] $$$ $$$ [ 4 ] $$$,"['dp', 'implementation']",1500.0
1081/F,"interactive problem chouti tire study open computer start play a puzzle game long long ago boy find a sequence $$$ s_1 s_2 \ldots s_n $$$ length $$$ n $$$ keep a tricky interactor consist $$$ 0 $$$ s $$$ 1 $$$ s number $$$ 1 $$$ s $$$ t $$$ boy know nothing sequence except $$$ n $$$ $$$ t $$$ try find query interactor define operation call flip flip $$$ [ l r ] $$$ ( $$$ 1 \leq l \leq r \leq n $$$ ) mean $$$ x \in [ l r ] $$$ change $$$ s_x $$$ $$$ 1 - s_x $$$ query boy give interactor two integers $$$ l r $$$ satisfy $$$ 1 \leq l \leq r \leq n $$$ interactor either flip $$$ [ 1 r ] $$$ $$$ [ l n ] $$$ ( outcomes probability decisions make interactor independent see note section detail ) interactor tell current number $$$ 1 $$$ s operation note sequence wo n't restore operation help boy find original sequence $$$ 10000 $$$ interactions ` ` weird legend dumb game . '' think however several try still stick help beat game ? interaction start a line contain two integers $$$ n $$$ $$$ t $$$ ( $$$ 1 \leq n \leq 300 $$$ $$$ 0 \leq t \leq n $$$ ) — length sequence number $$$ 1 $$$ s , make query make a query print a line ` ` ? l r '' ( $$$ 1 \leq l \leq r \leq n $$$ ) flush output query read a single integer $$$ t $$$ ( $$$ -1 \leq t \leq n $$$ ) find original sequence print a line ` ` ! s '' flush output terminate print $$$ s_1 s_2 \ldots s_n $$$ a binary string print space solution get idleness limit exceed n't print anything forget flush output flush need follow right print a query a line end : hacksfor hack use follow format : first line print a non - empty binary string length $$$ n $$$ treat $$$ s_1 s_2 \ldots s_n $$$ example test correspond example contain a line ` ` 0011 '' first query $$$ 1,1 $$$ interactor flip $$$ [ 1,1 ] $$$ $$$ [ 1,4 ] $$$ choose flip $$$ [ 1,4 ] $$$ sequence become 1100 . second query $$$ 1,1 $$$ interactor flip $$$ [ 1,1 ] $$$ $$$ [ 1,4 ] $$$ choose flip $$$ [ 1,4 ] $$$ sequence become 0011 . third query $$$ 3,4 $$$ interactor flip $$$ [ 1,4 ] $$$ $$$ [ 3,4 ] $$$ choose flip $$$ [ 3,4 ] $$$ sequence become 0000 . q : interactor choose $$$ [ 1 r ] $$$ $$$ [ l n ] $$$ ? really random ? a : interactor use a secret pseudorandom number generator $$$ s $$$ query hash use seed give sequence query twice secret string get result except consider choices fully random like flip a fair coin need n't ( n't ) <unknown> exact generator pass problem","['constructive algorithms', 'implementation']",2600.0
1073/B,"vasya get $$$ n $$$ book number $$$ 1 $$$ $$$ n $$$ arrange a stack topmost book number $$$ a_1 $$$ next one — $$$ a_2 $$$ , book bottom stack number $$$ a_n $$$ number distinct vasya want move book backpack $$$ n $$$ step $$$ i $$$ -th step want move book number $$$ b_i $$$ backpack book number $$$ b_i $$$ stack take book book book $$$ b_i $$$ put backpack ; otherwise nothing begin next step example book arrange order $$$ [ 1 2 3 ] $$$ ( book $$$ 1 $$$ topmost ) vasya move book order $$$ [ 2 1 3 ] $$$ first step move two book ( $$$ 1 $$$ $$$ 2 $$$ ) second step nothing ( since book $$$ 1 $$$ already backpack ) third step — one book ( book number $$$ 3 $$$ ) note $$$ b_1 b_2 \dots b_n $$$ distinct help vasya ! tell number book put backpack step first line contain one integer $$$ n~ ( 1 \le n \le 2 \cdot 100000 ) $$$ — number book stack second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n~ ( 1 \le a_i \le n ) $$$ denote stack book third line contain $$$ n $$$ integers $$$ b_1 b_2 \dots <unknown> ( 1 \le b_i \le n ) $$$ denote step vasya go perform number $$$ a_1 \dots a_n $$$ distinct go $$$ b_1 \dots b_n $$$ print $$$ n $$$ integers $$$ i $$$ -th equal number book vasya move backpack $$$ i $$$ -th step first example describe statement second example first step vasya move book $$$ [ 3 1 4 ] $$$ book $$$ 2 $$$ $$$ 5 $$$ remain stack ( $$$ 2 $$$ $$$ 5 $$$ ) second step vasya take book $$$ 2 $$$ $$$ 5 $$$ stack become empty next step vasya wo n't move book","['implementation', 'math']",1000.0
1073/A,give a string $$$ s $$$ consist $$$ n $$$ lowercase latin letter a substring string $$$ s $$$ a continuous segment letter $$$ s $$$ example ` ` <unknown> '' a substring ` ` codeforces '' ` ` <unknown> '' length substring number letter let 's call string length $$$ n $$$ diverse letter appear strictly $$$ \frac n 2 $$$ time example string ` ` abc '' ` ` <unknown> '' diverse string ` ` aab '' ` ` zz '' task find diverse substring string $$$ s $$$ report none note require maximize minimize length result substring first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — length string $$$ s $$$ second line string $$$ s $$$ consist exactly $$$ n $$$ lowercase latin letter print ` ` '' diverse substring string $$$ s $$$ otherwise first line contain ` ` yes '' second line contain diverse substring string $$$ s $$$ first example lot correct answer please <unknown> ask specific answer correct specific test question always lead ` ` comment '' answer,"['implementation', 'strings']",1000.0
1062/C,"jatc love banh - mi ( a <unknown> food ) affection banh - mi much always breakfast morning usual buy a banh - mi decide enjoy a special way first split banh - mi $$$ n $$$ part place a row number $$$ 1 $$$ $$$ n $$$ part $$$ i $$$ define deliciousness part $$$ x_i \in \ { 0 1\ } $$$ jatc 's go eat part one one step choose arbitrary remain part eat suppose part $$$ i $$$ -th part enjoyment banh - mi increase $$$ x_i $$$ deliciousness remain part also increase $$$ x_i $$$ initial enjoyment jatc equal $$$ 0 $$$ example suppose deliciousness $$$ 3 $$$ part $$$ [ 0 1 0 ] $$$ jatc eat second part enjoyment become $$$ 1 $$$ deliciousness remain part become $$$ [ 1 \ _ 1 ] $$$ next eat first part enjoyment become $$$ 2 $$$ remain part become $$$ [ \ _ \ _ 2 ] $$$ eat last part jatc 's enjoyment become $$$ 4 $$$ however jatc n't want eat part save later give $$$ q $$$ query consist two integers $$$ l_i $$$ $$$ r_i $$$ query let know maximum enjoyment get eat part indices range $$$ [ l_i r_i ] $$$ order query independent since answer query could large print modulo $$$ 1000000000 + 7 $$$ first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \le n q \le 100\,000 $$$ ) second line contain a string $$$ n $$$ character character either ' 0 ' ' 1 ' $$$ i $$$ -th character define deliciousness $$$ i $$$ -th part follow $$$ q $$$ line contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le n $$$ ) — segment correspond query print $$$ q $$$ line $$$ i $$$ -th contain a single integer — answer $$$ i $$$ -th query modulo $$$ 1000000000 + 7 $$$ first example : second example order eat part lead answer","['greedy', 'implementation', 'math']",1600.0
1061/B,"come exhibition one exhibit draw attention consist $$$ n $$$ stack block $$$ i $$$ -th stack consist $$$ a_i $$$ block rest surface height exhibit equal $$$ m $$$ consequently number block stack less equal $$$ m $$$ a camera ceiling see top view block a camera right wall see side view block find maximum number block remove view cameras would change note originally block stack floor require stay connect floor block remove gravity whole exhibition block would fall even block underneath remove allow move block hand either first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 100\,000 $$$ $$$ 1 \le m \le 1000000000 $$$ ) — number stack height exhibit second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le m $$$ ) — number block stack leave right print exactly one integer — maximum number block remove follow picture illustrate first example possible solution blue cells indicate remove block $$$ 10 $$$ blue cells answer $$$ 10 $$$","['greedy', 'implementation']",1400.0
1059/B,student andrey skip physical education lessons whole term must somehow get a pass grade subject obviously impossible legal mean andrey n't give obtain empty certificate a local <unknown> go use knowledge local doctor 's <unknown> make a counterfeit certificate <unknown> however write certificate andrey suddenly discover doctor 's signature impossible forge ? simplicity signature represent $$$ n\times m $$$ grid every cell either fill ink empty andrey 's pen fill a $$$ 3\times3 $$$ square without central cell completely contain inside grid show determine whether possible forge signature empty $$$ n\times m $$$ grid first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 3 \le n m \le 1000 $$$ ) $$$ n $$$ line follow contain $$$ m $$$ character character either ' ' represent empty cell ' # ' represent ink fill cell andrey forge signature output ` ` yes '' otherwise output ` ` '' print letter case ( upper lower ) first sample andrey paint border square center $$$ ( 2 2 ) $$$ second sample signature impossible forge third sample andrey paint border square center $$$ ( 2 2 ) $$$ $$$ ( 3 2 ) $$$ : fourth sample andrey paint border square center $$$ ( 3 3 ) $$$ $$$ ( 3 5 ) $$$,['implementation'],1300.0
1054/E,"egor come a new chip puzzle suggest play puzzle form a table $$$ n $$$ row $$$ m $$$ columns cell contain several black white chip place a row thus state cell describe a string consist character ' 0 ' ( a white chip ) ' 1 ' ( a black chip ) possibly empty whole puzzle describe a table cell a string zero ones task get one state puzzle state , use follow operation egor come two state table : initial state final one guarantee number zero ones table goal several operations get final state initial state course egor want number operations large let 's denote $$$ s $$$ number character table ( ) use $$$ 4 \cdot s $$$ operations first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n m \leq 300 $$$ ) — number row columns table respectively follow $$$ n $$$ line describe initial state table follow format : line contain $$$ m $$$ non - empty string consist zero ones $$$ i $$$ -th line $$$ j $$$ -th string string write cell $$$ ( i j ) $$$ row enumerate $$$ 1 $$$ $$$ n $$$ columns numerate $$$ 1 $$$ $$$ m $$$ follow $$$ n $$$ line describe final state table format let 's denote total length string initial state $$$ s $$$ guarantee $$$ s \leq 100\ 000 $$$ also guarantee number zero ones coincide initial final state first line print $$$ q $$$ — number operations use find a solution $$$ 0 \leq q \leq 4 \cdot s $$$ next $$$ q $$$ line print 4 integers $$$ x_1 $$$ $$$ y_1 $$$ $$$ x_2 $$$ $$$ y_2 $$$ $$$ i $$$ -th line print description $$$ i $$$ -th operation integers satisfy condition $$$ 1 \leq x_1 x_2 \leq n $$$ $$$ 1 \leq y_1 y_2 \leq m $$$ $$$ ( x_1 y_1 ) \neq ( x_2 y_2 ) $$$ $$$ x_1 = x_2 $$$ $$$ y_1 = y_2 $$$ string cell $$$ ( x_1 y_1 ) $$$ non - empty sequence operations transform initial state table final one show a solution exist one solution find consider first example first operation cell $$$ ( 2 1 ) $$$ contain string $$$ 01 $$$ apply operation cells $$$ ( 2 1 ) $$$ $$$ ( 1 1 ) $$$ move $$$ 1 $$$ end string $$$ 01 $$$ begin string $$$ 00 $$$ get string $$$ 100 $$$ second operation cell $$$ ( 1 1 ) $$$ contain string $$$ 100 $$$ apply operation cells $$$ ( 1 1 ) $$$ $$$ ( 1 2 ) $$$ move $$$ 0 $$$ end string $$$ 100 $$$ begin string $$$ 10 $$$ get string $$$ 010 $$$ third operation cell $$$ ( 1 2 ) $$$ contain string $$$ 010 $$$ apply operation cells $$$ ( 1 2 ) $$$ $$$ ( 2 2 ) $$$ move $$$ 0 $$$ end string $$$ 010 $$$ begin string $$$ 11 $$$ get string $$$ 011 $$$ fourth operation cell $$$ ( 2 2 ) $$$ contain string $$$ 011 $$$ apply operation cells $$$ ( 2 2 ) $$$ $$$ ( 2 1 ) $$$ move $$$ 1 $$$ end string $$$ 011 $$$ begin string $$$ 0 $$$ get string $$$ 10 $$$ 's easy see reach final state table","['constructive algorithms', 'implementation', 'math']",2400.0
1041/A,"electronic store heist last night keyboards store yesterday number ascend order integer number $$$ x $$$ example $$$ x = 4 $$$ $$$ 3 $$$ keyboards store devices indices $$$ 4 $$$ $$$ 5 $$$ $$$ 6 $$$ $$$ x = 10 $$$ $$$ 7 $$$ keyboards indices $$$ 10 $$$ $$$ 11 $$$ $$$ 12 $$$ $$$ 13 $$$ $$$ 14 $$$ $$$ 15 $$$ $$$ 16 $$$ heist $$$ n $$$ keyboards remain indices $$$ a_1 a_2 \dots a_n $$$ calculate minimum possible number keyboards steal staff remember neither $$$ x $$$ number keyboards store heist first line contain single integer $$$ n $$$ $$$ ( 1 \le n \le 1\,000 ) $$$ — number keyboards store remain heist second line contain $$$ n $$$ distinct integers $$$ a_1 a_2 \dots a_n $$$ $$$ ( 1 \le a_i \le 10^ { 9 } ) $$$ — indices remain keyboards integers $$$ a_i $$$ give arbitrary order pairwise distinct print minimum possible number keyboards steal staff remember neither $$$ x $$$ number keyboards store heist first example $$$ x=8 $$$ minimum number steal keyboards equal $$$ 2 $$$ keyboards indices $$$ 9 $$$ $$$ 11 $$$ steal heist second example $$$ x=4 $$$ nothing steal heist","['greedy', 'implementation']",800.0
1038/D,"$$$ n $$$ slim a row slime integer value ( possibly negative zero ) associate slime eat adjacent slime ( closest slime leave right assume slime exist ) a slime a value $$$ x $$$ eat a slime a value $$$ y $$$ eat slime disappear value remain slime change $$$ x - y $$$ slim eat one slime leave find maximum possible value last slime first line input contain integer $$$ n $$$ ( $$$ 1 \le n \le 500\,000 $$$ ) denote number slim next line contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) $$$ a_i $$$ value $$$ i $$$ -th slime print integer — maximum possible value last slime first example a possible way get last slime value $$$ 4 $$$ : second example first slime keep eat slim right end a value $$$ 4 $$$","['dp', 'greedy', 'implementation']",1800.0
1032/D,problem consider a simplify model barcelona city barcelona represent a plane streets kind $$$ x = c $$$ $$$ y = c $$$ every integer $$$ c $$$ ( rectangular grid ) however a detail make barcelona different manhattan avenue call <unknown> diagonal represent a set point $$$ ( x y ) $$$ $$$ ax + + c = 0 $$$ one walk along streets include avenue give two integer point $$$ a $$$ $$$ b $$$ somewhere barcelona find minimal possible distance one need travel get $$$ b $$$ $$$ a $$$ first line contain three integers $$$ a $$$ $$$ b $$$ $$$ c $$$ ( $$$ -1000000000\leq a b c\leq 1000000000 $$$ least one $$$ a $$$ $$$ b $$$ zero ) represent diagonal avenue next line contain four integers $$$ x_1 $$$ $$$ y_1 $$$ $$$ x_2 $$$ $$$ y_2 $$$ ( $$$ -1000000000\leq x_1 y_1 x_2 <unknown> 1000000000 $$$ ) denote point $$$ a = ( x_1 y_1 ) $$$ $$$ b = ( x_2 y_2 ) $$$ find minimum possible travel distance $$$ a $$$ $$$ b $$$ answer consider correct absolute relative error exceed $$$ 10^ { -6 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ answer accept $$$ \frac { |a - b| } { \max { ( 1 |b| ) } } \le 10^ { -6 } $$$ first example show leave picture second example us show right picture avenue show blue origin show black dot,"['geometry', 'implementation']",1900.0
1023/A,give two string $$$ s $$$ $$$ t $$$ string $$$ s $$$ consist lowercase latin letter one wildcard character ' * ' string $$$ t $$$ consist lowercase latin letter length string $$$ s $$$ equal $$$ n $$$ length string $$$ t $$$ equal $$$ m $$$ wildcard character ' * ' string $$$ s $$$ ( ) replace arbitrary sequence ( possibly empty ) lowercase latin letter character $$$ s $$$ replace anything possible replace a wildcard character ' * ' $$$ s $$$ obtain a string $$$ t $$$ string $$$ t $$$ match pattern $$$ s $$$ example $$$ s= $$$ ` ` aba * aba '' follow string match ` ` abaaba '' ` ` abacaba '' ` ` <unknown> '' follow string match : ` ` ababa '' ` ` <unknown> '' ` ` codeforces '' ` ` <unknown> '' ` ` aba ? aba '' give string $$$ t $$$ match give string $$$ s $$$ print ` ` yes '' otherwise print ` ` '' first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 200000 $$$ ) — length string $$$ s $$$ length string $$$ t $$$ respectively second line contain string $$$ s $$$ length $$$ n $$$ consist lowercase latin letter one wildcard character ' * ' third line contain string $$$ t $$$ length $$$ m $$$ consist lowercase latin letter print ` ` yes '' ( without quote ) obtain string $$$ t $$$ string $$$ s $$$ otherwise print ` ` '' ( without quote ) first example a wildcard character ' * ' replace a string ` ` force '' string $$$ s $$$ replacement ` ` codeforces '' answer ` ` yes '' second example a wildcard character ' * ' replace empty string string $$$ s $$$ replacement ` ` vkcup '' answer ` ` yes '' wildcard character ' * ' third example string ` ` v '' ` ` k '' different answer ` ` '' fourth example replacement a wildcard character ' * ' obtain string $$$ t $$$ answer ` ` '',"['brute force', 'implementation', 'strings']",1200.0
1011/A,"natasha go fly mar need build a rocket consist several stag order stag define a lowercase latin letter way rocket describe string — concatenation letter correspond stag $$$ n $$$ stag available rocket must contain exactly $$$ k $$$ stag rocket order weight , stage letter go stage a letter least two position alphabet ( skip one letter even ) example letter ' c ' ca n't go letter ' a ' ' b ' ' c ' 'd ' go letter ' e ' ' f ' ... ' z ' rocket fly far possible weight minimal weight rocket equal sum weight stag weight stage number letter alphabet example stage ' a ' weighs one ton ' b ' weighs two tons ' z ' — $$$ 26 $$$ tons build rocket minimal weight determine impossible build a rocket stage use first line input contain two integers — $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 50 $$$ ) – number available stag number stag use rocket second line contain string $$$ s $$$ consist exactly $$$ n $$$ lowercase latin letter letter define a new stage use build rocket stage use print a single integer — minimal total weight rocket -1 impossible build rocket first example follow rocket satisfy condition : rocket ` ` <unknown> '' minimal weight answer $$$ 29 $$$ second example target rocket ` ` <unknown> '' weight $$$ 2 + 5 + 12 + <unknown> $$$ third example $$$ n = k=2 $$$ rocket must stag : ' a ' ' b ' rocket n't satisfy condition letter adjacent alphabet answer -1","['greedy', 'implementation']",900.0
1010/D,natasha travel around mar mar rover suddenly break namely — logical scheme inside scheme undirected tree ( connect acyclic graph ) a root vertex $$$ 1 $$$ every leaf ( exclude root ) input vertices logical elements include root output one bite feed input one bite return output four type logical elements : ( $$$ 2 $$$ input ) ( $$$ 2 $$$ input ) xor ( $$$ 2 $$$ input ) ( $$$ 1 $$$ input ) logical elements take value direct descendants ( input ) return result function perform natasha know logical scheme mar rover well fact one input break order fix mar rover need change value input input determine output natasha change input first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 1000000 $$$ ) — number vertices graph ( input elements ) $$$ i $$$ -th next $$$ n $$$ line contain a description $$$ i $$$ -th vertex : first word ` ` '' ` ` '' ` ` xor '' ` ` '' ` ` '' ( mean input scheme ) vertex type vertex ` ` '' value input follow ( $$$ 0 $$$ $$$ 1 $$$ ) otherwise follow indices input vertices element : ` ` '' ` ` '' ` ` xor '' $$$ 2 $$$ input whereas ` ` '' $$$ 1 $$$ input vertices number one guarantee input data contain a correct logical scheme output produce vertex $$$ 1 $$$ print a string character ' 0 ' ' 1 ' ( without quote ) — answer problem input ascend order vertex indices original scheme example ( input change ) : green indicate bits ' 1 ' yellow indicate bits ' 0 ' natasha change input bite $$$ 2 $$$ $$$ 0 $$$ output $$$ 1 $$$ natasha change input bite $$$ 3 $$$ $$$ 0 $$$ output $$$ 0 $$$ natasha change input bite $$$ 6 $$$ $$$ 1 $$$ output $$$ 1 $$$ natasha change input bite $$$ 8 $$$ $$$ 0 $$$ output $$$ 1 $$$ natasha change input bite $$$ 9 $$$ $$$ 0 $$$ output $$$ 0 $$$,"['dfs and similar', 'implementation']",2000.0
1009/A,maxim want buy game local game shop $$$ n $$$ game shop $$$ i $$$ -th game cost $$$ c_i $$$ maxim a wallet represent array integers wallet contain $$$ m $$$ bill $$$ j $$$ -th bill value $$$ a_j $$$ game shop order leave right maxim try buy every game order maxim stand position $$$ i $$$ shop take first bill wallet ( wallet empty proceed next position immediately ) try buy $$$ i $$$ -th game use bill maxim try buy $$$ n $$$ -th game leave shop maxim buy $$$ i $$$ -th game value first bill ( take ) wallet greater equal cost $$$ i $$$ -th game successfully buy $$$ i $$$ -th game first bill wallet disappear next bill become first otherwise maxim leave first bill wallet ( bill still remain first one ) proceed next game example array $$$ c = [ 2 4 5 2 4 ] $$$ array $$$ a = [ 5 3 4 6 ] $$$ follow process take place : maxim buy first game use first bill ( value $$$ 5 $$$ ) bill disappear second bill ( value $$$ 3 $$$ ) become first one maxim 's wallet maxim n't buy second game $$$ c_2 > a_2 $$$ third game buy fourth game use bill value $$$ a_2 $$$ ( third bill become first one maxim 's wallet ) buy fifth game use bill value $$$ a_3 $$$ task get number game maxim buy first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 1000 $$$ ) — number game number bill maxim 's wallet second line input contain $$$ n $$$ integers $$$ c_1 c_2 \dots c_n $$$ ( $$$ 1 \le c_i \le 1000 $$$ ) $$$ c_i $$$ cost $$$ i $$$ -th game third line input contain $$$ m $$$ integers $$$ a_1 a_2 \dots a_m $$$ ( $$$ 1 \le a_j \le 1000 $$$ ) $$$ a_j $$$ value $$$ j $$$ -th bill maxim 's wallet print a single integer — number game maxim buy first example describe problem statement second example maxim buy game value first bill wallet smaller cost game shop third example value bill maxim 's wallet large enough buy game encounter run bill wallet,['implementation'],800.0
1006/B,polycarp practice problem solve skill a list $$$ n $$$ problems difficulties $$$ a_1 a_2 \dots a_n $$$ respectively plan practice exactly $$$ k $$$ days day solve least one problem list polycarp solve problems order give list skip problem list solve $$$ n $$$ problems exactly $$$ k $$$ days thus day polycarp solve a contiguous sequence ( consecutive ) problems start list ca n't skip problems solve multiple time a result $$$ k $$$ days solve $$$ n $$$ problems profit $$$ j $$$ -th day polycarp 's practice maximum among difficulties problems polycarp solve $$$ j $$$ -th day ( i.e solve problems indices $$$ l $$$ $$$ r $$$ a day profit day $$$ \max\limits _ { l \le i \le r } a_i $$$ ) total profit practice sum profit $$$ k $$$ days practice want help polycarp get maximum possible total profit valid ways solve problems task distribute $$$ n $$$ problems $$$ k $$$ days satisfy condition a way total profit maximum example $$$ n = 8 k = 3 $$$ $$$ a = [ 5 4 2 6 5 1 9 2 ] $$$ one possible distributions maximum total profit : $$$ [ 5 4 2 ] [ 6 5 ] [ 1 9 2 ] $$$ total profit equal $$$ 5 + 6 + 9 = 20 $$$ first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 2000 $$$ ) — number problems number days respectively second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 2000 $$$ ) — difficulties problems polycarp 's list order place list ( i.e order polycarp solve ) first line output print maximum possible total profit second line print exactly $$$ k $$$ positive integers $$$ t_1 t_2 \dots t_k $$$ ( $$$ t_1 + t_2 + \dots + t_k $$$ must equal $$$ n $$$ ) $$$ t_j $$$ mean number problems polycarp solve $$$ j $$$ -th day order achieve maximum possible total profit practice many possible answer may print first example describe problem statement second example one possible distribution third example best answer distribute problems follow way : $$$ [ 1 2000 ] [ 2000 2 ] $$$ total profit distribution $$$ 2000 + 2000 = 4000 $$$,"['greedy', 'implementation']",1200.0
1005/C,a sequence $$$ a_1 a_2 \dots a_n $$$ call good element $$$ a_i $$$ exist element $$$ a_j $$$ ( $$$ i \ne j $$$ ) $$$ a_i+a_j $$$ a power two ( $$$ 2^d $$$ non - negative integer $$$ d $$$ ) example follow sequence good : note definition empty sequence ( a length $$$ 0 $$$ ) good example follow sequence good : give a sequence $$$ a_1 a_2 \dots a_n $$$ minimum number elements need remove make good ? delete arbitrary set elements first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 120000 $$$ ) — length give sequence second line contain sequence integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) print minimum number elements need remove give sequence order make good possible need delete $$$ n $$$ elements make empty thus get a good sequence first example enough delete one element $$$ a_4=5 $$$ remain elements form sequence $$$ [ 4 7 1 4 9 ] $$$ good,"['brute force', 'greedy', 'implementation']",1300.0
1004/C,"since sonya interest <unknown> decide construct robots read recognize number sonya draw $$$ n $$$ number a row $$$ a_i $$$ locate $$$ i $$$ -th position also put a robot end row ( leave first number right last number ) sonya give a number robot ( either different ) run a robot run move toward another robot read number row a robot read a number equal number give robot turn stay position sonya want robots break give number robots stop meet , girl want stop different position first robot leave second one example number $$$ [ 1 5 4 1 3 ] $$$ write sonya give number $$$ 1 $$$ first robot number $$$ 4 $$$ second one first robot stop $$$ 1 $$$ -st position second one $$$ 3 $$$ -rd position case robots meet a result robots break sonya give number $$$ 4 $$$ first robot number $$$ 5 $$$ second one meet since first robot stop $$$ 3 $$$ -rd position second one $$$ 2 $$$ -nd position sonya understand make sense give a number write row a robot find number meet robot sonya interest find number different pair give robots meet word want know number pair ( $$$ p $$$ $$$ q $$$ ) give $$$ p $$$ first robot $$$ q $$$ second one pair ( $$$ p_i $$$ $$$ q_i $$$ ) ( $$$ p_j $$$ $$$ q_j $$$ ) different $$$ <unknown> p_j $$$ $$$ <unknown> q_j $$$ unfortunately sonya busy fix robots break a fail launch ask find number pair give robots meet first line contain a single integer $$$ n $$$ ( $$$ 1\leq n\leq 100000 $$$ ) — number number a row second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1\leq a_i\leq 100000 $$$ ) — number a row print one number — number possible pair sonya give robots meet first example sonya give pair ( $$$ 1 $$$ $$$ 1 $$$ ) ( $$$ 1 $$$ $$$ 3 $$$ ) ( $$$ 1 $$$ $$$ 4 $$$ ) ( $$$ 1 $$$ $$$ 5 $$$ ) ( $$$ 4 $$$ $$$ 1 $$$ ) ( $$$ 4 $$$ $$$ 3 $$$ ) ( $$$ 5 $$$ $$$ 1 $$$ ) ( $$$ 5 $$$ $$$ 3 $$$ ) ( $$$ 5 $$$ $$$ 4 $$$ ) second example sonya give pair ( $$$ 1 $$$ $$$ 1 $$$ ) ( $$$ 1 $$$ $$$ 2 $$$ ) ( $$$ 1 $$$ $$$ 3 $$$ ) ( $$$ 2 $$$ $$$ 1 $$$ ) ( $$$ 2 $$$ $$$ 2 $$$ ) ( $$$ 2 $$$ $$$ 3 $$$ ) ( $$$ 3 $$$ $$$ 2 $$$ )","['constructive algorithms', 'implementation']",1400.0
999/B,a string $$$ s $$$ length $$$ n $$$ encrypt follow algorithm : example algorithm apply string $$$ s $$$ = '' codeforces '' lead follow change : ` ` codeforces '' $$$ \to $$$ ` ` <unknown> '' $$$ \to $$$ ` ` <unknown> '' $$$ \to $$$ ` ` rocesfedoc '' $$$ \to $$$ ` ` rocesfedoc '' ( obviously last reverse operation n't change string $$$ d=1 $$$ ) give encrypt string $$$ t $$$ task decrypt string i.e. find a string $$$ s $$$ algorithm result string $$$ t $$$ prove string $$$ s $$$ always exist unique first line input consist a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — length string $$$ t $$$ second line input consist string $$$ t $$$ length $$$ t $$$ $$$ n $$$ consist lowercase latin letter print a string $$$ s $$$ algorithm result $$$ t $$$ first example describe problem statement,['implementation'],900.0
997/A,"' ve get a string $$$ a_1 a_2 \dots a_n $$$ consist zero ones let 's call a sequence consecutive elements $$$ a_i a _ { i + 1 } \ldots a_j $$$ ( $$$ 1\leq i\leq j\leq n $$$ ) a substring string $$$ a $$$ apply follow operations number time : apply operations order allow apply operations multiple time substring minimum number coin need spend get a string consist ones ? first line input contain integers $$$ n $$$ $$$ x $$$ $$$ y $$$ ( $$$ 1 \leq n \leq 300\,000 0 \leq x y \leq 1000000000 $$$ ) — length string cost first operation ( substring reverse ) cost second operation ( invert elements substring ) second line contain string $$$ a $$$ length $$$ n $$$ consist zero ones print a single integer — minimum total cost operations need spend get a string consist ones print $$$ 0 $$$ need perform operations first sample first need reverse substring $$$ [ 1 \dots 2 ] $$$ need invert substring $$$ [ 2 \dots 5 ] $$$ string change follow : « 01000 » $$$ \to $$$ « 10000 » $$$ \to $$$ « 11111 » total cost operations $$$ 1 + 10 = 11 $$$ second sample first need invert substring $$$ [ 1 \dots 1 ] $$$ need invert substring $$$ [ 3 \dots 5 ] $$$ string change follow : « 01000 » $$$ \to $$$ « 11000 » $$$ \to $$$ « 11111 » overall cost $$$ 1 + 1 = 2 $$$ third example string already consist ones answer $$$ 0 $$$","['brute force', 'greedy', 'implementation', 'math']",1500.0
995/A,allen dream one day own a enormous fleet electric cars car future ! know give a big status boost allen plan different type cars arrange realize a problem allen 's future park lot represent a rectangle $$$ 4 $$$ row $$$ n $$$ ( $$$ n \le 50 $$$ ) columns rectangular space contain one car time imagine $$$ k $$$ ( $$$ k \le 2n $$$ ) cars grid cars initially second third row cars also a different designate park space first fourth row allen put cars correspond park place however since allen would never entrust cars anyone else one car move a time drive a car a space four cardinal directions a neighbor empty space furthermore allen move one cars a space first fourth row car 's designate park space allen know a busy man time move cars $$$ 20000 $$$ time realize move cars worth time help allen determine bother park cars leave someone less important first line input contain two space - separated integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 50 $$$ $$$ 1 \le k \le 2n $$$ ) represent number columns number cars respectively next four line contain $$$ n $$$ integers $$$ 0 $$$ $$$ k $$$ inclusive represent initial state park lot row number $$$ 1 $$$ $$$ 4 $$$ top bottom columns number $$$ 1 $$$ $$$ n $$$ leave right first last line integer $$$ 1 \le x \le k $$$ represent a park spot assign car $$$ x $$$ ( move car place ) integer $$$ 0 $$$ represent a empty space ( ca n't move car place ) second third line integer $$$ 1 \le x \le k $$$ represent initial position car $$$ x $$$ integer $$$ 0 $$$ represent empty space ( move car place ) $$$ x $$$ $$$ 1 $$$ $$$ k $$$ appear exactly second third line exactly first fourth line a sequence move bring cars park space $$$ 20000 $$$ car move print $$$ m $$$ number move first line follow $$$ m $$$ line print move ( one move per line ) format $$$ i $$$ $$$ r $$$ $$$ c $$$ correspond allen move car $$$ i $$$ neighbor space row $$$ r $$$ column $$$ c $$$ possible allen move cars correct space $$$ 20000 $$$ car move print a single line integer $$$ -1 $$$ first sample test case cars front spot except car $$$ 5 $$$ front park spot adjacent example show shortest possible sequence move sequence length $$$ 20000 $$$ accept second sample test case one column cars wrong order cars move task impossible,"['constructive algorithms', 'implementation']",2100.0
976/B,might hear next game lara croft series come year also might watch <unknown> though definitely miss main idea plot let lift veil <unknown> lara go explore yet another dangerous dungeon game designers decide use good old 2d environment dungeon represent a rectangle matrix n row m columns cell ( x y ) cell x - th row y - th column lara move neighbour side cells four directions moreover even choose path avoid trap enter dungeon cell ( 1 1 ) top leave corner matrix go way cell ( n 1 ) — bottom leave corner start move snake fashion — way right one cell leave cell 2 - nd column one cell move run non - <unknown> cells n m give always end cell ( 1 2 ) lara already move a neighbour cell k time determine current position ? line contain three integers n m k ( 2 ≤ n m ≤ 109 n always even 0 ≤ k < n·m ) note k n't fit 32 - bit integer type ! print cell ( row column cell situate ) lara end move k time path matrix 4 3 :,"['implementation', 'math']",1300.0
975/B,mancala a game famous middle east play a board consist 14 hole initially hole $$$ a_i $$$ stone a player make a move choose a hole contain a positive number stone take stone inside redistribute stone one one next hole a counter - clockwise direction note counter - clockwise order mean player take stone hole $$$ i $$$ put one stone $$$ ( i+1 ) $$$ -th hole $$$ ( i+2 ) $$$ -th etc put a stone $$$ 14 $$$ -th hole next one put first hole move player collect stone hole contain even number stone number stone collect player score accord resli resli a famous mancala player want know maximum score obtain one move line contain 14 integers $$$ a_1 a_2 \ldots a _ { 14 } $$$ ( $$$ 0 \leq a_i \leq 1000000000 $$$ ) — number stone hole guarantee $$$ i $$$ ( $$$ 1\leq i \leq 14 $$$ ) $$$ a_i $$$ either zero odd least one stone board output one integer maximum possible score one move first test case board move hole $$$ 7 $$$ stone look like 1 2 2 0 0 0 0 0 0 0 1 1 1 1 . player collect even number end a score equal $$$ 4 $$$,"['brute force', 'implementation']",1100.0
965/B,arkady play battleship rule game n't really important a field $$$ n \times n $$$ cells exactly one $$$ k $$$ <unknown> field i. e. a ship $$$ k $$$ cells long orient either horizontally vertically however arkady n't know locate cell arkady know definitely empty contain a part ship consider possible locations ship find a cell belong maximum possible number different locations ship first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 100 $$$ ) — size field size ship next $$$ n $$$ line contain field line contain $$$ n $$$ character either ' # ' ( denote a definitely empty cell ) ' . ' ( denote a cell belong ship ) output two integers — row column a cell belong maximum possible number different locations ship multiple answer output particular ship place field output cell picture show three possible locations ship contain cell $$$ ( 3 2 ) $$$ first sample,['implementation'],1300.0
962/C,give a positive integer $$$ n $$$ write without lead zero ( example number 04 incorrect ) one operation delete digit give integer result remain a positive integer without lead zero determine minimum number operations need consistently apply give integer $$$ n $$$ make square positive integer report impossible integer $$$ x $$$ square positive integer $$$ x = y^2 $$$ positive integer $$$ y $$$ first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 2 \cdot 10^ { 9 } $$$ ) number give without lead zero impossible make square positive integer $$$ n $$$ print -1 . case print minimal number operations require first example delete $$$ 8314 $$$ digits $$$ 3 $$$ $$$ 4 $$$ $$$ 8314 $$$ become equal $$$ 81 $$$ square integer $$$ 9 $$$ second example give $$$ <unknown> $$$ square integer $$$ 25 $$$ delete anything third example impossible make square $$$ 333 $$$ answer -1,"['brute force', 'implementation', 'math']",1400.0
960/A,"a a string consist number lowercase english letter ' a ' give friend b append number letter ' b ' end string since a b like character ' a ' ' b ' make sure point least one ' a ' one ' b ' exist string b give string c append number letter ' c ' end string however since c a good friend a b number letter ' c ' append equal number ' a ' number ' b ' string also possible number letter ' c ' equal number letter ' a ' number letter ' b ' time a string hand want check possible obtain string way possible obtain string print ` ` yes '' otherwise print ` ` '' ( without quote ) first line consist a string $$$ s $$$ ( $$$ 1 \le |s| \le 5\,000 $$$ ) guarantee string consist lowercase english letter ' a ' ' b ' ' c ' print ` ` yes '' ` ` '' accord condition consider first example : number ' c ' equal number ' a ' consider second example : although number ' c ' equal number ' b ' order correct consider third example : number ' c ' equal number ' b '",['implementation'],1200.0
959/E,ehab interest bitwise - xor operation special graph mahmoud give a problem combine a complete graph consist n vertices number 0 n - 1 . 0 ≤ u < v < n vertex u vertex v connect undirected edge weight ( bitwise - xor operation ) find weight minimum span tree graph ? read complete graph https : //en.wikipedia.org / wiki / <unknown> read minimum span tree https : //en.wikipedia.org / wiki / <unknown> weight minimum span tree sum weight edge include line contain integer n ( 2 ≤ n ≤ 1012 ) number vertices graph line contain integer x weight graph 's minimum span tree first sample : weight minimum span tree 1 + 2 + 1=4,"['dp', 'implementation', 'math']",1900.0
958/B1,resistance try take control planets a particular solar system solar system shape like a tree precisely planets connect bidirectional hyperspace tunnel a way a path every pair planets remove tunnel would disconnect resistance already measure place time right enable control every planet remote a planet consider remote connect rest planets via a single hyperspace tunnel much work leave do : many remote planets ? first line input contain integer n ( 2 ≤ n ≤ 1000 ) – number planets galaxy next n - 1 line describe hyperspace tunnel planets n - 1 line contain two space - separated integers u v ( 1 ≤ u v ≤ n ) indicate a bidirectional hyperspace tunnel planets u v. guarantee every two planets connect a path tunnel tunnel connect a different pair planets a single integer denote number remote planets first example planets 2 3 5 connect a single tunnel second example remote planets 2 3 . note problem two versions – easy medium,['implementation'],1000.0
958/A1,<unknown> <unknown> science art detect death star <unknown> princess heidi receive information star nearby solar system rebel spy help identify exact location death star need know whether information correct two rebel spy provide map solar system map n × n grid cell either occupy a star empty see whether information correct heidi need know whether two map solar system possibly one spy actually empire double agent feed false information unfortunately spy may accidentally rotate a map 90 180 270 degrees flip along vertical horizontal axis deliver heidi heidi rotate flip map two become identical map solar system otherwise traitors rebel rank ! help heidi find first line input contain one number n ( 1 ≤ n ≤ 10 ) – dimension map next n line contain n character depict first map : ' x ' indicate a star ' o ' indicate empty quadrant space next n line contain n character depict second map format line output contain word yes map identical impossible match perform rotations translations first test match first map second map first flip first map along vertical axis rotate 90 degrees clockwise,['implementation'],1400.0
952/C,everybody know spaghetti sort decide implement analog sort algorithm survey <unknown> realize 're spaghetti ! type <unknown> ravioli go let stop ... come follow algorithm number array ai build a stack ai ravioli image show stack ai = 4 . arrange stack one row order correspond number appear input array find tallest one ( several stack maximal height use leftmost one ) remove add height end output array shift stack row gap repeat procedure stack remove first happy algorithm try input realize n't always produce right sort array turn two stack ravioli next ( step process ) differ height two top ravioli taller stack slide top lower stack give input array figure whether describe algorithm sort correctly first line input contain a single number n ( 1 ≤ n ≤ 10 ) — size array second line input contain n space - separated integers ai ( 1 ≤ ai ≤ 100 ) — elements array output ` ` yes '' array sort use describe procedure ` ` '' second example array change even tallest stack choose first time : ravioli stack height 3 slide stack height 1 algorithm output array { 2 2 2 },['implementation'],1600.0
939/B,dima a hamsters farm soon n hamsters grow dima sell a city nearby hamsters transport box box completely full hamsters bore 's box completely full hamsters dima buy box a factory factory produce box k kinds box i - th kind contain ai hamsters dima buy amount box buy box one kind get a <unknown> discount course dima would buy box a way box completely fill hamsters transport city place hamsters dima leave farm find many box type dima buy transport maximum number hamsters first line contain two integers n k ( 0 ≤ n ≤ 1018 1 ≤ k ≤ 105 ) — number hamsters grow dima 's farm number type box factory produce second line contain k integers a1 a2 ... ak ( 1 ≤ ai ≤ 1018 i ) — capacities box output two integers : type box dima buy number box type dima buy type box number 1 k order give input many correct answer output,['implementation'],1000.0
938/A,victor try write text editor word correction include however rule word correction really strange victor think a word contain two consecutive vowels 's kinda weird need replace word <unknown> work a way : long two consecutive vowels word delete first vowel a word another vowel right two consecutive vowels word consider correct give a word s. predict become correction ? problem letter a e i o u y consider vowels first line contain one integer n ( 1 ≤ n ≤ 100 ) — number letter word s correction second line contain a string s consist exactly n lowercase latin letter — word correction output word s correction explanations examples :,['implementation'],800.0
926/A,a positive integer call a 2 - 3 - integer equal <unknown> non - negative integers x y. word integers integers 2 3 among prime divisors example integers 1 6 9 16 108 — 2 - 3 integers 5 10 21 120 print number 2 - 3 - integers give segment [ l r ] i. e. number <unknown> 2 - 3 - integers t l ≤ t ≤ r. line contain two integers l r ( 1 ≤ l ≤ r ≤ 2·109 ) print a single integer number 2 - 3 - integers segment [ l r ] first example 2 - 3 - integers 1 2 3 4 6 8 9 . second example 2 - 3 - integers 108 128 144 162 192,"['implementation', 'math']",1300.0
920/D,petya sometimes water field water field petya need a tank exactly v ml water petya get n tank i - th initially contain ai ml water tank really large contain amount water ( matter large amount ) also petya get a scoop contain k ml water ( initially scoop empty ) scoop use get water tank pour tank ( impossible get water multiple tank without pour leave water scoop pour ) petya try get water a tank get min ( v k ) water v current volume water tank possible obtain a tank exactly v ml water use operations ? possible print a sequence operations allow multiple ways obtain need amount water tank print first line contain 3 integers : n ( 2 ≤ n ≤ 5000 ) k ( 1 ≤ k ≤ 5000 ) v ( 0 ≤ v ≤ 109 ) — number tank maximum volume water scoop contain require amount water tank respectively second line contain n integers ai ( 0 ≤ ai ≤ 105 ) ai initial volume water i - th tank impossible obtain a tank exactly v ml water print otherwise print yes first line begin second line print sequence operations follow format : line contain 3 number denote a compress operation : ` ` cnt x y '' ( 1 ≤ cnt ≤ 109 1 ≤ x y ≤ n ) x index tank get water y index tank pour water cnt number time transfer water tank x tank y. number line must exceed n + 5,"['dp', 'greedy', 'implementation']",2400.0
920/A,"winter max decide 's time water garden garden represent n consecutive garden bed number 1 n. k bed contain water tap ( i - th tap locate bed xi ) , turn start deliver water neighbour bed tap bed xi turn one second pass bed xi water ; two second pass bed segment [ xi - 1 xi + 1 ] water ( exist ) ; j second pass ( j integer number ) bed segment [ xi - ( j - 1 ) xi + ( j - 1 ) ] water ( exist ) nothing change second , example ca n't say segment [ xi - 2.5 xi + 2.5 ] water 2.5 second pass ; segment [ xi - 2 xi + 2 ] water moment max want turn water tap moment wonder minimum number second pass turn tap whole garden water help find answer ! first line contain one integer t — number test case solve ( 1 ≤ t ≤ 200 ) t test case follow first line test case contain two integers n k ( 1 ≤ n ≤ 200 1 ≤ k ≤ n ) — number garden bed water tap respectively next line contain k integers xi ( 1 ≤ xi ≤ n ) — location i - th water tap guarantee condition xi - 1 < xi hold guarantee sum n test case n't exceed 200 . note hack set t = 1 . test case print one integer — minimum number second pass max turn water tap whole garden water first example consist 3 test :",['implementation'],1000.0
908/C,carol currently <unknown> n disk radius r 2d plane initially disk line y = 10100 . slide disk towards line y = 0 one one order 1 n. slide i - th disk place center point ( xi 10100 ) push disk ’ s y coordinate continuously decrease x coordinate stay constant disk stop touch line y = 0 touch previous disk note a disk stop move move even hit another disk compute y - coordinates center disk disk push first line contain two integers n r ( 1 ≤ n r ≤ 1 000 ) number disk radius disk respectively next line contain n integers x1 x2 ... xn ( 1 ≤ xi ≤ 1 000 ) — x - coordinates disk print a single line n number i - th number denote y - coordinate center i - th disk output accept absolute relative error 10 - 6 . namely let 's assume answer a particular value a coordinate a answer jury b. checker program consider answer correct coordinate final position disk look follow : particular note position last disk,"['brute force', 'geometry', 'implementation', 'math']",1500.0
908/A,friend n card know card a lowercase english letter one side a digit currently friend lay card a table one side card visible would like know follow statement true card friend own : ` ` a card a vowel one side even digit side . '' specifically a vowel one ' a ' ' e ' ' i ' ' o ' ' u ' even digit one ' 0 ' ' 2 ' ' 4 ' ' 6 ' ' 8 ' example a card ' a ' one side ' 6 ' side statement true also statement true example a card ' b ' ' 4 ' a card ' b ' ' 3 ' ( since letter a vowel ) statement false example card ' e ' ' 5 ' interest statement true card particular card a vowel statement true determine flip card reveal side would like know minimum number card need flip worst case order verify statement true first line input contain a string s ( 1 ≤ |s| ≤ 50 ) denote side card see table currently character s either a lowercase english letter a digit print a single integer minimum number card must turn verify claim first sample must turn card note even though card letter could possibly different number side second sample n't need turn card statement <unknown> true since know friend card a vowel third sample need flip second fourth card,"['brute force', 'implementation']",800.0
907/B,two bear play tic - tac - toe via mail 's bore play usual tic - tac - toe game a play modify version game rule game play follow field players make move turn first move a player put chip cell small field follow move restrictions : last move opposite player put chip cell coordinate ( xl yl ) small field next move do one cells small field coordinate ( xl yl ) example first move a player put chip lower leave cell central field second player next move put chip cell lower leave field ( pay attention first test case ) free cells require field player put chip empty cell field give current state game coordinate cell last move do find cells current player put chip a hare work a postman forest like foul bear sometimes change game field a bite current state game could unreachable however change cell last move do empty n't need find state unreachable output possible next move accord rule first 11 line contain descriptions table 9 row 9 columns divide 9 small field space empty line small field describe 9 character without space empty line character ` ` x '' ( ascii - code 120 ) mean cell occupy chip first player character ` ` o '' ( ascii - code 111 ) denote a field occupy chip second player character ` ` . '' ( ascii - code 46 ) describe empty cell line table contain two integers x y ( 1 ≤ x y ≤ 9 ) describe coordinate cell table last move do row table number columns number leave right 's guarantee cell last move do fill ` ` x '' ` ` o '' also 's guarantee least one empty cell 's guarantee current state game reachable output field format character ` ` ! '' ( ascii - code 33 ) position current player put chip cells modify first test case first player make a move lower leave cell central field second player put a chip cells lower leave field second test case last move do upper leave cell lower central field however cells upper leave field occupy second player put chip empty cell third test case last move do central cell central field current player put chip cell central field already occupy move anywhere pay attention state game unreachable,['implementation'],1400.0
900/A,n distinct point a plane none lie oy axis check a point removal remain point locate one side oy axis first line contain a single positive integer n ( 2 ≤ n ≤ 105 ) follow n line contain coordinate point i - th line contain two single integers xi yi ( |xi| |yi| ≤ 109 xi ≠ 0 ) two point coincide print ` ` yes '' a point ` ` '' — otherwise print every letter case ( upper lower ) first example second point remove second example suitable condition point third example point remove,"['geometry', 'implementation']",800.0
897/A,<unknown> sage <unknown> <unknown> remember one live true love mine willem take girl highest build island <unknown> however neither know get willem ask friend grick directions grick help give a task although girl want help willem insist grick give willem a string length n. willem need m operations operation four parameters l r c1 c2 mean symbols c1 range [ l r ] ( l - th r - th include l r ) change c2 string 1 - indexed grick want know final string m operations first line contain two integers n m ( 1 ≤ n m ≤ 100 ) second line contain a string s length n consist lowercase english letter next m line contain four parameters l r c1 c2 ( 1 ≤ l ≤ r ≤ n c1 c2 lowercase english letter ) separate space output string s perform m operations describe second example : first operation string <unknown> second operation string <unknown> third operation string <unknown>,['implementation'],800.0
887/C,break competitions top - model izabella try develop bore example try solve rubik 's cube <unknown> 's hard learn solve rubik 's cube instantly learn understand 's possible solve cube state use 90 - degrees rotation one face cube direction check answer want use a program state cube tell 's possible solve use one rotation describe cube call solve face cube square <unknown> : //en.wikipedia.org / wiki / <unknown> first line give a sequence 24 integers ai ( 1 ≤ ai ≤ 6 ) ai denote color i - th square exactly 4 occurrences color sequence print « yes » ( without quote ) 's possible solve cube use one rotation « » ( without quote ) otherwise first test case cube look like : second test case cube look like : 's possible solve cube rotate face square number 13 14 15 16,"['brute force', 'implementation']",1500.0
886/D,a substring string call frequent number occurrences less number occurrences substring give a set string a string ( necessarily set ) call good elements set frequent substrings string restore non - empty good string minimum length several string exist restore lexicographically minimum string good string print ` ` '' ( without quote ) a substring a string a contiguous subsequence letter string example ` ` ab '' ` ` c '' ` ` abc '' substrings string ` ` abc '' ` ` ac '' a substring string number occurrences a substring a string number start position string substring occur occurrences could overlap string a lexicographically smaller string b a a prefix b a a smaller letter first position a b differ first line contain integer n ( 1 ≤ n ≤ 105 ) — number string set next n line contain a non - empty string consist lowercase english letter guarantee string distinct total length string n't exceed 105 . print non - empty good string minimum length several good string exist print lexicographically minimum among print ` ` '' ( without quote ) good string one show first sample two good string minimum length exist : ` ` <unknown> '' ` ` <unknown> '' first string lexicographically minimum,"['constructive algorithms', 'implementation']",2000.0
876/B,give a multiset n integers select exactly k a way difference two divisible m tell impossible number repeat original multiset multiset select number number occurrences number multiset select number exceed number occurrences original multiset first line contain three integers n k m ( 2 ≤ k ≤ n ≤ 100 000 1 ≤ m ≤ 100 000 ) — number integers multiset number integers select require divisor pair select integers second line contain n integers a1 a2 ... ( 0 ≤ ai ≤ 109 ) — number multiset possible select k number desire way output « » ( without quote ) otherwise first line output print « yes » ( without quote ) second line print k integers b1 b2 ... bk — select number multiple possible solutions print,"['implementation', 'math']",1300.0
869/A,"rock ... paper ! karen find deterministic win ( lose ? ) strategy rock - paper - scissors brother koyomi come a new game a substitute game work follow a positive integer n decide first koyomi karen independently choose n distinct positive integers denote x1 x2 ... xn y1 y2 ... yn respectively reveal sequence repeat 2n integers become distinct final state keep consider count number order pair ( i j ) ( 1 ≤ i j ≤ n ) value xi xor yj equal one 2n integers xor mean bitwise exclusive operation two integers denote operators ^ and/or xor program languages karen claim a win number pair even koyomi otherwise 're help determine winner latest game first line input contain a positive integer n ( 1 ≤ n ≤ 2 000 ) — length sequence second line contain n space - separated integers x1 x2 ... xn ( 1 ≤ xi ≤ 2·106 ) — integers finally choose koyomi third line contain n space - separated integers y1 y2 ... yn ( 1 ≤ yi ≤ 2·106 ) — integers finally choose karen input guarantee give 2n integers pairwise distinct , pair ( i j ) ( 1 ≤ i j ≤ n ) exist one follow hold : xi = yj ; i ≠ j xi = xj ; i ≠ j yi = yj output one line — name winner , ` ` koyomi '' ` ` karen '' ( without quote ) please aware capitalization first example 6 pair satisfy constraint : ( 1 1 ) ( 1 2 ) ( 2 1 ) ( 2 3 ) ( 3 2 ) ( 3 3 ) thus karen win since 6 even number second example 16 pair karen win","['brute force', 'implementation']",1100.0
868/D,give n string s1 s2 ... sn consist character 0 1 . m operations perform concatenate two exist string a new one i - th operation concatenation <unknown> save a new string sn + i ( operations number start 1 ) operation need find maximum positive integer k possible string consist 0 1 length k ( 2k string ) substrings new string k print 0 . first line contain single integer n ( 1 ≤ n ≤ 100 ) — number string next n line contain string s1 s2 ... sn ( 1 ≤ |si| ≤ 100 ) one per line total length string greater 100 . next line contain single integer m ( 1 ≤ m ≤ 100 ) — number operations m line follow contain two integers ai abd bi ( 1 ≤ ai bi ≤ n + i - 1 ) — number string concatenate form sn + i. print m line contain one integer — answer question correspond operation first operation a new string ` ` 0110 '' create k = 1 two possible binary string length k ` ` 0 '' ` ` 1 '' substrings new string k = 2 greater exist string length k appear string ( k = 2 string ` ` 00 '' ) answer 1 . second operation string ` ` 01100 '' create string length k = 2 present third operation string ` ` <unknown> '' create zero answer 0,"['brute force', 'dp', 'implementation', 'strings']",2200.0
867/A,"may know memsql american offices san francisco seattle a manager company travel a lot two cities always plane prefer fly seattle san francisco direction 's warmer san francisco busy n't remember number flight make either direction however last n days know whether san francisco office seattle office always fly nights never offices day give information determine fly time seattle san francisco last n days , first line input contain single integer n ( 2 ≤ n ≤ 100 ) — number days second line contain a string length n consist capital 's ' ' f ' letter i - th letter 's ' seattle office day otherwise san francisco days give chronological order i.e today last day sequence print ` ` yes '' fly time seattle san francisco ` ` '' otherwise print letter case ( upper lower ) first example initially san francisco fly seattle two days return san francisco make one flight direction answer ` ` '' second example fly seattle san francisco answer ` ` yes '' third example stay whole period san francisco answer ` ` '' fourth example replace 's ' ones ' f ' zero 'll get first digits π binary representation useful information though",['implementation'],800.0
858/E,all - berland national olympiad informatics end ! vladimir want upload contest olympiad a gym a popular codehorses website unfortunately archive olympiad 's data a mess example file test name arbitrary without logic vladimir want rename file test name distinct integers start 1 without gap namely ` ` 1 '' ` ` 2 '' ... ` ` n ' n total number test file contain test statements ( examples ) others contain regular test possible examples possible test examples vladimir want rename file examples first several test next file contain regular test operation vladimir perform ` ` move '' command vladimir want write a script file line ` ` move file_1 file_2 '' mean file ` ` file_1 '' rename ` ` file_2 '' a file ` ` file_2 '' moment line run file rewrite line ` ` move file_1 file_2 '' file ` ` file_1 '' n't exist a file ` ` file_2 '' content equal content ` ` file_1 '' ` ` move '' command help vladimir write script file minimum possible number line script run : first line contain single integer n ( 1 ≤ n ≤ 105 ) — number file <unknown> line follow describe a file test line a form ` ` name_i type_i '' ` ` name_i '' filename ` ` type_i '' equal ` ` 1 '' i - th file contain example test ` ` 0 '' contain a regular test filenames file string digits small english letter length 1 6 character filenames guarantee distinct first line print minimum number line vladimir 's script file print script file line ` ` move file_1 file_2 '' ` ` file_1 '' exist moment line run filename ` ` file_2 '' — a string digits small english letter length 1 6,"['greedy', 'implementation']",2200.0
858/B,"a build polycarp live equal number flats floor unfortunately polycarp n't remember many flats floor remember flats number 1 lower upper floor , first several flats first floor next several flats second polycarp n't remember total number flats build consider build infinitely high ( i.e infinitely many floor ) note floor number 1 . polycarp remember floor several flats locate guarantee information self - contradictory mean exist a build equal number flats floor flats polycarp 's memory floor polycarp remember give information possible restore exact floor flat n ? first line contain two integers n m ( 1 ≤ n ≤ 100 0 ≤ m ≤ 100 ) n number flat need restore floor m number flats polycarp 's <unknown> line follow describe polycarp 's memory : line contain a pair integers ki fi ( 1 ≤ ki ≤ 100 1 ≤ fi ≤ 100 ) mean flat ki fi - th floor value ki distinct guarantee give information self - contradictory print number floor n - th flat locate possible determine a unique way print -1 possible uniquely restore floor first example 6 - th flat 2 - nd floor 7 - th flat 3 - rd , 6 - th flat last floor 3 flats floor thus 10 - th flat 4 - th floor second example 3 4 flats floor ca n't restore floor 8 - th flat","['brute force', 'implementation']",1500.0
830/C,vladimir want modernize partition office make office comfortable decide remove a partition plant several bamboos a row think would nice n bamboos a row i - th leave ai meter high vladimir plant n bamboos a row height 0 meter right grow 1 meter day order make partition nice vladimir cut bamboo height ( greater height bamboo ) bamboo stop grow vladimir want check bamboos d days ( i.e d days plant 2d days ) cut bamboos reach require height vladimir want total length bamboo part cut greater k meter maximum value d choose achieve want without cut k meter bamboo ? first line contain two integers n k ( 1 ≤ n ≤ 100 1 ≤ k ≤ 1011 ) — number bamboos maximum total length cut part meter second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) — require heights bamboos meter print a single integer — maximum value d vladimir reach goal first example vladimir check bamboos 3 days cut first second bamboos 3 days third bamboo 6 days total length cut part 2 + 0 + 1 = 3 meter,"['brute force', 'data structures', 'implementation', 'math']",2300.0
828/A,a small restaurant a table one person b table two persons know n group people come today consist one two people a group consist one person seat a vacant one - seater table none seat a vacant two - seater table none seat a two - seater table occupy single person still none restaurant deny service group a group consist two people seat a vacant two - seater table none restaurant deny service group give a chronological order group come determine total number people restaurant deny service first line contain three integers n a b ( 1 ≤ n ≤ 2·105 1 ≤ a b ≤ 2·105 ) — number group come restaurant number one - seater number two - seater table second line contain a sequence integers t1 t2 ... tn ( 1 ≤ ti ≤ 2 ) — description clients chronological order ti equal one i - th group consist one person otherwise i - th group consist two people print total number people restaurant deny service first example first group consist one person seat a vacant one - seater table next group occupy a whole two - seater table third group consist one person occupy one place remain two - seater table fourth group consist one person seat remain seat two - seater table thus clients serve second example first group consist one person seat vacant one - seater table next group consist one person occupy one place two - seater table 's impossible seat next group two people restaurant deny service fourth group consist one person seat remain seat two - seater table thus restaurant deny service 2 clients,['implementation'],1200.0
818/D,alice bob get bore a long car trip decide play a game window see cars different color run past cars go one another game rule like firstly alice choose color a bob choose color b ( a ≠ b ) car update number cars choose color run past let 's define number i - th car <unknown> ( i ) cntb ( i ) bob know color cars encounter order appearance alice already choose color a bob want choose color b win game ( draw a win ) help find color multiple solutions print color print -1 . first line contain two integer number n a ( 1 ≤ n ≤ 105 1 ≤ a ≤ 106 ) – number cars color choose alice second line contain n integer number c1 c2 ... cn ( 1 ≤ ci ≤ 106 ) — color cars alice bob encounter order appearance output color b ( 1 ≤ b ≤ 106 ) bob choose win game multiple solutions print color print -1 . guarantee exist solution exist solution ( 1 ≤ b ≤ 106 ) let 's consider availability color first example : third example every color acceptable except 10,"['data structures', 'implementation']",1700.0
814/A,"a years ago hitagi encounter a giant <unknown> steal whole body weight ever since try avoid contact others fear secret might notice get rid oddity recover weight a special integer sequence need hitagi 's sequence break a long time kaiki provide opportunity hitagi 's sequence a a length n. lose elements denote zero kaiki provide another sequence b whose length k equal number lose elements a ( i.e number zero ) hitagi replace zero a element b element b use exactly hitagi know however , apart 0 integer occur a b total result sequence increase sequence power recover hitagi oddity determine whether possible kaiki 's sequence another fake word detect whether possible replace zero a integer b integer b use exactly result sequence increase first line input contain two space - separated positive integers n ( 2 ≤ n ≤ 100 ) k ( 1 ≤ k ≤ n ) — lengths sequence a b respectively second line contain n space - separated integers a1 a2 ... ( 0 ≤ ai ≤ 200 ) — hitagi 's break sequence exactly k zero elements third line contain k space - separated integers b1 b2 ... bk ( 1 ≤ bi ≤ 200 ) — elements fill hitagi 's sequence input guarantee apart 0 integer occur a b total output ` ` yes '' 's possible replace zero a elements b make result sequence increase ` ` '' otherwise first sample : second sample possible result sequence 2 3 5 8 9 10 increase sequence therefore invalid","['constructive algorithms', 'greedy', 'implementation']",900.0
813/A,pasha participate a contest one well - known website time want win contest anything get first place ! contest consist n problems pasha solve ith problem ai time units ( solutions always correct ) moment time think a solution one problems ( solve two problems time ) time pasha spend send solutions negligible pasha send number solutions moment unfortunately many participants website always work pasha receive information website work m time periods jth period represent start moment lj end moment rj course pasha send solution website work word pasha send solution moment t iff exist a period x <unknown> ≤ t ≤ <unknown> pasha want know best possible result need tell minimal moment time able solutions problems submit act optimally say 's impossible matter pasha solve problems first line contain one integer n ( 1 ≤ n ≤ 1000 ) — number problems second line contain n integers ai ( 1 ≤ ai ≤ 105 ) — time pasha need solve ith problem third line contain one integer m ( 0 ≤ m ≤ 1000 ) — number periods time website work next m line represent periods jth line contain two number lj rj ( 1 ≤ lj < rj ≤ 105 ) — start end moment jth period guarantee periods intersect give chronological order every j > 1 condition lj > rj - 1 meet pasha solve submit problems end contest print minimal moment time solutions submit otherwise print ` ` -1 '' ( without bracket ) first example pasha act like : solve second problem 4 units time send immediately spend 3 time units solve first problem send 7 time units contest start moment website start work second example pasha invent solution website stop work last time third example pasha send solution exactly end first period,['implementation'],1100.0
812/D,"sagheer work a kindergarten n children m different toy children use well - <unknown> <unknown> play toy : children n't like play 's never share toy a child request a toy grant toy child depend whether toy free toy free sagheer give child otherwise child wait ca n't request another toy children smart detect wait forever get toy want case start cry word a cry set a set children child wait a toy keep another child set , reach a scenario children make request lovely set except one child x still one last request lovely set children play others wait a toy child cry one yet finish play child x currently wait toy make last request get toy otherwise make request right away child x make last request many children start cry ? give scenario q independent query query form x y mean last request child x toy y. task help sagheer find size maximal cry set child x make last request first line contain four integers n m k q ( 1 ≤ n m k q ≤ 105 ) — number children toy scenario request query next k line contain two integers a b ( 1 ≤ a ≤ n 1 ≤ b ≤ m ) — a scenario request mean child a request toy b. request give order make children next q line contain two integers x y ( 1 ≤ x ≤ n 1 ≤ y ≤ m ) — request add scenario mean child x request toy y get toy wait ( ) guarantee scenario request consistent child initially cry scenario request distinct query coincide a scenario request query print a single line number children start cry child x make last request toy y. please answer query independent first example child 1 wait toy 2 child 2 child 2 wait top 3 child 3 child 3 make last request toy request hold child 1 . three children wait a toy hold another child one play three start cry second example begin child i hold toy i 1 ≤ i ≤ 4 . children 1 3 complete lovely set finish play toy 3 free toy 1 take child 2 complete lovely set finish toy 1 2 free child 5 take toy 1 . :","['dfs and similar', 'implementation']",2700.0
811/C,vladik often travel train remember trip especially well i would like tell one trip : vladik initial train station n people ( include vladik ) want get train already line order city code ai know ( code city go ) train chief select number disjoint segment original sequence people ( cover entire sequence segment necessary ) people segment train carriage segment select way least one person travel city x people go city x railway carriage mean ’ t belong different segment note people travel city x either go railway carriage go anywhere comfort a train trip people segment position l position r equal xor distinct cod cities people segment position l position r. xor operation also know exclusive total comfort a train trip equal sum comfort segment help vladik know maximal possible total comfort first line contain single integer n ( 1 ≤ n ≤ 5000 ) — number people second line contain n space - separated integers a1 a2 ... ( 0 ≤ ai ≤ 5000 ) ai denote code city i - th person go output contain a single integer — maximal possible total comfort first test case best partition segment : [ 4 4 ] [ 2 5 2 ] [ 3 ] answer calculate follow : 4 + ( 2 xor 5 ) + 3 = 4 + 7 + 3 = 14 in second test case best partition segment : 5 1 [ 3 ] 1 5 [ 2 4 2 ] 5 answer calculate follow : 3 + ( 2 xor 4 ) = 3 + 6 = 9,"['dp', 'implementation']",1900.0
809/A,"leha decide move a quiet town vičkopolis tire live bankopolis upon arrival immediately begin expand network hack computers week leha manage get access n computers throughout town incidentally computers hack leha lie straight line due reason one straight street vičkopolis let 's denote coordinate system street besides let 's number hack computers integers 1 n. i - th hack computer locate point xi moreover coordinate computers distinct leha determine a little rest a hard week therefore go invite friend noora a restaurant however girl agree go a date one condition : leha solve a simple task leha calculate a sum f ( a ) a a a non - empty subset set consist hack computers formally let 's denote a set integers 1 n. noora ask hacker find value expression f ( a ) calculate maximum among distance pair computers set a. formally , since require sum quite large noora ask find modulo 109 + 7 . though leha tire consequently able solve task help hacker attend a date first line contain one integer n ( 1 ≤ n ≤ 3·105 ) denote number hack computers second line contain n integers x1 x2 ... xn ( 1 ≤ xi ≤ 109 ) denote coordinate hack computers guarantee xi distinct print a single integer — require sum modulo 109 + 7 . three non - empty subsets first sample test : , first second subset increase sum 0 third subset increase sum 7 - 4 = 3 . total answer 0 + 0 + 3 = 3 . seven non - empty subsets second sample test among follow subsets increase answer : , , total sum ( 4 - 3 ) + ( 4 - 1 ) + ( 3 - 1 ) + ( 4 - 1 ) = 9","['implementation', 'math']",1500.0
808/A,apart lot holiday throughout year residents berland also whole lucky years year consider lucky 1 non - zero digit number years 100 40000 5 lucky 12 <unknown> 12345 give current year berland task find long residents berland wait till next lucky year first line contain integer number n ( 1 ≤ n ≤ 109 ) — current year berland output amount years current year next lucky one first example next lucky year 5 . second one — 300 . third — 5000,['implementation'],900.0
807/B,long ago codecraft-17 contest hold codeforces top 25 participants additionally random 25 participants get top 500 receive a codeforces t - shirt unfortunately n't manage get top 25 get top 500 take place p. elimination round 8vc venture cup 2017 hold announce codecraft-17 t - shirt winners choose follow let s number point winner elimination round 8vc venture cup 2017 . follow pseudocode execute : ` ` div '' integer division operator ` ` mod '' modulo ( remainder division ) operator result pseudocode execution 25 integers 26 500 inclusive print number place participants get codecraft-17 t - shirts guarantee 25 print integers pairwise distinct value s. 're lead elimination round 8vc venture cup 2017 x point believe least y point current round enough victory change final score make number successful unsuccessful hack a successful hack bring 100 point unsuccessful one take 50 point 's difficult successful hack though want win current round time ensure get a codecraft-17 t - shirt smallest number successful hack achieve ? line contain three integers p x y ( 26 ≤ p ≤ 500 ; 1 ≤ y ≤ x ≤ 20000 ) — place codecraft-17 current score elimination round 8vc venture cup 2017 smallest number point consider sufficient win current round output a single integer — smallest number successful hack order win elimination round 8vc venture cup 2017 ensure get a codecraft-17 t - shirt 's guarantee goal achievable valid input data first example need hack since <unknown> point already bring t - shirt 239 - th place codecraft-17 ( ) case accord pseudocode t - shirts give participants follow place : second example two successful one unsuccessful hack make score equal <unknown> . third example need many 24 successful hack make score equal <unknown> . fourth example 's sufficient 6 unsuccessful hack ( successful ones ) make score equal <unknown> enough win current round also get t - shirt,"['brute force', 'implementation']",1300.0
799/C,arkady play <unknown> a lot arkady want build two new fountains n available fountains fountain beauty cost know two type money game : coin diamonds fountain cost either coin diamonds money change type allow help arkady find two fountains maximum total beauty buy time first line contain three integers n c d ( 2 ≤ n ≤ 100 000 0 ≤ c d ≤ 100 000 ) — number fountains number coin diamonds arkady next n line describe fountains line contain two integers bi pi ( 1 ≤ bi pi ≤ 100 000 ) — beauty cost i - th fountain a letter ` ` c '' ` ` d '' describe type money cost fountain i : coin diamonds respectively print maximum total beauty exactly two fountains arkady build ca n't build two fountains print 0 . first example arkady build second fountain beauty 4 cost 3 coin first fountain ca n't build n't enough coin also arkady build third fountain beauty 5 cost 6 diamonds thus total beauty build fountains 9 . second example two fountains arkady ca n't build need 5 coin first fountain arkady 4 coin,"['data structures', 'implementation']",1800.0
793/C,"igor analyst fell asleep work a strange dream dream desk crowd computer mice buy a mousetrap catch desk consider infinite plane mousetrap a rectangle side parallel ax opposite side locate point ( x1 y1 ) ( x2 y2 ) igor want catch mice igor analyse behavior discover mouse move along a straight line constant speed speed i - th mouse equal ( vix viy ) mean x coordinate mouse increase vix units per second y coordinate increase viy units mousetrap open initially mice able move freely desk igor close mousetrap moment catch mice strictly inside mousetrap igor work a lot busy dream well ask write a program give mousetrap 's coordinate initial coordinate mice speed determine earliest time moment able catch mice please note igor close mousetrap first line contain single integer n ( 1 ≤ n ≤ 100 000 ) — number computer mice desk second line contain four integers x1 y1 x2 y2 ( 0 ≤ x1 ≤ x2 ≤ 100 000 ) ( 0 ≤ y1 ≤ y2 ≤ 100 000 ) — coordinate opposite corner mousetrap next n line contain information mice i - th line contain four integers rix riy vix viy ( 0 ≤ rix riy ≤ 100 000 - 100 000 ≤ vix viy ≤ 100 000 ) ( rix riy ) initial position mouse ( vix viy ) speed line print minimum possible non - negative number t igor close mousetrap t second begin mice strictly inside mousetrap t print -1 . answer consider correct absolute relative error n't exceed 10 - 6 . formally let answer a jury 's answer b. answer consider correct a picture first samplepoints a b c d - start mice position segment paths , first time mice rectangle look like : a picture second samplepoints a d b never enter rectangle","['geometry', 'implementation', 'math']",2300.0
792/B,n children stand a circle play counting - out game children number clockwise 1 n. begin first child consider leader game play k step i - th step leader count ai people clockwise order start next person last one point leader eliminate next player become new leader example children number [ 8 10 13 14 16 ] currently circle leader child 13 ai = 12 counting - out rhyme end child 16 eliminate child 8 become leader write a program print number child eliminate every step first line contain two integer number n k ( 2 ≤ n ≤ 100 1 ≤ k ≤ n - 1 ) next line contain k integer number a1 a2 ... ak ( 1 ≤ ai ≤ 109 ) print k number i - th one correspond number child eliminate i - th step let 's consider first example :,['implementation'],1300.0
792/A,"n cities situate along main road berland cities represent coordinate — integer number a1 a2 ... , coordinate pairwise distinct possible get one city another bus bus roads old minister transport decide build a new bus route minister n't want spend large amount money — want choose two cities a way distance minimal possible distance two cities equal absolute value difference coordinate possible multiple pair cities minimal possible distance minister want know quantity pair task write a program calculate minimal possible distance two pair cities quantity pair distance first line contain one integer number n ( 2 ≤ n ≤ 2·105 ) second line contain n integer number a1 a2 ... ( - 109 ≤ ai ≤ 109 ) number ai pairwise distinct print two integer number — minimal distance quantity pair distance first example distance first city fourth city |4 - 6| = 2 pair distance",['implementation'],1100.0
784/D,line input contain a string digits length string 1 10 inclusive output ` ` yes '' ` ` '',['implementation'],1900.0
784/C,expect find ? base and / xor language include string ? n't byte <unknown> distort largest mathematics <unknown> ` ` abracadabra '' without a magic wo n't <unknown> last stack <unknown> die oh <unknown> ! i array i must <unknown> may store west <unknown> first line input data contain a single integer n ( 1 ≤ n ≤ 10 ) second line input data contain n space - separated integers ai ( 1 ≤ ai ≤ 11 ) output a single integer,['implementation'],1800.0
777/C,lesson small girl alyona work one famous <unknown> computer program learn edit table a table fill integers table consist n row m columns ai j denote integer locate i - th row j - th column say table sort non - decreasing order column j ai j ≤ ai + 1 j i 1 n - 1 . teacher give alyona k task task two integers l r give alyona answer follow question : one keep row l r inclusive delete others table sort non - decreasing order least one column ? formally exist j ai j ≤ ai + 1 j i l r - 1 inclusive alyona small deal task ask help ! first line input contain two positive integers n m ( 1 ≤ n·m ≤ 100 000 ) — number row number columns table respectively note give a constraint bind product two integers i.e number elements table follow n line contain m integers j - th integers i line stand ai j ( 1 ≤ ai j ≤ 109 ) next line input contain integer k ( 1 ≤ k ≤ 100 000 ) — number task teacher give alyona i - th next k line contain two integers li ri ( 1 ≤ li ≤ ri ≤ n ) print ` ` yes '' i - th line output table consist row li ri inclusive sort non - decreasing order least one column otherwise print ` ` '' sample whole table sort column however row <unknown> sort column 1 row <unknown> sort column 3,"['data structures', 'dp', 'greedy', 'implementation']",1600.0
776/F,"sherlock meet moriarty a final battle wits give a regular n side convex polygon addition give certain diagonals form regions polygon guarantee diagonals intersect interior point take region calculate importance value importance value a region form vertices a1 a2 ... ax polygon give 2a1 + 2a2 + ... + <unknown> , sort regions basis importance value ascend order assign region index 1 k k number regions index region position sort array calculate want moriarty color regions use 20 color two regions color simple paths two regions least one region color value less color value assign regions simple path two regions f h a sequence regions r1 r2 ... rt r1 = f rt = h 1 ≤ i < t regions ri ri + 1 share edge ri = rj i = j. moriarty could n't answer ask sherlock solve help sherlock first line contain two integers n m ( 3 ≤ n ≤ 100000 0 ≤ m ≤ n - 3 ) number vertices polygon number diagonals add next m line contain two integers a b ( 1 ≤ a b ≤ n ) describe a diagonal vertices a b. guarantee diagonals correct i. e. a b n't coincide neighbor guarantee diagonals intersect let number regions k. output k space - separated integers 1 20 represent color regions order increase importance multiple answer print show least one answer exist 2nd input regions form order sort ( 1 2 3 ) ( 1 3 4 ) ( 1 4 5 ) ( 1 5 6 ) i.e region ( 1 2 3 ) first region follow region ( 1 3 4 ) , color regions 1 3 color region number 2 path 1 3 color 1 less color 1 3 i.e. color number 2","['constructive algorithms', 'data structures', 'geometry', 'implementation']",2800.0
770/A,innokentiy decide change password social net ` ` contact ! ` ` lazy invent a new password need help innokentiy decide new password satisfy follow condition : task help innokentiy invent a new password satisfy give condition first line contain two positive integers n k ( 2 ≤ n ≤ 100 2 ≤ k ≤ min ( n 26 ) ) — length password number distinct symbols pay attention a desire new password always exist print password satisfy condition give innokentiy first test one appropriate new passwords — java length equal 4 3 distinct lowercase letter a j v use second test one appropriate new passwords — python length equal 6 consist 6 distinct lowercase letter third test one appropriate new passwords — <unknown> length equal 5 2 distinct lowercase letter p h use pay attention condition two identical symbols consecutive correct appropriate passwords test,['implementation'],800.0
769/A,faculty computer science berland social net ` ` <unknown> ! '' course faculty special group whose name equal year university entrance correspond course students university students join group course join group year student 's university entrance differ x year university entrance student x — non - negative integer a value x give uniquely determine available data note students n't join group give list group student igor join accord information need determine year igor 's university entrance first line contain positive odd integer n ( 1 ≤ n ≤ 5 ) — number group igor join next line contain n distinct integers a1 a2 ... ( 2010 ≤ ai ≤ 2100 ) — years student 's university entrance group igor member guarantee input data correct answer always exist group give randomly print year igor 's university entrance first test value x = 1 . igor enter university 2015 . join group members students enter university 2014 2015 2016 . second test value x = 0 . igor enter group correspond year university entrance,['implementation'],800.0
758/C,literature lesson sergei notice awful <unknown> seem students ask often others seat class look like a rectangle n row m pupils teacher ask pupils follow order : first ask pupils first row order seat continue ask pupils next row teacher ask last row direction poll change mean ask previous row order ask row look follow : 1 - st row 2 - nd row ... n - 1 - st row n - th row n - 1 - st row ... 2 - nd row 1 - st row 2 - nd row ... order ask pupils row always : 1 - st pupil 2 - nd pupil ... m - th pupil lesson teacher manage ask exactly k question pupils order describe sergei seat x - th row y - th place row sergei decide prove teacher pupils ask <unknown> help count three value : one row class teacher always ask children row first line contain five integers n m k x y ( 1 ≤ n m ≤ 100 1 ≤ k ≤ 1018 1 ≤ x ≤ n 1 ≤ y ≤ m ) print three integers : order ask pupils first test : order ask pupils second test :,"['constructive algorithms', 'implementation', 'math']",1700.0
757/A,bash want become a pokemon master one day although like a lot pokemon always fascinate bulbasaur soon things start get serious <unknown> turn obsession since young go catch bulbasaur come way catch a bulbasaur day take front page newspaper cut letter one a time anywhere front page newspaper form word ` ` bulbasaur '' ( without quote ) stick wall bash particular case — first letter ` ` bulbasaur '' must upper case rest must lower case think catch one bulbasaur repeat step leave part newspaper keep possible form word ` ` bulbasaur '' newspaper give text front page newspaper tell many <unknown> catch today ? note : uppercase lowercase letter consider different input contain a single line contain a string s ( 1 ≤ |s| ≤ 105 ) — text front page newspaper without space punctuation mark |s| length string s. string s contain lowercase uppercase english letter i.e   output a single integer answer problem first case could pick : <unknown> second case way pick even a single bulbasaur third case rearrange string <unknown> get two word ` ` bulbasaur '',['implementation'],1000.0
750/F,interactive problem interaction section find information flush output new year tree height h a perfect binary tree vertices number 1 2h - 1 order problem assume h least 2 . draw show one example new year tree height 3 : polar bear love decorate new year tree limak exception decorate tree must first find root i.e a vertex exactly two neighbour ( assume h ≥ 2 ) wo n't easy limak a little bear n't even see whole tree help ? t testcases testcase first read h input ask 16 question format ` ` ? x '' ( without quote ) x integer 1 2h - 1 inclusive a reply get list neighbour vertex x ( detail ` ` interaction '' section ) example a tree draw ask ` ` ? 1 '' would get a response 3 neighbour : 4 5 7 . goal find index root y print format ` ` ! y '' able read h a next testcase print answer a previous testcase flush output tree fix begin n't change question first line input contain a single integer t ( 1 ≤ t ≤ 500 ) — number testcases begin testcase read input a single integer h ( 2 ≤ h ≤ 7 ) — height tree ca n't read value h a next testcase answer a previous testcase ask a question neighbour vertex x print ` ` ? x '' ( without quote ) a separate line note must print end - of - line character last character line flush output get a response response consist two line first line contain a single integer k ( 1 ≤ k ≤ 3 ) — number neighbour vertex x. second line contain k distinct integers t1 ... tk ( 1 ≤ t1 < ... < tk ≤ 2h - 1 ) — indices neighbour vertex x give increase order ask 16 question say y — index root print ` ` ! y '' ( without quote ) end - of - line character flush output tree fix begin n't change question get idleness limit exceed n't print anything forget flush output flush use ( print a query / answer end - of - line ) : moment program read h = 0 k = 0 immediately terminate normally ( example call exit ( 0 ) ) mean system detect incorrect request / output program print 0 ca n't process request anymore case 'll receive verdict ` ` wrong answer '' ignore case h = 0 k = 0 could lead ` ` runtime error '' ` ` time / memory limit exceed '' verdict program could read a trash close input stream hack hack someone use follow format : first line contain a single integer t equal 1 ( one testcase allow hack ) second line contain a single integer h. next 2h - 2 line contain two distinct integers ai bi ( 1 ≤ ai bi ≤ 2h - 1 ) denote two nod connect edge print edge must form a perfect binary tree height h. course contestant program able see input first sample a tree correspond draw statement second sample two two testcases a tree first testcase height 2 thus 3 vertices a tree second testcase height 4 thus 15 vertices see tree draw,"['constructive algorithms', 'implementation']",2800.0
750/B,problem assume earth a completely round ball surface a perfect sphere length equator <unknown> consider exactly 40 000 kilometers thus travel north pole south pole vice versa take exactly 20 000 kilometers limak a polar bear live north pole close new year help somebody deliver package around world instead coordinate place visit limak get a description move assume start north pole description consist n part i - th part journey limak move ti kilometers direction represent a string diri one : ` ` north '' ` ` south '' ` ` west '' ` ` east '' limak ’ t sure whether description valid must help check follow condition : check condition satisfy print ` ` yes '' ` ` '' a single line first line input contain a single integer n ( 1 ≤ n ≤ 50 ) i - th next n line contain integer ti a string diri ( 1 ≤ ti ≤ 106 ) — length direction i - th part journey accord description limak get print ` ` yes '' description satisfy three condition otherwise print ` ` '' without quote draw show limak 's journey would look like first two sample second sample answer ` ` '' n't end north pole,"['geometry', 'implementation']",1300.0
747/E,"a rare article internet post without a possibility comment a polycarp 's website article comment fee comment polycarp 's website a non - empty string consist uppercase lowercase letter english alphabet comment tree - like structure mean comment except root comment ( comment highest level ) exactly one parent comment polycarp want save comment hard drive use follow format comment write follow format : example comment look like : first comment write ` ` hello,2 ok,0 bye,0 '' second write ` ` test,0 '' third comment write ` ` one,1 two,2 a,0 b,0 '' whole comment fee write : ` ` hello,2 ok,0 bye,0 test,0 one,1 two,2 a,0 b,0 '' a give comment fee format specify print comment a different format : first line contain non - empty comment fee describe format consist uppercase lowercase letter english alphabet digits commas guarantee comment a non - empty string consist uppercase lowercase english character number comment integer ( consist least one digit ) either equal 0 contain lead zero length whole string exceed 106 . guarantee give structure comment valid print comment a format give statement level nest comment print order give input first example explain statements","['dfs and similar', 'implementation', 'strings']",1700.0
747/B,process mammoth 's genome decode berland come end ! one remain task restore unrecognized nucleotides a find chain s. nucleotide cod a capital letter english alphabet : ' a ' ' c ' ' g ' ' t ' unrecognized nucleotides cod a question mark ' ? ' thus s a string consist letter ' a ' ' c ' ' g ' ' t ' character ' ? ' know number nucleotides four type decode genome mammoth berland equal task decode genome replace unrecognized nucleotide one four type number nucleotides four type become equal first line contain integer n ( 4 ≤ n ≤ 255 ) — length genome second line contain string s length n — cod genome consist character ' a ' ' c ' ' g ' ' t ' ' ? ' possible decode genome print multiple answer print possible print three equal sign a row : ` ` = = = '' ( without quote ) first example replace first question mark letter ' a ' second question mark letter ' g ' third question mark letter ' t ' nucleotide genome would present twice second example genome already decode correctly nucleotide exactly third fourth examples impossible decode <unknown>,"['implementation', 'strings']",900.0
746/B,polycarp mad cod write <unknown> encode message call median letter a word letter middle word word 's length even median letter leave two middle letter follow examples median letter highlight : contest info word consist single letter accord definition letter median letter polycarp encode word follow way : write median letter word delete repeat process letter leave example encode word volga logva give encode s word task decode first line contain a positive integer n ( 1 ≤ n ≤ 2000 ) — length encode word second line contain string s length n consist lowercase english letter — encode print word polycarp encode first example polycarp encode word volga first write letter l position 3 word look like <unknown> polycarp write letter o position 2 word become <unknown> polycarp write letter g second position word become <unknown> . write letter v letter a. thus encode look like logva second example polycarp encode word write letter n word become o write letter o. thus example word encode third example polycarp encode word baba first write letter a position 2 word look like bba write letter b position 2 word look like ba write letter b position 1 word look like a write letter a. thus encode abba,"['implementation', 'strings']",900.0
745/A,hongcow learn spell ! one day teacher give a word need learn spell a <unknown> student immediately learn spell word hongcow decide try make new word one start take word learn spell move last character word begin word call a cyclic shift apply cyclic shift many time example consecutively apply cyclic shift operation word ` ` abracadabra '' hongcow get word ` ` <unknown> '' ` ` <unknown> '' hongcow wonder many distinct word generate cyclic shift arbitrarily many time initial string also count first line input a single string s ( 1 ≤ |s| ≤ 50 ) word hongcow initially learn spell string s consist lowercase english letter ( ' a ' – ' z ' ) output a single integer equal number distinct string hongcow obtain apply cyclic shift arbitrarily many time give string first sample string hongcow generate ` ` abcd '' ` ` <unknown> '' ` ` cdab '' ` ` bcda '' second sample matter many time hongcow cyclic shift hongcow generate ` ` bbb '' third sample two string hongcow generate ` ` <unknown> '' ` ` <unknown> '',"['implementation', 'strings']",900.0
743/B,chloe vladik a competitive programmer n't problems get olympiad like vladik confuse task propose olympiad let 's consider follow algorithm generate a sequence integers initially a sequence consist a single element equal 1 . perform ( n - 1 ) step step take sequence ' ve get previous step append end insert middle minimum positive integer n't use example get sequence [ 1 2 1 ] first step sequence [ 1 2 1 3 1 2 1 ] second step task find value element index k ( elements number 1 ) obtain sequence i. e. ( n - 1 ) step please help chloe solve problem ! line contain two integers n k ( 1 ≤ n ≤ 50 1 ≤ k ≤ 2n - 1 ) print single integer — integer k - th position obtain sequence first sample obtain sequence [ 1 2 1 3 1 2 1 ] number second position 2 . second sample obtain sequence [ 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ] number eighth position 4,"['constructive algorithms', 'implementation']",1200.0
740/A,little girl alyona a shop buy copybooks school study four subject want equal number copybooks subject three type copybook 's pack shop : possible buy one copybook a rubles a pack two copybooks b rubles a pack three copybooks c rubles alyona already n copybooks minimum amount rubles pay buy number copybooks k n + k divisible 4 ? infinitely many pack type shop alyona buy pack different type purchase line contain 4 integers n a b c ( 1 ≤ n a b c ≤ 109 ) print minimum amount rubles pay buy number copybooks k n + k divisible 4 . first example alyona buy 3 pack 1 copybook 3a = 3 rubles total 4 copybooks split subject equally second example <unknown> buy a pack 2 copybooks b = 1 ruble 8 copybooks total third example alyona split copybooks already 4 subject equally n't need buy anything fourth example alyona buy one pack one copybook,"['brute force', 'implementation']",1300.0
734/A,anton like play chess friend danik play n game a row game 's know winner — anton danik none game end a tie anton wonder game danik ? help determine first line input contain a single integer n ( 1 ≤ n ≤ 100 000 ) — number game play second line contain a string s consist n uppercase english letter ' a ' 'd ' — outcome game i - th character string equal ' a ' anton i - th game 'd ' danik i - th game anton game danik print ` ` anton '' ( without quote ) line output danik game anton print ` ` danik '' ( without quote ) line output anton danik number game print ` ` friendship '' ( without quote ) first sample anton 6 game danik — 1 . hence answer ` ` anton '' second sample anton 3 game danik 4 game answer ` ` danik '' third sample anton danik 3 game answer ` ` friendship '',"['implementation', 'strings']",800.0
733/A,one day grasshopper jump lawn find a piece paper a string grasshopper become interest minimum jump ability order able reach far end string jump vowels english alphabet jump ability maximum possible length jump formally consider <unknown> grasshopper locate directly front leftmost character string goal reach position right rightmost character string one jump grasshopper could jump right distance 1 value jump ability follow letter vowels : ' a ' ' e ' ' i ' ' o ' ' u ' ' y ' first line contain non - empty string consist capital english letter guarantee length string exceed 100 . print single integer a — minimum jump ability grasshopper ( number symbols ) need overcome give string jump vowels,['implementation'],1000.0
732/C,"vasiliy spend vacation a sanatorium come back find completely forget detail vacation ! every day a breakfast a dinner a supper a din room sanatorium ( course order ) thing vasiliy a card din room <unknown> note many time a breakfast a dinner a supper ( thus card contain three integers ) vasiliy could sometimes miss meal example could a breakfast a supper a dinner , probably days n't din room vasiliy n't remember time day arrive sanatorium ( breakfast dinner supper supper ) time leave ( breakfast dinner supper supper ) consider options vasiliy arrive sanatorium time leave please note 's possible vasiliy leave sanatorium day arrive accord note card help vasiliy determine minimum number meals din room could miss n't count miss meals arrival day vasiliy 's arrival meals departure day leave line contain three integers b d s ( 0 ≤ b d s ≤ 1018 b + d + s ≥ 1 ) — number breakfast <unknown> <unknown> vasiliy vacation sanatorium print single integer — minimum possible number meals vasiliy could miss vacation first sample vasiliy could miss one supper example case arrive breakfast sanatorium two days ( include day arrival ) leave breakfast third day second sample vasiliy could arrive breakfast , immediately leave sanatorium miss meal third sample vasiliy could sanatorium one day miss meal","['constructive algorithms', 'greedy', 'implementation', 'math']",1200.0
730/H,polycarp a beginner programmer study use a command line polycarp face follow problem n file a directory need delete polycarp want run a single delete command filename pattern argument file delete match pattern file n't match pattern polycarp n't know asterisk ' * ' special character know a question mark ' ? ' match single character character pattern match formally a pattern match a filename equal lengths character correspond position equal except character pattern ' ? ' case correspond filename character matter example filename pattern ` ` a ? ba ? ` ` : help polycarp find a pattern match file delete report pattern first line input contain two integers n m ( 1 ≤ m ≤ n ≤ 100 ) — total number file number file delete follow n line contain filenames single filename per line filenames non - empty string contain lowercase english letter digits dot ( ' . ' ) length filename n't exceed 100 . guarantee filenames distinct last line input contain m distinct integer number ascend order a1 a2 ... ( 1 ≤ ai ≤ n ) — indices file delete file index 1 n order appearance input require pattern exist print ` ` yes '' first line output second line contain require pattern multiple solutions print require pattern n't exist print line contain ` ` '',"['constructive algorithms', 'implementation']",1300.0
729/A,polycarp interview oleg write interview without punctuation mark space save time thus interview a string s consist n lowercase english letter a filler word ogo oleg 's speech word obtain ogo add go several time end also consider fillers example word ogo ogogo ogogogo fillers word go <unknown> <unknown> <unknown> <unknown> fillers fillers maximal size example <unknown> speech ca n't consider ogo a filler <unknown> a normal phrase consider ogogo a filler print interview polycarp replace fillers three asterisk note a filler word replace exactly three asterisk regardless length polycarp deal problem time ? clock tick ! first line contain a positive integer n ( 1 ≤ n ≤ 100 ) — length interview second line contain string s length n consist lowercase english letter print interview text replacement fillers ` ` * * * '' allow substring ` ` * * * '' several consecutive occurences first sample contain one filler word ogogo interview print ` ` a * * * b '' second sample contain two fillers ogo ogogogo thus interview transform ` ` * * * <unknown> * * * '',"['implementation', 'strings']",900.0
725/C,let ’ s define a grid a set tile 2 row 13 columns tile english letter write letter n't unique : might two tile letter write example a grid : say two tile adjacent share a side a corner example grid tile letter ' a ' adjacent tile letter ' b ' ' n ' ' o ' a tile adjacent a sequence tile call a path tile sequence adjacent tile follow ( except last tile sequence course <unknown> ) example ` ` abc '' a path ` ` <unknown> '' ` ` <unknown> '' a path ' m ' adjacent ' a ' a single tile use a path ( though tile occupy two consecutive place path tile adjacent ) ’ give a string s consist 27 upper - case english letter english letter occur least s. find a grid contain a path whose tile view order path visit form string s. ’ s solution print ` ` impossible '' ( without quote ) line input contain string s consist 27 upper - case english letter english letter occur least s. output two line consist 13 upper - case english character represent row grid multiple solutions print solution print ` ` impossible '',"['brute force', 'constructive algorithms', 'implementation', 'strings']",1600.0
722/F,"give n sequence sequence consist positive integers exceed m. integers one sequence distinct integer may appear multiple sequence length i - th sequence ki second integers sequence shift one leave i.e integers position i > 1 go position i - 1 first integers become last second take first integer sequence write a new array , value x 1 m compute longest segment array consist element x operation perform 10100 second integer 1 m find longest segment find time first line input contain two integers n m ( 1 ≤ n m ≤ 100 000 ) — number sequence maximum integer appear sequence follow n line provide sequence start integer ki ( 1 ≤ ki ≤ 40 ) — number integers sequence proceed ki positive integers — elements sequence 's guarantee integers sequence pairwise distinct exceed m. total length sequence n't exceed 200 000 . print m integers i - th equal length longest segment array value equal i first 10100 second","['data structures', 'implementation']",2800.0
720/E,borya recently find a big electronic display computer manage display store integer number number n decimal digits display show encode version number digit show use lowercase letter english alphabet a legend near display describe number encode digit position i digit j character c know encode digit position different digits code character second number increase 1 . one second a moment number reach value represent n 9 - s decimal notation loud <unknown> sound andrew know number store computer want know many second must pass borya definitely tell original number encode display assume borya precisely measure time encode number first increase exactly one second borya start watch display input data contain multiple test case first line input contain t ( 1 ≤ t ≤ 100 ) — number test case test case describe follow first line description contain n ( 1 ≤ n ≤ 18 ) — number digits number second line contain n decimal digits without space ( possibly lead zero ) — number initially store display computer follow n line contain 10 character j - th character i - th line code character a digit j - 1 position i significant digit position describe first test case print integer : number second borya definitely know initial number store display computer print lead zero,['implementation'],3100.0
713/A,today sonya learn long integers invite friends share fun sonya initially empty multiset integers friends give t query one follow type : example pattern s = 010 integers 92 2212 50 414 match pattern integers 3 110 25 <unknown> first line input contain integer t ( 1 ≤ t ≤ 100 000 ) — number operation sonya perform next t line provide descriptions query order appear input file i - th row start a character ci — type correspond operation ci equal ' + ' ' - ' 's follow a space integer ai ( 0 ≤ ai < 1018 ) give without lead zero ( unless 's 0 ) ci equal ' ? ' 's follow a space a sequence zero <unknown> give pattern length 18 . 's guarantee least one query type ' ? ' 's guarantee time integer remove multiset least one occurrence integer query third type print number integers match give pattern integer count many time appear multiset moment time consider integers match pattern query third type query number order appear input,"['data structures', 'implementation']",1400.0
709/B,vasya take part <unknown> competition n checkpoints locate along line coordinate x1 x2 ... xn vasya start point coordinate a. goal visit least n - 1 checkpoint order finish competition participant allow visit checkpoints arbitrary order vasya want pick checkpoints order visit total distance travel minimize ask calculate minimum possible value first line input contain two integers n a ( 1 ≤ n ≤ 100 000 - 1 000 000 ≤ a ≤ 1 000 000 ) — number checkpoints vasya 's start position respectively second line contain n integers x1 x2 ... xn ( - 1 000 000 ≤ xi ≤ 1 000 000 ) — coordinate checkpoints print one integer — minimum distance vasya travel order visit least n - 1 checkpoint first sample vasya visit least two checkpoints optimal way achieve walk third checkpoints ( distance 12 - 10 = 2 ) proceed second one ( distance 12 - 7 = 5 ) total distance equal 2 + 5 = 7 . second sample 's enough visit one checkpoint vasya walk point - 10,"['greedy', 'implementation']",1500.0
708/B,string s consist character ' 0 ' ' 1 ' one define four integers a00 a01 a10 a11 <unknown> number subsequences length 2 string s equal sequence { x y } problem give four integers a00 a01 a10 a11 find non - empty string s match determine string one prove least one answer exist exist answer length 1 000 000 . line input contain four non - negative integers a00 a01 a10 a11 n't exceed 109 . exist a non - empty string match four integers input print line output otherwise print ` ` impossible '' length answer must exceed 1 000 000,"['constructive algorithms', 'greedy', 'implementation', 'math']",1900.0
691/A,accord rule berland fashion a jacket fasten button except one necessarily last one also jacket one button fasten jacket swing open give a jacket n button determine fasten a right way first line contain integer n ( 1 ≤ n ≤ 1000 ) — number button jacket second line contain n integers ai ( 0 ≤ ai ≤ 1 ) number ai = 0 i - th button fasten otherwise ai = 1 . line print word ` ` yes '' jacket fasten a right way otherwise print word ` ` '',['implementation'],1000.0
679/D,"bearland n cities number 1 n. m bidirectional roads i - th road connect two distinct cities ai bi two roads connect pair cities 's possible get city city ( use one roads ) distance cities a b define minimum number roads use travel a b. limak a grizzly bear a criminal task catch least try catch two days ( today tomorrow ) limak go hide forever main weapon bcd ( bear criminal detector ) city use bcd tell distance a city limak currently unfortunately bcd use a day n't know much limak 's current location assume one n cities choose uniformly random ( city probability ) decide follow plan : time choose one cities choose n cities let 's say n't a problem quickly get somewhere probability find limak behave optimally ? first line input contain two integers n m ( 2 ≤ n ≤ 400 ) — number cities number roads respectively , m line follow i - th contain two integers ai bi ( 1 ≤ ai bi ≤ n ai ≠ bi ) — cities connect i - th road two roads connect pair cities 's possible get city city print one real number — probability find limak behave optimally answer consider correct absolute error exceed 10 - 6 . namely : let 's assume answer a answer jury b. checker program consider answer correct |a - b| ≤ 10 - 6 . first sample test three cities a road every pair cities let 's analyze one optimal scenarios loose limak city 2 first move city 3 . probability loose answer","['brute force', 'dfs and similar', 'implementation', 'math']",2900.0
666/A,first - rate specialists graduate berland state institute peace friendship one talented students university education easy need fundamental knowledge different areas sometimes relate example know <unknown> well learn a structure reberland language foreign language language word construct accord follow rule first need choose ` ` root '' word — string 4 letter several string length 2 3 symbols append word restriction — allow append string twice a row string consider suffix word ( time use word ` ` suffix '' describe a <unknown> last character string may use ) one exercise find task list give word s. find distinct string length 2 3 suffix word accord word construct rule reberland language two string consider distinct different length a position correspond character match let 's look example : word <unknown> give word obtain follow ways : root word <unknown> suffix mark ` ` corner '' thus set possible suffix word { aca ba ca } line contain a string s ( 5 ≤ |s| ≤ 104 ) consist lowercase english letter first line print integer k — a number distinct possible suffix next k line print suffix print suffix lexicographical ( alphabetical ) order first test analyse problem statement second example length string equal 5 . length root equal 5 string use a suffix,"['dp', 'implementation', 'strings']",1800.0
662/D,international abbreviation olympiad take place annually start 1989 . year competition receive abbreviation form iao ' y y stand number consequent last digits current year organizers always pick abbreviation non - empty string y never use among valid abbreviations choose shortest one announce abbreviation year 's competition example first three olympiads ( years 1989 <unknown> <unknown> respectively ) receive abbreviations iao ' 9 iao ' 0 iao ' 1 competition 2015 receive abbreviation <unknown> iao ' 5 already use <unknown> . give a list abbreviations determine year stand first line input contain a single integer n ( 1 ≤ n ≤ 1000 ) — number abbreviations process n line follow contain a single abbreviation 's guarantee abbreviation contain nine digits abbreviation give input find year correspond olympiad,"['constructive algorithms', 'greedy', 'implementation', 'math']",2000.0
660/B,consider 2n row seat a bus n row seat leave n row seat right row fill two people total capacity bus 4n consider m ( m ≤ 4n ) people occupy seat bus passengers enter bus number 1 m ( order enter bus ) pattern seat occupation <unknown> - st row leave window seat 1 - st row right window seat 2 - nd row leave window seat 2 - nd row right window seat ... n - th row leave window seat n - th row right window seat occupy window seat ( m > 2n ) non - window seat <unknown> - st row leave non - window seat 1 - st row right non - window seat ... n - th row leave non - window seat n - th row right non - window seat passengers go a single final destination final destination passengers get give <unknown> - st row leave non - window seat 1 - st row leave window seat 1 - st row right non - window seat 1 - st row right window seat ... n - th row leave non - window seat n - th row leave window seat n - th row right non - window seat n - th row right window seat give value n m. output m number 1 m order passengers get bus line contain two integers n m ( 1 ≤ n ≤ 100 1 ≤ m ≤ 4n ) — number pair row number passengers print m distinct integers 1 m — order passengers get bus,['implementation'],1000.0
659/C,berland recently a new collection toy go sale collection consist 109 type toy number integers 1 109 . a toy new collection i - th type cost i bourles tania manage collect n different type toy a1 a2 ... new collection today tanya 's birthday mother decide spend m bourles gift daughter tanya choose several different type toy new collection a gift course want get a type toy already tanya want many distinct type toy collection possible result new collection diverse tanya little ask help first line contain two integers n ( 1 ≤ n ≤ 100 000 ) m ( 1 ≤ m ≤ 109 ) — number type toy tanya already number bourles mom will spend buy new toy next line contain n distinct integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) — type toy tanya already first line print a single integer k — number different type toy tanya choose number different type toy collection maximum possible course total cost select toy exceed m. second line print k distinct space - separated integers t1 t2 ... tk ( 1 ≤ ti ≤ 109 ) — type toy tanya choose multiple answer may print value ti print order first sample mom buy two toy : one toy 2 - nd type one toy 5 - th type purchase 7 bourles ( assume toy type 1 3 4 already buy ) impossible buy two toy,"['greedy', 'implementation']",1200.0
653/C,life go like nice sequence sequence t1 t2 ... tn call nice follow two condition satisfy : example sequence ( 2 8 ) ( 1 5 1 ) ( 2 5 1 100 99 120 ) nice ( 1 1 ) ( 1 2 3 ) ( 2 5 3 2 ) bear limak a sequence positive integers t1 t2 ... tn sequence nice limak want fix a single swap go choose two indices i < j swap elements ti tj order get a nice sequence count number ways two ways consider different indices elements choose a swap different first line input contain one integer n ( 2 ≤ n ≤ 150 000 ) — length sequence second line contain n integers t1 t2 ... tn ( 1 ≤ ti ≤ 150 000 ) — initial sequence 's guarantee give sequence nice print number ways swap two elements exactly order get a nice sequence first sample two ways get a nice sequence one swap : second sample one way — limak swap t1 = 200 t4 = 50,"['brute force', 'implementation']",1900.0
645/A,bessie cow best friend elsie receive a slide puzzle pi day puzzle consist a 2 × 2 grid three tile label ' a ' ' b ' ' c ' three tile sit top grid leave one grid cell empty make a move bessie elsie slide a tile adjacent empty cell empty cell show : order determine truly best friends life ( bffls ) bessie elsie would like know exist a sequence move take puzzle configuration ( move perform puzzle ) two puzzle consider configuration tile top grid cell puzzle since tile label letter rotations reflections allow first two line input consist a 2 × 2 grid describe initial configuration bessie 's puzzle next two line contain a 2 × 2 grid describe initial configuration elsie 's puzzle position tile label ' a ' ' b ' ' c ' empty cell label ' x ' 's guarantee puzzle contain exactly one tile letter exactly one empty position output ` ` yes '' ( without quote ) puzzle reach configuration ( bessie elsie truly bffls ) otherwise print ` ` '' ( without quote ) solution first sample describe image bessie need slide ' a ' tile second sample two puzzle never configuration perhaps bessie elsie mean friends .,"['brute force', 'constructive algorithms', 'implementation']",1200.0
641/A,little artem find a grasshopper bring house construct a jump area area look like a strip cells 1 × n. cell contain direction next jump length jump grasshopper start first cell follow instructions write cells grasshopper stop immediately jump strip artem want find ever happen first line input contain a single integer n ( 1 ≤ n ≤ 100 000 ) — length strip next line contain a string length n consist character ` ` < ` ` ` ` > '' provide direction jump correspond cell next line contain n integers di ( 1 ≤ di ≤ 109 ) — length jump i - th cell print ` ` infinite '' ( without quote ) grasshopper continue jump forever otherwise print ` ` finite '' ( without quote ) first sample grasshopper start first cell jump right next cell second cell need jump two cells leave jump strip second sample grasshopper path 1 - 3 - 2 - 3 - 2 - 3 path infinite,['implementation'],1000.0
639/C,"limak a little polar bear n't many toy thus often play polynomials consider a polynomial valid degree n coefficients integers exceed k absolute value formally : let a0 a1 ... denote coefficients , , a polynomial p ( x ) valid follow condition satisfy : limak recently get a valid polynomial p coefficients a0 a1 a2 ... , notice p ( 2 ) ≠ 0 want change go change one coefficient get a valid polynomial q degree n q ( 2 ) = 0 . count number ways count two ways a distinct coefficients target <unknown> differ first line contain two integers n k ( 1 ≤ n ≤ 200 000 1 ≤ k ≤ 109 ) — degree polynomial limit absolute value coefficients second line contain n + 1 integers a0 a1 ... ( |ai| ≤ k ≠ 0 ) — describe a valid polynomial 's guarantee p ( 2 ) ≠ 0 . print number ways change one coefficient get a valid polynomial q q ( 2 ) = 0 . first sample give a polynomial p ( x ) = 10 - <unknown> - <unknown> + <unknown> limak change one coefficient three ways : second sample give polynomial time though k equal 12 instead 109 . two first ways list still valid third way would get <unknown> > k allow thus answer 2 time","['implementation', 'math']",2200.0
637/C,"a new year special offer ` ` sudislavl bar '' offer n promo cod promo code consist exactly six digits give right one free cocktail bar ` ` mosquito shelter '' course promocodes differ ` ` mosquito shelter '' open 9 party sudislavl usually begin early 6 many problems may arise type a promotional code without errors necessary calculate maximum k promotional code could uniquely identify type k errors , k = 0 mean promotional cod must enter exactly a mistake problem consider enter wrong number example value ` ` <unknown> '' contain two errors relative promocode ` ` 123456 '' regardless number errors enter value consist exactly six digits first line output contain number n ( 1 ≤ n ≤ 1000 ) — number promocodes next n line contain a single promocode consist exactly 6 digits guarantee promocodes distinct promocodes start digit ` ` 0 '' print maximum k ( naturally exceed length promocode ) promocode uniquely identify type k mistake first sample k < 3 a bar customer type value ` ` <unknown> '' impossible define promocode exactly correspond","['brute force', 'constructive algorithms', 'implementation']",1400.0
635/A,paul orchestra string section arrange r × c rectangular grid fill violinists exception n violists paul really like violas would like take a picture include least k paul take a picture axis - parallel rectangle orchestra count number possible picture paul take two picture consider different coordinate correspond rectangles different first line input contain four space - separated integers r c n k ( 1 ≤ r c n ≤ 10 1 ≤ k ≤ n ) — number row columns string section total number violas minimum number violas paul would like photograph respectively next n line contain two integers xi yi ( 1 ≤ xi ≤ r 1 ≤ yi ≤ c ) : position i - th viola guarantee location appear input print a single integer — number photograph paul take include least k violas use ' * ' denote violinists ' # ' denote violists first sample orchestra look follow second sample orchestra look follow third sample orchestra look second sample,"['brute force', 'implementation']",1100.0
626/A,"calvin robot lie infinite rectangular grid calvin 's source code contain a list n command either ' u ' ' r ' 'd ' ' l ' — instructions move a single square right , leave respectively many ways calvin execute a non - empty contiguous substrings command return square start ? two substrings consider different different start end indices first line input contain a single positive integer n ( 1 ≤ n ≤ 200 ) — number command next line contain n character either ' u ' ' r ' 'd ' ' l ' — calvin 's source code print a single integer — number contiguous substrings calvin execute return start square first case entire source code work well ` ` rl '' substring second third character note third case substring ` ` lr '' appear three time therefore count three time total result","['brute force', 'implementation']",1000.0
625/A,kolya <unknown> love kefir much live year 1984 know detail buy delicious drink one day probably know find year 2084 buy kefir much complicate kolya hungry go nearest milk shop 2084 may buy kefir a plastic liter bottle cost a rubles glass liter bottle cost b rubles also may return empty glass bottle get c ( c < b ) rubles back return plastic bottle kolya n rubles really hungry want drink much kefir possible plastic bottle 1984 kolya n't know act optimally ask help first line input contain a single integer n ( 1 ≤ n ≤ 1018 ) — number rubles kolya begin follow three line contain integers a b c ( 1 ≤ a ≤ 1018 1 ≤ c < b ≤ 1018 ) — cost one plastic liter bottle cost one glass liter bottle money one get back return empty glass bottle respectively print integer — maximum number liters kefir kolya drink first sample kolya buy one glass bottle return buy one glass bottle thus drink 2 liters kefir second sample kolya buy two plastic bottle get two liters kefir buy one liter glass bottle return buy one plastic bottle case drink two liters kefir,"['implementation', 'math']",1700.0
622/A,consider infinite sequence integers : 1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 .... sequence build follow way : first number 1 write number 1 2 number 1 3 number 1 4 note sequence contain number digits example number 10 first appear sequence position 55 ( elements numerate one ) find number n - th position sequence line contain integer n ( 1 ≤ n ≤ 1014 ) — position number find note give number large use 64 - bit integer type store c++ use long long integer type java use long integer type print element n - th position sequence ( elements numerate one ),"['implementation', 'math']",1000.0
620/B,max find electronic calculator grandfather <unknown> 's chest notice number write seven - segment indicators ( https : //en.wikipedia.org / wiki / seven - <unknown> ) max start type value a b. type number max reset calculator find total number segment print calculator example a = 1 b = 3 first calculator print 2 segment — 5 segment last print 5 segment total number print segment 12 . line contain two integers a b ( 1 ≤ a ≤ b ≤ 106 ) — first last number type max print integer a — total number print segment,['implementation'],1000.0
614/A,programmer rostislav get seriously interest link / cut tree data structure base splay tree specifically study expose procedure unfortunately rostislav unable understand definition procedure decide ask programmer serezha help serezha agree help rostislav solve a simple task ( n't would need splay tree anyway ? ) give integers l r k need print power number k within range l r inclusive however rostislav n't want spend time get interest play a network game call <unknown> gleb help ! first line input contain three space - separated integers l r k ( 1 ≤ l ≤ r ≤ 1018 2 ≤ k ≤ 109 ) print power number k lie within range l r increase order number print ` ` -1 '' ( without quote ) note first sample : number 20 = 1 21 = 2 22 = 4 23 = 8 lie within specify range number 24 = 16 greater 10 thus n't print,"['brute force', 'implementation']",1500.0
606/A,carl a beginner magician a blue b violet c orange magic spheres one move transform two spheres color one sphere color make a spell never see need least x blue y violet z orange spheres get ( possible multiple action ) ? first line input contain three integers a b c ( 0 ≤ a b c ≤ 1 000 000 ) — number blue violet orange spheres magician 's disposal second line input contain three integers x y z ( 0 ≤ x y z ≤ 1 000 000 ) — number blue violet orange spheres need get wizard able obtain require number spheres print ` ` yes '' otherwise print ` ` '' first sample wizard 4 blue 4 violet spheres first action turn two blue spheres one violet one 2 blue 5 violet spheres turn 4 violet spheres 2 orange spheres end 2 blue 1 violet 2 orange spheres exactly need,['implementation'],1200.0
602/B,"<unknown> a practice course university measure intensity effect slowly approach equilibrium a good way determine equilibrium intensity would choose a sufficiently large number consecutive data point seem constant possible take average course usual size data 's nothing challenge — make a similar program contest problem 're ? 're give a sequence n data point a1 ... , n't big jump consecutive data point — 1 ≤ i < n 's guarantee |ai + 1 - <unknown> ≤ 1 . a range [ l r ] data point say almost constant difference largest smallest value range 1 . formally let m maximum m minimum value ai l ≤ i ≤ r ; range [ l r ] almost constant m - m ≤ 1 . find length longest almost constant range first line input contain a single integer n ( 2 ≤ n ≤ 100 000 ) — number data point second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 100 000 ) print a single number — maximum length almost constant range give sequence first sample longest almost constant range [ 2 5 ] ; length ( number data point ) 4 . second sample three almost constant range length 4 : [ 1 4 ] [ 6 9 ] [ 7 10 ] ; almost constant range maximum length 5 [ 6 10 ]","['dp', 'implementation']",1400.0
591/A,"harry potter he - who - must - not - be - named engage a fight death time locate opposite end corridor length l. two opponents simultaneously charge a deadly spell enemy know impulse harry 's magic spell fly a speed p meter per second impulse you - know - who 's magic spell fly a speed q meter per second impulses move corridor toward time collision turn round fly back cast without change original speed , soon impulse get back 's caster wizard reflect send towards enemy without change original speed impulse since harry perfectly master basics magic know second collision impulses disappear a powerful explosion occur exactly place collision however young wizard n't good math ask calculate distance position place second meet spell impulses provide opponents change position whole fight first line input contain a single integer l ( 1 ≤ l ≤ 1 000 ) — length corridor fight take place second line contain integer p third line contain integer q ( 1 ≤ p q ≤ 500 ) — speed magical impulses harry potter he - who - must - not - be - named respectively print a single real number — distance end corridor harry locate place second meet spell impulses answer consider correct absolute relative error exceed 10 - 4 . namely : let 's assume answer equal a answer jury b. checker program consider answer correct first sample speed impulses equal meet occur exactly middle corridor","['implementation', 'math']",900.0
586/A,alena successfully pass entrance exams university look forward start study one two - hour lesson russian university traditionally call a pair last two academic hours ( academic hour equal 45 minutes ) university work a way every day hold exactly n lessons depend schedule a particular group students a give day pair may actually contain class may empty ( pair call break ) official website university already publish schedule tomorrow alena 's group thus n pair know a class time alena 's house far university break n't always go home alena time go home break consist least two free pair a row otherwise wait next pair university course alena want sleepy pair sleep long possible come first pair present schedule similarly pair alena immediately go home alena appreciate time spend home always go home possible return university begin next pair help alena determine many pair stay university note pair alena may university wait upcoming pair first line input contain a positive integer n ( 1 ≤ n ≤ 100 ) — number lessons university second line contain n number ai ( 0 ≤ ai ≤ 1 ) number ai equal 0 alena n't i - th pair otherwise equal 1 . number a1 a2 ... separate space print a single number — number pair alena stay university first sample alena stay university second fifth pair inclusive third pair university wait next pair last sample alena n't a single pair spend time home,['implementation'],900.0
585/A,"gennady one best child <unknown> berland today n children get appointment line front office children love cry loudly reception dentist enumerate children integers 1 n order go line every child associate value <unknown> pi children take turn one another come office ; time child first line go doctor gennady treat teeth i - th child child cry volume vi confidence first child line reduce amount vi second one — value vi - 1 , children queue vi - th child almost hear cry confidence remain unchanged point time confidence j - th child less zero begin cry volume dj leave line run towards exit without go doctor 's office confidence children j - th one line reduce amount dj events occur immediately one order cry may lead cry cause a chain reaction hallway quiet child first line go doctor 's office help gennady dentist determine number kid whose teeth cure print number chronological order first line input contain a positive integer n ( 1 ≤ n ≤ 4000 ) — number kid line next n line contain three integers vi di pi ( 1 ≤ vi di pi ≤ 106 ) — volume cry doctor 's office volume cry hall confidence i - th child first line print number k — number children whose teeth gennady cure second line print k integers — number children make end line increase order first example gennady first treat teeth first child cry volume 4 . confidences remain children get equal - 2 1 3 1 respectively thus second child also cry volume 1 run exit confidence remain children equal 0 2 0 . third child go office cry volume 5 . children wo n't bear a loud cry run exit second sample first first child go office cry volume 4 . confidence remain children equal 5 - 1 6 8 . thus third child cry volume 1 run exit confidence remain children equal 5 5 7 . second child go office cry volume 5 . confidences remain children equal 0 3 . fourth child go office cry volume 2 . confidence fifth child 1 go office last","['brute force', 'implementation']",1800.0
583/B,"robot doc locate hall n computers stand a line number leave right 1 n. computer contain exactly one piece information doc want get eventually computers equip a security system crack i - th robot need collect least ai piece information computers doc hack computer right next robot assemble use modern technologies move along line computers either two possible directions change direction require a large amount resources doc tell minimum number change direction robot make collect n part information initially next computer number 1 . guarantee exist least one sequence robot 's action lead collection information initially doc n't piece information first line contain number n ( 1 ≤ n ≤ 1000 ) second line contain n non - negative integers a1 a2 ... ( 0 ≤ ai < n ) separate a space guarantee exist a way robot collect piece information print a single number — minimum number change direction robot make order collect n part information first sample assemble piece information optimal manner assemble first piece information first computer third one change direction move second one , 2 piece information collect last piece second sample collect piece information optimal manner doc go fourth computer get piece information go fifth computer one piece get another one go second computer manner third one finally first one change direction take place move fifth second computer second third computer third first computer third sample optimal order collect part computers look like : 1- > 3- > 4- > <unknown> > 2- > <unknown> > 7","['greedy', 'implementation']",1200.0
583/A,"city x consist n vertical n horizontal infinite roads form n × n intersections roads ( vertical horizontal ) number 1 n intersections indicate number roads form sand roads long recognize date decision make asphalt , a team workers hire a schedule work make accord intersections asphalt road repair plan n2 days i - th day team arrive i - th intersection list none two roads form intersection already asphalt asphalt roads otherwise team leave intersection without anything roads accord schedule road work tell days least one road asphalt first line contain integer n ( 1 ≤ n ≤ 50 ) — number vertical horizontal roads city next n2 line contain order intersections schedule i - th contain two number hi vi ( 1 ≤ hi vi ≤ n ) separate a space mean intersection go i - th timetable intersection hi - th horizontal vi - th vertical roads guarantee intersections timetable distinct single line print number days road work progress ascend order days number start 1 . sample brigade act like :",['implementation'],1000.0
581/B,"capital berland n <unknown> build architect build capital creative house build one row let 's enumerate house leave right start one a house consider luxurious number floor strictly greater house larger number word a house luxurious number floor strictly greater house locate right task assume heights floor house new architect interest n question i - th follow : ` ` many floor add i - th house make luxurious ? '' ( i 1 n inclusive ) need help cope task note question independent — answer question house i affect answer ( i.e. floor house actually add ) first line input contain a single number n ( 1 ≤ n ≤ 105 ) — number house capital berland second line contain n space - separated positive integers hi ( 1 ≤ hi ≤ 109 ) hi equal number floor i - th house print n integers a1 a2 ... , number ai number floor need add house number i make luxurious house already luxurious nothing need add ai equal zero house number leave right start one","['implementation', 'math']",1100.0
581/A,"one day vasya hipster decide count many sock turn a red sock b blue sock accord latest fashion <unknown> wear sock different color : a red one leave foot a blue one right foot every day vasya put new sock morning throw away go bed n't want wash vasya wonder maximum number days dress fashionable wear different sock , many days wear sock either run sock make a single pair sock 's get help ? single line input contain two positive integers a b ( 1 ≤ a b ≤ 100 ) — number red blue sock vasya 's get print two space - separated integers — maximum number days vasya wear different sock number days wear sock either run sock make a single pair sock 's get keep mind end day vasya throw away sock 's wear day first sample vasya first put one pair different sock two red sock leave wear second day","['implementation', 'math']",800.0
569/A,little lesha love listen music via smartphone smartphone n't much memory lesha listen favorite songs a well - known social network <unknown> unfortunately internet fast city <unknown> song take a lot time download lesha quite impatient song 's duration t second lesha download first s second song play <unknown> reach point yet download lesha immediately play song start ( load part song stay phone download continue place ) happen song download completely lesha listen end q second real time internet allow download q - 1 second track tell lesha many time start song include first start single line contain three integers t s q ( 2 ≤ q ≤ 104 1 ≤ s < t ≤ 105 ) print a single integer — number time song restart first test song play twice faster download mean four first second lesha reach moment download start song another two second song download completely thus lesha start song twice second test song almost download lesha start third sample test download finish lesha finish listen moment note song n't restart case,"['implementation', 'math']",1500.0
558/B,amr get a large array size n. amr n't like large array intend make smaller amr n't care anything array except beauty beauty array define maximum number time number occur array want choose smallest subsegment array beauty original array help amr choose smallest subsegment possible first line contain one number n ( 1 ≤ n ≤ 105 ) size array second line contain n integers ai ( 1 ≤ ai ≤ 106 ) represent elements array output two integers l r ( 1 ≤ l ≤ r ≤ n ) begin end subsegment choose respectively several possible answer may output a subsegment b array a l r array size r - l + 1 bi = al + i - 1 1 ≤ i ≤ r - l + 1,['implementation'],1300.0
557/B,pasha decide invite friends a tea party occasion a large teapot capacity w milliliters 2n tea cup cup one pasha 's friends i - th cup hold ai milliliters water turn among pasha 's friends exactly n boys exactly n girls go come tea party please everyone pasha decide pour water tea follow : word boy get two time water girl pasha kind polite want maximize total amount water pour friends task help determine optimum distribution cup pasha 's friends first line input contain two integers n w ( 1 ≤ n ≤ 105 1 ≤ w ≤ 109 ) — number pasha 's friends boys ( equal number pasha 's friends girls ) capacity pasha 's teapot milliliters second line input contain sequence integers ai ( 1 ≤ ai ≤ 109 1 ≤ i ≤ 2n ) — capacities pasha 's tea cup milliliters print a single real number — maximum total amount water milliliters pasha pour friends without violate give condition answer consider correct absolute relative error n't exceed 10 - 6 . pasha also candy go give girls another task .,"['constructive algorithms', 'implementation', 'math']",1500.0
552/E,vanya maths homework expression form x1 x2 ... xn digits 1 9 sign represent either a plus ' + ' multiplication sign ' * ' vanya need add one pair bracket expression maximize value result expression first line contain expression s ( 1 ≤ |s| ≤ <unknown> |s| odd ) odd position contain digits 1 9 even position contain sign + * number sign * n't exceed 15 . first line print maximum possible value expression note first sample test 3 + 5 * ( 7 + 8 ) * 4 = <unknown> . note second sample test ( 2 + 3 ) * 5 = 25 . note third sample test ( 3 * 4 ) * 5 = 60 ( also many variants valid instance ( 3 ) * 4 * 5 = 60 ),"['brute force', 'dp', 'greedy', 'implementation', 'strings']",2100.0
548/A,mike walk subway stuff back - bag drop grind several fax message among concatenate string order string s. sure back - bag someone else 's remember exactly k message bag a palindrome string string length ask help tell wear back - bag check give string s a concatenation k palindromes length first line input contain string s contain lowercase english letter ( 1 ≤ |s| ≤ 1000 ) second line contain integer k ( 1 ≤ k ≤ 1000 ) print ` ` yes '' ( without quote ) wear back - bag ` ` '' ( without quote ) otherwise palindrome a string read forward backward second sample fax back - bag ` ` saddas '' ` ` <unknown> '',"['brute force', 'implementation', 'strings']",1100.0
546/A,a soldier want buy w bananas shop pay k dollars first banana 2k dollars second one ( word pay <unknown> dollars i - th banana ) n dollars many dollars borrow friend soldier buy w bananas ? first line contain three positive integers k n w ( 1 ≤ k w ≤ 1000 0 ≤ n ≤ 109 ) cost first banana initial number dollars soldier number bananas want output one integer — amount dollars soldier must borrow friend n't borrow money output 0,"['brute force', 'implementation', 'math']",800.0
538/D,igor chess a long time sick game ordinary rule go think new rule game become world famous igor 's chessboard a square size n × n cells igor decide simple rule guarantee success 's game one type piece besides piece game color possible move a piece describe a set shift vectors next passage contain a formal description available move let row board number top bottom columns number leave right 1 n. let 's assign square a pair integers ( x y ) — number correspond column row possible move piece define a pair integers ( dx dy ) ; use move piece move field ( x y ) field ( x + dx y + dy ) perform move cell ( x + dx y + dy ) within boundaries board n't contain another piece piece stand cells ( x y ) ( x + dx y + dy ) important consider possibility make give move ( example like a knight move usual chess ) igor offer find move chess piece make place several piece board unoccupied square tell whether attack present piece ( i.e whether piece field move cell ) restore a possible set shift vectors piece else determine igor make a mistake situation impossible set shift vectors first line contain a single integer n ( 1 ≤ n ≤ 50 ) next n line contain n character describe position offer igor j - th character i - th string follow value : guarantee least one piece board a valid set move first line print a single word ' yes ' ( without quote ) next print description set move a piece form a ( 2n - 1 ) × ( 2n - 1 ) board center board a piece symbols ' x ' mark cells attack a format similar input see examples output a full understand format several possible answer print a valid set move exist print a single word ' no ' first sample test piece a usual chess rook second sample test piece a usual chess knight,"['brute force', 'constructive algorithms', 'implementation']",1800.0
538/B,a number call quasibinary decimal representation contain digits 0 1 . example number 0 1 101 <unknown> — quasibinary number 2 12 900 give a positive integer n. represent a sum minimum number quasibinary number first line contain a single integer n ( 1 ≤ n ≤ 106 ) first line print a single integer k — minimum number number representation number n a sum quasibinary number second line print k number — elements sum number quasibinary accord definition sum equal n. print lead zero number order number n't matter multiple possible representations allow print,"['constructive algorithms', 'dp', 'greedy', 'implementation']",1400.0
538/A,a large banner word codeforces order 1000 - th onsite round <unknown> take place <unknown> beach unfortunately company make banner mix two order deliver somebody else 's banner contain someone else 's word word banner consist upper - case english letter little time correct mistake manage cut substring banner i.e several consecutive letter result part banner glue a single piece ( begin end original banner cut one part remain ) ; allow change relative order part banner ( i.e a substring cut several first last letter leave allow glue last letter right first letter ) thus example example cut a substring string ' template ' get string ' temple ' ( cut string ) ' plate ' ( cut <unknown> ) ' t ' ( cut <unknown> ) etc help organizers round determine whether possible cut banner substring a way remain part form word codeforces single line input contain word write banner word consist upper - case english letter word non - empty length n't exceed 100 character guarantee word n't word codeforces print ' yes ' exist a way cut substring ' no ' otherwise ( without quote ),"['brute force', 'implementation']",1400.0
534/E,"berland a bus travel along main street capital street begin main square look like a long segment n bus stop locate along street i - th locate distance ai central square distance distinct stop number order increase distance square , ai < ai + 1 i 1 n - 1 . bus start journey first stop pass stop 2 3 reach stop number n turn around go opposite direction stop 1 pass intermediate stop reverse order , start move towards stop n. day bus run non - stop route bus equip berland local position system bus pass a stop system note number one key feature system respond query distance cover bus part path pair stop a special module system take input information a set stop a segment path a stop number occur set many time bus drive past module return length travel segment path ( -1 impossible determine length uniquely ) operation module complicate fact stop number occur request order visit non - decreasing order example number stop 6 part bus path start bus stop number 5 end stop number 3 pass stop follow : request segment path form : 3 4 5 5 6 . bus segment path stop 5 stop 3 time drive past 1 - th stop ( i.e. consider a segment end second visit stop 3 way 5 ) request form : 1 2 2 3 3 4 5 5 6 . repeat berland programmers achievement implement function first line contain integer n ( 2 ≤ n ≤ 2·105 ) — number stop second line contain n integers ( 1 ≤ ai ≤ 109 ) — distance i - th stop central square number second line go increase order third line contain integer m ( 1 ≤ m ≤ 4·105 ) — number stop bus visit segment path fourth line contain m integers ( 1 ≤ bi ≤ n ) — sort list number stop visit bus segment path number a stop occur many time visit a bus guarantee query correspond segment path single line please print distance cover a bus impossible determine unambiguously print - 1 . first test statement demonstrate first example show statement problem second test statement demonstrate second example show statement problem third sample two possible paths distinct lengths consequently seek length segment n't define uniquely fourth sample even though two distinct paths correspond query lengths seek length segment define uniquely","['constructive algorithms', 'greedy', 'implementation']",2400.0
526/E,optimize amount data transmit via a network important interest part develop network application one secret game develop deep zeptolab company game universe consist n level locate a circle get level i level i - 1 i + 1 also get level 1 level n vice versa map i - th level description size ai bytes order reduce transmit traffic game get level follow level server divide m group time a player find one level a certain group first time server send level group game client a single packet thus a player travel inside level a single group application n't need new information due technical limitations packet contain arbitrary number level total size must n't exceed b bytes b positive integer constant usual situation players finish level one one 's a decision make split n level m group group a continuous segment contain multiple neighbor level ( also group two adjacent level n 1 ) specifically descriptions level total weight b bytes unite one group send a single packet determine minimum number group need make order organize level game observe condition ? develop a game a long process technology never <unknown> yet impossible predict exactly value take constant value b limit packet size game 's developers ask find answer multiple value b. first line contain two integers n q ( 2 ≤ n ≤ 106 1 ≤ q ≤ 50 ) — number level game universe number distinct value b need process second line contain n integers ai ( 1 ≤ ai ≤ 109 ) — size level bytes next q line contain integers bj ( ) determine value constant b need determine answer value kj input print a single line integer mj ( 1 ≤ mj ≤ n ) determine minimum number group divide game level transmission via network observe give condition test statement follow manner,"['dp', 'implementation']",2400.0
519/B,"a b prepare program contest b love debug code run solution start debug first compile code initially compiler display n compilation errors represent a positive integer effort b manage fix mistake another one mistake however despite fact b sure correct two errors understand exactly compilation errors disappear — compiler language b use show errors new order every time ! b sure unlike many program languages compilation errors program language depend , correct one error set error change help b find exactly two errors correct ? first line input contain integer n ( 3 ≤ n ≤ 105 ) — initial number compilation errors second line contain n space - separated integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) — errors compiler display first time third line contain n - 1 space - separated integers b1 b2 ... bn - 1 — errors display second compilation guarantee sequence third line contain number second string except exactly one fourth line contain n - 2 space - separated integers <unknown> <unknown> ... <unknown> - 2 — errors display third compilation guarantee sequence fourth line contain number third line except exactly one print two number a single line : number compilation errors disappear b make first second correction respectively first test sample b first correct error number 8 error number 123 . second test sample b first correct error number 1 error number 3 . note multiple errors number b correct one one step","['data structures', 'implementation']",1100.0
519/A,a b prepare program contest train logical think solve problems better a b decide play chess game a wonder whose position stronger chess piece know weight : player 's weight equal sum weight piece board a n't like count ask help determine player larger position weight input contain eight line eight character — board 's description white piece board mark uppercase letter black piece mark lowercase letter white piece denote follow : queen represent ' q ' rook — ' r ' bishop — ' b ' knight — ' n ' pawn — ' p ' king — ' k ' black piece denote ' q ' ' r ' ' b ' ' n ' ' p ' ' k ' respectively empty square board mark ' . ' ( a dot ) guarantee give chess position achieve a real game specifically arbitrary ( possibly zero ) number piece type king may attack print ` ` white '' ( without quote ) weight position white piece weight position black piece print ` ` black '' weight black piece weight white piece print ` ` draw '' weight white black piece equal first test sample weight position white piece equal 9 weight position black piece equal 5 . second test sample weight position black white piece equal 39 . third test sample weight position white piece equal 9 weight position black piece equal 16,['implementation'],900.0
518/F,a certain meet a rule party ` ` a '' minister pavel suggest improve <unknown> system create a new pipe city city n × m rectangular square field square field either empty ( pipe go ) occupy ( pipe go square ) empty square denote character ' ' occupy square denote character ' # ' pipe must meet follow criteria : sample allow pip rout : sample forbid pip rout : sample pip represent character ' * ' ask write a program calculate number distinct ways make exactly one pipe city two ways make a pipe consider distinct distinct least one square first line input contain two integers n m ( 2 ≤ n m ≤ 2000 ) — height width berland map next n line contain m character — map city square map mark character ' ' square empty pipe square map mark character ' # ' square full pipe ca n't first line output print a single integer — number distinct ways create a pipe first sample 3 ways make a pipe ( square pipe mark character ' * ' ) :,"['brute force', 'dp', 'implementation']",2300.0
518/C,"anya buy a new smartphone use berdroid operate system smartphone menu exactly n applications application icon icons locate different screen one screen contain k icons icons first k - th one locate first screen ( k + 1 ) -th 2k - th ones second screen ( last screen may partially empty ) initially smartphone menu show screen number 1 . launch application icon locate screen t anya need make follow gesture : first scroll require screen number t make t - 1 gesture ( icon screen t ) make another gesture — press icon require application exactly launch application launch menu return first screen , launch next application need scroll menu start screen number 1 . applications number 1 n. know a certain order icons applications locate menu begin change long use operate system berdroid intelligent system change order icons move frequently use icons begin list formally right application launch berdroid swap application icon icon a precede application ( icon application position smaller one order menu ) precede icon may possibly locate adjacent screen exception icon launch application already occupy first place case icon arrangement n't change anya plan order launch applications many gesture anya make launch applications plan order ? note one application may launch multiple time first line input contain three number n m k ( 1 ≤ n m k ≤ 105 ) — number applications anya smartphone number applications launch number icons locate screen next line contain n integers permutation a1 a2 ... — initial order icons leave right menu ( first last one ) ai — i d application whose icon go i - th menu integer 1 n occur exactly among ai third line contain m integers b1 b2 ... bm ( 1 ≤ bi ≤ n ) — ids launch applications plan order one application may launch multiple time print a single number — number gesture anya need make launch applications desire order first test initial configuration look like ( 123 ) ( <unknown> ) ( 78 ) , first screen contain icons applications 1 2 3 second screen contain icons 4 5 6 third screen contain icons 7 8 . application 7 launch get new arrangement icons — ( 123 ) ( 457 ) ( 68 ) launch anya make 3 gesture application 8 launch get configuration ( 123 ) ( 457 ) ( 86 ) launch anya make 3 gesture application 1 launch arrangement icons menu n't change launch anya make 1 gesture total anya make 7 gesture","['constructive algorithms', 'data structures', 'implementation']",1600.0
500/A,"new year come line world ! world n cells number integers 1 n a 1 × n board people live cells however hard move distinct cells difficulty escape cell people want meet people live cells , user <unknown> make a transportation system move cells celebrate new year first think n - 1 positive integers a1 a2 ... - 1 . every integer i 1 ≤ i ≤ n - 1 condition 1 ≤ ai ≤ n - i hold next make n - 1 portals number integers 1 n - 1 . i - th ( 1 ≤ i ≤ n - 1 ) portal connect cell i cell ( i + ai ) one travel cell i cell ( i + ai ) use i - th portal unfortunately one use portal backwards mean one move cell ( i + ai ) cell i use i - th portal easy see condition 1 ≤ ai ≤ n - i one ca n't leave line world use portals currently i stand cell 1 i want go cell t. however i n't know whether possible go please determine whether i go cell t use <unknown> transportation system first line contain two space - separated integers n ( 3 ≤ n ≤ 3 × 104 ) t ( 2 ≤ t ≤ n ) — number cells index cell i want go second line contain n - 1 space - separated integers a1 a2 ... - 1 ( 1 ≤ ai ≤ n - i ) guarantee use give transportation system one leave line world i go cell t use transportation system print ` ` yes '' otherwise print ` ` '' first sample visit cells : 1 2 4 ; successfully visit cell 4 . second sample possible cells visit : 1 2 4 6 7 8 ; ca n't visit cell 5 want visit","['dfs and similar', 'implementation']",1000.0
496/C,"give n × m rectangular table consist lower case english letter one operation completely remove one column table remain part combine form a new table example remove second column table obtain table : a table call good row order top bottom lexicographically i.e row lexicographically larger follow one determine minimum number operations remove a column need make a give table good first line contain two integers — n m ( 1 ≤ n m ≤ 100 ) next n line contain m small english letter — character table print a single number — minimum number columns need remove order make table good first sample table already good second sample may remove first third column third sample remove columns ( note table row empty consider good definition ) let string s t equal length , s lexicographically larger t equal character follow largest common prefix s t ( prefix may empty ) s alphabetically larger correspond character t","['brute force', 'constructive algorithms', 'implementation']",1500.0
493/A,vasya start watch football game learn foul players receive yellow card foul receive red card a player receive second yellow card automatically receive a red card vasya watch a record football match make note foul would give a card help vasya determine moments time players would give red card vasya judge player vasya want know first moment time would receive a red card vasya first line contain name team play home second line contain name team play away line empty lengths line exceed 20 . line contain large english letter name team distinct next follow number n ( 1 ≤ n ≤ 90 ) — number foul follow n line contain information a foul follow form : players different team number players within one team distinct number foul go chronologically two foul happen minute event a player receive first red card a chronological order print a string contain follow information : player receive a card need print anything possible case program print anything output ( red card ),['implementation'],1300.0
492/B,vanya walk late night along a straight street length l light n lanterns consider coordinate system begin street correspond point 0 end correspond point l. i - th lantern point ai lantern light point street distance d d positive number common lanterns vanya wonder : minimum light radius d lanterns light whole street ? first line contain two integers n l ( 1 ≤ n ≤ 1000 1 ≤ l ≤ 109 ) — number lanterns length street respectively next line contain n integers ai ( 0 ≤ ai ≤ l ) multiple lanterns locate point lanterns may locate end street print minimum light radius d need light whole street answer consider correct absolute relative error n't exceed 10 - 9 . consider second sample d = 2 first lantern light segment [ 0 4 ] street second lantern light segment [ 3 5 ] thus whole street light,"['implementation', 'math']",1200.0
491/A,hike club ` ` hill '' return a walk try remember hill ' ve walk know n stop different integer heights 1 n kilometers ( inclusive ) sea level first day ' ve travel first stop second stop second day ' ve travel second third last day ' ve travel stop n - 1 stop n successfully finish expedition try find heights stop locate entry a travel journal specify many days travel hill many days walk hill help suggest possible stop heights satisfy number travel journal first line integer non - negative number a denote number days climb hill second line contain integer non - negative number b — number days walk hill ( a + b + 1 = n 1 ≤ n ≤ 100 000 ) output n space - separated distinct integers 1 n inclusive denote possible heights stop order visit,"['constructive algorithms', 'implementation']",1000.0
490/E,"peter write board a strictly increase sequence positive integers a1 a2 ... , <unknown> replace digits number sequence question mark thus question mark correspond exactly one lose digit restore original sequence know digits remain board first line input contain integer n ( 1 ≤ n ≤ 105 ) — length sequence next n line contain one element sequence element consist digits question mark element start digit 0 . element length 1 8 character inclusive answer exist print first line ` ` yes '' ( without quote ) next n line must contain sequence positive integers — a possible variant peter 's sequence find sequence must strictly increase must transform give one replace question mark a single digit number result sequence must write without lead zero multiple solutions print answer print a single line ` ` '' ( without quote )","['brute force', 'greedy', 'implementation']",2000.0
489/A,problem goal sort array consist n integers n swap give array find sequence swap make array sort non - descending order swap perform consecutively one another note problem minimize number swap — task find sequence longer n. first line input contain integer n ( 1 ≤ n ≤ 3000 ) — number array elements second line contain elements array : a0 a1 ... - 1 ( - 109 ≤ ai ≤ 109 ) ai i - th element array elements numerate 0 n - 1 leave right integers may appear array first line print k ( 0 ≤ k ≤ n ) — number swap next k line must contain descriptions k swap one per line swap print a pair integers i j ( 0 ≤ i j ≤ n - 1 ) represent swap elements ai aj print indices pair order swap perform order appear output first last allow print i = j swap pair elements multiple time multiple answer print guarantee least one answer exist,"['greedy', 'implementation']",1200.0
487/A,a monster attack cyberland ! master yang a <unknown> go beat monster yang monster 3 attribute : <unknown> ( hp ) offensive power ( atk ) defensive power ( def ) battle every second monster 's hp decrease max ( 0 atky - defm ) yang 's hp decrease max ( 0 atkm - defy ) index y denote master yang index m denote monster decrease happen simultaneously monster 's hp ≤ 0 time master yang 's hp > 0 master yang win master yang buy attribute magic shop cyberland : h bitcoins per hp a bitcoins per atk d bitcoins per def master yang want know minimum number bitcoins spend order win first line contain three integers <unknown> atky defy separate a space denote initial hp atk def master yang second line contain three integers <unknown> atkm defm separate a space denote hp atk def monster third line contain three integers h a d separate a space denote price 1 hp 1 atk 1 def number input integer lie 1 100 inclusively output line contain integer denote minimum bitcoins master yang spend order win first sample price atk def extremely high master yang buy 99 hp beat monster 1 hp leave second sample master yang strong enough beat monster n't need buy anything,"['brute force', 'implementation']",1800.0
484/C,many specific order know ? ascend order descend order order ascend length order ascend polar angle ... let 's a look another specific order : d - sorting sort apply string length least d d positive integer character string sort follow manner : first come 0 - th character initial string 1 - st ones 2 - nd ones end go ( d - 1 ) -th character initial string i - th character mean character whose position exactly i modulo d. two character stand position remainder integer division d relative order sort n't change string zero - indexed example string ' qwerty ' : 1 - sorting string ' qwerty ' ( character stand 0 position ) 2 - sorting string ' <unknown> ' ( character ' q ' ' e ' ' t ' stand 0 position character ' w ' ' r ' ' y ' 1 position ) 3 - sorting string ' <unknown> ' ( character ' q ' ' r ' stand 0 position character ' w ' ' t ' stand 1 position character ' e ' ' y ' stand 2 position ) 4 - sorting string ' <unknown> ' 5 - sorting string ' <unknown> ' give string s length n m shuffle operations string shuffle operation accept two integer arguments k d transform string s follow i 0 n - k increase order apply operation d - sorting substring s [ i .. i + k - 1 ] s [ a .. b ] represent a substring consist character position a b inclusive shuffle operation need print string s. first line input contain a non - empty string s length n consist lowercase uppercase english letter digits 0 9 . second line input contain integer m – number shuffle operations ( 1 ≤ <unknown> ≤ 106 ) follow m line contain descriptions operations consist two integers k d ( 1 ≤ d ≤ k ≤ n ) operation print current state string s. detail explanation sample first modification execute arguments k = 4 d = 2 . mean need apply 2 - sorting substring length 4 one one move leave right string transform follow manner : qwerty → <unknown> → <unknown> → <unknown> string s equal ' qertwy ' end first query second modification execute arguments k = 6 d = 3 . a result operation whole string s replace 3 - sorting : qertwy → <unknown> third modification execute arguments k = 5 d = 2 . <unknown> → qertwy → <unknown>,"['implementation', 'math']",2600.0
483/A,friend recently learn coprime number a pair number { a b } call coprime maximum number divide a b equal one friend often come different statements recently suppose pair ( a b ) coprime pair ( b c ) coprime pair ( a c ) coprime want find a counterexample friend 's statement therefore task find three distinct number ( a b c ) statement false number meet condition l ≤ a < b < c ≤ r. specifically need find three number ( a b c ) l ≤ a < b < c ≤ r pair ( a b ) ( b c ) coprime pair ( a c ) coprime single line contain two positive space - separated integers l r ( 1 ≤ l ≤ r ≤ 1018 ; r - l ≤ 50 ) print three positive space - separated integers a b c — three distinct number ( a b c ) form counterexample several solutions allow print number must print ascend order counterexample exist print single number -1 . first sample pair ( 2 4 ) coprime pair ( 2 3 ) ( 3 4 ) second sample form a group three distinct integers answer -1 . third sample easy see number <unknown> <unknown> divisible three,"['brute force', 'implementation', 'math']",1100.0
479/B,know kid berland love play cub little petya n tower consist cub size tower number i consist ai cub stack one top petya define instability a set tower a value equal difference heights highest lowest tower example petya build five cube tower heights ( 8 3 2 6 3 ) instability set equal 6 ( highest tower height 8 lowest one height 2 ) boy want instability set tower low possible perform follow operation several time : take top cube tower put top tower set please note petya would never put cube tower remove think 's a waste time go school boy time perform k operations petya want late class help accomplish task first line contain two space - separated positive integers n k ( 1 ≤ n ≤ 100 1 ≤ k ≤ 1000 ) — number tower give set maximum number operations petya perform second line contain n space - separated positive integers ai ( 1 ≤ ai ≤ 104 ) — tower ' initial heights first line print two space - separated non - negative integers s m ( m ≤ k ) first number value minimum possible instability obtain perform k operations second number number operations need next m line print description operation two positive integers i j lie within limit 1 n. represent petya take top cube i - th tower put j - th one ( i ≠ j ) note process perform operations heights tower become equal zero multiple correct sequence minimum possible instability achieve allow print first sample need move cub two time second tower third one second one first one heights tower equal 6,"['brute force', 'constructive algorithms', 'greedy', 'implementation']",1400.0
474/B,lunch time mole friend marmot prepare a nice game lunch marmot bring mole n order pile worm i - th pile contain ai worm label worm consecutive integers : worm first pile label number 1 a1 worm second pile label number a1 + 1 a1 + a2 see example a better understand mole ca n't eat worm ( marmot bring a lot ) know mole blind marmot tell label best juicy worm marmot give mole a worm mole say correctly pile worm contain poor mole ask help juicy worm say marmot tell mole correct answer first line contain a single integer n ( 1 ≤ n ≤ 105 ) number pile second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 103 a1 + a2 + ... + ≤ 106 ) ai number worm i - th pile third line contain single integer m ( 1 ≤ m ≤ 105 ) number juicy worm say marmot fourth line contain m integers q1 q2 ... qm ( 1 ≤ qi ≤ a1 + a2 + ... + ) label juicy worm print m line standard output i - th line contain integer represent number pile worm label number qi sample input :,['implementation'],1200.0
471/B,'s time polar bear menshykov uslada zoo st . petersburg elephant horace zoo kiev get business total n task day animal task task evaluate difficulty also animals decide task order difficulty unfortunately task difficulty order one perform task may vary menshykov uslada horace ask deal <unknown> come individual plan plan a sequence describe order animal n task besides want unique plan therefore three plan must form three different sequence find require plan otherwise deliver sad news state impossible come three distinct plan give task first line contain integer n ( 1 ≤ n ≤ 2000 ) — number task second line contain n integers h1 h2 ... hn ( 1 ≤ hi ≤ 2000 ) hi difficulty i - th task larger number hi difficult i - th task first line print ` ` yes '' ( without quote ) possible come three distinct plan task otherwise print first line ` ` '' ( without quote ) three desire plan exist print second line n distinct integers represent number task order do accord first plan third fourth line print two remain plan form multiple possible answer print first sample difficulty task set one limit : task 1 4 must do task 2 3 . give total four possible sequence task : [ 1 4 2 3 ] [ 4 1 2 3 ] [ 1 4 3 2 ] [ 4 1 3 2 ] print three answer second sample two sequence task meet condition — [ 3 1 2 4 5 ] [ 3 1 4 2 5 ] consequently impossible make three distinct sequence task,['implementation'],1300.0
467/A,george recently enter <unknown> ( berland state university cool programmers ) george a friend alex also enter university move a dormitory george alex want live room dormitory n room total moment i - th room pi people live room accommodate qi people total ( pi ≤ qi ) task count many room free place george alex first line contain a single integer n ( 1 ≤ n ≤ 100 ) — number room i - th next n line contain two integers pi qi ( 0 ≤ pi ≤ qi ≤ 100 ) — number people already live i - th room room 's capacity print a single integer — number room george alex move,['implementation'],800.0
466/A,ann recently start commute subway know a one ride subway ticket cost a rubles besides ann find buy a special ticket m rid ( buy several time ) cost b rubles ann math ; need use subway n time help ann tell minimum sum money spend make n rid ? single line contain four space - separated integers n m a b ( 1 ≤ n m a b ≤ 1000 ) — number rid ann plan number rid cover m ride ticket price a one ride ticket price m ride ticket print a single integer — minimum sum rubles ann need spend first sample one optimal solutions : time buy a one ride ticket optimal solutions example buy three m ride ticket,['implementation'],1200.0
463/D,gargari get bore play bishops solve problem try math homework a math book find k permutations consist number 1 2 ... n order find length longest common subsequence permutations help gargari ? read longest common subsequence : https : //en.wikipedia.org / wiki / <unknown> first line contain two integers n k ( 1 ≤ n ≤ 1000 ; 2 ≤ k ≤ 5 ) next k line contain integers 1 2 ... n order — description current permutation print length longest common subsequence answer first test sample subsequence [ 1 2 3 ],"['dfs and similar', 'dp', 'implementation']",1900.0
451/C,n game a football tournament three team participate currently k game already play avid football fan recently miss whole k game fortunately remember a guess friend k game friend tell exact number win team instead think absolute difference number win first second team d1 second third team d2 n't want team win tournament team number win n game 's want know : exist a valid tournament satisfy friend 's guess team win tournament ? note outcome a match a draw either win loss first line input contain a single integer correspond number test case t ( 1 ≤ t ≤ 105 ) next t line contain four space - separated integers n k d1 d2 ( 1 ≤ n ≤ 1012 ; 0 ≤ k ≤ n ; 0 ≤ d1 d2 ≤ k ) — data current test case test case output a single line contain either ` ` yes '' possible winner tournament ` ` '' otherwise ( without quote ) sample 1 . match ( k = 0 d1 = 0 d2 = 0 ) three match ( 1 - 2 2 - 3 3 - 1 ) team win end team 1 win sample 2 . miss game ( k = 3 ) d1 = 0 d2 = 0 a way play three game winner tournament ( describe previous sample ) answer ` ` yes '' sample 3 . miss 4 match d1 = 1 d2 = 0 . four match : 1 - 2 ( win 2 ) 1 - 3 ( win 3 ) 1 - 2 ( win 1 ) 1 - 3 ( win 1 ) currently first team 2 win second team 1 win third team 1 win two remain match : 1 - 2 ( win 2 ) 1 - 3 ( win 3 ) end team equal number win ( 2 win ),"['brute force', 'implementation', 'math']",1700.0
450/B,jzzhu invent a kind sequence meet follow property : give x y please calculate fn modulo 1000000007 ( 109 + 7 ) first line contain two integers x y ( |x| |y| ≤ 109 ) second line contain a single integer n ( 1 ≤ n ≤ 2·109 ) output a single integer represent fn modulo 1000000007 ( 109 + 7 ) first sample f2 = f1 + f3 3 = 2 + f3 f3 = 1 . second sample f2 = - 1 ; - 1 modulo ( 109 + 7 ) equal ( 109 + 6 ),"['implementation', 'math']",1300.0
447/B,dzy love collect special string contain lowercase letter lowercase letter c dzy know value <unknown> special string s = s1s2 ... s|s| ( |s| length string ) represent value a function f ( s ) dzy a string s. want insert k lowercase letter string order get largest possible value result string help calculate largest possible value could get ? first line contain a single string s ( 1 ≤ |s| ≤ 103 ) second line contain a single integer k ( 0 ≤ k ≤ 103 ) third line contain <unknown> - six integers wa <unknown> number non - negative n't exceed 1000 . print a single integer — largest possible value result string dzy could get test sample dzy obtain ` ` <unknown> '' value = 1·1 + 2·2 + <unknown> + 4·2 + 5·2 + 6·2 = 41,"['greedy', 'implementation']",1000.0
445/A,dzy love chessboard enjoy play a chessboard n row m columns cells chessboard bad others good every good cell dzy want put a chessman chessman either white black put chessmen dzy want two chessmen color two adjacent cells two cells adjacent share a common edge task find suitable placement chessmen give chessboard first line contain two space - separated integers n m ( 1 ≤ n m ≤ 100 ) next n line contain a string m character : j - th character i - th string either ` ` . '' ` ` - '' a ` ` . '' mean correspond cell ( i - th row j - th column ) good a ` ` - '' mean bad output must contain n line line must contain a string m character j - th character i - th string either ` ` w '' ` ` b '' ` ` - '' character ` ` w '' mean chessman cell white ` ` b '' mean black ` ` - '' mean cell a bad cell multiple answer exist print guarantee least one answer exist first sample dzy put a single black chessman course put a white one also ok . second sample 4 cells good two chessmen share edge sample output third sample good cells adjacent put 3 chessmen matter color,"['dfs and similar', 'implementation']",1200.0
442/A,"ever play <unknown> ? , ' ve get try ! problem deal a simplify version game overall game 25 type card ( 5 distinct color 5 distinct value ) borya hold n card game somewhat complicate fact everybody see borya 's card except borya borya know card know nothing order lie note borya multiple identical card ( 25 type card know exactly many card type ) aim players achieve state borya know color number value card , players give hint hint two type : color hint value hint a color hint go like : a player name color point card color similarly go value hint a player name value point card contain value determine minimum number hint players make borya certain card 's color value first line contain integer n ( 1 ≤ n ≤ 100 ) — number borya 's card next line contain descriptions n card description card consist exactly two character first character show color ( overall position contain five distinct letter — r g b y w ) second character show card 's value ( a digit 1 5 ) borya n't know exact order card lie print a single integer — minimum number hint players make first sample borya already know card a green three second sample show fours red card third sample need make hint four color","['brute force', 'implementation']",1700.0
439/B,devu a dumb guy learn curve slow suppose teach n subject ith subject ci chapters teach suppose teach chapters a subject continuously let us say initial per chapter learn power a subject x hours word learn a chapter a particular subject x hours well devu complete dumb a good thing teach a subject time require teach chapter next subject require exactly 1 hour less previously require ( see examples understand clearly ) note per chapter learn power less 1 hour teach n subject possible order find minimum amount time ( hours ) devu take understand subject free enjoy task rather teach a dumb guy please careful answer might fit 32 bite data type first line contain two space separate integers n x ( 1 ≤ n x ≤ 105 ) next line contain n space separate integers : c1 c2 ... cn ( 1 ≤ ci ≤ 105 ) output a single integer represent answer problem look first example consider order subject : 1 2 . teach devu first subject take 3 hours per chapter take 12 hours teach first subject teach first subject per chapter learn time 2 hours teach second subject take 2 × 1 = 2 hours hence need spend 12 + 2 = 14 hours consider order subject : 2 1 . teach devu second subject take 3 hours per chapter take 3 × 1 = 3 hours teach second subject teach second subject per chapter learn time 2 hours teach first subject take 2 × 4 = 8 hours hence need spend 11 hours overall minimum case 11 hours look third example order example n't matter teach devu first subject take 3 hours per chapter teach devu second subject take 2 hours per chapter teach devu third subject take 1 hours per chapter total take 6 hours,['implementation'],1200.0
437/A,upon a time a child get a test consist multiple - choice question homework a multiple - choice question consist four choices : a b c d. choice a description child find one correct fortunately child know solve complicate test child follow algorithm : give a multiple - choice question predict child 's choose ? first line start ` ` a . '' ( without quote ) follow description choice a. next three line contain descriptions choices format give order : b c d. please note description go prefix ` ` x ` ` prefix must n't count description 's length description non - empty consist 100 character character either uppercase english letter lowercase english letter ` ` _ '' print a single line child 's choice : ` ` a '' ` ` b '' ` ` c '' ` ` d '' ( without quote ) first sample first choice length 39 second one length 35 third one length 37 last one length 15 . choice d ( length 15 ) twice shorter choices ' great choice great choices child choose d. second sample choice great child choose luckiest choice c. third sample choice b ( length 2 ) twice longer choices ' great choice great choices child choose b,['implementation'],1300.0
436/B,"om nom really like candy n't like spiders frequently steal candy one day om nom fancy a walk a park unfortunately park spiders om nom n't want see park represent a rectangular n × m field park k spiders spider time 0 cell field spiders move time spider always move one four directions ( leave right , ) a unit time a spider crawl cell side - adjacent cell correspond direction cell give direction spider leave park spiders interfere move specifically one cell multiple spiders time om nom n't yet sure start walk definitely want : know om nom move jump one jump take one time unit transport little monster cell either a side - adjacent cell lower row outside park boundaries time om nom land a cell see spiders come cell moment time om nom want choose optimal cell start walk 's wonder : possible start cell many spiders see walk start cell ? help calculate require value possible start cell first line contain three integers n m k ( 2 ≤ n m ≤ 2000 ; 0 ≤ k ≤ m ( n - 1 ) ) next n line contain m character — description park character i - th line describe i - th row park field character line equal ` ` ` ` mean correspond cell field empty ; otherwise character line equal one four character : ` ` l '' ( mean cell a spider time 0 move leave ) ` ` r '' ( a spider move right ) ` ` u '' ( a spider move ) ` ` d '' ( a spider move ) guarantee first row n't contain spiders guarantee description field contain extra character guarantee time 0 field contain exactly k spiders print m integers : j - th integer must show number spiders om nom see start walk j - th cell first row cells row field number leave right consider first sample note show spider arrangement change field time : character ` ` * '' represent a cell contain two spiders time","['implementation', 'math']",1400.0
435/C,"problem task use ascii graphics paint a cardiogram a cardiogram a polyline follow corner : a cardiogram fully define a sequence positive integers a1 a2 ... , task paint a cardiogram give sequence ai first line contain integer n ( 2 ≤ n ≤ 1000 ) next line contain sequence integers a1 a2 ... ( 1 ≤ ai ≤ 1000 ) guarantee sum ai n't exceed 1000 . print max |yi - yj| line ( yk y coordinate k - th point polyline ) line print character character must equal either « / » ( slash ) « \ » ( <unknown> ) « » ( space ) print image must image give polyline please study test sample better understand print a cardiogram note problem checker check answer take space consideration print extra character remember wrong answer first pretest n't give a penalty due technical reason answer sample copy statement ' ve attach two text document answer <unknown> : //assets.codeforces.com / <unknown> : //assets.codeforces.com / <unknown>",['implementation'],1600.0
433/C,ryouko extremely forgetful girl could even forget something happen order remember take a notebook call ryouko 's memory note write see hear notebook notebook become memory though ryouko forgetful also bear superb analyze abilities however analyze depend greatly gather information word memory shuffle notebook whenever need analyze tough work ryouko 's notebook consist n page number 1 n. make life ( problem ) easier consider turn page x page y |x - y| page turn analyze ryouko need m piece information i - th piece information page ai information must read notebook order total number page ryouko need turn ryouko want decrease number page need turn order achieve merge two page notebook ryouko merge page x page y would copy information page x y ( 1 ≤ x y ≤ n ) consequently elements sequence a x would become y. note x equal y case change take place please tell ryouko minimum number page need turn note apply describe operation read note answer exceed 32 - bit integers first line input contain two integers n m ( 1 ≤ n m ≤ 105 ) next line contain m integers separate space : a1 a2 ... ( 1 ≤ ai ≤ n ) print a single integer — minimum number page ryouko need turn first sample optimal solution merge page 4 3 merge sequence a become { 1 2 3 3 3 2 } number page ryouko need turn |1 - 2| + |2 - 3| + |3 - 3| + |3 - 3| + |3 - 2| = 3 . second sample optimal solution achieve merge page 9 4,"['implementation', 'math']",1800.0
432/B,consider a football tournament n team participate team two football kit : home game away game kit home game i - th team color xi kit away game team color yi ( xi ≠ yi ) tournament team play exactly one home game exactly one away game team ( n ( n - 1 ) game total ) team play home game traditionally play home kit team play away game play away kit however two team kit color distinguish case away team play home kit calculate many game describe tournament team play home kit many game play away kit first line contain a single integer n ( 2 ≤ n ≤ 105 ) — number team next n line contain description team i - th line contain two space - separated number xi yi ( 1 ≤ xi yi ≤ 105 ; xi ≠ yi ) — color number home away kit i - th team team print a single line two space - separated integers — number game team go play home away kit correspondingly print answer team order appear input,"['brute force', 'greedy', 'implementation']",1200.0
432/A,"saratov state university olympiad programmers train center ( ssu optc ) n students student know number time he / she participate acm icpc world program championship accord acm icpc rule person participate world championship 5 time head ssu optc recently gather team participate world championship team must consist exactly three people , person a member two team maximum number team head make want team participate world championship members least k time ? first line contain two integers n k ( 1 ≤ n ≤ 2000 ; 1 ≤ k ≤ 5 ) next line contain n integers : y1 y2 ... yn ( 0 ≤ yi ≤ 5 ) yi show number time i - th person participate acm icpc world championship print a single number — answer problem first sample one team could make : first fourth fifth participants second sample team could create third sample two team could create partition two team fit","['greedy', 'implementation']",800.0
427/E,"imagine city infinite 2d plane cartesian coordinate system crime - <unknown> road city x - axis currently n criminals along road police station build road yet mayor want build one go charge new police station mayor ask choose a suitable position ( integer point ) build choose best position police station could minimize total time criminal catch mission mission catch criminals operate station new station one patrol car go criminals car carry car bring back police station put prison patrol car carry m criminals a time note criminals n't know mission , stay instead run away task find position police station total distance need cover catch criminals minimum possible note also build police station position one criminals already exist a case criminals arrest instantly first line input two integers n ( 1 ≤ n ≤ 106 ) m ( 1 ≤ m ≤ 106 ) separate space next line contain n integers separate space ith integer position ith criminal x - axis absolute value position exceed 109 . a criminal position x he / she locate point ( x 0 ) plane position criminals give non - decreasing order note one criminal stand point plane note : since size input / output could large n't use slow input / output techniques language example use input / output stream ( cin cout ) c++ print a single integer mean minimum possible distance need cover catch criminals","['greedy', 'implementation', 'math']",2000.0
426/B,let 's assume give a matrix b size x × y let 's determine operation mirror matrix b. mirror matrix b a 2x × y matrix c follow properties : sereja n × m matrix a. want find matrix b transform matrix a 'll perform several ( possibly zero ) mirror minimum number row matrix contain ? first line contain two integers n m ( 1 ≤ n m ≤ 100 ) next n line contain m integers — elements matrix a. i - th line contain integers ai1 ai2 ... aim ( 0 ≤ aij ≤ 1 ) — i - th row matrix a. single line print answer problem — minimum number row matrix b. first test sample answer a 2 × 3 matrix b : perform a mirror operation matrix get matrix a give input :,['implementation'],1300.0
424/A,pasha many hamsters make work today n hamsters ( n even ) come work hamsters line hamster either sit stand another exercise pasha need exactly hamsters stand hamsters sit one minute pasha make hamster <unknown> sit stand many minutes need get want act optimally well ? first line contain integer n ( 2 ≤ n ≤ 200 ; n even ) next line contain n character without space character describe hamsters ' position : i - th character equal ' x ' i - th hamster row stand ' x ' sit first line print a single integer — minimum require number minutes second line print a string describe hamsters ' position pasha make require change multiple optimal position print,['implementation'],900.0
416/C,innovation technologies a victorious march around planet integrate spheres human activity ! a restaurant call ` ` <unknown> 's place '' start think optimize book system n book request receive request characterize two number : ci pi — size group visitors come via request total sum money spend restaurant correspondingly know request ci people want sit table go spend whole even restaurant open moment 18:00 close moment unfortunately k table restaurant table know ri — maximum number people sit a table people group sit find a large enough table whole group visitors leave naturally pay nothing task : give table request decide request accept request decline money pay happy full visitors maximum first line input contain integer n ( 1 ≤ n ≤ 1000 ) — number request visitors n line follow line contain two integers : ci pi ( 1 ≤ ci pi ≤ 1000 ) — size group visitors come i - th request total sum money pay visit restaurant correspondingly next line contain integer k ( 1 ≤ k ≤ 1000 ) — number table restaurant last line contain k space - separated integers : r1 r2 ... rk ( 1 ≤ ri ≤ 1000 ) — maximum number people sit table first line print two integers : m s — number accept request total money get request correspondingly print m line — line must contain two space - separated integers : number accept request number table seat people come via request request table consecutively number start 1 order give input multiple optimal answer print,"['dp', 'greedy', 'implementation']",1600.0
412/C,developers often face regular expression pattern a pattern usually define a string consist character <unknown> set rule search pattern often use check whether a particular string meet certain rule task a pattern a string consist small english letter question mark ( ' ? ' ) question mark pattern a <unknown> denote arbitrary small letter english alphabet assume a string match pattern transform string pattern replace question mark appropriate character example string aba match pattern : ? ? ? ? ? a a ? a aba programmers work r1 company love puzzle ( ) riddle one follow : give n pattern length need find a pattern contain question mark possible intersect give pattern two pattern intersect a string match first second pattern solve riddle ? first line contain a single integer n ( 1 ≤ n ≤ 105 ) — number pattern next n line contain pattern guarantee pattern consist small english letter symbols ' ? ' pattern non - empty length total length pattern exceed 105 character a single line print answer problem — pattern minimal number sign ' ? ' intersect give ones several answer print consider first example pattern xab intersect give pattern pattern ? ? ? also intersect give pattern contain question sign hence optimal answer clearly xab optimal answer n't contain question sign a lot optimal answer example : aab bab cab <unknown>,"['implementation', 'strings']",1200.0
407/C,' ve get array consist n integers : a [ 1 ] a [ 2 ] ... a [ n ] moreover m query query describe three integers li ri ki query li ri ki mean add element a [ j ] li ≤ j ≤ ri record mean binomial coefficient number combinations y elements group x elements need fulfil consecutively query print final array first line contain integers n m ( 1 ≤ n m ≤ 105 ) second line contain n integers a [ 1 ] a [ 2 ] ... a [ n ] ( 0 ≤ ai ≤ 109 ) — initial array next m line contain query format li ri ki — elements segment li ... ri add number ( 1 ≤ li ≤ ri ≤ n ; 0 ≤ k ≤ 100 ) print n integers : i - th number value element a [ i ] query value rather large print modulo 1000000007 ( 109 + 7 ),"['brute force', 'implementation', 'math']",2500.0
405/C,little chris a huge fan linear algebra time give a homework unusual square a square matrix dot product two integer number vectors x y size n sum products correspond components vectors unusual square n × n square matrix a define sum n dot products i - th dot product i - th row vector i - th column vector matrix a. fortunately chris work <unknown> ( 2 ) ! mean operations ( addition multiplication ) calculate modulo 2 . fact matrix a binary : element a either 0 1 . example consider follow matrix a : unusual square a equal ( 1·1 + 1·0 + 1·1 ) + ( 0·1 + 1·1 + 1·0 ) + ( 1·1 + 0·1 + <unknown> ) = 0 + 1 + 1 = 0 . however much homework chris process q query ; query one follow : flip a bite value w mean change 1 - w i.e. 1 change 0 0 change 1 . give initial matrix a output answer query third type ! solve chris 's homework ? first line input contain integer n ( 1 ≤ n ≤ 1000 ) number row number columns matrix a. next n line describe matrix : i - th line contain n space - separated bits describe i - th row a. j - th number i - th line aij ( 0 ≤ aij ≤ 1 ) element intersection i - th row j - th column a. next line input contain integer q ( 1 ≤ q ≤ 106 ) number query next q line describe a single query one follow : note : since size input output could large n't use slow output techniques language example use input output stream ( cin cout ) c++ let number 3rd type query input m. output a single string s length m i - th symbol s value unusual square a i - th query 3rd type appear input,"['implementation', 'math']",1600.0
401/C,'s time olympiads vanya egor decide make team take part a program olympiad ' ve best friends ever since primary school hopefully somehow help <unknown> team olympiad vanya take play card number take card contain number 1 0 . boys superstitious think well olympiad begin lay card a row : today vanya bring n card zero m card number one number card much friends know put card describe way help find require arrangement card else tell guy impossible arrange card a way first line contain two integers : n ( 1 ≤ n ≤ 106 ) — number card contain number 0 ; m ( 1 ≤ m ≤ 106 ) — number card contain number 1 . a single line print require sequence zero ones without space sequence impossible obtain print -1,"['constructive algorithms', 'greedy', 'implementation']",1400.0
401/A,vanya love play even a special set card play card a single integer number card positive negative even equal zero limit number card n't exceed x absolute value natasha n't like vanya spend a long time play hide card vanya become sad start look card find n vanya love balance want sum number find card equal zero hand get tire look card help boy say minimum number card need find make sum equal zero ? assume initially vanya infinitely many card integer number - x x. first line contain two integers : n ( 1 ≤ n ≤ 1000 ) — number find card x ( 1 ≤ x ≤ 1000 ) — maximum absolute value number a card second line contain n space - separated integers — number find card guarantee number exceed x absolute value print a single number — answer problem first sample vanya need find a single card number -2 . second sample vanya need find two card number 2 . ca n't find a single card require number number lose card exceed 3 absolute value,"['implementation', 'math']",800.0
386/D,play follow game n point a plane vertices a regular n - polygon point label integer number 1 n. pair distinct point connect a diagonal color one 26 color point denote lowercase english letter three stone position three distinct vertices stone one move move stone another free vertex along diagonal color diagonal must color diagonal connect another two stone goal move stone way vertices occupy stone 1 2 3 . must achieve position use minimal number move write a program play game optimal way first line one integer n ( 3 ≤ n ≤ 70 ) — number point second line three space - separated integer 1 n — number vertices stone initially locate follow n line contain n symbols — matrix denote color diagonals color denote lowercase english letter symbol j line i denote color diagonal point i j. matrix symmetric j - th symbol i - th line equal i - th symbol j - th line main diagonal fill ' * ' symbols diagonal connect point way put stone vertices 1 2 3 print -1 a single line otherwise first line print minimal require number move next line print description move one move per line describe a move print two integers point remove stone point move stone several optimal solutions print first example move stone point 4 point 1 point connect diagonal color ' a ' diagonal connection point 2 3 stone locate connect diagonal color stone point 1 2 3,"['dp', 'implementation']",2100.0
375/B,give a matrix consist digits zero one size n × m. allow rearrange row maximum area submatrix consist ones obtain give problem describe operations ? let 's assume row matrix a number 1 n top bottom columns number 1 m leave right a matrix cell intersection i - th row j - th column represent ( i j ) formally a submatrix matrix a a group four integers d u l r ( 1 ≤ d ≤ u ≤ n ; 1 ≤ l ≤ r ≤ m ) assume submatrix contain cells ( i j ) ( d ≤ i ≤ u ; l ≤ j ≤ r ) area submatrix number cells contain first line contain two integers n m ( 1 ≤ n m ≤ 5000 ) next n line contain m character — matrix a. matrix a contain character : ` ` 0 '' ` ` 1 '' note elements matrix follow without space line print a single integer — area maximum obtain submatrix obtain a matrix number one print 0,"['data structures', 'dp', 'implementation']",1600.0
374/A,dima inna great ! moment inna sit magic lawn play a pink pony dima want play bring n × m chessboard a tasty candy two number a b. dima put chessboard front inna place candy position ( i j ) board boy say would give candy reach one corner cells board 's get one condition action follow type : naturally dima n't allow move candy beyond chessboard border inna pony start shift candy around board wonder minimum number allow action need perform move candy initial position ( i j ) one chessboard corner help cope task ! first line input contain six integers n m i j a b ( 1 ≤ n m ≤ 106 ; 1 ≤ i ≤ n ; 1 ≤ j ≤ m ; 1 ≤ a b ≤ 106 ) assume chessboard row number 1 n top bottom columns number 1 m leave right position ( i j ) statement a chessboard cell intersection i - th row j - th column consider corner : ( 1 m ) ( n 1 ) ( n m ) ( 1 1 ) a single line print a single integer — minimum number move need get candy inna pony get candy play dima 's rule print a single line ` ` poor inna pony ! '' without quote note sample 1 : inna pony move candy position ( 1 + 2 3 + 2 ) = ( 3 5 ) move position ( 3 - 2 5 + 2 ) = ( 1 7 ) ( 3 + 2 5 + 2 ) = ( 5 7 ) position correspond corner square chess board thus answer test sample equal two,"['greedy', 'implementation']",2000.0
373/B,'ll define s ( n ) positive integer n follow : number n 's digits decimal base example s ( <unknown> ) = 3 s ( <unknown> ) = 6 . want make a consecutive integer sequence start number m ( m m + 1 ... ) need pay s ( n ) · k add number n sequence spend a cost w want make sequence long possible write a program tell sequence 's maximum length first line contain three integers w ( 1 ≤ w ≤ 1016 ) m ( 1 ≤ m ≤ 1016 ) k ( 1 ≤ k ≤ 109 ) please write % lld specifier read write 64 - bit integers c++ prefer use cin cout stream % i64d specifier first line contain a single integer — answer problem,"['implementation', 'math']",1600.0
371/D,"a system n vessels arrange one show figure assume vessels number 1 n order highest lowest volume i - th vessel ai liters initially vessels empty vessels water pour water overflow i - th vessel go ( i + 1 ) -th one liquid overflow n - th vessel spill floor task simulate pour water vessels , need handle two type query : reply second request assume water pour point already <unknown> vessels first line contain integer n — number vessels ( 1 ≤ n ≤ 2·105 ) second line contain n integers a1 a2 ... — vessels ' capacities ( 1 ≤ ai ≤ 109 ) vessels ' capacities necessarily increase top vessels bottom ones ( see second sample ) third line contain integer m — number query ( 1 ≤ m ≤ 2·105 ) next m line contain description one query query first type represent ` ` 1 pi xi '' query second type represent ` ` 2 ki '' ( 1 ≤ pi ≤ n 1 ≤ xi ≤ 109 1 ≤ ki ≤ n ) query print a single line number liters water correspond vessel","['data structures', 'implementation']",1800.0
369/B,valera love participate competitions especially program contest today participate contest team consist n students ( include valera ) contest individual competition student team solve problems individually contest valera interest result find : however valera find exactly many point n students score valera ask recover distribution score students team condition meet first line input contain exactly six integers n k l r sall sk ( 1 ≤ n k l r ≤ 1000 ; l ≤ r ; k ≤ n ; 1 ≤ sk ≤ sall ≤ 106 ) 's guarantee input answer exist print exactly n integers a1 a2 ... — number point student score multiple solutions print print distribution point order,"['constructive algorithms', 'implementation', 'math']",1400.0
366/E,dima love inna much decide write a song dima a magic guitar n string m fret dima make guitar produce sound like : play a note need hold one string one fret pull string dima pull i - th string hold j - th fret guitar produce a note let 's denote aij know dima 's guitar produce k distinct note possible note produce multiple ways word possible aij = <unknown> ( i j ) ≠ ( p q ) dima already write a song — a sequence s note order play song need consecutively produce note song guitar produce note available way dima understand many ways play a song want play make song look complicate possible ( try act like <unknown> ) 'll represent a way play a song a sequence pair ( xi yi ) ( 1 ≤ i ≤ s ) xi - th string yi - th fret produce i - th note song complexity move pair ( x1 y1 ) ( x2 y2 ) equal + complexity a way play a song maximum complexities move adjacent pair help dima determine maximum complexity way play song ! guy 's get ta look cool ! first line input contain four integers n m k s ( 1 ≤ n m ≤ 2000 1 ≤ k ≤ 9 2 ≤ s ≤ 105 ) follow n line contain m integers aij ( 1 ≤ aij ≤ k ) number i - th row j - th column ( aij ) mean a note guitar produce i - th string j - th fret last line input contain s integers qi ( 1 ≤ qi ≤ k ) — sequence note song a single line print a single number — maximum possible complexity song,"['brute force', 'implementation', 'math']",2200.0
365/B,"array a1 a2 ... , segment [ l r ] ( 1 ≤ l ≤ r ≤ n ) good ai = ai - 1 + ai - 2 i ( l + 2 ≤ i ≤ r ) let 's define len ( [ l r ] ) = r - l + 1 len ( [ l r ] ) length segment [ l r ] segment [ l1 r1 ] longer segment [ l2 r2 ] len ( [ l1 r1 ] ) > len ( [ l2 r2 ] ) task find a good segment maximum length array a. note a segment length 1 2 always good first line contain a single integer n ( 1 ≤ n ≤ 105 ) — number elements array second line contain integers : a1 a2 ... ( 0 ≤ ai ≤ 109 ) print length longest good segment array a",['implementation'],1100.0
365/A,let 's call a number k - good contain digits exceed k ( 0 ... k ) ' ve get a number k array a contain n number find many k - good number a ( count number every time occur array a ) first line contain integers n k ( 1 ≤ n ≤ 100 0 ≤ k ≤ 9 ) i - th follow n line contain integer ai without lead zero ( 1 ≤ ai ≤ 109 ) print a single integer — number k - good number a,['implementation'],1100.0
362/B,little boy petya love stairs much bore simple go — love jump several stairs a time stand stair either jump next one jump one two stairs a time stairs dirty petya n't want step petya first stair staircase consist n stairs also know number dirty stairs staircase help petya find jump entire staircase reach last stair number n without touch a dirty stair one note anyway petya step first last stairs first last stair dirty petya choose a path clean step first line contain two integers n m ( 1 ≤ n ≤ 109 0 ≤ m ≤ 3000 ) — number stairs staircase number dirty stairs correspondingly second line contain m different space - separated integers d1 d2 ... dm ( 1 ≤ di ≤ n ) — number dirty stairs ( arbitrary order ) print ` ` yes '' petya reach stair number n step clean stairs otherwise print ` ` '',['implementation'],1100.0
359/A,simon a rectangular table consist n row m columns simon number row table top bottom start one columns — leave right start one 'll represent cell x - th row y - th column a pair number ( x y ) table corner cells : ( 1 1 ) ( n 1 ) ( 1 m ) ( n m ) simon think cells table good besides 's know good cell corner table initially cells table colorless simon want color cells table one move choose good cell table ( x1 y1 ) arbitrary corner table ( x2 y2 ) color cells table ( p q ) meet inequations : min ( x1 x2 ) ≤ p ≤ max ( x1 x2 ) min ( y1 y2 ) ≤ q ≤ max ( y1 y2 ) help simon ! find minimum number operations need color cells table note color one cell multiple time first line contain exactly two integers n m ( 3 ≤ n m ≤ 50 ) next n line contain description table cells specifically i - th line contain m space - separated integers ai1 ai2 ... aim aij equal zero cell ( i j ) n't good otherwise aij equal one guarantee least one cell good guarantee good cell a corner print a single number — minimum number operations simon need carry idea first sample sequence operations like : second sample sequence operations like :,"['constructive algorithms', 'greedy', 'implementation']",1000.0
357/B,"berland national holiday come — flag day honor event president country decide make a big dance party ask agency organize several condition : agency n dancers number less 3 m , dancers probably dance one dance dancers must dance party however dance two dancers a previous dance current dance stop spectacular agency allow happen dance one dancer dance previous dance consider criteria make plan m dance : dance three dancers participate task determine clothe color n dancers president 's third condition fulfil : dance must a dancer white a dancer red a dancer blue dancers change clothe dance first line contain two space - separated integers n ( 3 ≤ n ≤ 105 ) m ( 1 ≤ m ≤ 105 ) — number dancers number dance correspondingly m line follow describe dance order dance i - th line contain three distinct integers — number dancers take part i - th dance dancers number 1 n. dancer take part least one dance print n space - separated integers : i - th number must represent color i - th dancer 's clothe ( 1 white 2 red 3 blue ) multiple valid solutions print guarantee least one solution exist","['constructive algorithms', 'implementation']",1400.0
356/B,"xenia amateur programmer today lesson learn ham distance ham distance two string s = s1s2 ... sn t = t1t2 ... tn equal length n value record [ si ≠ ti ] <unknown> notation represent follow : si ≠ ti one otherwise — zero xenia want calculate ham distance two long string a b. first string a concatenation n copy string x , second string b concatenation m copy string y. help xenia calculate require ham distance give n x m y. first line contain two integers n m ( 1 ≤ n m ≤ 1012 ) second line contain a non - empty string x. third line contain a non - empty string y. string consist 106 lowercase english letter guarantee string a b obtain input length print a single integer — require ham distance please use % lld specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d specifier first test case string a string b equal 100 letter a. string equal ham distance zero second test case string a b differ 3 - rd 5 - th 6 - th 7 - th character thus ham distance equal 4 . third test case string a <unknown> string b <unknown> string differ character apart second one ham distance equal 5","['implementation', 'math']",1900.0
355/B,vasya often use public transport transport city two type : trolleys bus city n bus m trolleys bus number integers 1 n trolleys number integers 1 m. public transport free 4 type ticket : vasya know sure number rid go make transport go use ask help find minimum sum burl spend ticket first line contain four integers c1 c2 c3 c4 ( 1 ≤ c1 c2 c3 c4 ≤ 1000 ) — cost ticket second line contain two integers n m ( 1 ≤ n m ≤ 1000 ) — number bus trolleys vasya go use third line contain n integers ai ( 0 ≤ ai ≤ 1000 ) — number time vasya go use bus number i. fourth line contain m integers bi ( 0 ≤ bi ≤ 1000 ) — number time vasya go use trolley number i. print a single number — minimum sum burl vasya spend ticket first sample profitable strategy buy two ticket first type ( first bus ) one ticket second type ( second bus ) one ticket third type ( trolleys ) total ( 2·1 ) + 3 + 7 = 12 burl second sample profitable strategy buy one ticket fourth type third sample profitable strategy buy two ticket third type : bus trolleys,"['greedy', 'implementation']",1100.0
352/A,"jeff 's get n card card contain either digit 0 digit 5 . jeff choose several card put a line get number largest possible number divisible 90 jeff make card 's get ? jeff must make number without lead zero , assume number 0 n't contain lead zero jeff n't use card first line contain integer n ( 1 ≤ n ≤ 103 ) next line contain n integers a1 a2 ... ( ai = 0 ai = 5 ) number ai represent digit write i - th card a single line print answer problem — maximum number divisible 90 . ca n't make divisible 90 number card print -1 . first test make one number a multiple 90 — 0 . second test make number <unknown> a multiple 90","['brute force', 'implementation', 'math']",1000.0
342/A,xenia mathematician a sequence consist n ( n divisible 3 ) positive integers 7 . want split sequence group three group three a b c follow condition hold : naturally xenia want element sequence belong exactly one group three thus require partition exist group three help xenia find require partition else say n't exist first line contain integer n ( 3 ≤ n ≤ 99999 ) — number elements sequence next line contain n positive integers 7 . guarantee n divisible 3 . require partition exist print group three print group value elements contain print value increase order separate group integers group whitespaces multiple solutions print solution print -1,"['greedy', 'implementation']",1200.0
339/A,xenia beginner mathematician a third year student elementary school learn addition operation teacher write sum multiple number pupils calculate sum make calculation easier sum contain number 1 2 3 . still n't enough xenia begin count calculate a sum summands follow non - decreasing order example ca n't calculate sum 1 + 3 + 2 + 1 calculate sum 1 + 1 + 2 3 + 3 ' ve get sum write board rearrange <unknown> print sum a way xenia calculate sum first line contain a non - empty string s — sum xenia need count string s contain space contain digits character ` ` + '' besides string s a correct sum number 1 2 3 . string s 100 character long print new sum xenia count,"['greedy', 'implementation', 'strings']",800.0
333/D,"gerald find a table consist n row m columns a prominent expert rectangular table immediately count table 's properties , minimum number corner table ( minimum four number ) however like final value — seem small make value larger decide crop table a little : delete columns leave right well row top bottom find maximum property table crop note table least two row least two columns leave end number crop row columns four side zero first line contain two space - separated integers n m ( 2 ≤ n m ≤ 1000 ) follow n line describe table i - th line list space - separated integers ai 1 ai 2 ... ai m ( 0 ≤ ai j ≤ 109 ) — m number stand i - th row table print answer problem first test case gerald crop table — table contain two row two columns second test case 'll crop table table contain zero corner cell also initially contain two zero corner cells answer 0","['brute force', 'implementation']",2100.0
332/B,reform continue enter berland example yesterday sit berland parliament approve much n laws ( law assign a unique number 1 n ) today laws put table president berland g. w. boosch sign time mr . boosch plan sign 2k laws decide choose exactly two non - intersecting segment integers 1 n length k sign laws whose number fall segment formally mr . boosch go choose two integers a b ( 1 ≤ a ≤ b ≤ n - k + 1 b - a ≥ k ) sign laws number lie segment [ a ; a + k - 1 ] [ b ; b + k - 1 ] ( border include ) mr . boosch choose laws sign course consider public opinion <unknown> public opinion study centre ( <unknown> ) conduct opinion poll among citizens process result a report give president report contain absurdity value law public opinion mr . boosch a real <unknown> keen sign laws maximum total absurdity help first line contain two integers n k ( 2 ≤ n ≤ 2·105 0 < 2k ≤ n ) — number laws accept parliament length one segment law list correspondingly next line contain n integers x1 x2 ... xn — absurdity law ( 1 ≤ xi ≤ 109 ) print two integers a b — begin segment mr . boosch choose mean president sign laws number segment [ a ; a + k - 1 ] [ b ; b + k - 1 ] multiple solutions print one minimum number a. still multiple solutions print one minimum b. first sample mr . boosch sign laws number segment [ 1 ; 2 ] [ 4 ; 5 ] total absurdity sign laws equal 3 + 6 + 1 + 6 = 16 . second sample mr . boosch sign laws number segment [ 1 ; 2 ] [ 3 ; 4 ] total absurdity sign laws equal 1 + 1 + 1 + 1 = 4,"['data structures', 'dp', 'implementation']",1500.0
330/A,give a rectangular cake represent r × c grid cell either evil strawberry empty example a 3 × 4 cake may look follow : cakeminator go eat cake ! time eat choose a row a column contain evil <unknown> contain least one cake cell eat eat cake cells may decide eat number time please output maximum number cake cells cakeminator eat first line contain two integers r c ( 2 ≤ r c ≤ 10 ) denote number row number columns cake next r line contain c character — j - th character i - th line denote content cell row i column j either one : output maximum number cake cells cakeminator eat first example one possible way eat maximum number cake cells follow ( perform 3 eat ),"['brute force', 'implementation']",800.0
327/A,"iahub get bore invent a game play paper write n integers a1 a2 ... , integers either 0 1 . 's allow exactly one move : choose two indices i j ( 1 ≤ i ≤ j ≤ n ) flip value ak position range [ i j ] ( i ≤ k ≤ j ) flip value x mean apply operation x = 1 - x. goal game exactly one move obtain maximum number ones write a program solve little game iahub first line input contain integer n ( 1 ≤ n ≤ 100 ) second line input n integers : a1 a2 ... , guarantee n value either 0 1 . print integer — maximal number 1s obtain exactly one move first case flip segment 2 5 ( i = 2 j = 5 ) flip change sequence become : [ 1 1 1 0 1 ] , contain four ones way make whole sequence equal [ 1 1 1 1 1 ] second case flip second third element ( i = 2 j = 3 ) turn number 1","['brute force', 'dp', 'implementation']",1200.0
321/A,"fox ciel a robot a 2d plane initially locate ( 0 0 ) fox ciel code a command command represent string s. character s one move operation four move operations : robot operations s leave right repeat infinite time help fox ciel determine step robot locate ( a b ) first line contain two integers a b ( - 109 ≤ a b ≤ 109 ) second line contain a string s ( 1 ≤ |s| ≤ 100 s contain character ' u ' 'd ' ' l ' ' r ' ) — command print ` ` yes '' robot locate ( a b ) ` ` '' otherwise first second test case command string ` ` ru '' robot go right go right , locations move ( 0 0 ) → ( 1 0 ) → ( 1 1 ) → ( 2 1 ) → ( 2 2 ) → ... reach ( 2 2 ) ( 1 2 )","['implementation', 'math']",1700.0
312/A,one day liouzhou_101 get a chat record freda rainbow curiosity want know sentence say freda say rainbow accord experience think freda always say ` ` lala . '' end sentence rainbow always say ` ` miao . '' begin sentence sentence chat record help liouzhou_101 find whose sentence first line input contain integer n ( 1 ≤ n ≤ 10 ) number sentence chat record next n line contain a sentence a sentence a string contain latin letter ( a - z a - z ) underline ( _ ) comma ( ) point ( . ) space ( ) length ’ t exceed 100 . sentence output ` ` freda 's '' sentence say freda ` ` rainbow 's '' sentence say rainbow ` ` <unknown> > . < i n't know ! '' liouzhou_101 ’ t recognize whose sentence ’ t recognize a sentence begin ` ` miao . '' end ` ` lala ` ` satisfy neither condition,"['implementation', 'strings']",1100.0
300/A,vitaly array n distinct integers vitaly want divide array three non - empty set follow condition hold : help vitaly divide give array first line input contain integer n ( 3 ≤ n ≤ 100 ) second line contain n space - separated distinct integers a1 a2 ... ( |ai| ≤ 103 ) — array elements first line print integer n1 ( n1 > 0 ) — number elements first set print n1 number — elements get first set next line print integer n2 ( n2 > 0 ) — number elements second set print n2 number — elements get second set next line print integer n3 ( n3 > 0 ) — number elements third set print n3 number — elements get third set print set must meet describe condition guarantee solution exist several solutions allow print,"['brute force', 'constructive algorithms', 'implementation']",1100.0
290/B,input contain two integers a1 a2 ( 0 ≤ ai ≤ 32 ) separate a single space output a single integer,['implementation'],1500.0
289/B,little penguin polo n × m matrix consist integers let 's index matrix row 1 n top bottom let 's index columns 1 m leave right let 's represent matrix element intersection row i column j aij one move penguin add subtract number d matrix element find minimum number move need make matrix elements equal describe plan impossible carry say first line contain three integers n m d ( 1 ≤ n m ≤ 100 1 ≤ d ≤ 104 ) — matrix size d parameter next n line contain matrix : j - th integer i - th row matrix element aij ( 1 ≤ aij ≤ 104 ) a single line print a single integer — minimum number move penguin need make matrix elements equal impossible print ` ` -1 '' ( without quote ),"['brute force', 'dp', 'implementation']",1400.0
286/B,john doe find beautiful permutation formula let 's take permutation p = p1 p2 ... pn let 's define transformation f permutation : k ( k > 1 ) integer transformation parameter r maximum integer rk ≤ n. rk = n elements prk + 1 prk + 2 omit word describe transformation permutation p cyclically shift leave consecutive block length k last block length equal remainder divide n k. john doe think permutation f ( f ( ... f ( p = [ 1 2 ... n ] 2 ) ... n - 1 ) n ) beautiful unfortunately quickly find beautiful permutation 's interest 's ask help task find a beautiful permutation give n. clarifications see note third sample a single line contain integer n ( 2 ≤ n ≤ 106 ) print n distinct space - separated integers 1 n — a beautiful permutation size n. a note third test sample :,['implementation'],2200.0
285/C,"permutation p order set integers p1 p2 ... pn consist n distinct positive integers n't exceed n. 'll denote i - th element permutation p pi 'll call number n size length permutation p1 p2 ... pn a sequence integers a1 a2 ... , one move allow decrease increase number one count minimum number move need build a permutation sequence first line contain integer n ( 1 ≤ n ≤ 3·105 ) — size seek permutation second line contain n integers a1 a2 ... ( - 109 ≤ ai ≤ 109 ) print a single number — minimum number move please use % lld specifier read write 64 - bit integers c++ prefer use cin cout stream % i64d specifier first sample decrease first number one increase second number one result permutation ( 2 1 ) second sample need 6 move build permutation ( 1 3 2 )","['greedy', 'implementation']",1200.0
280/B,bike love look second maximum element sequence second maximum element sequence distinct number x1 x2 ... xk ( k > 1 ) maximum element xj follow inequality hold : lucky number sequence distinct positive integers x1 x2 ... xk ( k > 1 ) number equal bitwise exclude maximum element sequence second maximum element sequence ' ve get a sequence distinct positive integers s1 s2 ... sn ( n > 1 ) let 's denote sequence sl sl + 1 ... sr s [ l .. r ] ( 1 ≤ l < r ≤ n ) task find maximum number among lucky number sequence s [ l .. r ] note number sequence s distinct give definitions make <unknown> first line contain integer n ( 1 < n ≤ 105 ) second line contain n distinct integers s1 s2 ... sn ( 1 ≤ si ≤ 109 ) print a single integer — maximum lucky number among lucky number sequence s [ l .. r ] first sample choose s [ 4 .. 5 ] = { 4 3 } lucky number ( 4 xor 3 ) = 7 . also choose s [ 1 .. 2 ] second sample must choose s [ 2 .. 5 ] = { 8 3 5 7 },"['data structures', 'implementation']",1800.0
279/A,valera horse live a plane cartesian coordinate system define plane also infinite spiral paint plane spiral consist segment : [ ( 0 0 ) ( 1 0 ) ] [ ( 1 0 ) ( 1 1 ) ] [ ( 1 1 ) ( - 1 1 ) ] [ ( - 1 1 ) ( - 1 - 1 ) ] [ ( - 1 - 1 ) ( 2 - 1 ) ] [ ( 2 - 1 ) ( 2 2 ) ] thus infinite spiral pass integer point plane valera horse live plane coordinate ( 0 0 ) want walk along spiral point ( x y ) valera horse four legs find turn difficult count many time turn go along a spiral point ( 0 0 ) point ( x y ) first line contain two space - separated integers x y ( |x| |y| ≤ 100 ) print a single integer show many time valera turn,"['brute force', 'geometry', 'implementation']",1400.0
276/D,a little girl love problems bitwise operations much 's one give two integers l r. let 's consider value pair integers a b ( l ≤ a ≤ b ≤ r ) task find maximum value among consider ones expression mean apply bitwise exclude operation integers x y. give operation exist modern program languages example languages c++ java represent ` ` ^ '' pascal — ` ` xor '' single line contain space - separated integers l r ( 1 ≤ l ≤ r ≤ 1018 ) please use % lld specifier read write 64 - bit integers c++ prefer use cin cout stream % i64d specifier a single line print a single integer — maximum value pair integers a b ( l ≤ a ≤ b ≤ r ),"['dp', 'greedy', 'implementation', 'math']",1700.0
275/A,lenny play a game a 3 × 3 grid light begin game light switch press light toggle side - adjacent light goal game switch light consider toggle follow : light switch switch switch switch lenny spend time play grid press light a certain number time give number time light press print current state light input consist three row row contain three integers 0 100 inclusive j - th number i - th row number time j - th light i - th row grid press print three line contain three character j - th character i - th line ` ` 1 '' correspond light switch otherwise 's ` ` 0 '',['implementation'],900.0
257/B,"petya vasya decide play a little find n red cub m blue cub game go like : players take turn choose a cube color ( red blue ) put a line leave right ( overall line n + m cub ) petya move first petya 's task get many pair neighbour cub color possible vasya 's task get many pair neighbour cub different color possible number petya 's point game number pair neighbor cub color line number vasya 's point game number neighbour cub different color line task calculate score end game ( petya 's vasya 's point correspondingly ) boys play optimally well ` ` play optimally well '' first mean maximize number one 's point second — minimize number opponent 's point line contain two space - separated integers n m ( 1 ≤ n m ≤ 105 ) — number red blue cub correspondingly a single line print two space - separated integers — number petya 's vasya 's point correspondingly provide players play optimally well first test sample optimal strategy petya put blue cube line red cub leave end game line cub leave right look [ blue red red red ] , petya get 2 point vasya get 1 point petya would choose red cube first move , provide boys play optimally well petya would get 1 point vasya would get 2 point","['greedy', 'implementation']",1300.0
254/E,student vasya come study berland state university country live a dormitory a semester n days days parent send food morning i - th day receive ai kilograms food eat day next one ( food go bad become unfit consumption ) every day vasya eat v kilograms food know vasya 's parent allow starve always enough food vasya vasya m friends sometimes live let 's index friends 1 m. friend number j live vasya day lj day rj inclusive also j - th friend require fj kilograms food per day usually vasya 's friends eat canteen sometimes generous vasya feed every day vasya fee friends live day ( may fee nobody ) every time vasya feed friend give much food friend need day vasya 's popularity rat university increase one vasya fee friend multiple time one day addition know eat habit must regular always eat v kilograms food per day vasya want choose fee day semester make rat high possible originally vasya 's rat 0 a freshman first line contain two integers n v ( 1 ≤ n v ≤ 400 ) second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 400 ) separate single space value ai mean morning i - th day ai kilograms food come food good eat day i and/or day i + 1 ( food go bad ) guarantee vasya n't fee anyone a way eat consume v kilograms food every day third line contain integer m ( 1 ≤ m ≤ 400 ) follow m line describe one vasya 's friend : j - th line contain three integers lj rj fj ( 1 ≤ lj ≤ rj ≤ n 1 ≤ fj ≤ 400 ) separate single space first line print highest rat vasya reach next n line print friends vasya need fee day i - th line first print number friends fee i - th day list index friends print friends list order multiple optimal solutions print,"['dp', 'implementation']",2100.0
251/E,"little petya like tree a lot recently mother present a tree 2n nod petya immediately decide place tree a rectangular table consist 2 row n columns fulfill follow condition : petya wonder many ways place tree table call two placements distinct a tree node correspond distinct table cells two placements since large number scare petya print answer modulo 1000000007 ( 109 + 7 ) first line contain a single integer n ( 1 ≤ n ≤ 105 ) next ( 2n - 1 ) line contain two integers ai bi ( 1 ≤ ai bi ≤ 2n ; ai ≠ bi ) determine number vertices connect correspond edge consider tree vertexes number integers 1 2n guarantee graph give input a tree , a connect acyclic undirected graph print a single integer — require number ways place tree table modulo 1000000007 ( 109 + 7 ) note first sample ( 12 variants place tree table give ) :","['dfs and similar', 'dp', 'implementation']",3000.0
239/B,a program language every program a non - empty sequence ` ` < ` ` ` ` > '' sign digits let 's explain interpreter program language work a program interpret use movement instruction pointer ( ip ) consist two part initially cp point leftmost character sequence dp point right repeat follow step first moment cp point somewhere outside sequence moment cp go outside sequence execution terminate 's obvious every program language terminate step a sequence s1 s2 ... sn ` ` < ` ` ` ` > '' digits answer q query query give l r ask many digit print run sequence sl sl + 1 ... sr independent program language first line input contain two integers n q ( 1 ≤ n q ≤ 100 ) — represent length sequence s number query second line contain s a sequence ` ` < ` ` ` ` > '' digits ( 0 .. 9 ) write leave right note character s separate space next q line contain two integers li ri ( 1 ≤ li ≤ ri ≤ n ) — i - th query query print 10 space separate integers : x0 x1 ... x9 xi equal number time interpreter print i run correspond program print answer query order give input,"['brute force', 'implementation']",1500.0
233/A,a permutation a sequence integers p1 p2 ... pn consist n distinct positive integers n't exceed n. let 's denote i - th element permutation p pi 'll call number n size permutation p1 p2 ... pn nickolas adore permutations like permutations others call permutations perfect a perfect permutation permutation p i ( 1 ≤ i ≤ n ) ( n permutation size ) follow equations hold ppi = i pi ≠ i. nickolas ask print perfect permutation size n give n. a single line contain a single integer n ( 1 ≤ n ≤ 100 ) — permutation size a perfect permutation size n n't exist print a single integer -1 . otherwise print n distinct integers 1 n p1 p2 ... pn — permutation p perfect separate print number whitespaces,"['implementation', 'math']",800.0
228/B,' ve get two rectangular table size na × nb × mb cells table consist zero ones consider row columns table index start 1 . define element first table locate intersection i - th row j - th column ai j ; define element second table locate intersection i - th row j - th column bi j. call pair integers ( x y ) a shift second table relative first one 'll call overlap factor shift ( x y ) value : variables i j take value expression ai <unknown> + x j + y make sense formally inequalities 1 ≤ i ≤ na 1 ≤ j ≤ 1 ≤ i + x ≤ nb 1 ≤ j + y ≤ mb must hold value variables i j satisfy give inequalities value sum consider equal 0 . task find shift maximum overlap factor among possible shift first line contain two space - separated integers na ( 1 ≤ na ≤ 50 ) — number row columns first table na line contain character — elements first table character either a ` ` 0 '' a ` ` 1 '' next line contain two space - separated integers nb mb ( 1 ≤ nb mb ≤ 50 ) — number row columns second table follow elements second table format similar first table guarantee first table least one number ` ` 1 '' guarantee second table least one number ` ` 1 '' print two space - separated integers x y ( |x| |y| ≤ 109 ) — a shift maximum overlap factor multiple solutions print,"['brute force', 'implementation']",1400.0
222/B,free meteor association ( <unknown> ) get a problem : meteors move universal <unknown> <unknown> <unknown> program ( ucdhp ) need add a special module would analyze movement ucdhp store secret information meteors n × m table integers cells order meteors universe change 's main ucdhp module receive follow query : main ucdhp module critical write functional work table commission first line contain three space - separated integers n m k ( 1 ≤ n m ≤ 1000 1 ≤ k ≤ 500000 ) — number table columns row number query correspondingly next n line contain m space - separated number — initial state table number p table integer satisfy inequality 0 ≤ p ≤ 106 . next k line contain query format ` ` si xi yi '' si one character ` ` с '' ` ` r '' ` ` g '' xi yi two integers table row consider index top bottom 1 n table columns — leave right 1 m. query obtain a number ( si = ` ` g '' ) print require number print answer query order query input let 's see table change second test case first operation fulfil table look like <unknown> 1 41 3 <unknown> second operation fulfil table look like that:1 3 52 1 <unknown> answer third query ( number locate first row third column ) 5,"['data structures', 'implementation']",1300.0
218/A,little bolek find a picture n mountain peak paint n paint peak represent a non - closed polyline consist 2n segment segment go 2n + 1 point coordinate ( 1 y1 ) ( 2 y2 ) ... ( 2n + 1 y2n + 1 ) i - th segment connect point ( i yi ) point ( i + 1 yi + 1 ) even i ( 2 ≤ i ≤ 2n ) follow condition hold : yi - 1 < yi yi > yi + 1 . shall call a vertex a polyline even x coordinate a mountain peak bolek fancy a little mischief choose exactly k mountain peak rub segment go peak increase peak 's height one ( increase y coordinate correspond point ) paint miss segment get a new picture mountain peak let us denote point new polyline pass bolek 's new picture ( 1 r1 ) ( 2 r2 ) ... ( 2n + 1 r2n + 1 ) give bolek 's final picture restore initial one first line contain two space - separated integers n k ( 1 ≤ k ≤ n ≤ 100 ) next line contain 2n + 1 space - separated integers r1 r2 ... r2n + 1 ( 0 ≤ ri ≤ 100 ) — y coordinate polyline vertices bolek 's picture guarantee obtain give picture perform describe action picture mountain peak print 2n + 1 integers y1 y2 ... y2n + 1 — y coordinate vertices polyline initial picture multiple answer output one,"['brute force', 'constructive algorithms', 'implementation']",1100.0
215/A,"vasya 's bicycle chain drive consist two part : n star attach pedal axle m star attach rear wheel axle chain help rotate rear wheel transmit pedal rotation know i - th star pedal axle ai ( 0 < a1 < a2 < ... < ) teeth j - th star rear wheel axle bj ( 0 < b1 < b2 < ... < bm ) teeth pair ( i j ) ( 1 ≤ i ≤ n ; 1 ≤ j ≤ m ) call a gear set index star chain currently attach gear ( i j ) a gear ratio equal value since vasya like integers want find gear ( i j ) ratios integers hand vasya like fast drive among ` ` integer '' gear ( i j ) want choose a gear maximum ratio help find number gear problem fraction denote division real number , round perform first input line contain integer n ( 1 ≤ n ≤ 50 ) — number star bicycle 's pedal axle second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 104 ) order strict increase third input line contain integer m ( 1 ≤ m ≤ 50 ) — number star rear wheel axle fourth line contain m integers b1 b2 ... bm ( 1 ≤ bi ≤ 104 ) order strict increase guarantee exist least one gear ( i j ) gear ratio integer number line separate space print number ` ` integer '' gear maximum ratio among ` ` integer '' gear first sample maximum ` ` integer '' gear ratio equal 3 . two gear gear ratio one a1 = 4 b1 = 12 a2 = 5 b3 = 15","['brute force', 'implementation']",900.0
204/E,little elephant love string much array a n string consist lowercase english letter let 's number elements array 1 n let 's denote element number i ai string ai ( 1 ≤ i ≤ n ) little elephant want find number pair integers l r ( 1 ≤ l ≤ r ≤ |ai| ) substring ai [ l ... r ] a substring least k string array a ( include i - th string ) help little elephant solve problem familiar basic notation string problems find correspond definitions note first line contain two space - separated integers — n k ( 1 ≤ n k ≤ 105 ) next n line contain array a. i - th line contain a non - empty string ai consist lowercase english letter total length string ai exceed 105 . a single line print n space - separated integers — i - th number answer string ai please use % lld specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d specifier let 's assume give string a = a1a2 ... a|a| let 's denote string 's length |a| string 's i - th character ai a substring a [ l ... r ] ( 1 ≤ l ≤ r ≤ |a| ) string a string alal + 1 ... ar string a a substring string b exist pair integers l r ( 1 ≤ l ≤ r ≤ |b| ) b [ l ... r ] = a,"['data structures', 'implementation']",2800.0
203/D,valera play football a stadium suddenly begin rain valera hide corridor <unknown> get wet however desire play great decide train hit ball right corridor valera go back far enough put ball hit ball bounce wall ceiling floor corridor finally hit exit door ball wet leave a spot door valera want know coordinate spot let 's describe event formally ball consider a point space door corridor consider a rectangle locate plane <unknown> lower leave corner door locate point ( 0 0 0 ) upper right corner locate point ( a 0 b ) corridor consider a rectangular parallelepiped infinite direction increase coordinate y. corridor floor consider plane xoy ceiling plane parallel xoy pass point ( a 0 b ) also assume one wall plane yoz wall plane parallel yoz pass point ( a 0 b ) 'll say ball hit door coordinate y equal 0 . thus coordinate spot point ( x0 0 z0 ) 0 ≤ x0 ≤ a 0 ≤ z0 ≤ b. hit ball valera step away door distance m put ball center corridor point hit ball fly speed ( vx vy vz ) mean ball coordinate ( x y z ) one second coordinate ( x + vx y + vy z + vz ) see image note clarification ball collide ceiling floor a wall corridor bounce accordance laws reflection ( angle incidence equal angle reflection ) problem consider ideal physical model assume air resistance <unknown> force loss energy first line contain three space - separated integers a b m ( 1 ≤ a b m ≤ 100 ) first two integers specify point ( a 0 b ) ceiling one corridor wall pass third integer distance valera go away door second line three space - separated integers vx vy vz ( <unknown> <unknown> <unknown> ≤ 100 vy < 0 vz ≥ 0 ) — speed ball hit guarantee ball hit door print two real number x0 z0 — x z coordinate point ( x0 0 z0 ) ball hit exit door answer consider correct absolute relative error exceed 10 - 6,"['geometry', 'implementation', 'math']",1700.0
203/A,"a boy valera register site codeforces valera write first codeforces round # 300 . boast a friend arkady win much x point first contest arkady believe friend 's word decide check whether valera could show a result know contest number 300 unusual two problems contest last t minutes minutes number start zero first problem initial cost a point every minute cost reduce da point second problem initial cost b point every minute cost reduce db point thus soon zero minute contest first problem cost a - da point second problem cost b - db point guarantee moment contest problem a non - negative cost arkady ask find whether valera could get exactly x point contest assume valera could solve number offer problems also assume problem valera make one attempt besides could submit problems minute contest start minute 0 end minute number t - 1 . please note valera ca n't submit a solution exactly t minutes start contest later single line input contain six integers x t a b da db ( 0 ≤ x ≤ 600 ; 1 ≤ t a b da db ≤ 300 ) — valera 's result contest 's duration initial cost first problem initial cost second problem number point first second problem lose per minute correspondingly guarantee minute contest problem a non - negative cost , a - <unknown> ≥ 0 b - <unknown> ≥ 0 0 ≤ i ≤ t - 1 . valera could earn exactly x point a contest print ` ` yes '' otherwise print ` ` '' ( without quote ) first sample valera could act like : could submit first problem minute 0 second problem — minute 2 . first problem bring 20 point second problem bring 10 point total give require 30 point","['brute force', 'implementation']",1200.0
200/D,recently valery come across entirely new program language language attract template function procedures let us remind templates tool a language design encode generic algorithms without reference parameters ( e.g. data type buffer size default value ) valery decide examine template procedures language detail description a template procedure consist procedure name list parameter type generic type t parameters use parameters template procedures a procedure call consist a procedure name a list variable parameters let 's call a procedure suitable call follow condition fulfil : give a description set template procedures also give a list variables use program well direct procedure call use describe variables call need count number procedures suitable call first line contain a single integer n ( 1 ≤ n ≤ 1000 ) — number template procedures next n line contain description procedures specify follow format : '' void procedurename ( <unknown> <unknown> ... <unknown> ) '' ( 1 ≤ t ≤ 5 ) void keyword procedurename procedure name type_i type next parameter type language parameters ` ` int '' ` ` string '' ` ` double '' keyword ` ` t '' denote generic type next line contain a single integer m ( 1 ≤ m ≤ 1000 ) — number use variables next m line specify description variables follow format : '' type variablename '' type type variable take value ` ` int '' ` ` string '' ` ` double '' variablename — name variable next line contain a single integer k ( 1 ≤ k ≤ 1000 ) — number procedure call next k line specify procedure call follow format : '' procedurename ( <unknown> <unknown> ... <unknown> ) '' ( 1 ≤ t ≤ 5 ) procedurename name procedure <unknown> name a variable line describe variables template procedures call may contain space begin line end line bracket commas space may keyword void length input line exceed 100 character name variables procedures non - empty string lowercase english letter number lengths 10 character note condition name specify variables use procedure call name variables distinct two procedures two procedures identical name identical order set type parameters k line print a single number i - th number stand number suitable template procedures i - th call,"['brute force', 'implementation']",1800.0
195/B,"a team finish train session euro football championship valeric commission gather ball sort baskets overall stadium n ball m baskets baskets position a row leave right number number 1 m correspondingly ball number number 1 n. valeric decide sort ball order increase number follow scheme put new ball basket least number ball 's get several variants choose basket stand closer middle mean choose basket minimum i number basket case valeric still multiple variants choose basket minimum number every ball print number basket go accord valeric 's scheme note ball sort baskets order increase number , first ball go first go second ball first line contain two space - separated integers n m ( 1 ≤ n m ≤ 105 ) — number ball baskets correspondingly print n number one per line i - th line must contain number basket i - th ball","['data structures', 'implementation', 'math']",1300.0
194/A,one day codeforces round author sit exams n exams need get integer 2 5 exam re - sit fail exam i.e exam get mark 2 . author would need spend much time effort make sum mark strictly k. could spoil codeforces round hand sum mark strictly less k author 's mum wo n't please codeforces author smart always get mark choose also codeforces author hate re - <unknown> exams help author find minimum number exams re - sit pass exams way make sum mark n exams equal exactly k. single input line contain space - separated integers n k ( 1 ≤ n ≤ 50 1 ≤ k ≤ 250 ) — number exams require sum mark guarantee exist a way pass n exams way make sum mark equal exactly k. print single number — minimum number exams author get a 2 consider sum mark exams must equal k. first sample author get a 2 exams second sample get a 3 two exams a 2 two third sample get a 3 one exam,"['implementation', 'math']",900.0
188/H,problem 'll use a stack support two type operations : give a string describe sequence operations perform stack i - th character correspond i - th operation : initially stack empty output topmost number stack execute give operations line input contain a string operations consist character « + » « * » digits ( 0 .. 9 ) length string 1 20 character inclusive give sequence operations guarantee correct i.e stack least two elements every math operation number stack never exceed 106 . output a single number — topmost element stack perform give operations first case stack end contain a single number — result calculate ( 1 + 2 ) * 3 + 6 * 6 . second case math operations answer last number push stack,['implementation'],1800.0
188/D,give a number n. print n line i - th line consist i character ` ` * '' line ' indices 1 - based line input contain integer n ( 1 ≤ n ≤ 50 ) output describe pattern,['implementation'],1100.0
177/A2,smart beaver abbyy get hook square matrices busy study n × n size matrix n odd smart beaver consider follow matrix elements good : help smart beaver count sum good elements give matrix first line input data contain a single odd integer n. next n line contain n integers aij ( 0 ≤ aij ≤ 100 ) separate single space — elements give matrix input limitations get 30 point : input limitations get 100 point : print a single integer — sum good matrix elements first sample matrix elements good good elements second sample show figure,['implementation'],800.0
175/F,"vasya play a popular game gnomes might magic game vasya manage kingdom gnomes consist several castle connect bidirectional roads kingdom road network a special form kingdom m main castle a1 a2 ... , form good path path consist roads castle ai ai + 1 ( 1 ≤ i < m ) well road a1 roads castle good path addition pair neighbor good path castle u v exactly one evil shortcut — a path go along roads lead first castle ( u ) second one ( v ) common vertexes good path except vertexes u v. know roads castle kingdom , every road every castle lie either good path evil shortcut ( castle lie ) addition two evil shortcuts common castle different castle good path begin week kingdom appear one bad gnome stand one roads kingdom begin rob corovans go road one road may accumulate multiple bad gnomes vasya care corovans sometimes send mission death one castle another let 's suggest mission death get castle s castle t. move castle s castle t destroy bad gnomes roads mission 's path vasya tough mission death destroy number gnomes way however vasya kind always choose path castle s t follow destroy smallest number gnomes multiple paths vasya choose path contain smallest number roads among multiple paths still vasya choose lexicographically minimal one among help vasya simulate life kingdom gnomes might magic game a path a sequence castle pair neighbor castle path connect a road also path x1 x2 ... xp lexicographically less path y1 y2 ... yq either p < q x1 = y1 x2 = y2 ... xp = yp exist number r ( r < p r < q ) x1 = y1 x2 = y2 ... xr = yr xr + 1 < yr + 1 . first line contain two integers n m ( 3 ≤ m ≤ n ≤ 100000 ) — number castle kingdom number castle good path respectively second line contain m integers number good path castle ( castle number 1 n ) order occurrence path start castle good path castle different follow m line describe evil shortcut first a line contain integer ki ( 3 ≤ ki ≤ 100000 ) — number castle correspond evil shortcut ( two castle good path ) follow a ki integers — number castle order occurrence give shortcut castle one evil shortcut different guarantee first last castle shortcut good path first castle evil shortcuts form good path present order path represent second line next line contain integer q ( 1 ≤ q ≤ 100000 ) — number events life kingdom follow q line describe a single event event describe symbol cj two number castle sj tj ( character number castle separate a single space ) character cj equal ` ` + '' ( a plus ) mean a bad gnome ( probably first one ) appear road castle sj tj cj equal ` ` ? '' ( a question ) vasya send a mission death castle sj castle tj guarantee request ` ` + '' road castle sj tj exist events give chronological order start earliest one initially bad gnomes roads number line separate single space guarantee give evil shortcuts good path fit limitations give problem statement query ` ` ? '' print a single number a single line — number bad gnomes destroy correspond mission death print answer query chronological order example first four request one path castle 1 castle 2 contain roads bad gnomes : 1 6 3 5 2 . a gnome stand road ( 2 5 ) next mission death move along path 1 2 destroy gnome road ( 1 2 ) next mission death follow path already free gnomes yet another gnome stand road ( 1 2 ) next mission death go path 1 2 kill gnome","['data structures', 'implementation']",3000.0
173/D,<unknown> kingdom exactly n = 3k cities locate shore river <unknown> flow whole kingdom cities locate one side river rest side cities connect bridge build bridge connect two cities locate opposite side river two cities exist one bridge recently <unknown> king tristan third busy distribute deputies among cities total k deputies king want commission control exactly three cities however deputy entrust manage cities connect a bridge — deputy set a high fee travel bridge benefit pocket bad reputation king help king tristan third distribute deputies cities possible first line contain two integers n m — number cities bridge ( 3 ≤ n < 105 n = 3k 0 ≤ m ≤ 105 ) next m line describe bridge i - th line contain two integers ai bi — number cities connect i - th bridge ( 1 ≤ ai bi ≤ n ai ≠ bi 1 ≤ i ≤ m ) guarantee bridge connect a city two cities connect one bridge distribute deputies require manner impossible print a single line ` ` '' ( without quote ) otherwise first line print ` ` yes '' ( without quote ) second line print deputy put charge city i - th number represent number deputy ( 1 k ) charge city number i - th input — overall n number multiple solutions print,"['constructive algorithms', 'greedy', 'implementation']",2500.0
172/A,polycarpus n friends tarasov city polycarpus know phone number friends : string s1 s2 ... sn string consist digits length polycarpus need figure tarasov city phone code assume phone code city longest common prefix phone number friends word longest string c a prefix ( begin ) si i ( 1 ≤ i ≤ n ) help polycarpus determine length city phone code first line input contain integer n ( 2 ≤ n ≤ 3·104 ) — number polycarpus 's friends follow n line contain string s1 s2 ... sn — phone number polycarpus 's friends guarantee string consist digits length 1 20 inclusive also guarantee string different print number digits city phone code a prefix string t a string obtain delete zero digits end string t. example string ` ` 00209 '' 6 prefix : ` ` '' ( empty prefix ) ` ` 0 '' ` ` 00 '' ` ` 002 '' ` ` 0020 '' ` ` 00209 '' first sample city phone code string ` ` 00 '' second sample city phone code empty string third sample city phone code string ` ` <unknown> '',"['brute force', 'implementation']",800.0
168/B,"let 's dive one interest areas magic — write spell learn excite challenge science troublesome learn magic word get know basic rule write spell spell consist several line line whose first non - space character character ` ` # '' amplify line responsible spell power remain line common determine effect spell come across text spell spell long understand mean want make short possible without change mean way shorten a spell know removal space line break know come texts spell space carry mean amplify line remove space line newlines also matter unless two separate line amplify thus two consecutive line amplify need join one ( i.e concatenate second line first one ) remove space amplify line concatenate amplify line anything forbid note empty line must process like others : must join adjacent non - <unknown> line preserve output surround amplify line side ( i.e line one amplify line one amplify ) instructions remove unnecessary character follow ( oh yes a newline a character ) input contain text spell reduce remove extra character print result output input contain multiple line character line cod 32 127 ( inclusive ) please note line may begin end one space size input exceed <unknown> ( = 220 ) bytes newlines include size windows operate system use test computer a newline a sequence character cod # 13 # 10 guarantee line input a newline particular input end a newline note newline end line begin next one guarantee input contain least one character a newline recommend organize input - output line line case newlines process correctly language mean print text spell extra character delete please note output line follow a newline please careful : answer validate compare jury 's answer byte - by - byte , space newlines matter first sample amplify line line 1 7 . line 2 6 concatenate space delete second sample amplify line line 1 3 . line concatenate","['implementation', 'strings']",1700.0
168/A,"country populate wizards want organize a demonstration n people live city x wizards surely go demonstration city people ( n - x people ) support wizards n't go go demonstration know city administration react demonstration involve least y percent city people consider matter wizards decide create clone puppets substitute city people demonstration , demonstration involve wizards puppets city administration tell difference a <unknown> a person , calculate percentage administration consider city consist n people contain clone puppets help wizards find minimum number clone create demonstration less y percent city people first line contain three space - separated integers n x y ( 1 ≤ n x y ≤ 104 x ≤ n ) — number citizens city number wizards percentage administration need correspondingly please note y exceed 100 percent , administration want see a demonstration people actually live city ( > n ) print a single integer — answer problem minimum number clone create demonstration involve less y percent n ( real total city population ) first sample necessary least 14 % 10 people come demonstration number people integer least two people come one wizard live city go come n't enough need create one clone second sample 10 people come demonstration city 10 wizards come demonstration nobody create clone","['implementation', 'math']",900.0
158/C,"vasya write operate system shell command work directories begin decide go two command : cd ( change current directory ) pwd ( display current directory ) directories vasya 's operate system form a traditional hierarchical tree structure a single root directory denote slash character ` ` / '' every directory a name — a non - empty string consist lowercase latin letter directory ( except root ) a parent directory — one contain give directory denote ` ` .. '' command cd take a single parameter a path file system command change current directory directory specify path path consist name directories separate slash name directory ` ` .. '' mean a step parent directory « .. » use place path maybe several time path begin a slash consider absolute path , directory change specify one start root parameter begin a directory name ( ` ` .. '' ) consider a relative path , directory change specify directory start current one command pwd display absolute path current directory path must contain ` ` .. '' initially current directory root directories mention explicitly pass indirectly within command cd consider exist guarantee attempt transition parent directory root directory first line input data contain single integer n ( 1 ≤ n ≤ 50 ) — number command follow n line contain one command line contain either command pwd command cd follow a space - separated non - empty parameter command parameter cd contain lower case latin letter slash dot two slash go consecutively dot occur name a parent pseudo - directory command parameter cd end a slash except symbol point root directory command parameter a length 1 200 character inclusive directories file system name command pwd print full absolute path give directory end a slash start a slash contain list slash - separated directories order nest root current folder contain dot","['data structures', 'implementation']",1400.0
158/A,` ` contestant earn a score equal greater k - th place <unknown> 's score advance next round long contestant earn a positive score ... '' — <unknown> contest rule a total n participants take part contest ( n ≥ k ) already know score calculate many participants advance next round first line input contain two integers n k ( 1 ≤ k ≤ n ≤ 50 ) separate a single space second line contain n space - separated integers a1 a2 ... ( 0 ≤ ai ≤ 100 ) ai score earn participant get i - th place give sequence non - increasing ( i 1 n - 1 follow condition fulfil : ai ≥ ai + 1 ) output number participants advance next round first example participant 5th place earn 7 point participant 6th place also earn 7 point 6 <unknown> second example nobody get a positive score,['implementation'],800.0
151/A,winter cold nvodsk ! a group n friends decide buy k bottle a <unknown> drink call ` ` take - it - light '' warm a bite bottle l milliliters drink also buy c lime cut d slice find p grams salt make a toast friend need nl milliliters drink a slice lime np grams salt friends want make many toast provide drink amount many toast friend make ? first line contain positive integers n k l c d p nl np exceed 1000 less 1 . number separate exactly one space print a single integer — number toast friend make a comment first sample : overall friends 4 * 5 = 20 milliliters drink enough make 20 / 3 = 6 toast lime enough 10 * 8 = 80 toast salt enough 100 / 1 = 100 toast however 3 friends group answer min ( 6 80 100 ) / 3 = 2,"['implementation', 'math']",800.0
149/A,"joy ! petya 's parent go a business trip whole year playful kid leave petya get absolutely happy jump bed throw pillow day long ... today petya open cupboard find a <unknown> note parent leave <unknown> : water favourite flower year day morning afternoon even ` ` wait a second ! '' — think petya know a fact fulfill parent ' task i - th ( 1 ≤ i ≤ 12 ) month year flower grow ai centimeters n't water flower i - th month flower wo n't grow month petya also know try might parent wo n't believe water flower grow strictly less k centimeters help petya choose minimum number months water flower give flower grow less k centimeters first line contain exactly one integer k ( 0 ≤ k ≤ 100 ) next line contain twelve space - separated integers : i - th ( 1 ≤ i ≤ 12 ) number line represent ai ( 0 ≤ ai ≤ 100 ) print integer — minimum number months petya water flower flower grow less k centimeters flower ca n't grow k centimeters a year print -1 . let 's consider first sample test enough water flower seventh ninth month flower grow exactly five centimeters second sample petya 's parent believe even flower n't grow ( k = 0 ) , possible petya water flower","['greedy', 'implementation']",900.0
148/A,« one dragon two dragon three dragon » — princess count trouble fall asleep get bore count <unknown> nine however count dragons bore well entertain best could tonight imagine dragons steal fight every k - th dragon get punch face a fry pan every l - th dragon get tail shut balcony door every m - th dragon get paw <unknown> <unknown> <unknown> finally threaten every n - th dragon call mom withdraw panic many imaginary dragons suffer moral physical damage tonight princess count a total d dragons ? input data contain integer number k l m n d number a separate line ( 1 ≤ k l m n ≤ 10 1 ≤ d ≤ 105 ) output number damage dragons first case every first dragon get punch a fry pan dragons suffer reason well pan alone would enough second case dragons 1 7 11 13 17 19 23 escape <unknown>,"['constructive algorithms', 'implementation', 'math']",800.0
146/B,petya love lucky number much everybody know lucky number positive integers whose decimal record contain lucky digits 4 7 . example number 47 744 4 lucky 5 17 467 petya call a mask a positive integer n number obtain successive write lucky digits number n leave right example mask number <unknown> number <unknown> mask 7 7 mask <unknown> 47 . obviously mask number always a lucky number petya two number — arbitrary integer a a lucky number b. help find minimum number c ( c > a ) mask number c equal b. line contain two integers a b ( 1 ≤ a b ≤ 105 ) guarantee number b lucky line print a single number — number c seek petya,"['brute force', 'implementation']",1300.0
146/A,petya love lucky number much everybody know lucky number positive integers whose decimal record contain lucky digits 4 7 . example number 47 744 4 lucky 5 17 467 petya love ticket much know ticket a number a positive integer length equal n ( n always even ) petya call a ticket lucky ticket 's number a lucky number sum digits first half ( sum first n / 2 digits ) equal sum digits second half ( sum last n / 2 digits ) check give ticket lucky first line contain even integer n ( 2 ≤ n ≤ 50 ) — length ticket number need check second line contain integer whose length equal exactly n — ticket number number may contain lead zero first line print ` ` yes '' give ticket number lucky otherwise print ` ` '' ( without quote ) first sample sum digits first half equal sum digits second half ( 4 ≠ 7 ) second sample ticket number lucky number,['implementation'],800.0
144/C,a string t call anagram string s possible rearrange letter t identical string s. example string ` ` aab '' anagram string ` ` aba '' string ` ` aaa '' string t call a substring string s read start position string s. example string ` ` aba '' six substrings : ` ` a '' ` ` b '' ` ` a '' ` ` ab '' ` ` ba '' ` ` aba '' give a string s consist lowercase latin letter character ` ` ? ` ` also give a string p consist lowercase latin letter let 's assume a string good obtain anagram string p replace ` ` ? '' character latin letter ` ` ? '' replace exactly one character latin alphabet example string p = « aba » string ` ` a ? ? '' good string « ? bc » task find number good substrings string s ( identical substrings must count answer several time ) first line non - empty string s consist 105 lowercase latin letter character ` ` ? ` ` second line non - empty string p consist 105 lowercase latin letter please note length string p exceed length string s. print single number represent number good substrings string s. two substrings consider different position occurrence different thus string occur several time count number time consider first sample test string s two good substrings : ` ` b ? ? '' ( replace question mark get ` ` baa '' ) ` ` ? ? ? '' ( replace question mark get ` ` baa '' ) let 's consider second sample test string s two good substrings : ` ` ab ? '' ( ` ` ? '' replace ` ` c '' ) ` ` b ? c '' ( ` ` ? '' replace ` ` a '' ),"['implementation', 'strings']",1500.0
142/B,upon a time kingdom far far away live sir lancelot chief royal general proud men like invite king come watch drill exercise demonstrate fight techniques tactics squad charge time go one day sir lancelot a major argument fairy godmother ( rumor argument occur general speak badly godmother 's fly techniques seem hurt fairy godmother deeply ) result argument godmother put a rather strange curse upon general sound complicate quite harmless : ` ` square distance two soldier equal 5 soldier conflict ! ` ` drill exercise hold a rectangular n × m field split nm square 1 × 1 segment soldier thus square distance soldier stand square ( x1 y1 ) ( x2 y2 ) equal exactly ( x1 - x2 ) 2 + ( y1 - y2 ) 2 . nm squad soldier participate drill exercise fairy godmother 's curse unless course general want soldier fight even worse ... example put a soldier square ( 2 2 ) put soldier square ( 1 4 ) ( 3 4 ) ( 4 1 ) ( 4 3 ) — conflict soldier square ( 2 2 ) task help general give size drill exercise field ask calculate maximum number soldier simultaneously position field two soldier fall fairy godmother 's curse single line contain space - separated integers n m ( 1 ≤ n m ≤ 1000 ) represent size drill exercise field print desire maximum number warriors first sample test sir lancelot place 4 soldier 2 × 4 court follow ( soldier ' locations mark gray circle scheme ) : second sample test place 6 soldier 3 × 4 site follow manner :,"['constructive algorithms', 'greedy', 'implementation']",1800.0
140/B,"meticulous gerald set table alexander finish another post codeforces begin respond new year greet friends alexander n friends send alexander exactly one e - card let us number friends number 1 n order send card let 's introduce number card , accord number i - th friend send alexander a card number i. alexander also send card friends n't look new card net simply use card previously send ( sometimes however need add crucial detail ) initially alexander n't card alexander always follow two rule : alexander plan send friend exactly one card course alexander send card multiple time alexander friend list preferences a permutation integers 1 n. first number list number favorite card second number show second favorite , last number show least favorite card task find a schedule send card alexander determine moments time alexander must send card friends please much possible word a result apply two alexander 's rule friend receive card prefer much possible note alexander n't choose freely card send always strictly follow two rule first line contain integer n ( 2 ≤ n ≤ 300 ) — number alexander 's friends equal number card next n line contain friends ' preference list list consist n different integers 1 n. last line contain alexander 's preference list format print n space - separated number : i - th number number friend whose card alexander receive right send a card i - th friend several solutions print sample algorithm action alexander friends perform follow : note alexander send card multiple friends a time ( case second third one ) alexander send card 3 fourth friend receive third card receive fourth card ( variants correct )","['brute force', 'greedy', 'implementation']",1800.0
137/A,polycarpus postcards photos hang a row wall decide put away closet hang wall a famous painter 's picture polycarpus like : go leave right remove object consecutively polycarpus n't want mix - ups happen carry hand object two different type word polycarpus ca n't carry postcards photos simultaneously sometimes go closet put object thus leave hand free polycarpus must put postcards photos closet skip object minimum number time visit closet carry 5 items ? line input data contain a non - empty string consist letter ` ` с '' ` ` p '' whose length exceed 100 character i - th character string letter ` ` с '' mean i - th object ( number go leave right ) polycarpus ' wall a postcard i - th character letter ` ` p '' i - th object wall a photo print number — minimum number time polycarpus visit closet first sample polycarpus need take one item closet 7 time second sample polycarpus first take 3 postcards closet ; 3 take 6 photos leave similar way go closet twice third sample polycarpus visit closet twice time carry 3 postcards take 2 photos one postcard finally carry last 10 photos visit closet twice fourth sample polycarpus visit closet twice take 10 postcards ( 5 items go ),['implementation'],900.0
136/B,little petya much like computers recently receive a new ` ` ternatron iv '' a gift mother unlike modern computers ` ` ternatron iv '' operate ternary binary logic petya immediately wonder xor operation perform computer ( whether anything like ) turn operation exist ( however call tor ) work like suppose need calculate value expression a tor b. number a b write ternary notation one one ( b a ) a different number digits lead zero add shorter number lengths number sum together digit digit result sum two digits calculate modulo 3 . note carry digits ( i. e. operation digits n't transfer ) example : <unknown> tor <unknown> = <unknown> tor <unknown> = <unknown> = <unknown> . petya write number a c a piece paper help find number b a tor b = c. several number print smallest one first line contain two integers a c ( 0 ≤ a c ≤ 109 ) number write decimal notation print single integer b a tor b = c. several possible number b print smallest one print number decimal notation,"['implementation', 'math']",1100.0
134/A,"give a sequence positive integers a1 a2 ... , find indices i i - th element equal arithmetic mean elements ( elements except one ) first line contain integer n ( 2 ≤ n ≤ 2·105 ) second line contain elements sequence a1 a2 ... ( 1 ≤ ai ≤ 1000 ) elements positive integers print first line number seek indices print second line seek indices increase order indices integers 1 n. seek elements exist first output line contain number 0 . case may either print second line print empty line","['brute force', 'implementation']",1200.0
119/B,vasya take first university exam several minutes 's ordinary exam 's mathematical analysis course right vasya think one thing : result talk <unknown> ... prepare exam one study proof n theorems know k examination card exam card contain distinct theorems besides theorem mention one card ( theorems wo n't mention card ) exam several students may get card know exact way theorems distribute card however students take exam vasya tell theorems card contain vasya evaluate level proficiency i - th theorem number ai level proficiency card average level proficiency theorems include card vasya want know minimally maximally possible level proficiency card get exam vasya want determine data collect students unfortunately vasya time leave math ask help first line contain two integers n k ( 1 ≤ k ≤ n ≤ 100 ) — number theorems number card correspondingly second line contain n integers ai ( 0 ≤ ai ≤ 100 ) i - th number ( 1 ≤ i ≤ n ) correspond vasya 's proficiency i - th theorem third line contain number q ( 0 ≤ q ≤ 100 ) — number people take exam vasya follow q line contain description a student 's card : integers 1 n inclusive number theorems include card order enumerate input data number give arbitrary order guarantee give card valid ( theorems one card different different people get card either n't contain theorems coincide theorems ' permutation ) print two real number represent vasya 's minimum maximum proficiency card get exam absolute relative error exceed 10 - 6 . let 's analyze first sample vasya 's proficiency card whose content already know equal 6 15.5 correspondingly three theorems leave enough make one exam card consider possible variants theorems include card see best case scenario vasya get card contain theorems 4 7 ( proficiency would equal 15.5 ) worst case scenario get theorems 3 5 ( proficiency would equal 5 ) ⌊ x⌋ operation denote take integer part real number x ( round ),"['constructive algorithms', 'implementation']",1900.0
117/E,give undirected connect graph g consist n vertexes n edge g contain self - loops multiple edge let edge two state : initially edge switch also give m query represent ( v u ) — change state edge shortest path vertex v vertex u graph g. several paths lexicographically minimal one choose formally let us consider shortest paths vertex v vertex u sequence vertexes v v1 v2 ... u. among sequence choose lexicographically minimal one query tell many connect components graph whose vertexes coincide vertexes graph g edge coincide switch edge graph g. first line contain two integers n m ( 3 ≤ n ≤ 105 1 ≤ m ≤ 105 ) n line describe graph edge a b ( 1 ≤ a b ≤ n ) next m line contain query v u ( 1 ≤ v u ≤ n ) guarantee graph connect self - loops multiple edge print m line contain one integer — query result let 's consider first sample 'll highlight switch edge blue image graph apply operations graph edge switch 's initially 5 connect components graph query v = 5 u = 4 . see graph three components consider switch edge graph query v = 1 u = 5 . see graph three components consider switch edge lexicographical comparison two sequence equal length k number do follow sequence x lexicographically less sequence y exist i ( 1 ≤ i ≤ k ) xi < yi j ( 1 ≤ j < i ) xj = yj,"['data structures', 'implementation']",2900.0
113/E,"one day vasya lie bed watch electronic clock fall asleep quicker vasya live a strange country days h hours every hour m minutes clock show time decimal number system format h : m string h always a fix length equal number digits decimal representation number h - 1 . achieve lead zero add necessary string m a similar format length always equal number digits decimal representation number m - 1 . example h = 17 m = 1000 time equal 13 hours 75 minutes display ` ` <unknown> '' vasya watch clock h1 hours m1 minutes h2 hours m2 minutes inclusive fell asleep ask count many time saw moment least k digits change clock simultaneously example switch <unknown> → <unknown> two digits change switch 23:59 → 00:00 four digits change consider vasya watch clock strictly less one day note last time vasya saw clock fall asleep ` ` h2 : m2 '' , vasya n't see moment time ` ` h2 : m2 '' switch next value first line input file contain three space - separated integers h m k ( 2 ≤ h m ≤ 109 1 ≤ k ≤ 20 ) second line contain space - separated integers h1 m1 ( 0 ≤ h1 < h 0 ≤ m1 < m ) third line contain space - separated integers h2 m2 ( 0 ≤ h2 < h 0 ≤ m2 < m ) print a single number — number time vasya saw moment change least k digits simultaneously please use % lld specificator read write 64 - bit integers c++ prefer use cin stream ( also may use % i64d specificator ) first example vasya see follow moments time : 4:4 0:0 → <unknown> → <unknown> → <unknown> → <unknown> 1:0 → 1:1 → 1:2 → <unknown> → <unknown> 2:0 → 2:1 → 2:2 → <unknown> → 2:4 . double arrow ( ) mark seek moments time ( example — vasya see two number change simultaneously ) second example k = 1 . switch time accept since switch clock least one digit change total switch equal <unknown> = 1440 vasya see one — switch 23:59 00:00 . third example vasya fell asleep immediately begin look clock see change","['implementation', 'math']",2700.0
113/A,petya get interest grammar third year school invent language call petya 's petya want create a maximally simple language would enough chat friends 's language 's grammar describe follow set rule : statement sequence petya 's language satisfy condition : petya 's friend vasya write instant messenger ( instant message program ) support petya 's language petya want add spell grammar check program vasya country petya n't feel like wait ask help problem task define a give sequence word whether true give text represent exactly one sentence petya 's language first line contain one word consist lowercase latin letter overall number character ( include letter space ) exceed 105 . guarantee two consecutive word separate exactly one space input data contain space possible give word belong petya 's language word give text belong petya 's language text contain one sentence print ` ` '' ( without quote ) otherwise print ` ` yes '' ( without quote ),"['implementation', 'strings']",1600.0
103/A,average miner vaganych take <unknown> course soon a miner complete course take exams hardest one a computer test call ` ` test <unknown> sadness '' test consist n question ; question answer strictly order give question 1 question n. question i contain ai answer variants exactly one correct a click regard select answer question goal select correct answer n question vaganych select a wrong answer question select answer become <unknown> test start begin question 1 vaganych remember everything order answer question order question remain unchanged well question answer vaganych smart memory superb yet <unknown> unlucky know nothing whatsoever test 's theme many click perform worst case ? first line contain a positive integer n ( 1 ≤ n ≤ 100 ) number question test second line contain space - separated n positive integers ai ( 1 ≤ ai ≤ 109 ) number answer variants question i. print a single number — minimal number click need pass test worst - case scenario please use % lld specificator read write 64 - bit integers с++ prefer use cin cout stream % i64d specificator note second sample worst - case scenario need five click :,"['greedy', 'implementation', 'math']",1100.0
100/G,famous singer aryo go publish a new album great work ! unfortunately days many albums aryo want choose a new name album a name use least use recently a list use album name together year albums publish also a list suitable name album find a suitable name use 'll use otherwise use name use long ago possible two name find ( n't use use year ) use name alphabetically latest help name album first line contain a single integer n ( 0 ≤ n ≤ 105 ) number use name follow n line contain a string ( album name ) integer ( year album publish ) album name make lowercase latin letter contain 14 letter year range [ 1900 2011 ] follow line contain a single integer m ( 1 ≤ m ≤ 104 ) number suitable album name follow m line contain a string — a suitable name contain 14 lowercase latin letter album name suitable name non - empty write a single string name new album,"['data structures', 'implementation']",1800.0
100/B,<unknown> think two integers friends one divide one example 12 4 friends also 6 6 friends 120 36 a group non - zero integers call friendly pair integers form a friend pair give a group non - zero integers see 're friendly first line contain n ( 1 ≤ n ≤ 1000 ) n — number integers group next line contain elements sort non - decreasing order number comma separate 7 digits decimal notation lead zero group friendly write ` ` friends '' else write ` ` friends '',['implementation'],1500.0
99/B,a far away kingdom young page help set table king terribly mischievous one need keep eye control whether set everything correctly time royal chef gerasim impression page play a prank : pour juice one cup another gerasim want check hypothesis good thing chef gerasim always pour number milliliters juice cup royal kitchen thoroughly measure juice cup gerasim ask write a program determine cup juice pour one ; otherwise program determine time page set table <unknown> simplify task shall consider cup bottomless juice never overfill a cup pour however much besides strange reason a far away kingdom one pour a cup one cup another integer number milliliters juice first line contain integer n — number cup royal table ( 1 ≤ n ≤ 1000 ) next n line contain volumes juice cup — non - negative integers exceed 104 . page n't pour juice print ` ` <unknown> page . '' ( without quote ) determine volume juice pour exactly one juice pour print ` ` v ml cup # a cup # b . '' ( without quote ) v represent volume pour juice a represent number cup juice pour ( cup number consecutive positive integers start one order cup describe input data ) b represent number cup juice pour finally give juice 's volumes obtain use one pour ( example page pour juice one cup another royal kitchen <unknown> pour juice cup incorrectly ) print ` ` <unknown> configuration . '' ( without quote ),['implementation'],1300.0
95/A,"petya love hockey much one day watch a hockey match fell asleep petya dream appoint change a hockey team 's name thus petya give original team name w collection forbid substrings s1 s2 ... sn string consist uppercase lowercase latin letter string w length |w| character number 1 |w| first petya find occurrences forbid substrings w string search substrings case letter n't take consideration , string ` ` abc '' ` ` abc '' consider equal petya perform replacement letter cover occurrences formally : a letter position i replace one position i string w exist pair indices l r ( 1 ≤ l ≤ i ≤ r ≤ |w| ) substring w [ l ... r ] contain collection s1 s2 ... sn use case insensitive comparison replacement letter 's case remain petya allow replace letter n't cover forbid substring letter letter ( uppercase lowercase ) consider lucky hockey players 's petya perform change letter occur result string many time possible help petya find result string several string find one come first lexicographically note process replacements repeat occur , petya 's replacements string start contain new occurrences bad substrings petya pay attention first line contain integer n ( 1 ≤ n ≤ 100 ) — number forbid substrings collection next n line contain substrings next line contain string w. n + 1 line non - empty string consist uppercase lowercase latin letter whose length exceed 100 . last line contain a lowercase letter letter output line — petya 's result string maximum number letter letter several answer output one come first lexicographically lexicographical comparison perform standard < operator modern program languages line a lexicographically smaller line b a a prefix b exist i ( 1 ≤ i ≤ |a| ) ai < bi j ( 1 ≤ j < i ) aj = bj |a| stand length string a","['implementation', 'strings']",1600.0
94/A,igor k. always use trust favorite <unknown> antivirus n't hesitate download link one groupmates send via qip infinium link say contain ` ` real funny stuff <unknown> <unknown> '' antivirus <unknown> igor k. run flash application download immediately qip infinium say : ` ` invalid login / password '' igor k. enter isq additional account look info main one name surname change ` ` <unknown> '' ` ` infect '' correspondingly ` ` additional information '' field contain a strange - looking binary code 80 character length consist zero ones ` ` i ' ve hack '' — think igor k. run internet <unknown> browser quickly type favourite search engine 's address soon learn really a virus change isq users ' passwords fortunately soon find binary code actually encrypt password group 10 character stand one decimal digit accordingly original password consist 8 decimal digits help igor k. restore isq account encrypt password encryption specification input data contain 11 line first line represent binary code 80 character length code write igor k. 's isq account 's info next 10 line contain pairwise distinct binary cod 10 character length correspond number 0 1 ... 9 . print one line contain 8 character — password igor k. 's isq account guarantee solution exist,"['implementation', 'strings']",900.0
93/C,search ultimate program search string a text fail igor k. get think : ` ` earth program work slowly ? '' double - check code say : ` ` code contain errors yet i know improve search ultimate ! '' take a large book shelve book read ` ` azembler <unknown> new approach '' carefully <unknown> book igor k. realise turn multiply number dozens time faster ` ` search ultimate faster ever ! '' — fellow shout happily set work let us clarify igor 's idea thing code generate a compiler far perfect standard multiply work slower trick book mention azembler language operate 26 register ( eax ebx ... ezx ) two command : first think second operation seem meaningless turn acceptable write operation lea ecx [ eax + ebx ] lea ecx [ k * eax ] <unknown> ecx [ ebx + k * eax ] k = 1 2 4 8 . a result register ecx equal number eax + ebx k * eax ebx + k * eax correspondingly however operation fulfil many time dozens time faster usual multiply number use several operations one quickly multiply number one course instead eax ebx ecx allow use register example let eax register contain number multiply 41 . take us 2 line : lea ebx [ eax + 4 * eax ] // ebx = 5 * <unknown> eax [ eax + 8 * ebx ] // eax = eax + 8 * ebx = 41 * <unknown> k. get interest follow question : minimum number lea operations need multiply give number n ? task help consider initial moment time eax contain a number igor k. multiply n register ebx ezx contain number 0 . final moment time result locate register input data contain integer n ( 1 ≤ n ≤ 255 ) igor k. multiply first line print number p represent minimum number lea operations need print program consist p command perform operations guarantee program exist n 1 255 . use precisely follow format command ( k equal 1 2 4 8 x y z even coincide register ) : lea x [ y ] lea x [ y + z ] lea x [ k * y ] lea x [ y + k * z ] please note extra space end a command unacceptable,"['brute force', 'implementation']",2500.0
90/B,african crossword a rectangular table n × m size cell table contain exactly one letter table ( also refer grid ) contain encrypt word need decode solve crossword cross repeat letter row columns word a letter cross correspond column row contain least one letter exactly besides letter cross simultaneously repeat letter cross write remain letter a string letter occupy a higher position follow letter occupy a lower position letter locate one row letter leave go first result word answer problem suggest solve african crossword print word encrypt first line contain two integers n m ( 1 ≤ n m ≤ 100 ) next n line contain m lowercase latin letter crossword grid print encrypt word a single line guarantee answer consist least one letter,"['implementation', 'strings']",1100.0
89/B,vasya write library build graphical user interface vasya call creation <unknown> ( <unknown> ) one interest aspects library widgets pack a widget element graphical interface widget width height occupy rectangle screen widget vasya 's library type widget simplicity identify widget type type hbox vbox <unknown> type widget also type widget widgets hbox vbox special store widgets widgets use pack ( ) method pack directly widget widgets type hbox vbox store several widgets even several equal widgets — simply appear several time a result use method pack ( ) link pack widget save pack widget change image widget pack also change shall assume widget a pack widget b exist a chain widgets a = c1 c2 ... ck = b k ≥ 2 ci pack directly ci + 1 1 ≤ i < k. vasya 's library situation widget a pack widget a ( ) allow try pack widgets manner immediately result error also widgets hbox vbox parameters border space determine methods <unknown> ( ) <unknown> ( ) respectively default options equal 0 . picture show widgets pack hbox vbox hbox vbox automatically change size depend size pack widgets hbox vbox differ hbox widgets pack horizontally vbox — vertically parameter space set distance adjacent widgets border — a frame around pack widgets desire width pack widgets place exactly order pack ( ) method call within hbox vbox pack widgets size equal 0 × 0 regardless options border space construction widgets perform use a script language vasyascript description language find input data final <unknown> code vasya ask write a program calculate size widgets source code language vasyascript first line contain integer n — number instructions ( 1 ≤ n ≤ 100 ) next n line contain instructions language vasyascript — one instruction per line a list possible instructions instructions write without space begin end string word inside instruction separate exactly one space space directly number directly case matter example ` ` widget x '' a correct instruction case letter correct input data name widgets consist lowercase latin letter length 1 10 character inclusive name widgets pairwise different number script integers 0 100 <unknown> guarantee above - given script correct operations widgets take place widgets create widget pack guarantee script create least one widget widget print a single line name width height separate space line must order lexicographically a widget 's name please use % lld specificator read write 64 - bit integers c++ prefer use cout stream ( also may use % i64d specificator ) first sample widgets arrange follow :,"['dp', 'implementation']",2300.0
87/D,"a long time ago country <unknown> civil war n cities want seize power 's sometimes one city gather army send campaign another city road make difficult country roads exactly n - 1 . also could reach city city go roads even war oriental people remain <unknown> rich appreciate beauty nature keep memory great crusade centuries come plant one beautiful tree road army spend time oriental people love nature 's several roads one tree plant recently record war find become clear city attack one exactly exactly n ( n - 1 ) attack total everyone wonder road war become beautiful , road plant largest number beautiful tree first line contain integer n ( 2 ≤ n ≤ 105 ) represent number cities next n - 1 line contain three integers : number cities ai bi ( 1 ≤ ai bi ≤ n ) connect i - th road number days di army spend go ( 1 ≤ di ≤ 109 ) lengths several roads may coincide print first line two integers — number beautiful tree beautiful road number beautiful roads print second line list beautiful roads sort order number ' increase roads number 1 n - 1 order give input data please use % lld specificator write 64 - bit integers c++ prefer use cout stream ( also may use % i64d specificator )","['dfs and similar', 'dp', 'implementation']",2300.0
85/D,one well - known algorithm find k - th order statistics divide elements group five consecutive elements find median five a median call middle element a sort array ( 's third largest element a group five ) increase algorithm 's performance speed a modern video card able find a sum medians five array a sum medians a sort k - element set s = { a1 a2 ... ak } a1 < a2 < a3 < ... < ak understand operator stand take remainder stand remainder divide x y. organize exercise test quickly calculate sum medians a change set need first line contain number n ( 1 ≤ n ≤ 105 ) number operations perform n line contain description one three operations : add x operation true element x include set directly operation <unknown> x operation true element x include set directly operation number input positive integers exceed 109 . operation sum print single line sum medians current set set empty print 0 . please use % lld specificator read write 64 - bit integers c++ prefer use cin cout stream ( also may use % i64d specificator ),"['brute force', 'data structures', 'implementation']",2300.0
84/C,perhaps many hear world biathlon championship finish although hero valera present spectacular event watch tv excite much decide enroll a biathlon section course biathlon sport prove difficult practice take much time effort workouts workouts workouts — 's await valera way great achievements biathlon workouts probably know every professional biathlete ski fast shoot precisely shoot range case hope successful run shoot two main components biathlon valera diligent ski train run really fast however shoot accuracy nothing write home a biathlon base valera prepare competition a huge rifle range n target target shape a circle center circle locate ox axis last train session valera make total m shots make monitor result easier one rather well - known programmer ( course ) commission write a program would reveal many target valera hit specifically target program must print number first successful shoot ( target ) ` ` -1 '' hit target consider hit shoot inside circle boundary valera count perhaps thank one day win international competitions first line input file contain integer n ( 1 ≤ n ≤ 104 ) number target next n line contain descriptions target target a circle whose center locate ox axis circle give coordinate center x ( - 2·104 ≤ x ≤ 2·104 ) radius r ( 1 ≤ r ≤ 1000 ) guarantee two target coincide intersect nest touch next line contain integer m ( 1 ≤ m ≤ 2·105 ) number shots next m line contain descriptions shots point plane give coordinate x y ( - 2·104 ≤ x y ≤ 2·104 ) number input integers target shots number start one order input print first line a single number number target hit valera print second line target number first hit ` ` -1 '' ( without quote ) number exist separate number space,['implementation'],1700.0
82/A,"sheldon leonard penny rajesh howard queue a ` ` double cola '' drink <unknown> machine ; people queue first one queue ( sheldon ) buy a drink double ! result two <unknown> go end queue next queue ( leonard ) buy a drink get end queue two <unknown> , process continue ad infinitum example penny drink third cola queue look like : rajesh howard sheldon sheldon leonard leonard penny penny write a program print name a man drink n - th note begin queue look like : sheldon leonard penny rajesh howard first person sheldon input data consist a single integer n ( 1 ≤ n ≤ 109 ) guarantee pretests check spell five name , contain five possible answer print single line — name person drink n - th cola can number start 1 . please note spell name like : ` ` sheldon '' ` ` leonard '' ` ` penny '' ` ` rajesh '' ` ` howard '' ( without quote ) order precisely friends queue initially","['implementation', 'math']",1100.0
81/A,polycarp think mean life often constantly even type editor every time start <unknown> longer fully concentrate repeatedly press key need press example instead phrase ` ` '' type ` ` <unknown> <unknown> <unknown> '' polycarp decide automate process correct errors decide write a plug - in text editor remove pair identical consecutive letter ( text ) course exactly polycarp need 's get start something ! help polycarp write main plug - in module program remove a string pair identical letter consecutive removal appear new pair program remove well technically work equivalent follow : string contain a pair consecutive identical letter pair delete note delete consecutive identical letter do order order lead result input data consist a single line process length line 1 2·105 character inclusive string contain lowercase latin letter print give string process guarantee result contain least one character,['implementation'],1400.0
77/D,... mike tv greet ! tire monotonous furniture ? sick gray routine ? dream <unknown> change <unknown> <unknown> ? something offer ! domino carpet $ <unknown> change life ! lay floor hang wall even ceiling ! among things ... watch commercial virus hexadecimal also want get a domino carpet want badly photograph front course a virus never <unknown> buy a <unknown> carpet ! order a truck dominoes decide make a carpet original domino carpet a field square n × m size square half a domino rotate either vertically horizontally independently neighbor vertically rotate domino halve look like : horizontally rotate halve look like : notice halve look rotations halve differ dominoes buy hexadecimal represent <unknown> chip 1 × 2 size lay either vertically horizontally chip lay vertically 's halve lay vertically <unknown> ; chip lay horizontally 's halve lay horizontally sample valid invalid dominoes lay vertically horizontally : virus hexadecimal assemble domino carpet follow condition satisfy : start assemble domino carpet virus want know number ways achieve intend purpose modulo 109 + 7 . assume virus infinitely large number dominoes type first line contain two integers n m separate a space — size domino carpet ( 1 ≤ n m ≤ 250 ) next 4n + 1 line contain 4 m + 1 symbols square domino carpet a domino half describe a 3 × 3 square symbol ' o ' square indicate presence a point symbol ' . ' — absence 3 × 3 square <unknown> adjacent square symbols ' # ' show examples guarantee every box describe correct half a domino pretests domino carpet size 2 × 2 4 × 4 . print a single number number ways assemble domino carpet modulo 109 + 7 use standard dominoes size 1 × 2 . a note first example : correct ways make domino carpet represent : way incorrect :,"['dp', 'implementation']",2300.0
75/D,ahmed mostafa use compete together many program contest several years coach <unknown> ask solve one challenge problem course ahmed able solve mostafa could n't problem similar a standard problem a different format constraints standard problem give array integers find one consecutive elements array sum maximum possible sum problem give n small array create one big array concatenation one instance small array ( small array could occur ) big array give array index ( 1 - based ) small array concatenation do order array apply standard problem mention result big array example let 's suppose small array { 1 6 -2 } { 3 3 } { -5 1 } index big array { 2 3 1 3 } actual value big array format concatenation small array { 3 3 -5 1 1 6 -2 -5 1 } example maximum sum 9 . help mostafa solve problem ? first line contain two integers n m n number small array ( 1 ≤ n ≤ 50 ) m number index big array ( 1 ≤ m ≤ 250000 ) follow n line i - th line start one integer l size i - th array ( 1 ≤ l ≤ 5000 ) follow l integers one greater equal -1000 less equal 1000 . last line contain m integers index big array concatenate small array order index greater equal 1 less equal n. small array number 1 n order give input give small array may use big array note array big try build <unknown> probably get time or / and memory limit exceed print one line contain maximum sum big array format describe must choose least one element sum i. e. empty please use % lld specificator write 64 - bit integers c++ prefer use cout ( also may use % i64d ),"['data structures', 'dp', 'greedy', 'implementation', 'math']",2000.0
71/B,a progress bar element graphical interface display progress a process moment complete let 's take a look follow form a bar a bar represent n square locate line add clarity let 's number positive integers 1 n leave right square saturation ( ai i - th square ) measure integer 0 k. bar i ( 1 ≤ i ≤ n ) display square 1 2 ... i - 1 saturation k square i + 1 i + 2 ... n saturation 0 saturation square i value 0 k. first square progress bar always saturation k. last square always saturation 0 . one square saturation different 0 k. degree process 's completion measure percents let process t % complete follow inequation fulfil : example a bar see picture give n k t determine measure saturation square ai progress bar give 3 space - separated integers n k t ( 1 ≤ n k ≤ 100 0 ≤ t ≤ 100 ) print n number i - th equal ai,"['implementation', 'math']",1300.0
65/B,"history magic perhaps bore subject hogwarts school <unknown> wizardry harry potter usually asleep history lessons magical quill write lecture professor binns history magic teacher lecture a bore monotonous voice a <unknown> effect even quill 's quill often make mistake especially date , end semester professor binns decide collect students ' <unknown> note check ron weasley a panic : harry 's note may contain errors least note whereas ron <unknown> also sleep lecture quill eat rat <unknown> hermione granger refuse give ron note , opinion everyone learn therefore ron choice copy harry 's note due quill 's errors harry 's date absolutely confuse : years goblin <unknown> important events wizarding world follow order sometimes even date future occur ron want change digits copy note date chronological ( i.e non - decreasing ) order note date strictly later 2011 strictly 1000 . make result sequence close possible one <unknown> professor binns ron change one digit date digit help first input line contain integer n ( 1 ≤ n ≤ 1000 ) represent number date harry 's note next n line contain actual date y1 y2 ... yn line contain a date date a four - digit integer ( 1000 ≤ yi ≤ 9999 ) print n number z1 z2 ... zn ( 1000 ≤ zi ≤ 2011 ) ron 's result date print number a single line number zi must form non - decreasing sequence number zi differ correspond date yi one digit allow change first digit a number 0 . several possible solutions print 's solution print ` ` solution '' ( without quote )","['brute force', 'greedy', 'implementation']",1700.0
57/B,chris rabbit find trace ancient martian civilization brave <unknown> manage see a small telescope architecture masterpiece — ` ` a road sun '' build stand cubical stone size foundation divide entire ` ` road '' cells cubical stone fit tightly thus cell foundation a coordinate assign become leader tribe a martian build a road sun build cubical stone a give foundation a stairway stairway describe number stone initial coordinate coordinate stairway 's begin end follow cell coordinate 's increase order contain one cubical stone previous one cell already get stone count build process stairways simply build word let us assume a stairway build initial coordinate l final coordinate r number stone initial coordinate x. mean x stone add cell l x + 1 stone add cell l + 1 ... x + r - l stone add cell r. chris manage find ancient manuscript contain descriptions stairways want compare data sure really find ` ` a road sun '' choose road cells count total number cubical stone accumulate throughout martian history ask count use manuscript sum ideally total first line contain three space - separated integers : n m k ( 1 ≤ n m ≤ 105 1 ≤ k ≤ min ( n 100 ) ) number cells number ` ` roads sun '' number cells query correspondingly follow m roads contain three space - separated integers : ai bi ci ( 1 ≤ ai ≤ bi ≤ n 1 ≤ ci ≤ 1000 ) stairway 's description begin end initial cell 's height follow a line contain k different space - separated integers bi number range 1 n cells number stone interest chris print a single number a single line sum stone cells chris interest please use % lld specificator read write 64 - bit integers c++ preffered use cin ( also may use % i64d ),['implementation'],1600.0
56/C,"beroil corporation structure hierarchical represent a tree let 's examine presentation structure follow : description employee consist name a colon ( : ) descriptions subordinate separate commas , finally a dot employee subordinate colon present description example line mike : max . artem : mike .. dmitry : dmitry . dmitry ... correct way record structure a corporation director mike subordinate max artem dmitry artem a subordinate whose name mike name boss two subordinate dmitry call dmitry like beroil corporation every employee correspond subordinate subordinate necessarily direct let 's call uncomfortable situation situation a person whose name s write a letter another person whose name also s. example give two pair : a pair involve mike two pair dmitry ( a pair subordinate ) task give structure corporation find number uncomfortable pair first single line contain corporation structure a string length 1 1000 character guarantee description correct every name a string consist capital latin letter 1 10 symbols length print a single number — number uncomfortable situations company","['data structures', 'implementation']",1700.0
54/B,hedgehog recently remember one favorite childhood activities — solve puzzle get new <unknown> would sit day day friend bury thousands tiny piece picture look require items one one soon hedgehog come a brilliant idea : instead buy ready - made puzzle one take large piece paper picture cut many small rectangular piece mix solve result puzzle try piece together picture result task even challenge classic puzzle : fragment rectangular shape one assemble puzzle rely picture draw piece puzzle piece turn size x × y picture cut first horizontal cut pitch x vertical cut pitch y. denote initial size picture a × b a must divisible x b must divisible y ( x y integer number ) however every cut picture result a good puzzle hedgehog find a puzzle good two piece ( allow rotate piece compare forbid turn ) task count a give picture number good puzzle make also find puzzle minimal piece size first line contain two number a b size picture positive integers exceed 20 . follow a line contain b symbols describe actual picture line contain uppercase english letter first line print number possible good puzzle ( word number pair ( x y ) puzzle correspond element size good ) number always positive whole picture a good puzzle second line print two number — size x y smallest possible element among good puzzle comparison make firstly area xy one element secondly — length x. picture first sample test follow good puzzle : ( 2 1 ) ( 2 2 ) ( 2 4 ),['implementation'],1800.0
48/A,uncle fyodor matroskin cat sharic dog live simple happy live <unknown> sometimes receive parcel uncle fyodor ’ s parent sometimes anonymous <unknown> case hard determine one package send a <unknown> rifle obviously sharic love hunt fish matroskin a new video game console mean ? every one three friends claim present nearly quarrel uncle fyodor idea solve problem <unknown> : suppose console send three play turn everybody get relieve yet another burn problem pop — play first ? time matroskin come a brilliant solution suggest fair way find : play rock - paper - scissors together rule game simple count three every player show a combination hand ( paw ) combination correspond one three things : a rock scissor paper gesture win ones accord well - known rule : rock break scissor scissor cut paper paper get wrap stone usually two players yet three friends ’ s decide choose winner like : someone show gesture win two players player win otherwise another game round require write a program determine winner gesture show first input line contain name gesture uncle fyodor show second line show gesture matroskin show third line show sharic ’ s gesture print ` ` f '' ( without quote ) uncle fyodor win print ` ` m '' matroskin win ` ` s '' sharic win impossible find winner print ` ` ? ` `,['implementation'],900.0
46/D,nowadays become increasingly difficult park a car cities successfully let 's imagine a segment a street long l meter along a park lot locate drivers park cars strictly parallel pavement right side street ( remember country author task come drive right side ! ) every driver park want leave extra space move car freely 's a driver look a place distance car one behind less b meter distance car one front less f meter ( 's car behind car park park lot segment edge ; true case 're cars park front car ) let 's introduce axis coordinate along pavement let park lot begin point 0 end point l. drivers drive direction coordinate ' increase look earliest place ( smallest possible coordinate ) park car case 's place driver drive search perfect peaceful sometimes cars leave street free space park consider never two move cars a street a time write a program use data drivers enter street hop park drivers leave model process determine a park lot space car first line contain three integers l b и f ( 10 ≤ l ≤ 100000 1 ≤ b f ≤ 100 ) second line contain integer n ( 1 ≤ n ≤ 100 ) indicate number request program get every request describe a single line give two number first number represent request type request type equal 1 case second number indicate length a car ( meter ) enter street look a place park request type equal 2 second number identify number a request ( start 1 ) car whose arrival park lot describe a request number leave park lot guarantee car park moment request 2 type make lengths cars integers 1 1000 . every request 1 type print number -1 single line correspond car could n't find place park along street otherwise print a single number equal distance back car park position begin park lot zone,"['data structures', 'implementation']",1800.0
40/A,long ago a result combat operations main berland place interest — magic clock — damage cannon 's ball make several hole clock 's residents concern repair magic clock represent infinite cartesian plane origin correspond clock center clock paint two color show picture : picture show central part clock color naturally extend infinity ball take point plane task find color area damage give ball point locate border one areas consider paint black first single line contain two integers x y — coordinate hole make clock ball number x y absolute value exceed 1000 . find require color point origin coordinate distance integral - value paint black,"['constructive algorithms', 'geometry', 'implementation', 'math']",1300.0
16/B,a burglar get a match warehouse want steal many match possible warehouse m containers i - th container ai matchboxes matchbox contain bi match matchboxes size burglar 's <unknown> hold n matchboxes exactly task find maximum amount match a burglar carry away time rearrange match matchboxes 's choose n matchboxes total amount match maximal first line input contain integer n ( 1 ≤ n ≤ 2·108 ) integer m ( 1 ≤ m ≤ 20 ) i + 1 - th line contain a pair number ai bi ( 1 ≤ ai ≤ 108 1 ≤ bi ≤ 10 ) input number integer output number — answer problem,"['greedy', 'implementation']",900.0
8/B,whole world get obsess robots keep pace progress great berland 's programmer draude decide build robot work hard robot teach walk shortest path one point another record movements like many draude 's program a bug — robot n't always walk shortest path fortunately robot record movements correctly draude want find robot function wrong <unknown> draude remember map field test robot would easily say robot walk right direction field map lose never find 's ask find exist least one map path record robot shortest map infinite checker field square either empty contain obstruction also know robot never try run obstruction record robot 's movements find exist least one map possible choose robot a start square ( start square empty ) robot move square movements coincide record ones ( robot n't run anything move along empty square ) path start square end one shortest one movement robot move square ( provide <unknown> square ) common side square robot currently first line input file contain record robot 's movements record a non - empty string consist uppercase latin letter l r u d stand movements leave right respectively length string exceed 100 . first line output word ok ( describe map exist ) bug ( a map exist ),"['constructive algorithms', 'implementation']",1400.0
4/C,a new e - mail service ` ` <unknown> '' go open berland near future site administration want launch project soon possible 's ask help 're suggest implement prototype site registration system system work follow principle time a new user want register send system a request name a name exist system database insert database user get response ok confirm successful registration name already exist system database system make a new user name send user a prompt also insert prompt database new name form follow rule number start 1 append one another name ( name1 name2 ... ) among number least i find namei yet exist database first line contain number n ( 1 ≤ n ≤ 105 ) follow n line contain request system request a non - empty line consist 32 character lowercase latin letter print n line system responses request : ok case successful registration a prompt a new name request name already take,"['data structures', 'implementation']",1300.0
1/B,popular spreadsheets systems ( example <unknown> ) follow numeration columns use first column number a second — number b etc till column 26 mark z. two - letter number : column 27 number aa 28 — ab column 52 mark az zz follow three - letter number etc row mark integer number start 1 . cell name concatenation column row number example <unknown> name cell column 55 row 23 . sometimes another numeration system use : <unknown> x y integer number show column row number <unknown> instance <unknown> cell previous example task write a program read give sequence cell coordinate produce item write accord rule another numeration system first line input contain integer number n ( 1 ≤ n ≤ 105 ) number coordinate test follow n line contain coordinate coordinate correct cells column and/or row number larger 106 write n line line contain a cell coordinate numeration system,"['implementation', 'math']",1600.0
1843/F1,simple version problem difference simple hard versions version $$$ u = 1 $$$ know omsk capital berland like capital omsk a well - developed metro system omsk metro consist a certain number station connect tunnel two station exactly one path pass tunnel word metro a tree develop metro attract residents follow system use omsk station weight $$$ x \in \ { -1 1\ } $$$ station a weight $$$ -1 $$$ station visit omsk resident a fee $$$ 1 $$$ burle charge weight station $$$ 1 $$$ omsk resident reward $$$ 1 $$$ burle omsk metro currently one station number $$$ 1 $$$ weight $$$ x = 1 $$$ every day one follow events occur : a friend alex task answer alex 's question $$$ \dagger $$$ subsegment — continuous sequence elements first line contain a single number $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case first line test case contain number $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — number events $$$ n $$$ line describe events $$$ i $$$ -th line one follow options possible : guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ alex 's question output ` ` yes '' ( without quote ) subsegment describe condition exist otherwise output ` ` '' ( without quote ) output answer case ( example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive answer ) explanation first sample answer second question ` ` yes '' a path $$$ 1 $$$ fourth question choose $$$ 1 $$$ path fifth query answer ` ` yes '' since a path $$$ 1 - 3 $$$ sixth query choose empty path sum weight $$$ 0 $$$ difficult show paths satisfy first third query,"['data structures', 'dfs and similar', 'dp', 'greedy', 'math']",1800.0
1843/B,"today alex bring array $$$ a_1 a_2 \dots a_n $$$ length $$$ n $$$ apply many operations want ( include zero operations ) change array elements $$$ 1 $$$ operation alex choose $$$ l $$$ $$$ r $$$ $$$ 1 \leq l \leq r \leq n $$$ multiply elements array $$$ l $$$ $$$ r $$$ inclusive $$$ -1 $$$ word alex replace subarray $$$ [ a_l a _ { l + 1 } \dots a_r ] $$$ $$$ [ <unknown> -a _ { l + 1 } \dots <unknown> ] $$$ $$$ 1 $$$ operation example let $$$ n = 5 $$$ array $$$ [ 1 -2 0 3 -1 ] $$$ $$$ l = 2 $$$ $$$ r = 4 $$$ operation array $$$ [ 1 2 0 -3 -1 ] $$$ alex late school help find maximum possible sum number array obtain make number operations well minimum number operations must do first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case descriptions test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — length array second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ -1000000000 \leq a_i \leq 1000000000 $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output two space - separated number : maximum possible sum number array minimum number operations get sum pay attention answer may fit a standard integer type forget use 64 - bit integer type , test case one possible shortest sequence operations provide among many others length lead maximum sum elements first test case alex make operations : $$$ ( 1 4 ) $$$ $$$ ( 2 2 ) $$$ $$$ ( 6 6 ) $$$ second test case get largest sum need make operations : $$$ ( 1 8 ) $$$ $$$ ( 5 6 ) $$$ fourth test case necessary make one operation : $$$ ( 2 3 ) $$$","['greedy', 'math']",800.0
1841/E,a square matrix consist $$$ n $$$ row $$$ n $$$ columns cells number $$$ 1 $$$ $$$ n $$$ cells color white black cells $$$ 1 $$$ $$$ a_i $$$ black cells $$$ a_i+1 $$$ $$$ n $$$ white $$$ i $$$ -th column want place $$$ m $$$ integers matrix $$$ 1 $$$ $$$ m $$$ two rule : beauty matrix number $$$ j $$$ $$$ j+1 $$$ write row next column $$$ j $$$ ( neighbour cell right ) 's maximum possible beauty matrix ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — size matrix second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le n $$$ ) — number black cells column third line contain a single integer $$$ m $$$ ( $$$ 0 \le m \le \sum \limits _ { i=1 } ^n n - a_i $$$ ) — number integers write matrix note number might fit a 32 - bit integer data type sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print a single integer — maximum beauty matrix write $$$ m $$$ integers note integers white cells answer always exist,"['data structures', 'greedy', 'math']",2200.0
1834/C,alice bob play a game two string $$$ s $$$ $$$ t $$$ length $$$ n $$$ consist lowercase latin letter players take turn alternately alice go first turn alice choose integer $$$ i $$$ $$$ 1 $$$ $$$ n $$$ one string $$$ s $$$ $$$ t $$$ lowercase latin letter $$$ c $$$ replace $$$ i $$$ -th symbol choose string character $$$ c $$$ turn bob choose one string $$$ s $$$ $$$ t $$$ reverse formally bob make replacement $$$ s : = \operatorname { rev } ( s ) $$$ $$$ t : = \operatorname { rev } ( t ) $$$ $$$ \operatorname { rev } ( p ) = p_n p _ { n-1 } \ldots p_1 $$$ game last string $$$ s $$$ $$$ t $$$ equal soon string become equal game end instantly define duration game total number move make players game example alice make $$$ 2 $$$ move total bob make $$$ 1 $$$ move duration game $$$ 3 $$$ alice 's goal minimize duration game bob 's goal maximize duration game duration game players play optimally ? show game end a finite number turn test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length string $$$ s $$$ $$$ t $$$ second line test case contain a string $$$ s $$$ length $$$ n $$$ consist lowercase latin letter third line test case contain a string $$$ t $$$ length $$$ n $$$ consist lowercase latin letter guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case output a single number a separate line — duration describe game players play optimally first test case turn alice replace third symbol string $$$ s $$$ x. string become equal ` ` <unknown> '' game end one move since alice 's goal finish game move possible move one optimal first move final answer $$$ 1 $$$ second test case turn alice replace fifth symbol string $$$ t $$$ h. move $$$ s = $$$ ` ` hello '' $$$ t = $$$ ` ` olleh '' bob make turn turn must reverse one string bob choose string $$$ s $$$ turn string equal ` ` olleh '' choose string $$$ t $$$ turn string equal ` ` hello '' thus present first move alice game definitely end $$$ 2 $$$ move show strategy alice finish game less $$$ 2 $$$ move players play optimally final answer $$$ 2 $$$ third test case first move alice replace second symbol string $$$ s $$$ c. move $$$ s = $$$ ` ` ac '' $$$ t = $$$ ` ` cd '' bob make turn bob reverse string $$$ s $$$ turn $$$ s = $$$ ` ` ca '' $$$ t = $$$ ` ` cd '' easy see case alice definitely finish game $$$ 3 $$$ -rd move replace second symbol string $$$ t $$$ a string become equal ` ` ca '' bob reverse string $$$ t $$$ turn $$$ s = $$$ ` ` ac '' $$$ t = $$$ ` ` dc '' case alice also definitely finish game $$$ 3 $$$ rd move replace first symbol string $$$ s $$$ d string become equal ` ` dc '' thus alice definitely finish game $$$ 3 $$$ move regardless bob 's move show game end less $$$ 3 $$$ move players play optimally fifth test case string $$$ s $$$ $$$ t $$$ equal game end without start $$$ 0 $$$ move,"['greedy', 'math', 'strings']",1200.0
1834/B,fedya play a new game call ` ` legend link '' one character 's abilities combine two materials one weapon material strength represent a positive integer $$$ x $$$ strength result weapon determine sum absolute differences digits decimal representation integers position formally let first material strength $$$ x = \overline { x _ { 1 } x _ { 2 } \ldots x _ { n } } $$$ second material strength $$$ y = \overline { y _ { 1 } y _ { 2 } \ldots y _ { n } } $$$ strength weapon calculate $$$ |x _ { 1 } - y _ { 1 } | + |x _ { 2 } - y _ { 2 } | + \ldots + |x _ { n } - y _ { n } | $$$ integers different lengths shorter integer pad lead zero fedya unlimited supply materials possible strengths $$$ l $$$ $$$ r $$$ inclusive help find maximum possible strength weapon obtain integer $$$ c = \overline { c _ { 1 } c _ { 2 } \ldots c _ { k } } $$$ define integer obtain sequentially write digits $$$ c_1 c_2 \ldots c_k $$$ leave right i.e $$$ 10^ { k-1 } \cdot c_1 + 10^ { k-2 } \cdot c_2 + \ldots + c_k $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 500 $$$ ) description test case follow first line test case contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r < 10^ { 100 } $$$ ) — decimal representation integers represent minimum maximum strength materials fedya guarantee integers $$$ l $$$ $$$ r $$$ contain lead zero note input data may fit standard $$$ 32 $$$ -bit $$$ 64 $$$ -bit integer data type test case print one integer — maximum possible strength weapon fedya obtain give materials first test case weapon make materials strengths $$$ 53 $$$ $$$ 57 $$$ maximum possible strength : $$$ |5 - 5| + |3 - 7| = 4 $$$ second test case maximum strength achieve materials strengths $$$ 190 $$$ $$$ 209 $$$ : $$$ |1 - 2| + |9 - 0| + |0 - 9| = 19 $$$ fourth test case one valid strength answer $$$ 0 $$$ sixth test case maximum strength achieve materials strengths $$$ 1909 $$$ $$$ 90 $$$ : $$$ |1 - 0| + |9 - 0| + |0 - 9| + |9 - 0| = 28 $$$ note shorter integer pad lead zero,"['greedy', 'math']",1000.0
1829/F,a snowflake graph generate two integers $$$ x $$$ $$$ y $$$ greater $$$ 1 $$$ follow : snowflake graph a central vertex $$$ 15 $$$ $$$ x=5 $$$ vertices attach ( $$$ 3 $$$ $$$ 6 $$$ $$$ 7 $$$ $$$ 8 $$$ $$$ 20 $$$ ) $$$ y=3 $$$ vertices attach first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n \leq 200 $$$ ; $$$ 1 \leq m \leq <unknown> ( 1000 \frac { n ( n-1 ) } { 2 } \right ) $$$ ) — number vertices edge graph respectively next $$$ m $$$ line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \leq u v \leq n $$$ $$$ u \neq v $$$ ) — number vertices connect edge graph contain multiple edge self - loops guarantee graph a snowflake graph integers $$$ x $$$ $$$ y $$$ greater $$$ 1 $$$ test case a separate line output value $$$ x $$$ $$$ y $$$ order separate a space first test case picture statement note output 3 5 incorrect since $$$ x $$$ output $$$ y $$$,"['dfs and similar', 'math']",1300.0
1827/A,give two array $$$ a $$$ $$$ b $$$ consist $$$ n $$$ integers elements $$$ a $$$ pairwise distinct find number ways reorder $$$ a $$$ $$$ a_i > b_i $$$ $$$ 1 \le i \le n $$$ modulo $$$ 1000000000 + 7 $$$ two ways reorder consider different result array different test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 2 \cdot 10^ { 5 } $$$ ) — length array $$$ a $$$ $$$ b $$$ second line test case contain $$$ n $$$ distinct integers $$$ a_1 $$$ $$$ a_2 $$$ $$$ \ldots $$$ $$$ a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — array $$$ a $$$ guarantee elements $$$ a $$$ pairwise distinct second line test case contain $$$ n $$$ integers $$$ b_1 $$$ $$$ b_2 $$$ $$$ \ldots $$$ $$$ b_n $$$ ( $$$ 1 \le b_i \le 1000000000 $$$ ) — array $$$ b $$$ guarantee sum $$$ n $$$ test case exceed $$$ 2 \cdot 10^ { 5 } $$$ test case output number ways reorder array $$$ a $$$ $$$ a_i > b_i $$$ $$$ 1 \le i \le n $$$ modulo $$$ 1000000000 + 7 $$$,['math'],1100.0
1824/B2,"hard version problem difference version $$$ k\le n $$$ make hack versions problem solve luotianyi live a world $$$ n $$$ float islands float islands connect $$$ n-1 $$$ undirected air rout two reach pass rout mean $$$ n $$$ float islands form a tree one day luotianyi want meet friends : chtholly nephren william .... totally want meet $$$ k $$$ people n't know exact position know pairwise distinct islands define island good sum distance $$$ ^ { \dagger } $$$ islands $$$ k $$$ people minimal among $$$ n $$$ islands , luotianyi want know $$$ k $$$ people randomly set $$$ k $$$ distinct $$$ n $$$ islands expect number good islands ? need tell expect number modulo $$$ 1000000000 + 7 $$$ $$$ ^ { \dagger } $$$ distance two islands minimum number air rout need take get one island first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1\le k \le n \le 2\cdot 100000 $$$ ) — number islands people respectively next $$$ n−1 $$$ line describe air rout $$$ i $$$ -th contain two integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1 \le u_i v_i \le n u_i \neq v_i $$$ ) — islands connect $$$ i $$$ -th air route print a single integer — expect number good islands modulo $$$ 1000000000 + 7 $$$ formally let $$$ m = 1000000000 + 7 $$$ show answer express irreducible fraction $$$ \frac { p } { q } $$$ $$$ p $$$ $$$ q $$$ integers $$$ q \not \equiv 0 $$$ ( $$$ \operatorname { mod } m $$$ ) output integer equal $$$ p \cdot q^ { -1 } $$$ $$$ \operatorname { mod } m $$$ word output integer $$$ x $$$ $$$ 0 \le x < m $$$ $$$ x \cdot q \equiv p $$$ ( $$$ \operatorname { mod } m $$$ ) first example air rout form follow tree : people islands $$$ 1 $$$ $$$ 2 $$$ islands $$$ 1 $$$ $$$ 2 $$$ good sum distance island $$$ 1 $$$ $$$ 2 $$$ people $$$ 1 + 0=1 $$$ minimal sum distance island $$$ 3 $$$ people $$$ 2 + 1=3 $$$ greater $$$ 1 $$$ like people island $$$ 1 $$$ $$$ 3 $$$ islands $$$ 1,2 $$$ $$$ 3 $$$ good people islands $$$ 1 $$$ $$$ 4 $$$ islands $$$ 1,2,3 $$$ $$$ 4 $$$ good people islands $$$ 2 $$$ $$$ 3 $$$ islands $$$ 2 $$$ $$$ 3 $$$ good people islands $$$ 2 $$$ $$$ 4 $$$ islands $$$ 2,3 $$$ $$$ 4 $$$ good people islands $$$ 3 $$$ $$$ 4 $$$ islands $$$ 3 $$$ $$$ 4 $$$ good expect number good islands $$$ \frac { 16 } { 6 } $$$ equal $$$ 666666674 $$$ modulo $$$ 1000000000 + 7 $$$ second example air rout form follow tree : see one person island island $$$ 3 $$$ good expect number $$$ 1 $$$","['dfs and similar', 'math']",2300.0
1823/B,let 's define a permutation length $$$ n $$$ array $$$ p $$$ length $$$ n $$$ contain every number $$$ 1 $$$ $$$ n $$$ exactly give a permutation $$$ p_1 p_2 \dots p_n $$$ a number $$$ k $$$ need sort permutation ascend order order repeat follow operation number time ( possibly zero ) : unfortunately permutations ca n't sort fix number $$$ k $$$ example 's impossible sort $$$ [ 2 4 3 1 ] $$$ $$$ k = 2 $$$ 's start sort make one preliminary exchange : task : example $$$ k = 2 $$$ permutation $$$ [ 2 4 3 1 ] $$$ make a preliminary exchange $$$ p_1 $$$ $$$ p_4 $$$ produce permutation $$$ [ 1 4 3 2 ] $$$ possible sort give $$$ k $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n \le 200000 $$$ ; $$$ 1 \le k \le n - 1 $$$ ) — length permutation a distance elements swap second line test case contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 1 \le p_i \le n $$$ ) — elements permutation $$$ p $$$ guarantee sum $$$ n $$$ test case exceed $$$ 20 ^ 5 $$$ test case print first test case need preliminary exchange possible swap $$$ ( p_1 p_2 ) $$$ $$$ ( p_2 p_3 ) $$$ second test case need preliminary exchange possible swap $$$ ( p_1 p_3 ) $$$ $$$ ( p_2 p_4 ) $$$ third test case need apply preliminary exchange $$$ ( p_2 p_3 ) $$$ permutation become $$$ [ 3 4 1 2 ] $$$ sort $$$ k = 2 $$$,"['brute force', 'math']",900.0
1823/A,consider array $$$ a_1 a_2 \dots a_n $$$ consist number $$$ 1 $$$ $$$ -1 $$$ define $$$ a $$$ -characteristic array a number pair indices $$$ 1 \le i < j \le n $$$ $$$ a_i \cdot a_j = 1 $$$ find array $$$ a $$$ give length $$$ n $$$ $$$ a $$$ -characteristic equal give value $$$ k $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) description test case follow line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n \le 100 $$$ ; $$$ 0 \le k \le \frac { ( n-1 ) n } { 2 } $$$ ) — length require array require $$$ a $$$ -characteristic test case array $$$ a $$$ give $$$ a $$$ -characteristic $$$ k $$$ print otherwise print yes $$$ n $$$ number $$$ 1 $$$ $$$ -1 $$$ form require array $$$ a $$$ multiple answer print first test case one pair different elements array product $$$ a_1 \cdot a_2 = -1 \neq 1 $$$ hence $$$ a $$$ -characteristic $$$ 0 $$$ second test case one pair different elements array product $$$ a_1 \cdot a_2 = 1 $$$ hence $$$ a $$$ -characteristic $$$ 1 $$$ third test case three pair different elements array product : $$$ a_1 \cdot a_2 = -1 $$$ $$$ a_1 \cdot a_3 = 1 $$$ $$$ a_2 \cdot a_3 = -1 $$$ hence $$$ a $$$ -characteristic $$$ 1 $$$ fourth test case show array length $$$ 3 $$$ $$$ a $$$ -characteristic $$$ 2 $$$,"['constructive algorithms', 'math']",800.0
1810/H,"give a multiset $$$ s $$$ initially $$$ s = \ { 1,2,3 \ldots n\ } $$$ perform follow operation $$$ n-1 $$$ time 's easy show exactly one number leave $$$ n-1 $$$ operations output number test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case description follow test case one single line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 1000000000 $$$ ) — initial size multiset $$$ s $$$ test case output integer denote number leave $$$ n-1 $$$ operations show multiset $$$ s $$$ change $$$ n=4 $$$ thus answer $$$ n = 4 $$$ $$$ 2 $$$",['math'],2900.0
1806/F2,"hard version problem difference two versions constraint $$$ m $$$ make hack versions problem solve give array $$$ a $$$ length $$$ n $$$ two integers $$$ m $$$ $$$ k $$$ element $$$ a $$$ satisfy $$$ 1\le a_i \le m $$$ one operation choose two indices $$$ i $$$ $$$ j $$$ $$$ 1 \le i < j \le |a| $$$ append $$$ \gcd ( a_i a_j ) $$$ back array delete $$$ a_i $$$ $$$ a_j $$$ array note length array decrease one operation find maximum possible sum array perform exactly $$$ k $$$ operations first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 100000 $$$ ) — number test case description test case follow first line test case contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 2 \le n \le 1000000 $$$ ; $$$ 1\le m \le <unknown> 10^ { 18 } $$$ ; $$$ 1 \le k \le n-1 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le m $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case output maximum possible sum array perform $$$ k $$$ operations optimally first test case best way choose $$$ i=1 $$$ $$$ j=3 $$$ first operation final sequence $$$ [ 7,4 ] $$$","['greedy', 'math']",2900.0
1806/D,"give integer $$$ n $$$ array $$$ a $$$ length $$$ n-1 $$$ whose elements either $$$ 0 $$$ $$$ 1 $$$ let us define value a permutation $$$ ^\dagger $$$ $$$ p $$$ length $$$ m-1 $$$ ( $$$ m \leq n $$$ ) follow process let $$$ g $$$ a graph $$$ m $$$ vertices label $$$ 1 $$$ $$$ m $$$ contain edge $$$ i $$$ $$$ 1 $$$ $$$ m-1 $$$ perform follow operations : value $$$ p $$$ number incoming edge vertex $$$ 1 $$$ $$$ g $$$ $$$ k $$$ $$$ 1 $$$ $$$ n-1 $$$ find sum value $$$ k ! $$$ permutations length $$$ k $$$ since value big require compute value modulo $$$ 998\,244\,353 $$$ $$$ ^\dagger $$$ a permutation length $$$ n $$$ array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) $$$ ^\ddagger $$$ weakly connect components a direct graph components undirected version graph formally direct graph $$$ g $$$ define a graph $$$ h $$$ edge $$$ a \to b $$$ $$$ g $$$ add undirected edge $$$ a \leftrightarrow b $$$ $$$ h $$$ weakly connect components $$$ g $$$ components $$$ h $$$ $$$ ^ { <unknown> } $$$ note a vertex edge consider incoming edge first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2\le n\le 500000 $$$ ) second line test case contain $$$ n-1 $$$ integers $$$ a_1 a_2 \ldots a _ { n-1 } $$$ ( $$$ a_i $$$ $$$ 0 $$$ $$$ 1 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 500000 $$$ test case output $$$ n-1 $$$ integers a line $$$ i $$$ -th integer represent answer $$$ k = i $$$ modulo $$$ 998\,244\,353 $$$ consider first test case $$$ k=1 $$$ $$$ 1 $$$ permutation $$$ p $$$ therefore $$$ k=1 $$$ answer $$$ 1 $$$ $$$ k=2 $$$ $$$ 2 $$$ permutations $$$ p $$$ therefore $$$ k=2 $$$ answer $$$ 2 + 1=3 $$$","['dp', 'math']",2500.0
1804/A,give a checkerboard size $$$ 201 \times 201 $$$ i. e. $$$ 201 $$$ row $$$ 201 $$$ columns row checkerboard number $$$ -100 $$$ $$$ 100 $$$ bottom top columns checkerboard number $$$ -100 $$$ $$$ 100 $$$ leave right notation $$$ ( r c ) $$$ denote cell locate $$$ r $$$ -th row $$$ c $$$ -th column a king piece position $$$ ( 0 0 ) $$$ want get position $$$ ( a b ) $$$ soon possible problem king lame second king make exactly one follow five move minimum number second lame king need reach position $$$ ( a b ) $$$ ? first line input contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case follow $$$ t $$$ line contain one test case description test case consist two integers $$$ a $$$ $$$ b $$$ ( $$$ -100 \leq a b \leq 100 $$$ ) — position cell king want reach guarantee either $$$ a \ne 0 $$$ $$$ b \ne 0 $$$ print $$$ t $$$ integers $$$ i $$$ -th integers equal minimum number second lame king need get position want reach $$$ i $$$ -th test case king always start position $$$ ( 0 0 ) $$$ one possible solutions first example : go go right go go right go go leave go one possible solutions second example alternate ` ` go right '' ` ` go '' move $$$ 4 $$$ time one possible solutions third example alternate ` ` go leave '' ` ` skip '' move start ` ` go leave '' thus ` ` go leave '' use $$$ 6 $$$ time ` ` skip '' use $$$ 5 $$$ time,"['greedy', 'math']",800.0
1794/D,"prime factorization a positive integer $$$ m $$$ unique way write $$$ \displaystyle m = p_1^ { e_1 } \cdot p_2^ { e_2 } \cdot \ldots \cdot p_k^ { e_k } $$$ $$$ p_1 p_2 \ldots p_k $$$ prime number $$$ p_1 < p_2 < \ldots < p_k $$$ $$$ e_1 e_2 \ldots e_k $$$ positive integers positive integer $$$ m $$$ $$$ f ( m ) $$$ define multiset number prime factorization $$$ f ( m ) = \ { p_1 e_1 p_2 e_2 \ldots p_k <unknown> } $$$ example $$$ f ( 24 ) = \ { <unknown> } $$$ $$$ f ( 5 ) = \ { <unknown> } $$$ $$$ f ( 1 ) = \ { \ } $$$ give a list consist $$$ 2n $$$ integers $$$ a_1 a_2 \ldots a _ { 2n } $$$ count many positive integers $$$ m $$$ satisfy $$$ f ( m ) = \ { a_1 a_2 \ldots a _ { 2n } \ } $$$ since value may large print modulo $$$ 998\,244\,353 $$$ first line contain one integer $$$ n $$$ ( $$$ 1\le n \le 2022 $$$ ) second line contain $$$ 2n $$$ integers $$$ a_1 a_2 \ldots a _ { 2n } $$$ ( $$$ 1\le a_i\le 1000000 $$$ ) — give list print one integer number positive integers $$$ m $$$ satisfy $$$ f ( m ) = \ { a_1 a_2 \ldots a _ { 2n } \ } $$$ modulo $$$ 998\,244\,353 $$$ first sample two value $$$ m $$$ $$$ f ( m ) = \ { <unknown> } $$$ $$$ <unknown> $$$ $$$ <unknown> $$$ prime factorizations $$$ <unknown> ^ 3\cdot 3 ^ 1 $$$ $$$ <unknown> ^ 1\cdot 3 ^ 3 $$$ second sample five value $$$ m $$$ $$$ f ( m ) = \ { <unknown> } $$$ $$$ 200 <unknown> 288 500 $$$ $$$ 972 $$$ third sample value $$$ m $$$ $$$ f ( m ) = \ { <unknown> } $$$ neither $$$ 1 ^ 4 $$$ $$$ 4 ^ 1 $$$ prime factorizations $$$ 1 $$$ $$$ 4 $$$ prim","['dp', 'math']",1900.0
1793/B,birthday recently fedya give array $$$ a $$$ $$$ n $$$ integers arrange a circle pair neighbor number ( $$$ a_1 $$$ $$$ a_2 $$$ $$$ a_2 $$$ $$$ a_3 $$$ $$$ \ldots $$$ $$$ a _ { n - 1 } $$$ $$$ a_n $$$ $$$ a_n $$$ $$$ a_1 $$$ ) absolute difference equal $$$ 1 $$$ let 's call a local maximum element greater neighbor elements also call a local minimum element less neighbor elements note elements $$$ a_1 $$$ $$$ a_n $$$ neighbor elements unfortunately fedya lose array remember sum local maximums $$$ x $$$ sum local minimums $$$ y $$$ give $$$ x $$$ $$$ y $$$ help fedya find match array minimum length test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) description test case follow line test case contain two integers $$$ x $$$ $$$ y $$$ ( $$$ -10^ { 9 } \le y < x \le 10^ { 9 } $$$ ) — sum local maximums sum local minimums respectively test case first line print one integer $$$ n $$$ — minimum length match array second line print $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -10^ { 9 } \leqslant a_i \leqslant 10^ { 9 } $$$ ) — array elements absolute difference pair neighbor equal $$$ 1 $$$ multiple solutions print guarantee sum $$$ n $$$ test case exceed $$$ 2 \cdot 10^ { 5 } $$$ first test case local maximums number $$$ 3 7 $$$ $$$ 10 $$$ position local minimums number $$$ 1 6 $$$ $$$ 8 $$$ position $$$ x = a_3 + a_7 + a _ { 10 } = 2 + 0 + 1 = 3 $$$ $$$ y = a_1 + a_6 + a_8 = 0 + ( -1 ) + ( -1 ) = -2 $$$ second test case local maximums number $$$ 2 $$$ $$$ 10 $$$ position local minimums number $$$ 1 $$$ $$$ 3 $$$ position $$$ x = a_2 + a _ { 10 } = -1 + 5 = 4 $$$ $$$ y = a_1 + a_3 = -2 + ( -2 ) = -4 $$$ third test case local maximums number $$$ 1 $$$ $$$ 5 $$$ position local minimums number $$$ 3 $$$ $$$ 6 $$$ position,"['constructive algorithms', 'math']",1100.0
1787/E,"give array exactly $$$ n $$$ number $$$ [ 1,2,3 \ldots n ] $$$ along integers $$$ k $$$ $$$ x $$$ partition array exactly $$$ k $$$ non - empty disjoint subsequences bitwise xor number subsequence $$$ x $$$ number exactly one subsequence notice constraints length subsequence a sequence $$$ a $$$ a subsequence a sequence $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) elements example $$$ n = 15 $$$ $$$ k = 6 $$$ $$$ x = 7 $$$ follow scheme valid : follow scheme invalid since $$$ 8 $$$ $$$ 15 $$$ appear : follow scheme invalid since $$$ 3 $$$ appear twice $$$ 1 $$$ $$$ 2 $$$ appear : test contain multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain three integers $$$ n $$$ $$$ k $$$ $$$ x $$$ ( $$$ 1 \le k \le n \le 200000 $$$ ; $$$ 1\le x \le 1000000000 $$$ ) — length array number subsequences require xor 's guarantee sum $$$ n $$$ exceed $$$ 200000 $$$ test case possible partition sequence print ` ` yes '' first line $$$ i $$$ -th follow $$$ k $$$ line first print length $$$ s_i $$$ $$$ i $$$ -th subsequence print $$$ s_i $$$ integers represent elements $$$ i $$$ -th subsequence multiple answer print note print a subsequence order possible partition sequence print ` ` '' first test case construct follow $$$ 6 $$$ subsequences : second test case construct follow $$$ 4 $$$ subsequences : follow solution consider correct test case well :","['constructive algorithms', 'greedy', 'math']",2100.0
1787/A,"give integer $$$ n $$$ find pair integers $$$ ( x y ) $$$ ( $$$ 1\leq x y\leq n $$$ ) $$$ <unknown> <unknown> x = n $$$ first line contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 10000 $$$ ) — number test case test case contain one line a single integer $$$ n $$$ ( $$$ 1\leq n\leq 1000000000 $$$ ) test case possible print two integers $$$ x $$$ $$$ y $$$ ( $$$ 1\leq x y\leq n $$$ ) multiple answer print otherwise print $$$ -1 $$$ third test case $$$ 2 ^ 3 \cdot 3 + 3 ^ 2 \cdot 2 = 42 $$$ $$$ ( 2,3 ) ( 3,2 ) $$$ consider legal solutions fourth test case $$$ 5 ^ 5 \cdot 5 + 5 ^ 5 \cdot 5 = <unknown> $$$ $$$ ( 5,5 ) $$$ a legal solution","['constructive algorithms', 'math']",800.0
1783/A,array $$$ a $$$ call ugly contain least one element equal sum elements array ugly beautiful example : give array $$$ a $$$ $$$ 1 \le a_1 \le a_2 \le \dots \le a_n \le 100 $$$ reorder elements $$$ a $$$ a way result array beautiful note allow insert new elements erase exist ones change order elements $$$ a $$$ allow keep array $$$ a $$$ unchanged beautiful first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 2000 $$$ ) — number test case test case consist two line first line contain one integer $$$ n $$$ ( $$$ 2 \le n \le 50 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_1 \le a_2 \le \dots \le a_n \le 100 $$$ ) test case print answer follow :,"['constructive algorithms', 'math']",800.0
1780/E,"josuke receive a huge undirected weight complete $$$ ^\dagger $$$ graph $$$ g $$$ a gift grandfather graph contain $$$ 10^ { 18 } $$$ vertices peculiarity gift weight edge different vertices $$$ u $$$ $$$ v $$$ equal $$$ \gcd ( u v ) ^\ddagger $$$ josuke decide experiment make a new graph $$$ g ' $$$ , choose two integers $$$ l \le r $$$ delete vertices except vertices $$$ v $$$ $$$ l \le v \le r $$$ also delete edge except remain vertices josuke wonder many different weight $$$ g ' $$$ since count turn huge ask help $$$ ^\dagger $$$ a complete graph a simple undirected graph every pair distinct vertices adjacent $$$ ^\ddagger $$$ $$$ \gcd ( x y ) $$$ denote greatest common divisor ( gcd ) number $$$ x $$$ $$$ y $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case first line test case contain two number $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le 10^ { 18 } $$$ $$$ l \le 1000000000 $$$ ) test case print a single number — number different weight among remain edge picture show graph $$$ 2 $$$ different weight fifth test case one vertex edge originate answer $$$ 0 $$$","['brute force', 'data structures', 'math']",2400.0
1778/B,"give a permutation $$$ p $$$ length $$$ n $$$ array $$$ m $$$ distinct integers $$$ a_1 a_2 \ldots a_m $$$ ( $$$ 1 \le a_i \le n $$$ ) integer $$$ d $$$ let $$$ \mathrm { pos } ( x ) $$$ index $$$ x $$$ permutation $$$ p $$$ array $$$ a $$$ good example permutation $$$ p = [ 4 2 1 3 6 5 ] $$$ $$$ d = 2 $$$ : one move swap two adjacent elements permutation $$$ p $$$ minimum number move need array $$$ a $$$ become good ? show always exist a sequence move array $$$ a $$$ become good a permutation array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain three integers $$$ n $$$ $$$ m $$$ $$$ d $$$ ( $$$ 2\leq n \leq 100000 $$$ $$$ 2\leq m\leq n $$$ $$$ 1 \le d \le n $$$ ) length permutation $$$ p $$$ length array $$$ a $$$ value $$$ d $$$ second line contain $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$ ( $$$ 1\leq p_i \leq n $$$ $$$ p_i \ne p_j $$$ $$$ i \ne j $$$ ) third line contain $$$ m $$$ distinct integers $$$ a_1 a_2 \ldots a_m $$$ ( $$$ 1\leq a_i \leq n $$$ $$$ a_i \ne a_j $$$ $$$ i \ne j $$$ ) sum $$$ n $$$ test case n't exceed $$$ 500000 $$$ test case print minimum number move need array $$$ a $$$ become good first case $$$ pos ( a_1 ) = 1 $$$ $$$ pos ( a_2 ) =3 $$$ make array good one way swap $$$ p_3 $$$ $$$ p_4 $$$ , array $$$ a $$$ good condition $$$ \mathrm { pos } ( a_2 ) \le \mathrm { pos } ( a_1 ) + d $$$ wo n't satisfy second case $$$ pos ( a_1 ) = 1 $$$ $$$ pos ( a_2 ) = 4 $$$ $$$ 3 $$$ move could : third case $$$ pos ( a_1 ) = 1 $$$ $$$ pos ( a_2 ) =3 $$$ $$$ pos ( a_3 ) = 5 $$$ $$$ 2 $$$ move : fourth case $$$ pos ( a_1 ) = 2 $$$ $$$ pos ( a_2 ) = 1 $$$ array $$$ a $$$ already good fifth case $$$ pos ( a_1 ) = 2 $$$ $$$ pos ( a_2 ) = 5 $$$ $$$ 2 $$$ move :","['greedy', 'math']",1300.0
1777/D,"give a tree $$$ n $$$ nod root $$$ 1 $$$ every node a value either $$$ 0 $$$ $$$ 1 $$$ time $$$ t=0 $$$ integer time $$$ t > 0 $$$ value a node become bitwise xor value children time $$$ t - 1 $$$ ; value leave become $$$ 0 $$$ since n't children let $$$ s ( t ) $$$ denote sum value nod time $$$ t $$$ let $$$ f ( a ) $$$ denote sum $$$ s ( t ) $$$ across value $$$ t $$$ $$$ 0 \le t \le 10^ { 100 } $$$ $$$ a $$$ initial assignment $$$ 0 $$$ s $$$ 1 $$$ s tree task find sum $$$ f ( a ) $$$ $$$ 2^n $$$ initial configurations $$$ 0 $$$ s $$$ 1 $$$ s tree print sum modulo $$$ 1000000000 + 7 $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) description test case follow first line test case contain $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number nod tree next $$$ n-1 $$$ line test case contain two integers — $$$ u $$$ $$$ v $$$ indicate edge $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ output sum modulo $$$ 1000000000 + 7 $$$ test case let us find $$$ f ( a ) $$$ configuration $$$ a = [ 0,1,0,0,1,1 ] $$$ ( $$$ a [ i ] $$$ denote value node $$$ i $$$ ) initially ( $$$ t = 0 $$$ ) tree show picture node two value show : number value node $$$ s ( 0 ) $$$ configuration $$$ 3 $$$ $$$ t = 1 $$$ configuration change $$$ [ <unknown> ] $$$ tree look show $$$ s ( 1 ) = 1 $$$ $$$ t = 2 $$$ configuration change $$$ [ <unknown> ] $$$ tree look show $$$ s ( 2 ) = 0 $$$ $$$ t > 2 $$$ graph remain unchanged $$$ s ( t ) = 0 $$$ $$$ t > 2 $$$ , initial configuration $$$ a = [ 0,1,0,0,1,1 ] $$$ value $$$ f ( a ) = 3 + 1 = 4 $$$ process possible $$$ 2^ { 6 } $$$ configurations yield us answer $$$ \textbf { 288 } $$$","['dfs and similar', 'dp', 'math']",1900.0
1777/A,array $$$ a $$$ good pair adjacent elements $$$ a_i $$$ $$$ a _ { i+1 } $$$ ( $$$ 1\le i \lt n $$$ ) different parity note array size $$$ 1 $$$ <unknown> good give array size $$$ n $$$ one operation select pair adjacent elements elements parity delete insert product position find minimum number operations form a good array test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 500 $$$ ) description test case follow first line test case contain integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 10^ { 9 } $$$ ) test case print integer minimum number operations require form a good array consider first test case select $$$ 2 $$$ -nd $$$ 3 $$$ -rd integers apply operation array change $$$ [ 1 \color { red } { 7 } \color { red } { 11 } 2 13 ] $$$ $$$ [ 1 \color { red } { 77 } 2 13 ] $$$ next select $$$ 1 $$$ -st $$$ 2 $$$ -nd integers array change $$$ [ \color { red } { 1 } \color { red } { 77 } 2 13 ] $$$ $$$ [ \color { red } { 77 } 2 13 ] $$$ thus require $$$ 2 $$$ operations prove minimum number operations second test case give array already good require $$$ 0 $$$ operations,"['greedy', 'math']",800.0
1776/G,"first successful edition gabriella ask organize a second wine taste event $$$ 2n - 1 $$$ bottle wine arrange a row either red wine white wine time gabriella already choose type order bottle type win represent a string $$$ s $$$ length $$$ 2n - 1 $$$ $$$ 1 \le i \le 2n - 1 $$$ hold $$$ s_i = \texttt { r } $$$ $$$ i $$$ -th bottle red wine $$$ s_i = \texttt { w } $$$ $$$ i $$$ -th bottle white wine exactly $$$ n $$$ critics invite attend critics number $$$ 1 $$$ $$$ n $$$ like last year critic $$$ j $$$ want taste interval win , bottle position $$$ a_j \ a_j + 1 \ \dots \ b_j $$$ $$$ 1 \le a_j \le b_j \le 2n - 1 $$$ moreover follow additional requirements : gabriella know since event hold a <unknown> region italy critics especially interest white win n't care much red ones ( indeed white wine perfect accompany seafood . ) thus ensure fairness would like critics taste number white win help gabriella find integer $$$ x $$$ ( $$$ 0 \le x \le 2n - 1 $$$ ) exist a valid assignment intervals critics critic taste exactly $$$ x $$$ white win prove least one $$$ x $$$ always exist first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 1000000 $$$ ) — $$$ 2n - 1 $$$ number bottle $$$ n $$$ number critics second line contain a string $$$ s $$$ length $$$ 2n - 1 $$$ represent arrangement win — $$$ i $$$ -th character $$$ s $$$ ( $$$ 1 \le i \le 2n - 1 $$$ ) $$$ \texttt { r } $$$ a red wine $$$ \texttt { w } $$$ a white wine print integer $$$ x $$$ — number white win critic taste prove least one solution exist multiple solutions exist accept first sample $$$ 5 $$$ critics $$$ 10 - 1 = 9 $$$ bottle wine a possible set intervals make critic taste $$$ 2 $$$ white win follow : $$$ [ 2 6 ] $$$ $$$ [ 1 6 ] $$$ $$$ [ 4 8 ] $$$ $$$ [ 1 5 ] $$$ $$$ [ 3 7 ] $$$ note intervals contain least $$$ 5 $$$ bottle second sample $$$ 1 $$$ critic $$$ 2 - 1 = 1 $$$ bottle wine possible interval $$$ [ 1 1 ] $$$ give $$$ x = 0 $$$","['constructive algorithms', 'math', 'strings']",2100.0
1776/D,"soon swerc start experience $$$ 3 $$$ <unknown> team immediately realize contest feature $$$ a $$$ easy problems $$$ b $$$ medium problems $$$ c $$$ hard problems solve a problem take $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ time units depend whether problem easy medium hard regardless difficulty problem last time unit spend solve spend use share computer organize efforts start ( end ) solve problems integer time units give problem solve one contestant ; require a contiguous amount time ( depend difficulty problem ) none $$$ 3 $$$ solve one problem a time start solve a new problem immediately finish one similarly share computer use one a time start use computer ( complete problem currently solve ) immediately someone else stop use give contest last $$$ l $$$ time units find maximum number problems team solve additionally find one way solve maximum number problems input a single line contain four integers $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ l $$$ ( $$$ 0 \leq a b c \leq 10000 $$$ $$$ 0 \le l \le 100000 $$$ ) — number easy medium hard problems duration contest first line print a single integer $$$ n $$$ — maximum number problems team solve , $$$ j $$$ -th follow $$$ n $$$ line print three integers $$$ x_j $$$ $$$ p_j $$$ $$$ q_j $$$ ( $$$ 1 \leq x \leq 3 $$$ $$$ 0 \leq p_j < q_j \leq l $$$ ) — contestant solve $$$ j $$$ -th problem start end time solve $$$ j $$$ -th problem ( measure time units elapse begin contest ) difference $$$ q_j - p_j $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ depend difficulty problem last $$$ n $$$ line provide increase order end time : $$$ q_1 < q_2 < \cdots < q_n $$$ multiple ways solve $$$ n $$$ problems output first sample first contestant solve easy problem time $$$ 0 $$$ time $$$ 2 $$$ second contestant solve a medium problem time $$$ 0 $$$ time $$$ 3 $$$ second sample first contestant solve easy problem time $$$ 0 $$$ time $$$ 2 $$$ also solve a medium problem time $$$ 2 $$$ time $$$ 5 $$$ meantime second contestant solve another medium problem time $$$ 0 $$$ time $$$ 3 $$$ third contestant solve a hard problem time $$$ 0 $$$ time $$$ 4 $$$ third sample contest medium hard problems enough time solve","['constructive algorithms', 'greedy', 'math']",2800.0
1773/J,"give undirected connect graph $$$ n $$$ vertices $$$ m $$$ edge edge associate counter initially equal $$$ 0 $$$ one operation choose arbitrary span tree add value $$$ v $$$ edge span tree determine 's possible make every counter equal target value $$$ x_i $$$ modulo prime $$$ p $$$ provide a sequence operations achieve first line contain three integers $$$ n $$$ $$$ m $$$ $$$ p $$$ — number vertices number edge prime modulus ( $$$ 1 \le n \le 500 $$$ ; $$$ 1 \le m \le 1000 $$$ ; $$$ 2 \le p \le 1000000000 $$$ $$$ p $$$ prime ) next $$$ m $$$ line contain three integers $$$ u_i $$$ $$$ v_i $$$ $$$ x_i $$$ — two endpoints $$$ i $$$ -th edge target value edge 's counter ( $$$ 1 \le u_i v_i \le n $$$ ; $$$ 0 \le x_i < p $$$ ; $$$ u_i \neq v_i $$$ ) graph connect loop may multiple edge two vertices target value counter achieve print -1 . otherwise print $$$ t $$$ — number operations follow $$$ t $$$ line describe sequence operations line start integer $$$ v $$$ ( $$$ 0 \le v < p $$$ ) — counter increment operation , line follow $$$ n - 1 $$$ integers $$$ e_1 $$$ $$$ e_2 $$$ ... $$$ e _ { n - 1 } $$$ ( $$$ 1 \le e_i \le m $$$ ) — edge span tree number operations $$$ t $$$ exceed $$$ 2 m $$$ n't need minimize $$$ t $$$ correct answer within $$$ 2 m $$$ bind accept allow repeat span tree","['constructive algorithms', 'math']",2900.0
1773/G,"genie take part intellectual game game consist $$$ n $$$ question $$$ m $$$ participants number $$$ 1 $$$ $$$ m $$$ genie participant number $$$ 1 $$$ question $$$ i $$$ participant $$$ j $$$ know whether participant answer question correctly goal game last participant stay game game conduct follow first $$$ n $$$ question get shuffle uniformly random ( $$$ n ! $$$ permutations equally likely ) , question ask one one participant answer question participants still game answer question correctly answer question incorrectly nothing happen otherwise participants answer question incorrectly lose leave game $$$ n $$$ question ask participants still game declare winners probability genie win game ? first line contain two integers $$$ n $$$ $$$ m $$$ — number question number participants ( $$$ 1 \le n \le 200000 $$$ ; $$$ 2 \le m \le 17 $$$ ) $$$ i $$$ -th next $$$ n $$$ line contain $$$ m $$$ character $$$ s _ { i 1 } s _ { i 2 } \ldots s _ { i m } $$$ character $$$ s _ { i j } $$$ ' 1 ' participant $$$ j $$$ answer question $$$ i $$$ correctly ' 0 ' otherwise print probability genie win game answer consider correct absolute relative error exceed $$$ 10^ { -9 } $$$ first example a single question genie answer correctly thus win game ( along participants $$$ 2 $$$ $$$ 4 $$$ ) second example one participant leave first ask question another participant leave second ask question participant win probability $$$ \frac { 1 } { 3 } $$$","['dp', 'math']",2800.0
1771/C,hossam $$$ n $$$ trainees assign a number $$$ a_i $$$ $$$ i $$$ -th trainee a pair $$$ i $$$ -th $$$ j $$$ -th ( $$$ i \neq j $$$ ) trainees call successful integer $$$ x $$$ ( $$$ x \geq 2 $$$ ) $$$ x $$$ divide $$$ a_i $$$ $$$ x $$$ divide $$$ a_j $$$ hossam want know a successful pair trainees hossam tire ask help ! input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) number test case a description test case follow first line test case contain integer number $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ) second line test case contain $$$ n $$$ integers number trainee $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ print answer — ` ` yes '' ( without quote ) a successful pair trainees ` ` '' otherwise print letter case first example first trainee second trainee make a successful pair : $$$ a_1 = 32 a_2 = 48 $$$ choose $$$ x = 4 $$$,"['greedy', 'math']",1600.0
1769/A,<unknown> из $$$ n $$$ самокатов едет по <unknown> <unknown> <unknown> в <unknown> б . самокаты <unknown> от $$$ 1 $$$ до $$$ n $$$ для каждого самоката $$$ i $$$ известно что текущее расстояние от него до пункта б равно $$$ a_i $$$ метров при этом $$$ a_1 < a_2 < \ldots < a_n $$$ в частности самокат $$$ 1 $$$ находится ближе всего к пункту б а самокат $$$ n $$$ — дальше всего самокат с номером $$$ i $$$ <unknown> в сторону пункта б со скоростью $$$ i $$$ метров в секунду ( то есть чем ближе самокат в колонне к пункту б тем <unknown> он едет ) так как <unknown> <unknown> самокаты не могут <unknown> друг друга более того <unknown> самокаты в колонне <unknown> <unknown> <unknown> хотя бы в $$$ 1 $$$ метр поэтому <unknown> более <unknown> самокат <unknown> более <unknown> более <unknown> <unknown> дальше ехать со скоростью более медленного <unknown> на расстоянии в $$$ 1 $$$ метр от него определите на <unknown> расстоянии до пункта б будет каждый самокат ровно через одну секунду в первой строке задано одно целое число $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — число самокатов в колонне в $$$ i $$$ -й из следующих $$$ n $$$ строк задано одно целое число $$$ a_i $$$ ( $$$ 1 \le a_i \le 1000 $$$ ; $$$ a_1 < a_2 < \ldots < a_n $$$ ) — текущее расстояние от самоката $$$ i $$$ до пункта б в метрах выведите $$$ n $$$ целых чисел — <unknown> от самокатов $$$ 1 2 \ldots n $$$ до пункта б в метрах через одну секунду в первом тесте самокаты <unknown> не <unknown> друг <unknown> ехать поэтому каждый самокат $$$ i $$$ <unknown> на $$$ i $$$ метров в сторону пункта б . во втором тесте самокаты уже <unknown> в колонне на расстоянии $$$ 1 $$$ метр друг от друга и <unknown> ехать со скоростью самого медленного самоката с номером $$$ 1 $$$,['math'],800.0
1764/B,` ` everybody ! doremy 's perfect math class start ! come best want much iq ! '' today 's math class doremy teach everyone subtraction give a quiz prove pay attention class give a set $$$ s $$$ contain positive integers may perform follow operation ( possibly zero ) number time : need tell doremy maximum possible number integers $$$ s $$$ operations perform optimally prove number finite input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 10000 $$$ ) — number test case description test case follow first line contain integer $$$ n $$$ ( $$$ 2 \le n\le 100000 $$$ ) — size set $$$ s $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1\le a_1 < a_2 < \cdots < a_n \le 1000000000 $$$ ) — positive integers $$$ s $$$ guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot 100000 $$$ test case need output maximum possible number integers $$$ s $$$ prove value finite first test case $$$ x $$$ $$$ y $$$ exist maximum possible number integers $$$ s $$$ $$$ 2 $$$ second test case perform operations number integers $$$ s $$$ $$$ 5 $$$ prove sequence operations allow $$$ s $$$ contain $$$ 5 $$$ integers,['math'],900.0
1759/F,a positive number $$$ x $$$ length $$$ n $$$ base $$$ p $$$ ( $$$ 2 \le p \le 1000000000 $$$ ) write blackboard number $$$ x $$$ give a sequence $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i < p $$$ ) — digits $$$ x $$$ order leave right ( significant least significant ) dmitry fond digits number system want see least one operation : example $$$ p=5 $$$ $$$ <unknown> $$$ task determine minimum number operations require make digits $$$ 0 $$$ $$$ p-1 $$$ appear board least first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 2000 $$$ ) — number test case descriptions input test case follow first line description test case contain two integers $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) $$$ p $$$ ( $$$ 2 \le p \le 1000000000 $$$ ) — length number base number system second line description test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i < p $$$ ) — digits $$$ x $$$ number system base $$$ p $$$ guarantee number $$$ x $$$ contain lead zero ( $$$ a_1 > 0 $$$ ) test case print a single integer — minimum number operations require dmitry get digits board $$$ 0 $$$ $$$ p-1 $$$ show always require a finite number operations,"['data structures', 'greedy', 'math']",1800.0
1758/D,give integer $$$ n $$$ find a sequence $$$ n $$$ distinct integers $$$ a_1 a_2 \dots a_n $$$ $$$ 1 \leq a_i \leq 1000000000 $$$ $$$ i $$$ $$$ $$$ \max ( a_1 a_2 \dots a_n ) - \min ( a_1 a_2 \dots a_n ) = \sqrt { a_1 + a_2 + \dots + a_n } $$$ $$$ prove exist a sequence distinct integers satisfy condition first line input contain $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case first line test case contain one integer $$$ n $$$ ( $$$ 2 \leq n \leq 300000 $$$ ) — length sequence find sum $$$ n $$$ test case exceed $$$ 300000 $$$ test case output $$$ n $$$ space - separated distinct integers $$$ a_1 a_2 \dots a_n $$$ satisfy condition statement several possible answer output please remember integers must distinct ! first test case maximum $$$ 3 $$$ minimum $$$ 1 $$$ sum $$$ 4 $$$ $$$ 3 - 1 = \sqrt { 4 } $$$ second test case maximum $$$ 29 $$$ minimum $$$ 18 $$$ sum $$$ 121 $$$ $$$ 29 - 18 = \sqrt { 121 } $$$ test case integers distinct,"['brute force', 'constructive algorithms', 'math']",1800.0
1744/D,give array positive integers $$$ a_1 a_2 \ldots a_n $$$ make product number array ( $$$ a_1 \cdot a_2 \cdot \ldots \cdot a_n $$$ ) divisible $$$ 2^n $$$ perform follow operation many time like : apply operation repeatedly a single index word select value $$$ i $$$ must different find smallest number operations need perform make product elements array divisible $$$ 2^n $$$ note a set operations always exist first line input contain a single integer $$$ t $$$ $$$ ( 1 \leq t \leq 10000 $$$ ) — number test case descriptions input data set follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — length array $$$ a $$$ second line test case contain exactly $$$ n $$$ integers : $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) guarantee sum $$$ n $$$ value test case a test exceed $$$ 200000 $$$ test case print least number operations make product number array divisible $$$ 2^n $$$ answer exist print -1 . first test case product elements initially $$$ 2 $$$ operations need second test case product elements initially equal $$$ 6 $$$ apply operation $$$ i = 2 $$$ $$$ a_2 $$$ become $$$ <unknown> $$$ product number become $$$ <unknown> $$$ product number divide $$$ 2^n=2 ^ 2=4 $$$ fourth test case even apply possible operations still make product number divisible $$$ 2^n $$$ — $$$ ( <unknown> ) \cdot ( <unknown> ) \cdot ( <unknown> ) \cdot ( 1\cdot4 ) = <unknown> $$$ divide $$$ 2^n=2 ^ 4=16 $$$ fifth test case apply operations $$$ i = 2 $$$ $$$ i = 4 $$$,"['greedy', 'math']",1200.0
1743/G,"note memory limit unusual let 's define sequence fibonacci string follow : $$$ f_0 $$$ 0 $$$ f_1 $$$ 1 $$$ f_i $$$ $$$ f _ { i-1 } + f _ { i-2 } $$$ $$$ i > 1 $$$ ( $$$ + $$$ denote concatenation two string ) , example $$$ f_2 $$$ 10 $$$ f_3 $$$ 101 $$$ f_4 $$$ 10110 . a give string $$$ s $$$ let 's define $$$ g ( s ) $$$ number ways cut several ( number possibly even one ) string none string fibonacci string example $$$ s $$$ <unknown> $$$ g ( s ) = 3 $$$ since three ways cut : give a sequence string $$$ s_1 s_2 \dots s_n $$$ calculate $$$ g ( s_1 ) g ( s_1 + s_2 ) \dots g ( s_1 + s_2 + \ldots + s_n ) $$$ since value huge print modulo $$$ 998244353 $$$ first line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 3000 $$$ ) , $$$ n $$$ line follow $$$ i $$$ -th line contain string $$$ s_i $$$ ( $$$ 1 \le |s_i| \le 1000 $$$ ) consist character 0 and/or 1 . print $$$ n $$$ integers $$$ i $$$ -th integer $$$ g ( s_1 + s_2 + \ldots + s_i ) \bmod 998244353 $$$","['constructive algorithms', 'data structures', 'dp', 'math']",3000.0
1741/F,dmitry $$$ n $$$ segment different color coordinate axis $$$ ox $$$ segment characterize three integers $$$ l_i $$$ $$$ r_i $$$ $$$ c_i $$$ ( $$$ 1 \le l_i \le r_i \le 1000000000 1 \le c_i \le n $$$ ) $$$ l_i $$$ $$$ r_i $$$ coordinate end $$$ i $$$ -th segment $$$ c_i $$$ color dmitry like find minimum distance segment however consider pair segment color uninteresting therefore want know segment distance segment nearest differently color segment distance two segment minimum distance a point first segment a point second segment particular segment intersect distance equal $$$ 0 $$$ example dmitry $$$ 5 $$$ segment : first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case test descriptions test case follow first line description test case contain one integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number segment next $$$ n $$$ line contain descriptions segment segment describe three integers $$$ l_i $$$ $$$ r_i $$$ $$$ c_i $$$ ( $$$ 1 \le l_i \le r_i \le 1000000000 1 \le c_i \le n $$$ ) — coordinate leave right end $$$ i $$$ -th segment well color segment guarantee least $$$ 2 $$$ segment different color guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case a separate line print $$$ n $$$ integers $$$ i $$$ -th number equal distance $$$ i $$$ -th segment nearest segment a different color first test case first sample one segment color $$$ 2 $$$ segment color $$$ 1 $$$ therefore segment color $$$ 1 $$$ answer equal distance $$$ 3 $$$ rd segment $$$ 3 $$$ rd one answer equal minimum distance segment color $$$ 1 $$$ second test case first sample $$$ 2 $$$ segment answer equal distance third test case first sample segment intersect least one end a segment a different color answer equal $$$ 0 $$$ fourth test case first sample describe problem statement fifth test case first sample one segment lie completely inside answer $$$ 0 $$$ sixth test case first sample segment point different color,"['data structures', 'math']",2000.0
1737/F,"a long tough <unknown> day dtl ela go home happily entertain solve competitive program problems prefer short statements already read many long paper documentation work problem day read : give integer $$$ c $$$ suppose $$$ c $$$ $$$ n $$$ divisors find a sequence $$$ n - 1 $$$ integers $$$ [ a_1 a_2 ... a _ { n - 1 } ] $$$ satisfy follow condition : problem $$$ c $$$ big result prime factorization $$$ c $$$ give instead note $$$ \gcd ( x y ) $$$ denote greatest common divisor ( gcd ) integers $$$ x $$$ $$$ y $$$ a prime number a positive integer exactly $$$ 2 $$$ divisors first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) - number test case first line test case contain one integer $$$ m $$$ ( $$$ 1 \le m \le 16 $$$ ) - number prime factor $$$ c $$$ second line test case contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 1 \le b_i < 2^ { 20 } $$$ ) — <unknown> correspond prime factor $$$ c $$$ $$$ c = p_1^ { b_1 } \cdot p_2^ { b_2 } \cdot \ldots \cdot <unknown> { b_m } $$$ $$$ n = ( b_1 + 1 ) ( b_2 + 1 ) \ldots ( b_m + 1 ) $$$ hold $$$ p_i $$$ $$$ i $$$ -th smallest prime number guarantee sum $$$ n \cdot m $$$ test case exceed $$$ 2^ { 20 } $$$ print answer test case one per line sequence give $$$ c $$$ print $$$ -1 $$$ otherwise print $$$ n - 1 $$$ line $$$ i $$$ -th line print $$$ m $$$ space - separated integers $$$ j $$$ -th integer $$$ i $$$ -th line equal exponent $$$ j $$$ -th prime number $$$ a_i $$$ multiple answer print test case value $$$ c $$$ $$$ 6 $$$ $$$ 2 $$$ $$$ 30 $$$ $$$ 16 $$$ $$$ 12 $$$ order first test case $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 6 $$$ divisors $$$ 6 $$$ , sequence $$$ [ 2 6 3 ] $$$ $$$ [ 3 6 2 ] $$$ answer permutation $$$ [ 3 2 6 ] $$$ invalid $$$ \gcd ( a_1 a_2 ) = 1 $$$ a prime number forth test case $$$ 1 $$$ $$$ 2 $$$ $$$ 4 $$$ $$$ 8 $$$ $$$ 16 $$$ divisors $$$ 16 $$$ among permutation sequence $$$ [ 2 4 8 16 ] $$$ valid answer exist","['constructive algorithms', 'math']",3300.0
1735/A,work week consist $$$ n $$$ days number $$$ 1 $$$ $$$ n $$$ day $$$ n $$$ go day $$$ 1 $$$ $$$ 3 $$$ days one days last day day $$$ n $$$ decide two choose days pursue two goals : output maximum value $$$ \min ( |l_1 - l_2| |l_2 - l_3| |l_3 - l_1| ) $$$ obtain first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case description test case follow line test case contain integer $$$ n $$$ ( $$$ 6 \le n \le 1000000000 $$$ ) test case output one integer — maximum possible obtain value image see example solutions first two test case choose days show purple work segment underline green test case $$$ 1 $$$ options days days $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ ( $$$ 1 $$$ $$$ 5 $$$ next day $$$ n $$$ ) way place without select neighbor days choose days $$$ 2 $$$ $$$ 4 $$$ thus $$$ l_1 = l_2 = l_3 = 1 $$$ answer $$$ \min ( |l_1 - l_2| |l_2 - l_3| |l_3 - l_1| ) = 0 $$$ test case $$$ 2 $$$ one possible way choose days show work segment lengths $$$ 2 $$$ $$$ 1 $$$ $$$ 4 $$$ days minimum difference $$$ 1 = \min ( 1 3 2 ) = \min ( |2 - 1| |1 - 4| |4 - 2| ) $$$ show way make larger,"['constructive algorithms', 'greedy', 'math']",800.0
1734/C,"give a set $$$ s $$$ contain first $$$ n $$$ positive integers : $$$ 1 2 \ldots n $$$ perform follow operation $$$ s $$$ number time ( possibly zero ) : give a set $$$ t $$$ a subset $$$ s $$$ find minimum possible total cost operations $$$ s $$$ would transform $$$ t $$$ show a transformation always possible first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) — number test case description test case follow first line contain a single positive integer $$$ n $$$ ( $$$ 1 \le n \le 1000000 $$$ ) second line test case contain a binary string length $$$ n $$$ describe set $$$ t $$$ $$$ i $$$ -th character string ' 1 ' $$$ i $$$ element $$$ t $$$ ' 0 ' otherwise guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case output one non - negative integer — minimum possible total cost operations $$$ s $$$ would transform $$$ t $$$ first test case shall perform operations $$$ s $$$ already equal $$$ t $$$ set $$$ \ { 1 2 3 4 5 6\ } $$$ second test case initially $$$ s = \ { 1 2 3 4 5 6 7\ } $$$ $$$ t = \ { 1 2 4 7\ } $$$ shall perform follow operations : total cost $$$ 3 + 3 + 5 = 11 $$$ show smallest cost possible third test case initially $$$ s = \ { 1 2 3 4\ } $$$ $$$ t = \ { \ } $$$ ( empty set ) shall perform $$$ 4 $$$ operations $$$ k=1 $$$ delete $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ fourth test case initially $$$ s = \ { 1 2 3 4\ } $$$ $$$ t = \ { 3\ } $$$ shall perform two operations $$$ k=1 $$$ delete $$$ 1 $$$ $$$ 2 $$$ perform one operation $$$ k=2 $$$ delete $$$ 4 $$$","['greedy', 'math']",1200.0
1733/E,a conveyor $$$ 120 $$$ row $$$ 120 $$$ columns row column number $$$ 0 $$$ $$$ 119 $$$ cell $$$ i $$$ -th row $$$ j $$$ -th column denote $$$ ( i j ) $$$ top leftmost cell $$$ ( 0 0 ) $$$ cell a belt belt initially face right initially a slime ball belt $$$ ( 0 0 ) $$$ belt empty every second state conveyor change follow : $$$ q $$$ query three integers $$$ t $$$ $$$ x $$$ $$$ y $$$ find a slime cell $$$ ( x y ) $$$ $$$ t $$$ second start ? first line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 10000 $$$ ) — number query line query contain three integers $$$ t $$$ $$$ x $$$ $$$ y $$$ ( $$$ 0 \le t \le 10^ { 18 } $$$ $$$ 0 \le x y < 120 $$$ ) print answer test case one per line a slime ball cell $$$ ( x y ) $$$ $$$ t $$$ second initial state print ` ` yes '' otherwise print ` ` '' state conveyor $$$ t = 0 $$$ red arrow represent direction belt blue figure represent slime state conveyor $$$ t = 1 $$$ state conveyor $$$ t = 2 $$$,"['constructive algorithms', 'dp', 'math']",2700.0
1731/E,give initially empty undirected graph $$$ n $$$ nod number $$$ 1 $$$ $$$ n $$$ ( i. e. $$$ n $$$ nod $$$ 0 $$$ edge ) want add $$$ m $$$ edge graph graph wo n't contain self - loop multiple edge edge connect two nod $$$ u $$$ $$$ v $$$ add weight must equal greatest common divisor $$$ u $$$ $$$ v $$$ i. e. $$$ \gcd ( u v ) $$$ order add edge graph repeat follow process number time ( possibly zero ) : example add $$$ 5 $$$ edge graph weight $$$ 6 $$$ may add cost $$$ 6 $$$ whole pack $$$ 5 $$$ edge add $$$ 4 $$$ edge weight $$$ 6 $$$ graph ca n't perform operation $$$ k = 5 $$$ give two integers $$$ n $$$ $$$ m $$$ find minimum total cost form a graph $$$ n $$$ vertices exactly $$$ m $$$ edge use operation a graph ca n't construct output $$$ -1 $$$ note final graph may consist several connect components test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n \leq 1000000 $$$ ; $$$ 1 \leq m \leq \frac { n ( n-1 ) } { 2 } $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case print minimum cost build graph $$$ -1 $$$ ca n't build a graph first test case add edge vertices $$$ 2 $$$ $$$ 4 $$$ $$$ \gcd = 2 $$$ possible way add $$$ 1 $$$ edge cost $$$ 2 $$$ second test case way add $$$ 10 $$$ edge answer $$$ -1 $$$ third test case add follow edge :,"['dp', 'greedy', 'math']",2000.0
1731/C,"give integer array $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) find number subarrays $$$ a $$$ whose $$$ \operatorname { xor } $$$ even number divisors word find pair indices $$$ ( i j ) $$$ ( $$$ i \le j $$$ ) $$$ a_i \oplus a _ { i + 1 } \oplus \dots \oplus a_j $$$ even number divisors example number $$$ 2 $$$ $$$ 3 $$$ $$$ 5 $$$ $$$ 6 $$$ even number divisors $$$ 1 $$$ $$$ 4 $$$ — odd consider $$$ 0 $$$ odd number divisors task $$$ \operatorname { xor } $$$ ( $$$ \oplus $$$ ) denote bitwise xor operation print number subarrays multiply 2022 ... okay let 's stop print actual answer test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 200000 $$$ ) — length array $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \leq a_i \leq n $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print number subarrays whose $$$ \operatorname { xor } $$$ even number divisors first test case $$$ 4 $$$ subarrays whose $$$ \operatorname { xor } $$$ even number divisors : $$$ [ 3 ] $$$ $$$ [ 3,1 ] $$$ $$$ [ 1,2 ] $$$ $$$ [ 2 ] $$$ second test case $$$ 11 $$$ subarrays whose $$$ \operatorname { xor } $$$ even number divisors : $$$ [ 4,2 ] $$$ $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ $$$ [ 2 ] $$$ $$$ [ 2,1 ] $$$ $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ $$$ [ <unknown> ] $$$ $$$ [ 5 ] $$$ $$$ [ 5,3 ] $$$ $$$ [ 3 ] $$$ third test case subarray whose $$$ \operatorname { xor } $$$ even number divisors since $$$ \operatorname { xor } $$$ subarray either $$$ 4 $$$ $$$ 0 $$$","['brute force', 'math']",1700.0
1728/E,monocarp go host a party friends prepare $$$ n $$$ dish serve first add powder pepper — otherwise dish pretty <unknown> $$$ i $$$ -th dish two value $$$ a_i $$$ $$$ b_i $$$ — tastiness red pepper add black pepper add respectively monocarp wo n't add pepper dish wo n't add pepper multiple time wo n't leave dish without pepper add add pepper monocarp first purchase say pepper shop $$$ m $$$ shop local area $$$ j $$$ -th package red pepper sufficient $$$ x_j $$$ serve package black pepper sufficient $$$ y_j $$$ serve monocarp go exactly one shop purchase multiple ( possibly zero ) package pepper a way dish get pepper add pepper leave formally purchase $$$ x $$$ red pepper package $$$ y $$$ black pepper package $$$ x $$$ $$$ y $$$ non - negative $$$ x \cdot x_j + y \cdot y_j $$$ equal $$$ n $$$ shop determine maximum total tastiness dish monocarp buy pepper package shop add pepper dish 's impossible purchase package say way print -1 . first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 300000 $$$ ) — number dish $$$ i $$$ -th next $$$ n $$$ line contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le 1000000000 $$$ ) — tastiness $$$ i $$$ -th dish red pepper add black pepper add respectively next line contain a single integer $$$ m $$$ ( $$$ 1 \le m \le 300000 $$$ ) — number shop $$$ j $$$ -th next $$$ m $$$ line contain two integers $$$ x_j $$$ $$$ y_j $$$ ( $$$ 1 \le x_j y_j \le n $$$ ) — number serve red black pepper package sufficient $$$ j $$$ -th shop respectively print $$$ m $$$ integers shop print maximum total tastiness dish monocarp buy pepper package shop add pepper dish 's impossible purchase package dish get pepper add pepper leave print -1 . consider first example first shop monocarp buy $$$ 0 $$$ red pepper package $$$ 1 $$$ black pepper package black pepper add dish sum $$$ 10 + 50 + 2 = 62 $$$ second shop monocarp buy number red black pepper package : $$$ 0 $$$ $$$ 3 $$$ $$$ 1 $$$ $$$ 2 $$$ $$$ 2 $$$ $$$ 1 $$$ $$$ 3 $$$ $$$ 0 $$$ optimal choice turn either $$$ 1 $$$ $$$ 2 $$$ $$$ 2 $$$ $$$ 1 $$$ monocarp add black pepper first dish red pepper second dish pepper third dish total $$$ 10 + 100 + 2 = 112 $$$ third shop monocarp buy $$$ 1 $$$ red pepper package $$$ 0 $$$ black pepper package red pepper add dish sum $$$ 5 + 100 + 2 = 107 $$$ fourth shop monocarp buy even total number package since $$$ n $$$ odd 's impossible get exactly $$$ n $$$ package thus answer $$$ -1 $$$,"['brute force', 'data structures', 'greedy', 'math']",2300.0
1725/C,"pak chanek a mirror shape a circle $$$ n $$$ lamps circumference number $$$ 1 $$$ $$$ n $$$ clockwise order length arc lamp $$$ i $$$ lamp $$$ i+1 $$$ $$$ d_i $$$ $$$ 1 \leq i \leq n-1 $$$ meanwhile length arc lamp $$$ n $$$ lamp $$$ 1 $$$ $$$ d_n $$$ pak chanek want colour lamps $$$ m $$$ different colour lamp colour one $$$ m $$$ colour however three different lamps colour three lamps triangle make consider three lamps vertices a right triangle ( triangle one angle exactly $$$ 90 $$$ degrees ) follow examples lamp colour configurations circular mirror colour lamps pak chanek want know number distinct colour configurations make count number distinct possible lamp colour configurations modulo $$$ 998\,244\,353 $$$ first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 300000 $$$ $$$ 2 \le m \le 300000 $$$ ) — number lamps mirror number different colour use second line contain $$$ n $$$ integers $$$ d_1 d_2 \ldots d_n $$$ ( $$$ 1 \le d_i \le 1000000000 $$$ ) — lengths arc lamps mirror integer represent number possible lamp colour configurations modulo $$$ 998\,244\,353 $$$ first example correct lamp colour configurations $$$ [ 1 1 2 1 ] $$$ $$$ [ 1 1 2 2 ] $$$ $$$ [ 1 2 1 2 ] $$$ $$$ [ 1 2 2 1 ] $$$ $$$ [ 1 2 2 2 ] $$$ $$$ [ 2 1 1 1 ] $$$ $$$ [ 2 1 1 2 ] $$$ $$$ [ 2 1 2 1 ] $$$ $$$ [ 2 2 1 1 ] $$$ $$$ [ 2 2 1 2 ] $$$","['geometry', 'math']",2000.0
1725/A,"pak chanek a grid $$$ n $$$ row $$$ m $$$ columns row number $$$ 1 $$$ $$$ n $$$ top bottom column number $$$ 1 $$$ $$$ m $$$ leave right tile grid contain a number number arrange follow : a domino define two different tile grid touch side a domino say tight two number domino a difference exactly $$$ 1 $$$ count number distinct tight dominoes grid two dominoes say distinct exist least one tile one domino , line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 1000000000 $$$ ) — number row columns grid integer represent number distinct tight dominoes grid picture grid pak chanek first example picture example a tight domino grid",['math'],800.0
1720/B,give array $$$ a $$$ contain $$$ n $$$ integers choose proper subsegment $$$ a_l a _ { l + 1 } \ldots a_r $$$ array mean choose two integers $$$ 1 \le l \le r \le n $$$ $$$ r - l + 1 < n $$$ define beauty a give subsegment value follow expression : $$$ $$$ \max ( a _ { 1 } a _ { 2 } \ldots a _ { l-1 } a _ { r+1 } a _ { r+2 } \ldots a _ { n } ) - \min ( a _ { 1 } a _ { 2 } \ldots a _ { l-1 } a _ { r+1 } a _ { r+2 } \ldots a _ { n } ) + \max ( a _ { l } \ldots a _ { r } ) - \min ( a _ { l } \ldots a _ { r } ) $$$ $$$ please find maximum beauty among proper subsegments first line contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case follow descriptions test case first line test case contain a single integer $$$ n $$$ $$$ ( 4 \leq n \leq 100000 ) $$$ — length array second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a _ { i } \leq 1000000000 $$$ ) — elements give array guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ testcase print a single integer — maximum beauty a proper subsegment first test case optimal segment $$$ l = 7 $$$ $$$ r = 8 $$$ beauty segment equal $$$ ( 6 - 1 ) + ( 5 - 1 ) = 9 $$$ second test case optimal segment $$$ l = 2 $$$ $$$ r = 4 $$$ beauty segment equal $$$ ( 100 - 2 ) + ( 200 - 1 ) = <unknown> $$$,"['brute force', 'data structures', 'greedy', 'math']",800.0
1720/A,burenka come <unknown> kindergarten quite strange kid receive two fraction ( $$$ \frac { a } { b } $$$ $$$ \frac { c } { d } $$$ ) integer numerators denominators children command play fraction burenka a clever kid notice clap multiply numerator denominator one two fraction integer choice ( ca n't multiply denominators $$$ 0 $$$ ) want know minimal number clap make fraction equal ( value ) please help find require number clap ! first line contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case follow descriptions test case line test case contain four integers $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ d $$$ ( $$$ 0 \leq a c \leq 1000000000 $$$ $$$ 1 \leq b d \leq 1000000000 $$$ ) — numerators denominators fraction give burenka initially test case print a single integer — minimal number clap burenka need make fraction equal first case burenka multiply $$$ c $$$ $$$ 2 $$$ fraction equal second case fraction already equal third case burenka multiply $$$ a $$$ $$$ 4 $$$ $$$ b $$$ $$$ 3 $$$ fraction equal ( $$$ \frac { 1 \cdot 4 } { 2 \cdot 3 } = \frac { 2 } { 3 } $$$ ),['math'],900.0
1719/B,a new entertainment appear buryatia — a mathematical circus ! magician show two number audience — $$$ n $$$ $$$ k $$$ $$$ n $$$ even next take integers $$$ 1 $$$ $$$ n $$$ split pair $$$ ( a b ) $$$ ( integer must exactly one pair ) pair integer $$$ ( a + k ) \cdot b $$$ divisible $$$ 4 $$$ ( note order number pair matter ) report unfortunately viewers a split impossible burenka really like performances ask friend tonya a magician also give number $$$ n $$$ $$$ k $$$ tonya a wolf know wolves perform circus even a mathematical one therefore ask help let know a suitable split pair possible possible tell first line contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case follow a description input data set single line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \leq n \leq 200000 $$$ $$$ 0 \leq k \leq 1000000000 $$$ $$$ n $$$ even ) — number integers number add $$$ k $$$ guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case first output string ` ` yes '' a split pair ` ` '' none a split follow $$$ \frac { n } { 2 } $$$ line output pair split line print $$$ 2 $$$ number — first integer $$$ a $$$ integer $$$ b $$$ first test case split pair $$$ ( 1 2 ) $$$ $$$ ( 3 4 ) $$$ suitable split $$$ ( 1 4 ) $$$ $$$ ( 3 2 ) $$$ second test case $$$ ( 1 + 0 ) \cdot 2 = 1 \cdot ( 2 + 0 ) = 2 $$$ divisible $$$ 4 $$$ partition,"['constructive algorithms', 'math']",800.0
1716/B,a permutation length $$$ n $$$ a sequence integers $$$ 1 $$$ $$$ n $$$ integer appear exactly let fixedness a permutation $$$ p $$$ number fix point — number position $$$ j $$$ $$$ p_j = j $$$ $$$ p_j $$$ $$$ j $$$ -th element permutation $$$ p $$$ ask build a sequence permutations $$$ a_1 a_2 \dots $$$ start identity permutation ( permutation $$$ a_1 = [ 1 2 \dots n ] $$$ ) let 's call a permutation chain thus $$$ a_i $$$ $$$ i $$$ -th permutation length $$$ n $$$ every $$$ i $$$ $$$ 2 $$$ onwards permutation $$$ a_i $$$ obtain permutation $$$ a _ { i-1 } $$$ swap two elements ( necessarily neighbor ) fixedness permutation $$$ a_i $$$ strictly lower fixedness permutation $$$ a _ { i-1 } $$$ consider chain $$$ n = 3 $$$ : find longest permutation chain multiple longest answer print first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 99 $$$ ) — number testcases line testcase contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 100 $$$ ) — require length permutations chain testcase first print length a permutation chain $$$ k $$$ print $$$ k $$$ permutations $$$ a_1 a_2 \dots a_k $$$ $$$ a_1 $$$ identity permutation length $$$ n $$$ ( $$$ [ 1 2 \dots n ] $$$ ) $$$ i $$$ $$$ 2 $$$ $$$ k $$$ $$$ a_i $$$ obtain swap two elements $$$ a _ { i-1 } $$$ also a strictly lower fixedness $$$ a _ { i-1 } $$$,"['constructive algorithms', 'math']",800.0
1715/B,stanley define beauty array $$$ a $$$ length $$$ n $$$ contain non - negative integers follow : $$$ $$$ \sum\limits _ { i = 1 } ^ { n } \left \lfloor \frac { a _ { i } } { k } \right \rfloor $$$ $$$ mean divide element $$$ k $$$ round sum result value stanley tell sam integer $$$ k $$$ ask find array $$$ a $$$ $$$ n $$$ non - negative integers beauty equal $$$ b $$$ sum elements equal $$$ s $$$ help sam — find array satisfy condition test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) description test case follow first line test case contain integers $$$ n $$$ $$$ k $$$ $$$ b $$$ $$$ s $$$ ( $$$ 1 \leq n \leq 10^ { 5 } $$$ $$$ 1 \leq k \leq 10^ { 9 } $$$ $$$ 0 \leq b \leq 10^ { 9 } $$$ $$$ 0 \leq s \leq 10^ { 18 } $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print $$$ -1 $$$ array $$$ a $$$ exist otherwise print $$$ n $$$ non - negative integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a _ { i } \leq 10^ { 18 } $$$ ) — answer first second fifth sixth test case example possible show array exist third testcase example $$$ a = [ 0 0 19 ] $$$ sum elements equal 19 beauty equal $$$ \left ( \left \lfloor \frac { 0 } { 6 } \right \rfloor + \left \lfloor \frac { 0 } { 6 } \right \rfloor + \left \lfloor \frac { 19 } { 6 } \right \rfloor \right ) = ( 0 + 0 + 3 ) = 3 $$$ fourth testcase example $$$ a = [ 0 3 3 3 29 ] $$$ sum elements equal $$$ 38 $$$ beauty equal $$$ ( 0 + 0 + 0 + 0 + 7 ) = 7 $$$,"['constructive algorithms', 'greedy', 'math']",1000.0
1715/A,stanley megan decide shop ` ` <unknown> '' grocery store represent a matrix $$$ n $$$ row $$$ m $$$ columns stanley megan move adjacent cell use $$$ 1 $$$ unit power two cells consider adjacent share edge speed shop process megan bring portals leave one cell visit ( portal yet ) a person ( stanley megan ) a cell a portal person use $$$ 1 $$$ unit power teleport cell a portal include megan 's start cell decide split : stanley go upper - left cell ( cell coordinate $$$ ( 1 1 ) $$$ ) lower - right cell ( cell coordinate $$$ ( n m ) $$$ ) <unknown> megan need get lower - left cell ( cell coordinate $$$ ( n 1 ) $$$ ) upper - right cell ( cell coordinate $$$ ( 1 m ) $$$ ) minimum total energy need ? note choose time move time affect energy test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) description test case follow line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 100000 $$$ ) test case print a single integer a new line – answer first test case stick follow plan : total energy spend $$$ ( 2 + 6 ) + ( 2 + 1 + 2 ) + ( 2 ) = 15 $$$ final answer,"['constructive algorithms', 'greedy', 'math']",800.0
1712/E2,version problem differ previous one constraint $$$ t $$$ make hack versions problem solve give two positive integers $$$ l $$$ $$$ r $$$ count number distinct triplets integers $$$ ( i j k ) $$$ $$$ l \le i < j < k \le r $$$ $$$ \operatorname { lcm } ( i j k ) \ge i + j + k $$$ $$$ \operatorname { lcm } ( i j k ) $$$ denote least common multiple ( lcm ) integers $$$ i $$$ $$$ j $$$ $$$ k $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ \bf { 1 \le t \le 100000 } $$$ ) description test case follow line test case contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le 200000 $$$ $$$ l + 2 \le r $$$ ) test case print one integer — number suitable triplets first test case $$$ 3 $$$ suitable triplets : second test case $$$ 1 $$$ suitable triplet :,"['brute force', 'data structures', 'math']",2500.0
1700/D,"recently divanovo a huge river lock system build $$$ n $$$ lock $$$ i $$$ -th volume $$$ v_i $$$ liters contain amount water $$$ 0 $$$ $$$ v_i $$$ liters lock a pipe attach pipe open $$$ 1 $$$ liter water enter lock every second lock system build a way immediately transfer water exceed volume lock $$$ i $$$ lock $$$ i + 1 $$$ lock $$$ i + 1 $$$ also full water transfer water exceed volume last lock pour river note volume $$$ i $$$ -th lock may greater volume $$$ i + 1 $$$ -th lock make lock work need completely fill one mayor divanovo interest $$$ q $$$ independent query query suppose initially lock empty pip close , pip open simultaneously $$$ j $$$ -th query mayor ask calculate minimum number pip open lock fill later $$$ t_j $$$ second please help mayor solve tricky problem answer query first line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200\,000 $$$ ) — number lock second line contain $$$ n $$$ integers $$$ v_1 v_2 \dots v_n $$$ ( $$$ 1 \le v_i \le 1000000000 $$$ ) ) — volumes lock third line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 200\,000 $$$ ) — number query next $$$ q $$$ line contain one integer $$$ t_j $$$ ( $$$ 1 \le t_j \le 1000000000 $$$ ) — number second fill lock query $$$ j $$$ print $$$ q $$$ integers $$$ j $$$ -th equal minimum number pip turn $$$ t_j $$$ second lock fill impossible fill lock give time print $$$ -1 $$$ $$$ 6 $$$ query first example test query $$$ 1 3 4 $$$ answer $$$ -1 $$$ need wait $$$ 4 $$$ second fill first lock even open pip sixth query open pip lock $$$ 1 $$$ $$$ 3 $$$ $$$ 4 $$$ $$$ 4 $$$ second lock $$$ 1 $$$ $$$ 4 $$$ full follow $$$ 1 $$$ second $$$ 1 $$$ liter water transfer lock $$$ 2 $$$ $$$ 5 $$$ lock $$$ 3 $$$ fill pipe similarly second query one open pip lock $$$ 1 $$$ $$$ 3 $$$ $$$ 4 $$$ fifth query one open pip $$$ 1 2 3 4 $$$","['dp', 'greedy', 'math']",1900.0
1700/A,give a table $$$ a $$$ size $$$ n \times m $$$ consider table row number top bottom $$$ 1 $$$ $$$ n $$$ columns number leave right $$$ 1 $$$ $$$ m $$$ denote a cell $$$ i $$$ -th row $$$ j $$$ -th column $$$ ( i j ) $$$ cell $$$ ( i j ) $$$ write a number $$$ ( i - 1 ) \cdot m + j $$$ $$$ a _ { ij } = ( i - 1 ) \cdot m + j $$$ a turtle initially stand cell $$$ ( 1 1 ) $$$ want come cell $$$ ( n m ) $$$ cell $$$ ( i j ) $$$ one step go one cells $$$ ( i + 1 j ) $$$ $$$ ( i j + 1 ) $$$ exist a path a sequence cells every two adjacent sequence cells follow satisfy : turtle reach first cell second cell one step a cost a path sum number write cells path example $$$ n = 2 $$$ $$$ m = 3 $$$ table look show turtle take follow path : $$$ ( 1 1 ) \rightarrow ( 1 2 ) \rightarrow ( 1 3 ) \rightarrow ( 2 3 ) $$$ cost way equal $$$ a _ { 11 } + a _ { 12 } + a _ { 13 } + a _ { 23 } = 12 $$$ hand paths $$$ ( 1 1 ) \rightarrow ( 1 2 ) \rightarrow ( 2 2 ) \rightarrow ( 2 1 ) $$$ $$$ ( 1 1 ) \rightarrow ( 1 3 ) $$$ incorrect first path turtle ca n't make a step $$$ ( 2 2 ) \rightarrow ( 2 1 ) $$$ second path ca n't make a step $$$ ( 1 1 ) \rightarrow ( 1 3 ) $$$ ask tell turtle a minimal possible cost a path cell $$$ ( 1 1 ) $$$ cell $$$ ( n m ) $$$ please note cells $$$ ( 1 1 ) $$$ $$$ ( n m ) $$$ a part way first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case description test case follow a single line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 10000 $$$ ) — number row columns table $$$ a $$$ respectively test case output a single integer — a minimal possible cost a path cell $$$ ( 1 1 ) $$$ cell $$$ ( n m ) $$$ first test case possible path consist a single cell $$$ ( 1 1 ) $$$ path minimal cost second test case show statement fourth fifth test case one path $$$ ( 1 1 ) $$$ $$$ ( n m ) $$$ paths visit every cell table,"['constructive algorithms', 'greedy', 'math']",800.0
1692/H,"marian a casino game casino work like round player select a number $$$ 1 $$$ $$$ 1000000000 $$$ , a dice $$$ 1000000000 $$$ face roll a random number $$$ 1 $$$ $$$ 1000000000 $$$ appear player guess number correctly total money double else total money halve marian predict future know number $$$ x_1 x_2 \dots x_n $$$ dice show next $$$ n $$$ round pick three integers $$$ a $$$ $$$ l $$$ $$$ r $$$ ( $$$ l \leq r $$$ ) play $$$ r - l+1 $$$ round ( round $$$ l $$$ $$$ r $$$ inclusive ) round guess number $$$ a $$$ start ( round $$$ l $$$ ) $$$ 1 $$$ dollar marian ask determine integers $$$ a $$$ $$$ l $$$ $$$ r $$$ ( $$$ 1 \leq a \leq 1000000000 $$$ $$$ 1 \leq l \leq r \leq n $$$ ) make money end note halve multiply round precision errors , example a game marian could money equal $$$ \dfrac { 1 } { 1024 } $$$ $$$ \dfrac { 1 } { 128 } $$$ $$$ \dfrac { 1 } { 2 } $$$ $$$ 1 $$$ $$$ 2 $$$ $$$ 4 $$$ etc ( value $$$ <unknown> $$$ $$$ t $$$ integer sign ) first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 2\cdot 100000 $$$ ) — number round second line test case contain $$$ n $$$ integers $$$ x_1 x_2 \dots x_n $$$ ( $$$ 1 \leq x_i \leq 1000000000 $$$ ) $$$ x_i $$$ number fall dice $$$ i $$$ -th round guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case output three integers $$$ a $$$ $$$ l $$$ $$$ r $$$ marian make amount money gamble strategy multiple answer may output first test case best choice $$$ a=4 $$$ $$$ l=1 $$$ $$$ r=5 $$$ game would go follow many possible answer second test case prove marian end $$$ 2 $$$ dollars choice $$$ l = r $$$ appropriate $$$ a $$$ acceptable","['data structures', 'dp', 'greedy', 'math']",1700.0
1691/A,give a sequence $$$ a_1 a_2 \ldots a_n $$$ find minimum number elements remove sequence removal sum every $$$ 2 $$$ consecutive elements even test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 100000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1\leq <unknown> $$$ ) — elements sequence guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print a single integer — minimum number elements remove sequence sum every $$$ 2 $$$ consecutive elements even first test case remove $$$ 3 $$$ sequence become $$$ [ <unknown> ] $$$ pair consecutive elements $$$ \ { [ 2 4 ] [ 4 6 ] [ 6 8 ] \ } $$$ consecutive pair even sum hence need remove $$$ 1 $$$ element satisfy condition ask second test case consecutive pair already even sum need remove element,"['brute force', 'greedy', 'math']",800.0
1687/F,"<unknown> <unknown> permute $$$ n $$$ number : $$$ 1 2 \ldots n $$$ think permutation $$$ p $$$ beautiful $$$ <unknown> _ { i=1 } ^ { n-1 } [ <unknown> = p _ { i+1 } ] $$$ $$$ [ x ] $$$ equal $$$ 1 $$$ $$$ x $$$ hold $$$ 0 $$$ otherwise $$$ <unknown> [ 0 n-1 ] $$$ want know number beautiful permutations length $$$ n $$$ satisfy $$$ <unknown> _ { i=1 } ^ { n-1 } [ p_i < p _ { i+1 } ] $$$ one line contain two intergers $$$ n $$$ ( $$$ 1 \leq n \leq 250\,000 $$$ ) $$$ s $$$ ( $$$ 0 \leq s < n $$$ ) print one line $$$ n $$$ intergers $$$ i $$$ -th integers represent answer $$$ k = i-1 $$$ modulo $$$ 998244353 $$$ let $$$ f ( p ) = \sum\limits _ { i=1 } ^ { n-1 } [ p_i < p _ { i+1 } ] $$$ testcase 1 : $$$ [ 2,1 ] $$$ beautiful permutation $$$ f ( [ 2,1 ] ) = 0 $$$ testcase 2 : beautiful permutations : $$$ [ 1,2,4,3 ] $$$ $$$ [ 1,3,4,2 ] $$$ $$$ [ 1,4,2,3 ] $$$ $$$ [ 2,1,3,4 ] $$$ $$$ [ 2,3,1,4 ] $$$ $$$ [ 3,1,2,4 ] $$$ $$$ [ 3,4,2,1 ] $$$ $$$ [ <unknown> ] $$$ $$$ [ 4,3,1,2 ] $$$ first six satisfy $$$ f ( p ) = 2 $$$ others satisfy $$$ f ( p ) = 1 $$$",['math'],3500.0
1687/E,"<unknown> a <unknown> turn object bigger smaller test a sequence $$$ a $$$ a number $$$ v $$$ whose initial value $$$ 1 $$$ want make $$$ v = \gcd\limits _ { i\ne j } \ { a_i\cdot a_j\ } $$$ $$$ 100000 $$$ operations ( $$$ \gcd\limits _ { i\ne j } \ { a_i\cdot a_j\ } $$$ denote $$$ \gcd $$$ products two distinct elements sequence $$$ a $$$ ) operation pick a subsequence $$$ b $$$ $$$ a $$$ one follow : note need guarantee $$$ v $$$ integer , $$$ v $$$ need a multiple $$$ \mathrm { lcm } ( b ) $$$ perform reduce moreover want guarantee total length $$$ b $$$ choose operations exceed $$$ 1000000 $$$ fine a possible operation sequence n't need minimize anything first line contain a single integer $$$ n $$$ ( $$$ 2\leq n\leq 100000 $$$ ) — size sequence $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \cdots a_n $$$ ( $$$ 1\leq a_i\leq 1000000 $$$ ) — sequence $$$ a $$$ show answer exist first line contain a non - negative integer $$$ k $$$ ( $$$ 0\leq k\leq 100000 $$$ ) — number operations follow $$$ k $$$ line contain several integers line first two integers $$$ f $$$ ( $$$ <unknown> { 0,1\ } $$$ ) $$$ p $$$ ( $$$ 1\le p\le n $$$ ) stand option choose ( $$$ 0 $$$ enlarge $$$ 1 $$$ reduce ) length $$$ b $$$ $$$ p $$$ integers line $$$ i_1 i_2 \ldots i_p $$$ ( $$$ 1\le i_1 < i_2 < \ldots < <unknown> n $$$ ) represent index subsequence formally $$$ b_j = a _ { i_j } $$$ test case 1 : $$$ \gcd\limits _ { i\ne j } \ { a_i\cdot a_j\ } = <unknown> { <unknown> } = 30 $$$ perform $$$ v = v\cdot \operatorname { lcm } \ { a_1 a_2 a_3\ } = 30 $$$ test case 2 : $$$ \gcd\limits _ { i\ne j } \ { a_i\cdot a_j\ } = 8 $$$ perform $$$ v = v\cdot \operatorname { lcm } \ { a_4\ } = 16 $$$ perform $$$ v = \frac { v } { \operatorname { lcm } \ { a_1\ } } = 8 $$$","['constructive algorithms', 'greedy', 'math']",3500.0
1684/G,let 's consider euclid 's algorithm find greatest common divisor $$$ t $$$ a list : array $$$ p $$$ pair positive integers greater $$$ m $$$ initially list $$$ t $$$ empty function run pair $$$ p $$$ list $$$ t $$$ shuffle give find array $$$ p $$$ size greater $$$ 20000 $$$ produce give list $$$ t $$$ tell array exist first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 1000 $$$ $$$ 1 \le m \le 1000000000 $$$ ) — length array $$$ t $$$ constraint integers pair second line contain $$$ n $$$ integers $$$ t_1 t_2 \ldots t_n $$$ ( $$$ 1 \le t_i \le m $$$ ) — elements array $$$ t $$$ $$$ i $$$ -th next $$$ k $$$ line contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le m $$$ ) — $$$ i $$$ -th pair $$$ p $$$ multiple valid answer output first sample let 's consider array $$$ t $$$ pair : total $$$ t = [ 8 3 2 1 6 3 1 ] $$$ input $$$ t $$$ ( a permutation ) second test case impossible find array $$$ p $$$ pair integers greater $$$ 10 $$$ $$$ t = [ 7 1 ] $$$ third test case pair $$$ ( 15 \ 8 ) $$$ array $$$ t $$$ $$$ [ 7 1 ] $$$,"['constructive algorithms', 'math']",2800.0
1680/D,walk dog promenade promenade represent infinite line initially point $$$ 0 $$$ dog decide give freedom dog untie let run a also watch dog write run $$$ i $$$ -th minute dog position change previous position value $$$ a_i $$$ ( mean dog run $$$ a_i $$$ meter $$$ i $$$ -th minute ) $$$ a_i $$$ positive dog run $$$ a_i $$$ meter right otherwise ( $$$ a_i $$$ negative ) run $$$ a_i $$$ meter leave minutes chat friend n't write dog movement minutes value $$$ a_i $$$ equal zero want dog return end walk destination point dog $$$ n $$$ minutes $$$ 0 $$$ wonder : maximum possible number different integer point line dog could visit way replace every $$$ 0 $$$ integer $$$ -k $$$ $$$ k $$$ ( dog return $$$ 0 $$$ walk ) ? dog visit integer point run point reach end minute point $$$ 0 $$$ always visit dog since initially dog return point $$$ 0 $$$ $$$ n $$$ minutes regardless integers place print -1 . first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 3000 ; 1 \le k \le 1000000000 $$$ ) — number minutes maximum possible speed dog minutes without record second line input contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) $$$ a_i $$$ number meter dog run $$$ i $$$ -th minutes ( leave $$$ a_i $$$ negative right otherwise ) $$$ a_i = 0 $$$ value unknown replace integer range $$$ [ -k ; k ] $$$ dog return point $$$ 0 $$$ $$$ n $$$ minutes regardless set integers place print -1 . otherwise print one integer — maximum number different integer point dog could visit fill unknown value optimally dog return point $$$ 0 $$$ end walk,"['brute force', 'greedy', 'math']",2400.0
1679/F,"yura a mathematician <unknown> world absolute solve formal problems a hundred <unknown> <unknown> years problem ! consider non - negative integers interval $$$ [ 0 10^ { n } ) $$$ convenience complement number lead zero way number give interval consist exactly $$$ n $$$ decimal digits give a set pair $$$ ( u_i v_i ) $$$ $$$ u_i $$$ $$$ v_i $$$ distinct decimal digits $$$ 0 $$$ $$$ 9 $$$ consider a number $$$ x $$$ consist $$$ n $$$ digits enumerate digits leave right denote $$$ d_1 d_2 \ldots d_n $$$ one operation swap digits $$$ d_i $$$ $$$ d _ { i + 1 } $$$ a pair $$$ ( u_j v_j ) $$$ set least one follow condition satisfy : call number $$$ x $$$ $$$ y $$$ consist $$$ n $$$ digits equivalent number $$$ x $$$ transform number $$$ y $$$ use number operations describe particular every number consider equivalent give integer $$$ n $$$ a set $$$ m $$$ pair digits $$$ ( u_i v_i ) $$$ find maximum integer $$$ k $$$ exist a set integers $$$ x_1 x_2 \ldots x_k $$$ ( $$$ 0 \le x_i < 10^ { n } $$$ ) $$$ 1 \le i < j \le k $$$ number $$$ x_i $$$ equivalent number $$$ x_j $$$ first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 50\,000 $$$ ) — number digits consider number second line contain integer $$$ m $$$ ( $$$ 0 \le m \le 45 $$$ ) — number pair digits set follow $$$ m $$$ line contain two digits $$$ u_i $$$ $$$ v_i $$$ separate a space ( $$$ 0 \le u_i < v_i \le 9 $$$ ) 's guarantee describe pair pairwise distinct print one integer — maximum value $$$ k $$$ exist a set integers $$$ x_1 x_2 \ldots x_k $$$ ( $$$ 0 \le x_i < 10^ { n } $$$ ) $$$ 1 \le i < j \le k $$$ number $$$ x_i $$$ equivalent number $$$ x_j $$$ answer big enough print number $$$ k $$$ modulo $$$ 998\,244\,353 $$$ first example construct a set contain integers $$$ 0 $$$ $$$ 9 $$$ 's easy see two equivalent number set second example exist a unique pair equivalent number : $$$ 01 $$$ $$$ 10 $$$ construct a set contain integers $$$ 0 $$$ $$$ 99 $$$ despite number $$$ 1 $$$","['dp', 'math']",2600.0
1677/D,"tokitsukaze a permutation $$$ p $$$ perform follow operation $$$ p $$$ exactly $$$ k $$$ time : one operation $$$ i $$$ $$$ 1 $$$ $$$ n - 1 $$$ order $$$ p_i $$$ > $$$ p _ { i+1 } $$$ swap $$$ p_i $$$ $$$ p _ { i+1 } $$$ exactly $$$ k $$$ time operations tokitsukaze get a new sequence $$$ a $$$ obviously sequence $$$ a $$$ also a permutation , tokitsukaze write value sequence $$$ v $$$ $$$ a $$$ paper denote value sequence $$$ v $$$ permutation $$$ a $$$ length $$$ n $$$ $$$ <unknown> _ { j=1 } ^ { i-1 } [ a_i < a_j ] $$$ value $$$ [ a_i < a_j ] $$$ define $$$ a_i < a_j $$$ value $$$ 1 $$$ otherwise $$$ 0 $$$ ( word $$$ v_i $$$ equal number elements greater $$$ a_i $$$ leave position $$$ i $$$ ) tokitsukaze go work three naughty cat tokitsukaze 's house come home find paper value sequence $$$ v $$$ bite cat leave several hole value position could see clearly forget original permutation $$$ p $$$ want know many different permutations $$$ p $$$ value sequence $$$ v $$$ new permutation $$$ a $$$ exactly $$$ k $$$ operations $$$ v $$$ write paper ( take account unclear position ) since answer may large print modulo $$$ 998\,244\,353 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case test case consist two line first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq n \leq 1000000 $$$ ; $$$ 0 \leq k \leq n-1 $$$ ) — length permutation exactly number operations second line contain $$$ n $$$ integers $$$ v_1 v_2 \dots v_n $$$ ( $$$ -1 \leq v_i \leq i-1 $$$ ) — value sequence $$$ v $$$ $$$ v_i = -1 $$$ mean $$$ i $$$ -th position $$$ v $$$ ca n't see clearly guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case print a single integer — number different permutations modulo $$$ 998\,244\,353 $$$ first test case permutation $$$ p= [ 5,4,3,2,1 ] $$$ satisfy constraint condition second test case $$$ 6 $$$ permutations satisfy constraint condition : exactly $$$ 2 $$$ time swap become $$$ a= [ <unknown> ] $$$ whose value sequence $$$ <unknown> [ <unknown> ] $$$","['dp', 'math']",2500.0
1675/A,pet store sale : polycarp $$$ x $$$ dog $$$ y $$$ cat possible able buy food animals store ? dog cat receive one pack suitable food first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case input $$$ t $$$ line give contain a description one test case description consist five integers $$$ a b c x $$$ $$$ y $$$ ( $$$ 0 \le a b c x y \le 100000000 $$$ ) test case a separate line output : output yes case ( example string yes yes yes yes recognize a positive response ),"['greedy', 'math']",800.0
1674/B,berland language consist word exactly two letter moreover first letter a word different second letter combination two different berland letter ( way lowercase letter latin alphabet ) a correct word berland language berland dictionary contain word language word list a way usually order dictionaries formally word $$$ a $$$ come earlier word $$$ b $$$ dictionary one follow condition hold : dictionary look like : give a word $$$ s $$$ berland language task find index dictionary first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 650 $$$ ) — number test case test case consist one line contain $$$ s $$$ — a string consist exactly two different lowercase latin letter ( i. e. a correct word berland language ) test case print one integer — index word $$$ s $$$ dictionary,['math'],800.0
1673/D,"long ago think two finite arithmetic progressions $$$ a $$$ $$$ b $$$ find another sequence $$$ c $$$ contain elements common $$$ a $$$ $$$ b $$$ hard see $$$ c $$$ also a finite arithmetic progression many years forget $$$ a $$$ remember $$$ b $$$ $$$ c $$$ , reason determine find lose arithmetic progression begin eternal search want know many different finite arithmetic progressions exist lose progression $$$ a $$$ two arithmetic progressions consider different differ first term common difference number term may possible infinitely many progressions case wo n't even try look ! print $$$ -1 $$$ case even finite number answer might large , interest find answer modulo $$$ 1000000000 + 7 $$$ first line input contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 100 $$$ ) denote number testcases first line testcase contain three integers $$$ b $$$ $$$ q $$$ $$$ y $$$ ( $$$ -1000000000\leq b\leq 1000000000 $$$ $$$ 1\leq q\leq 1000000000 $$$ $$$ 2\leq y\leq 1000000000 $$$ ) denote first term common difference number term $$$ b $$$ respectively second line testcase contain three integers $$$ c $$$ $$$ r $$$ $$$ z $$$ ( $$$ -1000000000\leq c\leq 1000000000 $$$ $$$ 1\leq r\leq 1000000000 $$$ $$$ 2\leq <unknown> 1000000000 $$$ ) denote first term common difference number term $$$ c $$$ respectively testcase print a single line contain a single integer infinitely many finite arithmetic progressions could lose progression $$$ a $$$ print $$$ -1 $$$ otherwise print number finite arithmetic progressions could lose progression $$$ a $$$ modulo $$$ 1000000000 + 7 $$$ particular finite arithmetic progressions print $$$ 0 $$$ first testcase $$$ b=\ { -3 -2 <unknown> } $$$ $$$ c=\ { <unknown> } $$$ arithmetic progression equal $$$ a $$$ $$$ 5 $$$ present $$$ b $$$ $$$ a $$$ $$$ 5 $$$ present $$$ c $$$ also second testcase $$$ b=\ { -9 -6 <unknown> } $$$ $$$ c=\ { <unknown> } $$$ $$$ 10 $$$ possible arithmetic progressions $$$ a $$$ : third testcase $$$ b=\ { <unknown> } $$$ $$$ c=\ { <unknown> } $$$ infinitely many arithmetic progressions $$$ a $$$ like :",['math'],1900.0
1673/C,"give a positive integer $$$ n $$$ let 's call positive integer $$$ a $$$ without lead zero palindromic remain reverse order digits find number distinct ways express $$$ n $$$ a sum positive palindromic integers two ways consider different frequency least one palindromic integer different example $$$ 5=4 + 1 $$$ $$$ 5=3 + 1 + 1 $$$ consider different $$$ 5=3 + 1 + 1 $$$ $$$ <unknown> + 3 + 1 $$$ consider formally need find number distinct multisets positive palindromic integers sum equal $$$ n $$$ since answer quite large print modulo $$$ 1000000000 + 7 $$$ first line input contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 10000 $$$ ) denote number testcases testcase contain a single line input contain a single integer $$$ n $$$ ( $$$ 1\leq n\leq 4\cdot 10000 $$$ ) — require sum palindromic integers testcase print a single integer denote require answer modulo $$$ 1000000000 + 7 $$$ first testcase $$$ 7 $$$ ways partition $$$ 5 $$$ a sum positive palindromic integers : second testcase total $$$ 77 $$$ ways partition $$$ 12 $$$ a sum positive integers among partition $$$ <unknown> + 10 $$$ $$$ <unknown> + 1 + 10 $$$ $$$ <unknown> $$$ valid partition $$$ 12 $$$ a sum positive palindromic integers $$$ 10 $$$ $$$ 12 $$$ palindromic , $$$ 74 $$$ ways partition $$$ 12 $$$ a sum positive palindromic integers","['brute force', 'dp', 'math']",1500.0
1671/C,"turbulent time come decide buy sugar advance $$$ n $$$ shop around sell sugar : $$$ i $$$ -th shop sell one pack sugar $$$ a_i $$$ coin one pack one customer day order buy several pack need visit several shop another problem price increase day : first day cost $$$ a_i $$$ second day cost $$$ a_i + 1 $$$ third day — $$$ a_i + 2 $$$ shop $$$ i $$$ contrary everyday budget $$$ x $$$ coin word day go buy many pack possible total cost exceed $$$ x $$$ note n't spend amount coin a day ca n't use coin next days eventually cost pack exceed $$$ x $$$ wo n't able buy even a single pack , many pack able buy till moment total ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case next $$$ t $$$ case follow first line test case contain two integers $$$ n $$$ $$$ x $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 1 \le x \le 1000000000 $$$ ) — number shop everyday budget second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — initial cost one pack shop 's guarantee total sum $$$ n $$$ n't exceed $$$ 200000 $$$ test case print one integer — total number pack able buy price exceed everyday budget first test case second test case price high even first day ca n't buy anything third test case buy one pack day one fourth test case buy $$$ 2 $$$ pack first $$$ 500 $$$ days day $$$ 501 $$$ price $$$ [ 501 501 ] $$$ buy $$$ 1 $$$ pack next $$$ 500 $$$ days day $$$ 1001 $$$ price $$$ [ 1001 1001 ] $$$ ca n't buy anymore total buy $$$ 1000 + 500 = 1500 $$$ pack","['brute force', 'greedy', 'math']",1200.0
1667/E,"consider every tree ( connect undirected acyclic graph ) $$$ n $$$ vertices ( $$$ n $$$ odd vertices number $$$ 1 $$$ $$$ n $$$ ) $$$ 2 \le i \le n $$$ $$$ i $$$ -th vertex adjacent exactly one vertex a smaller index $$$ i $$$ ( $$$ 1 \le i \le n $$$ ) calculate number tree $$$ i $$$ -th vertex centroid answer huge output modulo $$$ 998\,244\,353 $$$ a vertex call a centroid removal split tree subtrees $$$ ( n-1 ) /2 $$$ vertices first line contain odd integer $$$ n $$$ ( $$$ 3 \le n < 200000 $$$ $$$ n $$$ odd ) — number vertices tree print $$$ n $$$ integers a single line $$$ i $$$ -th integer answer $$$ i $$$ -th vertex ( modulo $$$ 998\,244\,353 $$$ ) example $$$ 1 $$$ : two possible tree : edge $$$ ( 1 - 2 ) $$$ $$$ ( 1 - 3 ) $$$ — centroid $$$ 1 $$$ ; edge $$$ ( 1 - 2 ) $$$ $$$ ( 2 - 3 ) $$$ — centroid $$$ 2 $$$ answer $$$ 1 1 0 $$$ example $$$ 2 $$$ : $$$ 24 $$$ possible tree example edge $$$ ( 1 - 2 ) $$$ $$$ ( 2 - 3 ) $$$ $$$ ( 3 - 4 ) $$$ $$$ ( 4 - 5 ) $$$ centroid $$$ 3 $$$","['dp', 'math']",3000.0
1660/B,long ago vlad a birthday present a package candy $$$ n $$$ type candy $$$ a_i $$$ candy type $$$ i $$$ ( $$$ 1 \le i \le n $$$ ) vlad decide eat exactly one candy every time choose candy a type currently frequent ( several type choose ) get maximum pleasure eat vlad want eat two candy type a row help figure eat candy without eat two identical candy a row first line input data contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number input test case follow a description $$$ t $$$ test case input two line first line case contain single number $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number type candy package second line case contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — number candy type $$$ i $$$ guarantee sum $$$ n $$$ case exceed $$$ 200000 $$$ output $$$ t $$$ line contain answer correspond test case input answer output ` ` yes '' vlad eat candy plan ` ` '' otherwise output answer case ( example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive answer ) first example necessary eat sweets order : second example candy type impossible eat without eat two identical ones a row third example first a candy type $$$ 2 $$$ eat kind remain kind frequent eat a candy type $$$ 2 $$$,['math'],800.0
1656/H,give two set positive integers $$$ a $$$ $$$ b $$$ find two non - empty subsets $$$ s_a \subseteq a $$$ $$$ s_b \subseteq b $$$ least common multiple ( lcm ) elements $$$ s_a $$$ equal least common multiple ( lcm ) elements $$$ s_b $$$ input consist multiple test case first line input contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 200 $$$ ) number test case test case one line contain two integers $$$ n m $$$ ( $$$ 1 \leq n m \leq 1000 $$$ ) size set $$$ a $$$ $$$ b $$$ respectively next line contain $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 4 \cdot 10^ { 36 } $$$ ) elements $$$ a $$$ next line contain $$$ m $$$ distinct integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 1 \leq b_i \leq 4 \cdot 10^ { 36 } $$$ ) elements $$$ b $$$ sum $$$ n $$$ test case sum $$$ m $$$ test case $$$ 1000 $$$ test case exist two subsets equal least common multiple output one line otherwise output one line yes follow a line two integers $$$ |s_a| |s_b| $$$ ( $$$ 1 \leq |s_a| \leq n $$$ $$$ 1 \leq |s_b| \leq m $$$ ) size subsets $$$ s_a $$$ $$$ s_b $$$ next line contain $$$ |s_a| $$$ integers $$$ x_1 x_2 \ldots x _ { |s_a| } $$$ elements $$$ s_a $$$ follow a line $$$ |s_b| $$$ integers $$$ y_1 y_2 \ldots y _ { |s_b| } $$$ elements $$$ s_b $$$ multiple possible pair subsets print,"['data structures', 'math']",3200.0
1656/D,say a positive integer $$$ n $$$ $$$ k $$$ -good positive integer $$$ k $$$ $$$ n $$$ express a sum $$$ k $$$ positive integers give $$$ k $$$ distinct remainder divide $$$ k $$$ give a positive integer $$$ n $$$ find $$$ k \geq 2 $$$ $$$ n $$$ $$$ k $$$ -good tell a $$$ k $$$ exist input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) — number test case test case consist one line integer $$$ n $$$ ( $$$ 2 \leq n \leq 10^ { 18 } $$$ ) test case print a line a value $$$ k $$$ $$$ n $$$ $$$ k $$$ -good ( $$$ k \geq 2 $$$ ) $$$ -1 $$$ $$$ n $$$ $$$ k $$$ -good $$$ k $$$ multiple valid value $$$ k $$$ print $$$ 6 $$$ a $$$ 3 $$$ -good number since express a sum $$$ 3 $$$ number give different remainder divide $$$ 3 $$$ : $$$ 6 = 1 + 2 + 3 $$$ $$$ 15 $$$ also a $$$ 3 $$$ -good number since $$$ 15 = 1 + 5 + 9 $$$ $$$ 1 5 9 $$$ give different remainder divide $$$ 3 $$$ $$$ 20 $$$ a $$$ 5 $$$ -good number since $$$ 20 = 2 + 3 + 4 + 5 + 6 $$$ $$$ <unknown> $$$ give different remainder divide $$$ 5 $$$,"['constructive algorithms', 'math']",1900.0
1644/F,"array integers $$$ a $$$ let 's define $$$ |a| $$$ number elements let 's denote two function : example $$$ f ( [ 2 2 1 3 5 6 8 ] 2 ) $$$ calculate follow : first replace element array $$$ 2 $$$ copy obtain $$$ [ 2 2 2 2 1 1 3 3 5 5 6 6 8 8 ] $$$ , take first $$$ 7 $$$ elements array obtain result function $$$ [ 2 2 2 2 1 1 3 ] $$$ example $$$ g ( [ 1 1 2 3 5 ] 3 1 ) = [ 3 3 2 1 5 ] $$$ array $$$ a $$$ a parent array $$$ b $$$ : array $$$ a $$$ ancestor array $$$ b $$$ exist a finite sequence array $$$ c_0 c_1 \dots c_m $$$ ( $$$ m \ge 0 $$$ ) $$$ c_0 $$$ $$$ a $$$ $$$ c_m $$$ $$$ b $$$ every $$$ i \in [ 1 m ] $$$ $$$ c _ { i-1 } $$$ a parent $$$ c_i $$$ , problem give two integers $$$ n $$$ $$$ k $$$ goal construct a sequence array $$$ s_1 s_2 \dots s_m $$$ a way : print minimum number array sequence line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n k \le 200000 $$$ ) print one integer — minimum number elements a sequence array meet constraints since answer large output modulo $$$ 998244353 $$$ let 's analyze first example one possible answer first example sequence $$$ [ [ 2 1 2 ] [ 1 2 2 ] ] $$$ every array size $$$ 3 $$$ consist elements $$$ 1 $$$ $$$ 2 $$$ ancestor sequence :",['math'],2900.0
1633/C,monocarp play a computer game game character fight different monsters a fight a character a monster go follow suppose character initially health $$$ h_c $$$ attack $$$ d_c $$$ ; monster initially health $$$ h_m $$$ attack $$$ d_m $$$ fight consist several step : fight end someone 's health become non - positive ( i. e. $$$ 0 $$$ less ) monster 's health become non - positive character win otherwise monster win monocarp 's character currently health equal $$$ h_c $$$ attack equal $$$ d_c $$$ want slay a monster health equal $$$ h_m $$$ attack equal $$$ d_m $$$ fight monocarp spend $$$ k $$$ coin upgrade character 's weapon and/or armor ; upgrade cost exactly one coin weapon upgrade increase character 's attack $$$ w $$$ armor upgrade increase character 's health $$$ a $$$ monocarp 's character slay monster monocarp spend coin upgrade optimally ? first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 50000 $$$ ) — number test case test case consist three line : first line contain two integers $$$ h_c $$$ $$$ d_c $$$ ( $$$ 1 \le h_c \le 10^ { 15 } $$$ ; $$$ 1 \le d_c \le 1000000000 $$$ ) — character 's health attack ; second line contain two integers $$$ h_m $$$ $$$ d_m $$$ ( $$$ 1 \le h_m \le 10^ { 15 } $$$ ; $$$ 1 \le d_m \le 1000000000 $$$ ) — monster 's health attack ; third line contain three integers $$$ k $$$ $$$ w $$$ $$$ a $$$ ( $$$ 0 \le k \le 200000 $$$ ; $$$ 0 \le w \le 10000 $$$ ; $$$ 0 \le a \le 10^ { 10 } $$$ ) — maximum number coin monocarp spend amount add character 's attack weapon upgrade amount add character 's health armor upgrade respectively sum $$$ k $$$ test case exceed $$$ 200000 $$$ test case print yes possible slay monster optimally choose upgrade otherwise print first example monocarp spend one coin upgrade weapon ( damage equal $$$ 5 $$$ ) health battle change follow : $$$ ( h_c h_m ) = ( 25 9 ) \rightarrow ( 25 4 ) \rightarrow ( 5 4 ) \rightarrow ( 5 -1 ) $$$ battle end monocarp 's victory second example monocarp way defeat monster third example monocarp coin ca n't buy upgrade however initial characteristics enough monocarp win fourth example monocarp $$$ 4 $$$ coin defeat monster spend $$$ 2 $$$ coin upgrade weapon $$$ 2 $$$ coin upgrade armor,"['brute force', 'math']",1100.0
1622/B,berland music a music stream service build specifically support berland local artist developers currently work a song recommendation module imagine monocarp get recommend $$$ n $$$ songs number $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th song predict rat equal $$$ p_i $$$ $$$ 1 \le p_i \le n $$$ every integer $$$ 1 $$$ $$$ n $$$ appear exactly word $$$ p $$$ a permutation listen monocarp press either a like a dislike button let vote sequence represent a string $$$ s $$$ $$$ s_i=0 $$$ mean dislike $$$ i $$$ -th song $$$ s_i=1 $$$ mean like service re - evaluate song rat a way : among valid permutations $$$ q $$$ find one smallest value $$$ \sum\limits _ { i=1 } ^n |p_i - q_i| $$$ $$$ |x| $$$ absolute value $$$ x $$$ print permutation $$$ q_1 q_2 \dots q_n $$$ multiple answer print first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number songs second line testcase contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 1 \le p_i \le n $$$ ) — permutation predict rat third line contain a single string $$$ s $$$ consist $$$ n $$$ character character either a $$$ 0 $$$ a $$$ 1 $$$ $$$ 0 $$$ mean monocarp dislike song $$$ 1 $$$ mean like sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print a permutation $$$ q $$$ — re - <unknown> rat songs multiple answer $$$ \sum\limits _ { i=1 } ^n |p_i - q_i| $$$ minimum possible print first testcase exist one permutation $$$ q $$$ like song rat higher dislike song : song $$$ 1 $$$ get rat $$$ 2 $$$ song $$$ 2 $$$ get rat $$$ 1 $$$ $$$ \sum\limits _ { i=1 } ^n |p_i - <unknown> - <unknown> - <unknown> $$$ second testcase monocarp like songs permutations could work permutation minimum sum absolute differences permutation equal $$$ p $$$ cost $$$ 0 $$$,"['data structures', 'greedy', 'math']",1000.0
1619/F,"hat a game <unknown> explanation / <unknown> word ( similar <unknown> ) 's fun try ! problem talk a variant game players sit table everyone play individually ( i.e team individual gamers play ) $$$ n $$$ people gather a room $$$ m $$$ table ( $$$ n \ge 2 m $$$ ) want play hat $$$ k $$$ time thus $$$ k $$$ game play table player play $$$ k $$$ game , distribute among table game game one player play exactly one table a player play different table players want ` ` fair '' schedule game reason look a schedule ( table distribution game ) : example $$$ n=5 $$$ $$$ m=2 $$$ $$$ k=2 $$$ request first item either two players three players play table consider follow schedule : find ` ` fair '' game schedule $$$ n $$$ people play $$$ m $$$ table $$$ k $$$ game first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case test test case consist one line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 2 \le n \le 2\cdot100000 $$$ $$$ 1 \le m \le \lfloor\frac { n } { 2 } \rfloor $$$ $$$ 1 \le k \le 100000 $$$ ) — number people table game respectively guarantee sum $$$ nk $$$ ( $$$ n $$$ multiply $$$ k $$$ ) test case exceed $$$ 2\cdot100000 $$$ test case print a require schedule — a sequence $$$ k $$$ block $$$ m $$$ line block correspond one game a line a block correspond one table line print number players table indices players ( number $$$ 1 $$$ $$$ n $$$ ) play table several require schedule output show a valid solution always exist output additional blank line separate responses different set input","['brute force', 'constructive algorithms', 'greedy', 'math']",2000.0
1593/D2,"problem a complicate version d1 significant differences read whole statement polycarp array $$$ n $$$ ( $$$ n $$$ even ) integers $$$ a_1 a_2 \dots a_n $$$ polycarp conceive a positive integer $$$ k $$$ , polycarp begin perform follow operations array : take index $$$ i $$$ ( $$$ 1 \le i \le n $$$ ) reduce number $$$ a_i $$$ $$$ k $$$ polycarp perform ( possibly zero ) number operations turn least half number array become find maximum $$$ k $$$ a situation possible print $$$ -1 $$$ a number arbitrarily large first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10 $$$ ) — number test case $$$ t $$$ test case follow test case consist two line first line contain even integer $$$ n $$$ ( $$$ 4 \le n \le 40 $$$ ) ( $$$ n $$$ even ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ -1000000 \le a_i \le 1000000 $$$ ) guarantee sum $$$ n $$$ specify give test case exceed $$$ 100 $$$ test case output a separate line integer $$$ k $$$ ( $$$ k \ge 1 $$$ ) — maximum possible number polycarp use operations array $$$ -1 $$$ a number arbitrarily large","['brute force', 'math']",1900.0
1584/A,ivan decide prepare test solve integer equations notice task test follow form : please help ivan solve equations form first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case next line contain descriptions test case line test case contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \leq u v \leq 1000000000 $$$ ) — parameters equation test case print two integers $$$ x $$$ $$$ y $$$ — a possible solution equation satisfy $$$ -10^ { 18 } \leq x y \leq 10^ { 18 } $$$ $$$ ( x y ) \neq ( 0 0 ) $$$ show answer always exist multiple possible solutions print first test case : $$$ \frac { -1 } { 1 } + \frac { 1 } { 1 } = 0 = \frac { -1 + 1 } { 1 + 1 } $$$ second test case : $$$ \frac { -4 } { 2 } + \frac { 9 } { 3 } = 1 = \frac { -4 + 9 } { 2 + 3 } $$$ third test case : $$$ \frac { -18 } { 3 } + \frac { 50 } { 5 } = 4 = \frac { -18 + 50 } { 3 + 5 } $$$ fourth test case : $$$ \frac { -4 } { 6 } + \frac { 9 } { 9 } = \frac { 1 } { 3 } = \frac { -4 + 9 } { 6 + 9 } $$$,['math'],800.0
1580/F,"xymxym cqxym prepare $$$ n $$$ problems codeforces difficulty problem $$$ i $$$ integer $$$ a_i $$$ $$$ a_i \geq 0 $$$ difficulty problems must satisfy $$$ a_i+a _ { i+1 } < m $$$ ( $$$ 1 \leq i < n $$$ ) $$$ a_1+a_n < m $$$ $$$ m $$$ a fix integer xymxym want know many plan difficulty problems modulo $$$ 998\,244\,353 $$$ two plan difficulty $$$ a $$$ $$$ b $$$ different integer $$$ i $$$ ( $$$ 1 \leq i \leq n $$$ ) satisfy $$$ a_i \neq b_i $$$ a single line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n \leq 50\,000 $$$ $$$ 1 \leq m \leq 1000000000 $$$ ) print a single integer — number different plan first test case valid $$$ a $$$ : $$$ [ 0,0,0 ] $$$ $$$ [ 0,0,1 ] $$$ $$$ [ 0,1,0 ] $$$ $$$ [ 1,0,0 ] $$$ $$$ [ 1,0,1 ] $$$ invalid since $$$ a_1+a_n \geq m $$$",['math'],3300.0
1571/B,"alex buy a new novel publish $$$ n $$$ volumes read volumes one one volume take several ( maybe one ) full days read , first day read first volume follow days read either volume read previous day next volume let $$$ v_i $$$ number volume alex read $$$ i $$$ -th day examples : know alex read volume $$$ v_a $$$ day $$$ a $$$ volume $$$ v_c $$$ day $$$ c $$$ want guess volume read day $$$ b $$$ days $$$ a $$$ $$$ c $$$ ( $$$ a < b < c $$$ ) may ambiguity want make valid guess ( i. e. choose volume number $$$ v_b $$$ 's possible alex read volume $$$ v_a $$$ day $$$ a $$$ volume $$$ v_b $$$ day $$$ b $$$ volume $$$ v_c $$$ day $$$ c $$$ ) test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — number volumes novel consist second line test case contain two integers $$$ a $$$ $$$ v_a $$$ ( $$$ 1 \le a \le 98 $$$ ; $$$ 1 \le v_a \le a $$$ ) denote alex read volume $$$ v_a $$$ day $$$ a $$$ third line test case contain two integers $$$ c $$$ $$$ v_c $$$ ( $$$ a + 2 \le c \le 100 $$$ ; $$$ v_a \le v_c \le c $$$ ) denote alex read volume $$$ v_c $$$ day $$$ c $$$ fourth line test case contain one integer $$$ b $$$ ( $$$ a < b < c $$$ ) — day interest 's guarantee input controversial word alex could read volume $$$ v_a $$$ day $$$ a $$$ volume $$$ v_c $$$ day $$$ c $$$ test case print possible index volume alex could read day $$$ b $$$ multiple answer print first test case since alex read volume $$$ 1 $$$ day $$$ 1 $$$ day $$$ 100 $$$ read volume $$$ 1 $$$ day second test case alex could read volume $$$ 1 $$$ $$$ 4 $$$ day $$$ 16 $$$ example could read volume $$$ 1 $$$ day $$$ 1 $$$ day $$$ 15 $$$ volume $$$ 2 $$$ days $$$ 16 $$$ $$$ 17 $$$ volume $$$ 3 $$$ day $$$ 18 $$$ volume $$$ 4 $$$ days $$$ 19 $$$ $$$ 20 $$$ third test case one possible situation : alex read one volume per day day $$$ 42 $$$ read volume $$$ 42 $$$",['math'],1300.0
1569/C,"$$$ n $$$ people gather hold a jury meet upcoming competition $$$ i $$$ -th member jury come $$$ a_i $$$ task want share first jury decide order follow describe task let a permutation $$$ p $$$ number $$$ 1 $$$ $$$ n $$$ ( array size $$$ n $$$ integer $$$ 1 $$$ $$$ n $$$ occur exactly ) discussion go follow : a permutation $$$ p $$$ nice none jury members tell two task a row count number nice permutations answer may really large print modulo $$$ 998\,244\,353 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number jury members second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — number problems $$$ i $$$ -th member jury come sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print one integer — number nice permutations take modulo $$$ 998\,244\,353 $$$ explanation first test case example : two possible permutations $$$ p = [ 1 2 ] $$$ $$$ p = [ 2 1 ] $$$ $$$ p = [ 1 2 ] $$$ process follow : second jury member tell two task a row ( succession ) permutation nice $$$ p = [ 2 1 ] $$$ process follow : permutation nice",['math'],1500.0
1566/A,give two positive integers $$$ n $$$ $$$ s $$$ find maximum possible median array $$$ n $$$ non - negative integers ( necessarily distinct ) sum elements equal $$$ s $$$ a median array integers length $$$ m $$$ number stand $$$ \lceil { \frac { m } { 2 } } \rceil $$$ -th ( round ) position non - decreasing order elements position number start $$$ 1 $$$ example a median array $$$ [ <unknown> ] $$$ $$$ \lceil \frac { m } { 2 } \rceil $$$ -th element $$$ [ <unknown> ] $$$ $$$ 30 $$$ exist definitions median problem use describe definition input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow test case contain a single line two integers $$$ n $$$ $$$ s $$$ ( $$$ 1 \le n s \le 1000000000 $$$ ) — length array require sum elements test case print a single integer — maximum possible median possible array first three test case ( array median underline ) :,"['greedy', 'math']",800.0
1562/F,"know tubular bell ? a musical instrument make <unknown> metal tube orchestra tubular bell use mimic ring bell mike tubular bell ! consist $$$ n $$$ tube tube a length express a integer $$$ l $$$ $$$ r $$$ inclusive clear lengths tube different ( make sense make tube ) also know $$$ r - l+1 = n $$$ formally say mike 's tubular bell describe a permutation $$$ a $$$ length $$$ n $$$ contain number $$$ l $$$ $$$ r $$$ inclusive $$$ a_i $$$ denote length $$$ i $$$ -th tube offer interest task : guess mike 's instrument look like simply must guess permutation mike wo n't tell $$$ l $$$ $$$ r $$$ tell $$$ n $$$ allow ask $$$ n + 5000 $$$ query query name two positive integers $$$ x $$$ $$$ y $$$ $$$ 1 \le x y \le n x \neq y $$$ response query program write mike give $$$ \mathrm { lcm } ( a_x a_y ) $$$ $$$ \mathrm { lcm } ( c d ) $$$ denote least common multiple $$$ c $$$ $$$ d $$$ solve mike 's problem ! test contain multiple test case first line contain one positive integer $$$ t $$$ ( $$$ 1 \le t \le 20 $$$ ) denote number test case description test case follow single line test case contain one positive integer $$$ n $$$ ( $$$ 3 \le n \le 100000 $$$ ) — number tube mike 's tubular bell also $$$ 1 \le l \le r \le 200000 $$$ i.e lengths tube exceed $$$ 200000 $$$ guarantee sum maximal number query ( i.e $$$ n + 5000 $$$ ) test case exceed $$$ 100000 + 5000 $$$ mean sum $$$ n $$$ exceed $$$ 100000 + 5000 - t \cdot 5000 $$$ set input data read one integer $$$ n $$$ allow make $$$ n + 5000 $$$ query want make a query output format ` ` ? $$$ x $$$ $$$ y $$$ ` ` $$$ x $$$ $$$ y $$$ — number tube learn lcm ( least common multiple ) lengths note $$$ 1 \le x y \le n x \neq y $$$ must satisfy interactor return a single integer — the answer query ready print answer print format ` ` ! $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_n $$$ ` ` output answer consider a query include number query query answer output n't forget output line translation reset output buffer otherwise get verdict ` ` idleness limit exceed '' reset buffer use : note interactor adaptive , original permutation fix begin n't depend query hack : use follow format hack : first line contain a single positive integer $$$ t $$$ ( $$$ 1 \le t \le 20 $$$ ) — number input <unknown> a description input data set give first line test case contain one positive integer $$$ n $$$ ( $$$ 3 \le n \le 100000 $$$ ) — the number tube know $$$ 1 \le l \le r \le 200000 $$$ i.e lengths tube exceed $$$ 200000 $$$ second line test case contain array $$$ a $$$ $$$ n $$$ positive integers — lengths tube input dataset remember $$$ l \le a_i \le r $$$ $$$ r - l+1 = n $$$ $$$ a_i $$$ different",['math'],2900.0
1560/D,give integer $$$ n $$$ $$$ 1 $$$ move one follow action : action may perform order number time note delete digit a number contain lead zero delete e.g delete number $$$ <unknown> $$$ digit $$$ 3 $$$ result number $$$ 01 $$$ ( $$$ 1 $$$ ) need perform minimum number action make number power $$$ 2 $$$ ( i.e 's integer $$$ k $$$ ( $$$ k \ge 0 $$$ ) result number equal $$$ 2^k $$$ ) result number must lead zero e.g consider $$$ <unknown> $$$ answer equal $$$ 2 $$$ first let 's add right one digit $$$ 4 $$$ ( result $$$ <unknown> $$$ ) let 's erase digit $$$ 5 $$$ result $$$ 1024 $$$ a power $$$ 2 $$$ e.g consider $$$ <unknown> $$$ answer equal $$$ 3 $$$ let 's erase digits $$$ 8 $$$ three time result $$$ 8 $$$ a power $$$ 2 $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case $$$ t $$$ test case follow test case consist one line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 1000000000 $$$ ) test case output a separate line one integer $$$ m $$$ — minimum number move transform number power $$$ 2 $$$ answer first test case consider answer second test case consider third test case 's enough add right digit $$$ 4 $$$ — number $$$ 6 $$$ turn $$$ 64 $$$ fourth test case let 's add right digit $$$ 8 $$$ erase $$$ 7 $$$ $$$ 5 $$$ — take number turn $$$ 8 $$$ number fifth sixth test case already power two 's need make move seventh test case delete first digit $$$ 3 $$$ ( result $$$ 01 $$$ ) digit $$$ 0 $$$ ( result $$$ 1 $$$ ),"['greedy', 'math', 'strings']",1300.0
1559/A,"mocha a young girl high school learn much interest knowledge teachers especially math teacher recently mocha learn binary system interest bitwise operation day mocha get a sequence $$$ a $$$ length $$$ n $$$ operation select arbitrary interval $$$ [ l r ] $$$ value $$$ i $$$ ( $$$ 0\leq i \leq r - l $$$ ) replace $$$ a _ { l+i } $$$ $$$ a _ { l+i } \ \ & \ a _ { r - i } $$$ time $$$ \ & $$$ denote bitwise operation operation perform number time example $$$ n=5 $$$ array $$$ [ a_1 a_2 a_3 a_4 a_5 ] $$$ mocha select interval $$$ [ 2,5 ] $$$ new array $$$ [ a_1 a_2\ \ & \ a_5 a_3\ \ & \ a_4 a_4\ \ & \ a_3 <unknown> \ & \ a_2 ] $$$ mocha want minimize maximum value sequence best friend help get answer ? test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case test case consist two line first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — length sequence second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) test case print one integer — minimal value maximum value sequence first test case mocha choose interval $$$ [ 1,2 ] $$$ sequence become $$$ [ 0 0 ] $$$ first element $$$ 1\ \ & <unknown> $$$ second element $$$ 2\ \ & \,1 $$$ second test case mocha choose interval $$$ [ 1,3 ] $$$ sequence become $$$ [ 1,1,1 ] $$$ first element $$$ 1\ \ & <unknown> $$$ second element $$$ 1\ \ & \,1 $$$ third element $$$ 3\ \ & \,1 $$$","['constructive algorithms', 'math']",900.0
1558/A,alice borys play tennis a tennis match consist game game one players serve one receive players serve turn : a game alice serve follow a game borys serve vice versa game end a victory one players a game serve player 's say player hold serve a game receive player 's say player break serve know alice $$$ a $$$ game borys $$$ b $$$ game match unknown serve first game find value $$$ k $$$ exactly $$$ k $$$ break could happen match alice borys total test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) description test case follow next $$$ t $$$ line describe one test case contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 0 \le a b \le 100000 $$$ ; $$$ a + b > 0 $$$ ) — number game alice borys respectively guarantee sum $$$ a + b $$$ test case exceed $$$ 200000 $$$ test case print two line first line print a single integer $$$ m $$$ ( $$$ 1 \le m \le a + b + 1 $$$ ) — number value $$$ k $$$ exactly $$$ k $$$ break could happen match second line print $$$ m $$$ distinct integers $$$ k_1 k_2 \ldots k_m $$$ ( $$$ 0 \le k_1 < k_2 < \ldots < k_m \le a + b $$$ ) — seek value $$$ k $$$ increase order first test case number break $$$ 0 $$$ $$$ 3 $$$ could happen match : second test case players could either hold serve ( $$$ 0 $$$ break ) break serve ( $$$ 2 $$$ break ) third test case either $$$ 2 $$$ $$$ 3 $$$ break could happen :,"['brute force', 'math']",1300.0
1557/C,"moamen ezzat play a game create array $$$ a $$$ $$$ n $$$ non - negative integers every element less $$$ 2^k $$$ moamen win $$$ a_1 \ \ & \ a_2 \ \ & \ a_3 \ \ & \ \ldots \ \ & \ a_n \ge a_1 \oplus a_2 \oplus a_3 \oplus \ldots \oplus a_n $$$ $$$ \ & $$$ denote bitwise operation $$$ \oplus $$$ denote bitwise xor operation please calculate number win moamen array $$$ a $$$ result may large print value modulo $$$ 1\,000\,000\,007 $$$ ( $$$ 1000000000 + 7 $$$ ) first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 5 $$$ ) — number test case test case consist one line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n\le 2\cdot 100000 $$$ $$$ 0 \le k \le 2\cdot 100000 $$$ ) test case print a single value — number different array moamen win print result modulo $$$ 1\,000\,000\,007 $$$ ( $$$ 1000000000 + 7 $$$ ) first example $$$ n = 3 $$$ $$$ k = 1 $$$ a result possible array $$$ [ 0,0,0 ] $$$ $$$ [ 0,0,1 ] $$$ $$$ [ 0,1,0 ] $$$ $$$ [ 1,0,0 ] $$$ $$$ [ 1,1,0 ] $$$ $$$ [ 0,1,1 ] $$$ $$$ [ 1,0,1 ] $$$ $$$ [ 1,1,1 ] $$$ moamen win $$$ 5 $$$ : $$$ [ 0,0,0 ] $$$ $$$ [ 1,1,0 ] $$$ $$$ [ 0,1,1 ] $$$ $$$ [ 1,0,1 ] $$$ $$$ [ 1,1,1 ] $$$","['dp', 'math']",1700.0
1557/A,"ezzat array $$$ n $$$ integers ( maybe negative ) want split two non - empty subsequences $$$ a $$$ $$$ b $$$ every element array belong exactly one subsequence value $$$ f ( a ) + f ( b ) $$$ maximum possible value $$$ f ( x ) $$$ average subsequence $$$ x $$$ a sequence $$$ x $$$ a subsequence a sequence $$$ y $$$ $$$ x $$$ obtain $$$ y $$$ deletion several ( possibly zero ) elements average a subsequence sum number subsequence divide size subsequence example average $$$ [ 1,5,6 ] $$$ $$$ ( 1 + 5 + 6 ) <unknown> = <unknown> = 4 $$$ $$$ f ( [ 1,5,6 ] ) = 4 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case test case consist two line first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 3\cdot100000 $$$ test case print a single value — maximum value ezzat achieve answer consider correct absolute relative error exceed $$$ 10^ { -6 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ answer accept $$$ \frac { |a - b| } { \max { ( 1 |b| ) } } \le 10^ { -6 } $$$ first test case array $$$ [ 3 1 2 ] $$$ possible ways split array : second test case array $$$ [ -7 -6 -6 ] $$$ possible ways split array :","['brute force', 'math']",800.0
1553/F,array $$$ a $$$ consist $$$ n $$$ distinct positive integers number $$$ 1 $$$ $$$ n $$$ define $$$ p_k $$$ $$$ $$$ p_k = \sum _ { 1 \le i j \le k } a_i \bmod a_j $$$ $$$ $$$ x \bmod y $$$ denote remainder $$$ x $$$ divide $$$ y $$$ find print $$$ p_1 p_2 \ldots p_n $$$ first line contain $$$ n $$$ — length array ( $$$ 2 \le n \le 200000 $$$ ) second line contain $$$ n $$$ space - separated distinct integers $$$ a_1 \ldots a_n $$$ ( $$$ 1 \le a_i \le 300000 $$$ $$$ a_i \neq a_j $$$ $$$ i \neq j $$$ ) print $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$,"['data structures', 'math']",2300.0
1551/D1,"difference problem d2 n't provide way construct answer problem d2 's a table $$$ n \times m $$$ cells ( $$$ n $$$ row $$$ m $$$ columns ) value $$$ n \cdot m $$$ even a domino a figure consist two cells a common side may horizontal ( one cells right ) vertical ( one cells ) need find whether possible place $$$ \frac { nm } { 2 } $$$ dominoes table exactly $$$ k $$$ horizontal dominoes vertical dominoes overlap must fill whole table first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10 $$$ ) — number test case $$$ t $$$ test case follow test case consist a single line line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \le n m \le 100 $$$ $$$ 0 \le k \le \frac { nm } { 2 } $$$ $$$ n \cdot m $$$ even ) — number row columns horizontal dominoes respectively test case output ` ` yes '' possible place dominoes desire way ` ` '' otherwise may print letter case ( yes yes yes recognize positive answer , recognize negative answer )","['constructive algorithms', 'math']",1700.0
1546/B,aquamoon $$$ n $$$ string length $$$ m $$$ $$$ n $$$ odd number aquamoon go cirno try pair $$$ n $$$ string together make $$$ \frac { n-1 } { 2 } $$$ pair find exactly one string without pair ! rage disrupt pair string pair select position ( least $$$ 1 $$$ $$$ m $$$ ) swap letter two string pair select position example $$$ m = 6 $$$ two string ` ` abcdef '' ` ` <unknown> '' one pair cirno select position $$$ 2 $$$ $$$ 3 $$$ $$$ 6 $$$ swap ' b ' ' y ' ' c ' ' z ' ' f ' ' m ' result string ` ` <unknown> '' ` ` <unknown> '' cirno steal away string without pair shuffle remain string arbitrary order aquamoon find remain $$$ n-1 $$$ string complete <unknown> also remember initial $$$ n $$$ string want know string steal good program help ? problem make interactive mean solution read input give interactor interactor give full input begin print answer solve problem like solve usual non - interactive problem wo n't interaction process thing forget flush output buffer print answer otherwise get ` ` idleness limit exceed '' verdict refer interactive problems guide detail information flush output buffer input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n \leq 100000 $$$ $$$ 1 \leq m \leq 100000 $$$ ) — number string length string respectively next $$$ n $$$ line contain a string length $$$ m $$$ describe original $$$ n $$$ string string consist lowercase latin letter next $$$ n-1 $$$ line contain a string length $$$ m $$$ describe string cirno exchange reorder guarantee $$$ n $$$ odd sum $$$ n \cdot m $$$ test case exceed $$$ 100000 $$$ hack format : first line contain a single integer $$$ t $$$ $$$ t $$$ test case follow follow format : first line contain two integers $$$ n $$$ $$$ m $$$ follow $$$ n $$$ line contain $$$ n $$$ string length $$$ m $$$ describe original string follow $$$ \frac { n-1 } { 2 } $$$ line describe pair contain follow order : index first string $$$ i $$$ ( $$$ 1 \leq i \leq n $$$ ) index second string $$$ j $$$ ( $$$ 1 \leq j \leq n $$$ $$$ i \neq j $$$ ) number exchange position $$$ k $$$ ( $$$ 1 \leq k \leq m $$$ ) list $$$ k $$$ position exchange ( $$$ k $$$ distinct indices $$$ 1 $$$ $$$ m $$$ order ) final line contain a permutation integers $$$ 1 $$$ $$$ n $$$ describe way string reorder string place order indices place permutation steal string index ignore test case print a single line steal string first test case ` ` aaaaa '' ` ` bbbbb '' exchange position ` ` <unknown> '' steal string second test case ` ` aaaa '' ` ` bbbb '' exchange two first position ` ` cccc '' steal string first test hack format :,['math'],1200.0
1543/D2,"hard version problem difference $$$ 2\leq k\leq 100 $$$ make hack versions problem solve interactive problem ! every decimal number a base $$$ k $$$ equivalent individual digits a base $$$ k $$$ number call $$$ k $$$ -its let 's define $$$ k $$$ -itwise xor two $$$ k $$$ -its $$$ a $$$ $$$ b $$$ $$$ ( a + b ) \bmod k $$$ $$$ k $$$ -itwise xor two base $$$ k $$$ number equal new number form take $$$ k $$$ -itwise xor correspond $$$ k $$$ -its $$$ k $$$ -itwise xor two decimal number $$$ a $$$ $$$ b $$$ denote $$$ a\oplus _ { k } b $$$ equal decimal representation $$$ k $$$ -itwise xor base $$$ k $$$ representations $$$ a $$$ $$$ b $$$ number use statement decimal unless specify hack criminal database rockport police department ( rpd ) also know rap sheet order access require a password n't know quite sure lie $$$ 0 $$$ $$$ n-1 $$$ inclusive , decide guess luckily try $$$ n $$$ time without block system system adaptive time make incorrect guess change password specifically password guess $$$ x $$$ guess a different number $$$ y $$$ system change password a number $$$ z $$$ $$$ x\oplus _ { k } z = y $$$ guess password break system first line input contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 10\,000 $$$ ) denote number test case $$$ t $$$ test case follow first line test case contain two integers $$$ n $$$ ( $$$ 1\leq n\leq 2\cdot 100000 $$$ ) $$$ k $$$ $$$ ( 2\leq k\leq 100 ) $$$ guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot 100000 $$$ test case first read two integers $$$ n $$$ $$$ k $$$ may ask $$$ n $$$ query query print a single integer $$$ y $$$ ( $$$ 0\leq y\leq 2\cdot 10000000 $$$ ) let current password $$$ x $$$ , read integer $$$ r $$$ $$$ x = y $$$ read $$$ r=1 $$$ test case solve must continue solve remain test case else read $$$ r=0 $$$ moment password change a number $$$ z $$$ $$$ x\oplus _ { k } z = y $$$ print a query forget output end line flush output otherwise get idleness limit exceed verdict , use : ask invalid query exceed $$$ n $$$ query read $$$ r=-1 $$$ receive wrong answer verdict make sure exit immediately avoid unexpected verdicts note interactor adaptive , original password fix begin may depend query guarantee moment least one initial password answer query consistent hack : use hack use follow format test : first line contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 10\,000 $$$ ) — number test case first line test case contain two integers $$$ n $$$ ( $$$ 1\leq n\leq 2\cdot 100000 $$$ ) $$$ k $$$ ( $$$ 2\leq k\leq 100 $$$ ) denote number query base respectively optimal original password automatically decide adaptive interactor must ensure sum $$$ n $$$ test case exceed $$$ 2\cdot 100000 $$$ test case 1 : case hide password $$$ 2 $$$ first query $$$ 3 $$$ equal current password , $$$ 0 $$$ return password change $$$ 1 $$$ since $$$ 2\oplus_2 1=3 $$$ second query $$$ 4 $$$ equal current password , $$$ 0 $$$ return password change $$$ 5 $$$ since $$$ 1\oplus_2 5=4 $$$ third query $$$ 5 $$$ equal current password , $$$ 1 $$$ return job do test case 2 : case hide password $$$ 3 $$$ first query $$$ 1 $$$ equal current password , $$$ 0 $$$ return password change $$$ 7 $$$ since $$$ 3\oplus_3 7=1 $$$ $$$ [ 3= ( 10 ) _ 3 $$$ $$$ 7= ( 21 ) _ 3 $$$ $$$ <unknown> ( 01 ) _ 3 $$$ $$$ ( 10 ) _ 3\oplus_3 ( 21 ) _ 3 = ( 01 ) _ 3 ] $$$ second query $$$ 4 $$$ equal current password , $$$ 0 $$$ return password change $$$ 6 $$$ since $$$ <unknown> <unknown> $$$ $$$ [ 7= ( 21 ) _ 3 $$$ $$$ <unknown> ( 20 ) _ 3 $$$ $$$ <unknown> ( 11 ) _ 3 $$$ $$$ ( 21 ) _ 3\oplus_3 ( 20 ) _ 3 = ( 11 ) _ 3 ] $$$ third query $$$ 6 $$$ equal current password , $$$ 1 $$$ return job do note initial passwords take sake explanation reality grader might behave differently adaptive","['brute force', 'constructive algorithms', 'math']",2200.0
1543/B,"highway 201 busy street rockport traffic cars cause a lot <unknown> race especially a lot track pass highway divide $$$ n $$$ sub - <unknown> give array $$$ a $$$ $$$ a_i $$$ represent number traffic cars $$$ i $$$ -th sub - track define inconvenience track $$$ \sum\limits _ { i=1 } ^ { n } \sum\limits _ { j = i+1 } ^ { n } \lvert a_i - <unknown> $$$ $$$ |x| $$$ absolute value $$$ x $$$ perform follow operation ( possibly zero ) number time : choose a traffic car move current sub - track sub - track find minimum inconvenience achieve first line input contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 10\,000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1\leq n\leq 2\cdot 100000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0\leq a_i\leq 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot 100000 $$$ test case print a single line contain a single integer : minimum inconvenience achieve apply give operation ( possibly zero ) number time first test case move a car $$$ 3 $$$ -rd sub - track $$$ 1 $$$ -st sub - track obtain $$$ 0 $$$ inconvenience second test case move car wo n't decrease inconvenience track","['greedy', 'math']",900.0
1542/B,infinite set generate follow : example $$$ a=3 $$$ $$$ b=6 $$$ five smallest elements set : give positive integers $$$ a $$$ $$$ b $$$ $$$ n $$$ determine $$$ n $$$ set input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1\leq t\leq 100000 $$$ ) — number test case description test case follow line describe test case contain three integers $$$ n $$$ $$$ a $$$ $$$ b $$$ ( $$$ 1\leq n a b\leq 1000000000 $$$ ) separate a single space test case print ` ` yes '' $$$ n $$$ set ` ` '' otherwise print letter case first test case $$$ 24 $$$ generate follow : thus see $$$ 24 $$$ set five smallest elements set second test case describe statements see $$$ 10 $$$ n't among,"['constructive algorithms', 'math']",1500.0
1542/A,"give a multiset ( i. e. a set contain multiple equal integers ) contain $$$ 2n $$$ integers determine split exactly $$$ n $$$ pair ( i. e. element exactly one pair ) sum two elements pair odd ( i. e. divide $$$ 2 $$$ remainder $$$ 1 $$$ ) input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1\leq t\leq 100 $$$ ) — number test case description test case follow first line test case contain integer $$$ n $$$ ( $$$ 1\leq n\leq 100 $$$ ) second line test case contain $$$ 2n $$$ integers $$$ a_1 a_2 \dots a _ { 2n } $$$ ( $$$ 0\leq a_i\leq 100 $$$ ) — number set test case print ` ` yes '' split exactly $$$ n $$$ pair sum two elements pair odd ` ` '' otherwise print letter case first test case a possible way split set $$$ ( 2,3 ) $$$ $$$ ( 4,5 ) $$$ second third fifth test case prove n't possible way fourth test case a possible way split set $$$ ( 2,3 ) $$$",['math'],800.0
1538/C,give array $$$ a $$$ $$$ n $$$ integers find number pair $$$ ( i j ) $$$ ( $$$ 1 \le i < j \le n $$$ ) sum $$$ a_i + a_j $$$ greater equal $$$ l $$$ less equal $$$ r $$$ ( $$$ l \le a_i + a_j \le r $$$ ) example $$$ n = 3 $$$ $$$ a = [ 5 1 2 ] $$$ $$$ l = 4 $$$ $$$ r = 7 $$$ two pair suitable : first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) $$$ t $$$ test case follow first line test case contain three integers $$$ n l r $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 1 \le l \le r \le 1000000000 $$$ ) — length array limit sum pair second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) guarantee sum $$$ n $$$ overall test case exceed $$$ 200000 $$$ test case output a single integer — number index pair $$$ ( i j ) $$$ ( $$$ i < j $$$ ) $$$ l \le a_i + a_j \le r $$$,"['data structures', 'math']",1300.0
1536/E,omkar 's recent follower ajit enter holy forest ajit realize omkar 's forest $$$ n $$$ $$$ m $$$ grid ( $$$ 1 \leq n m \leq 2000 $$$ ) non - negative integers since forest bless omkar satisfy special condition : unfortunately ajit fully worthy omkar 's power yet see cell a ` ` 0 '' a ` ` # '' a cell label ` ` 0 '' number must equal $$$ 0 $$$ otherwise number nonnegative integer determine many different assignments elements exist special condition satisfy two assignments consider different exist least one cell number write assignments different since answer may enormous find answer modulo $$$ 1000000000 + 7 $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 2000 nm \geq 2 $$$ ) – dimension forest $$$ n $$$ line follow consist one string $$$ m $$$ character character either a ` ` 0 '' a ` ` # '' guarantee sum $$$ n $$$ test case exceed $$$ 2000 $$$ sum $$$ m $$$ test case exceed $$$ 2000 $$$ test case print one integer : number valid configurations modulo $$$ 1000000000 + 7 $$$ first test case two valid assignments $$$ 0000\\ 0000\\ 0000 $$$ $$$ 0000\\ <unknown> 0000 $$$,['math'],2300.0
1530/F,"get ready vk fest 2021 prepare a table $$$ n $$$ row $$$ n $$$ columns fill cell table event relate festival could either happen : example whether win a prize festival whether rain forecast algorithms use vk already estimate probability event happen event row $$$ i $$$ column $$$ j $$$ happen probability $$$ a _ { i j } \cdot 10^ { -4 } $$$ events mutually independent let 's call table win exist a line $$$ n $$$ events happen line could horizontal line ( cells $$$ ( i 1 ) ( i 2 ) \ldots ( i n ) $$$ $$$ i $$$ ) vertical line ( cells $$$ ( 1 j ) ( 2 j ) \ldots ( n j ) $$$ $$$ j $$$ ) main diagonal ( cells $$$ ( 1 1 ) ( 2 2 ) \ldots ( n n ) $$$ ) <unknown> ( cells $$$ ( 1 n ) ( 2 n - 1 ) \ldots ( n 1 ) $$$ ) find probability table win output modulo $$$ 31\,607 $$$ ( see output section ) first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 21 $$$ ) — dimension table $$$ i $$$ -th next $$$ n $$$ line contain $$$ n $$$ integers $$$ a _ { i 1 } a _ { i 2 } \ldots a _ { i n } $$$ ( $$$ 0 < a _ { i j } < 10000 $$$ ) probability event cell $$$ ( i j ) $$$ happen $$$ a _ { i j } \cdot 10^ { -4 } $$$ print probability table win modulo $$$ 31\,607 $$$ formally let $$$ m = 31\,607 $$$ show answer express irreducible fraction $$$ \frac { p } { q } $$$ $$$ p $$$ $$$ q $$$ integers $$$ q \not \equiv 0 \pmod { m } $$$ output integer equal $$$ p \cdot q^ { -1 } \bmod m $$$ word output integer $$$ x $$$ $$$ 0 \le x < m $$$ $$$ x \cdot q \equiv p \pmod { m } $$$ first example two events form a line table win two events happen probability $$$ \frac { 11 } { 16 } $$$ $$$ <unknown> \equiv 11 \pmod { 31\,607 } $$$","['dp', 'math']",2600.0
1526/E,upon a time oolimry saw a suffix array wonder many string produce suffix array formally give a suffix array length $$$ n $$$ alphabet size $$$ k $$$ count number string produce a suffix array let $$$ s $$$ a string length $$$ n $$$ $$$ i $$$ -th suffix $$$ s $$$ substring $$$ s [ i \ldots n-1 ] $$$ a suffix array array integers represent start index suffix a give string suffix sort lexicographic order example suffix array oolimry $$$ [ <unknown> ] $$$ array sort suffix $$$ [ \texttt { <unknown> } \texttt { <unknown> } \texttt { <unknown> } \texttt { <unknown> } \texttt { oolimry } \texttt { ry } \texttt { y } ] $$$ a string $$$ x $$$ lexicographically smaller string $$$ y $$$ either $$$ x $$$ a prefix $$$ y $$$ ( $$$ x\neq y $$$ ) exist $$$ i $$$ $$$ x_i < y_i $$$ $$$ 1\leq j < i $$$ $$$ x_j = y_j $$$ first line contain 2 integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq n \leq <unknown> \leq k \leq 200000 $$$ ) — length suffix array alphabet size respectively second line contain $$$ n $$$ integers $$$ s_0 s_1 s_2 \ldots s _ { n-1 } $$$ ( $$$ 0 \leq s_i \leq n-1 $$$ ) $$$ s_i $$$ $$$ i $$$ -th element suffix array i.e start position $$$ i $$$ -th lexicographically smallest suffix guarantee $$$ 0 \leq i < j \leq n-1 $$$ $$$ s_i \neq s_j $$$ print many string produce a suffix array since number large print answer modulo $$$ 998244353 $$$ first test case ` ` abb '' possible solution second test case easily show possible string exist letter equal fourth test case one possible string ` ` <unknown> '' please remember print answer modulo $$$ 998244353 $$$,"['constructive algorithms', 'math']",2400.0
1521/B,"nastia receive array $$$ n $$$ positive integers a gift call array $$$ a $$$ good $$$ i $$$ ( $$$ 2 \le i \le n $$$ ) take place $$$ gcd ( a _ { i - 1 } a _ { i } ) = 1 $$$ $$$ gcd ( u v ) $$$ denote greatest common divisor ( gcd ) integers $$$ u $$$ $$$ v $$$ perform operation : select two different indices $$$ i j $$$ ( $$$ 1 \le i j \le n $$$ $$$ i \neq j $$$ ) two integers $$$ x y $$$ ( $$$ 1 \le x y \le 2000000000 $$$ ) $$$ \min { ( a_i a_j ) } = \min { ( x y ) } $$$ change $$$ a_i $$$ $$$ x $$$ $$$ a_j $$$ $$$ y $$$ girl ask make array good use $$$ n $$$ operations prove always possible first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a _ { n } $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — array nastia receive a gift 's guarantee sum $$$ n $$$ one test n't exceed $$$ 200000 $$$ $$$ t $$$ test case print a single integer $$$ k $$$ ( $$$ 0 \le k \le n $$$ ) — number operations n't need minimize number next $$$ k $$$ line print $$$ 4 $$$ integers $$$ i $$$ $$$ j $$$ $$$ x $$$ $$$ y $$$ ( $$$ 1 \le i \neq j \le n $$$ $$$ 1 \le x y \le 2000000000 $$$ ) $$$ \min { ( a_i a_j ) } = \min { ( x y ) } $$$ — manner replace $$$ a_i $$$ $$$ x $$$ $$$ a_j $$$ $$$ y $$$ multiple answer print consider first test case initially $$$ a = [ 9 6 3 11 15 ] $$$ first operation replace $$$ a_1 $$$ $$$ 11 $$$ $$$ a_5 $$$ $$$ 9 $$$ 's valid $$$ \min { ( a_1 a_5 ) } = \min { ( 11 9 ) } = 9 $$$ $$$ a = [ 11 6 3 11 9 ] $$$ second operation replace $$$ a_2 $$$ $$$ 7 $$$ $$$ a_5 $$$ $$$ 6 $$$ 's valid $$$ \min { ( a_2 a_5 ) } = \min { ( 7 6 ) } = 6 $$$ $$$ a = [ 11 7 3 11 6 ] $$$ — a good array second test case initial array already good","['constructive algorithms', 'math']",1300.0
1520/E,"play game ` ` arrange sheep '' goal game make sheep line level game describe a string length $$$ n $$$ consist character ' . ' ( empty space ) ' * ' ( sheep ) one move move sheep one square leave one square right correspond square exist empty game end soon sheep line , empty cells sheep example $$$ n=6 $$$ level describe string ` ` * * . *   ` ` follow game scenario possible : a give level determine minimum number move need make complete level first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 1000000 $$$ ) second line test case contain a string length $$$ n $$$ consist character ' . ' ( empty space ) ' * ' ( sheep ) — description level guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case output minimum number move need make complete level","['greedy', 'math']",1400.0
1519/B,a $$$ n \times m $$$ grid stand cell $$$ ( 1 1 ) $$$ goal finish cell $$$ ( n m ) $$$ move neighbor cells right word suppose stand cell $$$ ( x y ) $$$ : reach cell $$$ ( n m ) $$$ spend exactly $$$ k $$$ burl ? first line contain single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case first line test case contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \le n m \le 100 $$$ ; $$$ 0 \le k \le 10000 $$$ ) — size grid exact amount money need spend test case reach cell $$$ ( n m ) $$$ spend exactly $$$ k $$$ burl print yes otherwise print may print every letter case want ( example string yes yes yes yes recognize positive answer ) first test case already final cell spend $$$ 0 $$$ burl second third fourth test case two paths $$$ ( 1 1 ) $$$ $$$ ( 2 2 ) $$$ : $$$ ( 1 1 ) $$$ $$$ \rightarrow $$$ $$$ ( 1 2 ) $$$ $$$ \rightarrow $$$ $$$ ( 2 2 ) $$$ $$$ ( 1 1 ) $$$ $$$ \rightarrow $$$ $$$ ( 2 1 ) $$$ $$$ \rightarrow $$$ $$$ ( 2 2 ) $$$ cost $$$ 1 + 2 = 3 $$$ burl 's amount money spend fifth test case way $$$ ( 1 1 ) $$$ $$$ ( 1 4 ) $$$ cost $$$ 1 + 1 + 1 = 3 $$$ burl,"['dp', 'math']",800.0
1516/E,time around baby ehab play permutations $$$ n $$$ cub arrange a row number $$$ 1 $$$ $$$ n $$$ write 'll make exactly $$$ j $$$ operations operation 'll pick $$$ 2 $$$ cub switch position 's wonder : many different sequence cub i end ? since baby ehab a turbulent person n't know many operations 'll make want answer every possible $$$ j $$$ $$$ 1 $$$ $$$ k $$$ line contain $$$ 2 $$$ integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n \le 1000000000 $$$ $$$ 1 \le k \le 200 $$$ ) — number cub baby ehab parameter $$$ k $$$ statement print $$$ k $$$ space - separated integers $$$ i $$$ -th number possible sequence end exactly $$$ i $$$ operations since number large print remainder 's divide $$$ 1000000000 + 7 $$$ second example $$$ 3 $$$ sequence get $$$ 1 $$$ swap $$$ 3 $$$ pair cub swap also $$$ 3 $$$ sequence get $$$ 2 $$$ swap :,"['dp', 'math']",2500.0
1515/E,$$$ n $$$ computers a row originally phoenix want turn manually turn computers one a time point computer $$$ i-1 $$$ computer $$$ i+1 $$$ computer $$$ i $$$ $$$ ( 2 \le i \le n-1 ) $$$ turn automatically already note phoenix manually turn a computer already turn automatically consider sequence computers phoenix turn manually many ways turn computers ? two sequence distinct either set computers turn manually distinct order computers turn manually distinct since number may large please print modulo $$$ m $$$ first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 3 \le n \le 400 $$$ ; $$$ 100000000 \le m \le 1000000000 $$$ ) — number computers modulo guarantee $$$ m $$$ prime print one integer — number ways turn computers modulo $$$ m $$$ first example $$$ 6 $$$ order phoenix turn computers :,"['dp', 'math']",2200.0
1512/G,let us denote $$$ d ( n ) $$$ sum divisors number $$$ n $$$ i.e $$$ d ( n ) = \sum\limits _ { k | n } k $$$ example $$$ d ( 1 ) = 1 $$$ $$$ d ( 4 ) = 1 + 2 + <unknown> $$$ $$$ d ( 6 ) = 1 + 2 + 3 + <unknown> $$$ a give number $$$ c $$$ find minimum $$$ n $$$ $$$ d ( n ) = c $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) $$$ t $$$ test case follow test case characterize one integer $$$ c $$$ ( $$$ 1 \le c \le 10000000 $$$ ) test case output :,"['brute force', 'dp', 'math']",1700.0
1506/A,polycarp find a rectangular table consist $$$ n $$$ row $$$ m $$$ columns notice cell table number obtain follow algorithm ` ` columns '' : example $$$ n = 3 $$$ $$$ m = 5 $$$ table number follow : $$$ $$$ \begin { matrix } 1 & 4 & 7 & 10 & 13 \\ 2 & 5 & 8 & 11 & 14 \\ 3 & 6 & 9 & 12 & 15 \\ \end { matrix } $$$ $$$ however polycarp consider number inconvenient like number ` ` row '' : example $$$ n = 3 $$$ $$$ m = 5 $$$ polycarp like follow table number : $$$ $$$ \begin { matrix } 1 & 2 & 3 & 4 & 5 \\ 6 & 7 & 8 & 9 & 10 \\ 11 & 12 & 13 & 14 & 15 \\ \end { matrix } $$$ $$$ polycarp n't much time ask find would cell number number ` ` row '' number ` ` columns '' cell number $$$ x $$$ ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) $$$ t $$$ test case follow test case consist a single line contain three integers $$$ n $$$ $$$ m $$$ $$$ x $$$ ( $$$ 1 \le n m \le 1000000 $$$ $$$ 1 \le x \le n \cdot m $$$ ) $$$ n $$$ $$$ m $$$ number row columns table $$$ x $$$ cell number note number test case fit $$$ 32 $$$ -bit integer type must use least $$$ 64 $$$ -bit integer type program language test case output cell number number ` ` row '',['math'],800.0
1505/F,* two image equivalent feel free use either one input contain a single integer $$$ a $$$ ( $$$ -100 \le a \le 100 $$$ ) output result – integer number,['math'],2200.0
1499/C,let 's say stand $$$ xy $$$ <unknown> point $$$ ( 0 0 ) $$$ want reach point $$$ ( n n ) $$$ move two directions : word path follow structure : n't like change direction much make $$$ n - 1 $$$ direction change a result path a polygonal chain $$$ ( 0 0 ) $$$ $$$ ( n n ) $$$ consist $$$ n $$$ line segment segment positive integer length vertical horizontal segment alternate paths equal $$$ n $$$ integers $$$ c_1 c_2 \dots c_n $$$ $$$ c_i $$$ cost $$$ i $$$ -th segment use cost define cost path sum lengths segment path multiply cost i. e. path consist $$$ k $$$ segment ( $$$ k \le n $$$ ) cost path equal $$$ \sum\limits _ { i=1 } ^ { k } { c_i \cdot <unknown> } $$$ ( segment number $$$ 1 $$$ $$$ k $$$ order path ) find path minimum cost print cost first line contain single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case first line test case contain single integer $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ) second line test case contain $$$ n $$$ integers $$$ c_1 c_2 \dots c_n $$$ ( $$$ 1 \le c_i \le 1000000000 $$$ ) — cost segment 's guarantee total sum $$$ n $$$ n't exceed $$$ 100000 $$$ test case print minimum possible cost path $$$ ( 0 0 ) $$$ $$$ ( n n ) $$$ consist $$$ n $$$ alternate segment first test case reach $$$ ( 2 2 ) $$$ need make least one turn path consist exactly $$$ 2 $$$ segment : one horizontal length $$$ 2 $$$ one vertical length $$$ 2 $$$ cost path equal $$$ 2 \cdot c_1 + 2 \cdot c_2 = 26 + 176 = 202 $$$ second test case one optimal paths consist $$$ 3 $$$ segment : first segment length $$$ 1 $$$ second segment length $$$ 3 $$$ third segment length $$$ 2 $$$ cost path $$$ 2 + 9 + 2 = 13 $$$ third test case one optimal paths consist $$$ 4 $$$ segment : first segment length $$$ 1 $$$ second one — $$$ 1 $$$ third one — $$$ 4 $$$ fourth one — $$$ 4 $$$ cost path $$$ 4 + 3 + 8 + 4 = 19 $$$,"['brute force', 'data structures', 'greedy', 'math']",1500.0
1499/A,"a board represent a grid $$$ 2 \times n $$$ cells first $$$ k_1 $$$ cells first row first $$$ k_2 $$$ cells second row color white cells color black $$$ w $$$ white dominoes ( $$$ 2 \times 1 $$$ tile cells color white ) $$$ b $$$ black dominoes ( $$$ 2 \times 1 $$$ tile cells color black ) place a white domino board board 's cells white occupy domino way place a black domino cells black occupy domino place $$$ w + b $$$ dominoes board place dominoes horizontally vertically ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 3000 $$$ ) — number test case first line test case contain three integers $$$ n $$$ $$$ k_1 $$$ $$$ k_2 $$$ ( $$$ 1 \le n \le 1000 $$$ ; $$$ 0 \le k_1 k_2 \le n $$$ ) second line test case contain two integers $$$ w $$$ $$$ b $$$ ( $$$ 0 \le w b \le n $$$ ) test case print yes 's possible place $$$ w + b $$$ dominoes board otherwise may print every letter case want ( example string yes yes yes yes recognize positive answer ) first test case $$$ n = 1 $$$ $$$ k_1 = 0 $$$ $$$ k_2 = 1 $$$ mean $$$ 2 \times 1 $$$ board black cell $$$ ( 1 1 ) $$$ white cell $$$ ( 2 1 ) $$$ , ca n't place white domino since one white cell second test case board size $$$ 2 \times 1 $$$ cell white since $$$ w = 0 $$$ $$$ b = 0 $$$ place $$$ 0 + 0 = 0 $$$ dominoes board third test case board $$$ 2 \times 3 $$$ fully color black ( since $$$ k_1 = k_2 = 0 $$$ ) ca n't place white domino fourth test case cells $$$ ( 1 1 ) $$$ $$$ ( 1 2 ) $$$ $$$ ( 1 3 ) $$$ $$$ ( 2 1 ) $$$ white cells black place $$$ 2 $$$ white dominoes position $$$ ( ( 1 1 ) ( 2 1 ) ) $$$ $$$ ( ( 1 2 ) ( 1 3 ) ) $$$ $$$ 2 $$$ black dominoes position $$$ ( ( 1 4 ) ( 2 4 ) ) $$$ $$$ ( ( 2 2 ) ( 2 3 ) ) $$$","['constructive algorithms', 'math']",800.0
1498/F,alice bob go celebrate christmas play a game a tree present tree $$$ n $$$ nod ( number $$$ 1 $$$ $$$ n $$$ node $$$ r $$$ root ) $$$ a_i $$$ present hang $$$ i $$$ -th node begin game a special integer $$$ k $$$ choose game proceed follow : possible root tree find among alice bob win game note : depth a node $$$ i $$$ a tree root $$$ r $$$ define number edge simple path node $$$ r $$$ node $$$ i $$$ depth root $$$ r $$$ zero first line contain two space - separated integers $$$ n $$$ $$$ k $$$ $$$ ( 3 \le n \le 100000 1 \le k \le 20 ) $$$ next $$$ n-1 $$$ line contain two integers $$$ x $$$ $$$ y $$$ $$$ ( 1 \le x y \le n x \neq y ) $$$ denote undirected edge two nod $$$ x $$$ $$$ y $$$ edge form a tree $$$ n $$$ nod next line contain $$$ n $$$ space - separated integers denote array $$$ a $$$ $$$ ( 0 \le a_i \le 1000000000 ) $$$ output $$$ n $$$ integers $$$ i $$$ -th integer $$$ 1 $$$ alice win game tree root node $$$ i $$$ $$$ 0 $$$ otherwise let us calculate answer sample input root node 1 2 . root node <unknown> always win case one possible gameplay alice bob : bob unable make a move hence lose root node <unknown> always win case one gameplay : alice unable make a move hence lose,"['data structures', 'dfs and similar', 'dp', 'math']",2500.0
1495/A,"diamond miner a game similar gold miner $$$ n $$$ miners instead $$$ 1 $$$ game mine area describe a plane $$$ n $$$ miners regard $$$ n $$$ point y - axis $$$ n $$$ diamond mine mine area regard $$$ n $$$ point x - axis reason miners diamond mine origin ( point $$$ ( 0 0 ) $$$ ) every miner mine exactly one diamond mine every miner a hook use mine a diamond mine a miner point $$$ ( a b ) $$$ use hook mine a diamond mine point $$$ ( c d ) $$$ spend $$$ \sqrt { ( a - c ) ^2 + ( b - d ) ^2 } $$$ energy mine ( distance point ) miners ca n't move help object game minimize sum energy miners spend find minimum ? input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 10 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number miners mine next $$$ 2n $$$ line contain two space - separated integers $$$ x $$$ ( $$$ -100000000 \le x \le 100000000 $$$ ) $$$ y $$$ ( $$$ -100000000 \le y \le 100000000 $$$ ) represent point $$$ ( x y ) $$$ describe a miner 's a diamond mine 's position either $$$ x = 0 $$$ mean a miner point $$$ ( 0 y ) $$$ $$$ y = 0 $$$ mean a diamond mine point $$$ ( x 0 ) $$$ multiple miners diamond mine point guarantee point origin guarantee number point x - axis equal $$$ n $$$ number point y - axis equal $$$ n $$$ 's guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print a single real number — minimal sum energy spend answer consider correct absolute relative error exceed $$$ 10^ { -9 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ answer accept $$$ \frac { |a - b| } { \max { ( 1 |b| ) } } \le 10^ { -9 } $$$ first test case miners $$$ ( 0,1 ) $$$ $$$ ( 0 -1 ) $$$ diamond mine $$$ ( 1,0 ) $$$ $$$ ( -2,0 ) $$$ arrange miners get diamond mine way show picture get sum energy $$$ <unknown> + <unknown> $$$","['geometry', 'greedy', 'math']",1200.0
1493/E,give two integers $$$ l $$$ $$$ r $$$ binary representation let $$$ g ( x y ) $$$ equal bitwise xor integers $$$ x $$$ $$$ y $$$ inclusive ( $$$ x \oplus ( x+1 ) \oplus \dots \oplus ( y-1 ) \oplus y $$$ ) let 's define $$$ f ( l r ) $$$ maximum value $$$ g ( x y ) $$$ satisfy $$$ l \le x \le y \le r $$$ output $$$ f ( l r ) $$$ first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000000 $$$ ) — length binary representation $$$ r $$$ second line contain binary representation $$$ l $$$ — a string length $$$ n $$$ consist digits $$$ 0 $$$ $$$ 1 $$$ ( $$$ 0 \le l < 2^n $$$ ) third line contain binary representation $$$ r $$$ — a string length $$$ n $$$ consist digits $$$ 0 $$$ $$$ 1 $$$ ( $$$ 0 \le r < 2^n $$$ ) guarantee $$$ l \le r $$$ binary representation $$$ r $$$ contain extra lead zero ( $$$ r=0 $$$ binary representation consist a single zero ) binary representation $$$ l $$$ precede lead zero length equal $$$ n $$$ a single line output value $$$ f ( l r ) $$$ give pair $$$ l $$$ $$$ r $$$ binary representation without extra lead zero sample test case $$$ <unknown> $$$ $$$ <unknown> $$$ $$$ f ( x y ) $$$ maximal equal $$$ 127 $$$ $$$ <unknown> $$$ $$$ <unknown> $$$ example,"['constructive algorithms', 'greedy', 'math', 'strings']",2600.0
1491/G,"$$$ n $$$ coin label $$$ 1 $$$ $$$ n $$$ initially coin $$$ c_i $$$ position $$$ i $$$ face upwards ( ( $$$ c_1 c_2 \dots c_n ) $$$ a permutation number $$$ 1 $$$ $$$ n $$$ ) operations coin one operation follow : choose $$$ 2 $$$ distinct indices $$$ i $$$ $$$ j $$$ , swap coin position $$$ i $$$ $$$ j $$$ , flip coin position $$$ i $$$ $$$ j $$$ ( initially face face operation vice versa ) construct a sequence $$$ n+1 $$$ operations perform operations coin $$$ i $$$ position $$$ i $$$ end face note need minimize number operations first line contain integer $$$ n $$$ ( $$$ 3 \leq n \leq 200000 $$$ ) — number coin second line contain $$$ n $$$ integers $$$ c_1 c_2 \dots c_n $$$ ( $$$ 1 \le c_i \le n $$$ $$$ c_i \neq c_j $$$ $$$ i\neq j $$$ ) first line output integer $$$ q $$$ $$$ ( 0 \leq q \leq n+1 ) $$$ — number operations use follow $$$ q $$$ line output two integers $$$ i $$$ $$$ j $$$ $$$ ( 1 \leq i j \leq n i \ne j ) $$$ — position choose current operation let coin $$$ i $$$ face upwards denote $$$ i $$$ coin $$$ i $$$ face downwards denote $$$ -i $$$ series move perform first sample change coin : second sample coin already correct position need swap","['constructive algorithms', 'math']",2800.0
1485/C,"a pair positive integers $$$ ( a b ) $$$ call special $$$ \lfloor \frac { a } { b } \rfloor = a \bmod b $$$ , $$$ \lfloor \frac { a } { b } \rfloor $$$ result integer division $$$ a $$$ $$$ b $$$ $$$ a \bmod b $$$ remainder give two integers $$$ x $$$ $$$ y $$$ find number special pair $$$ ( a b ) $$$ $$$ 1\leq a \leq x $$$ $$$ 1 \leq b \leq y $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case line description test case contain two integers $$$ x $$$ $$$ y $$$ ( $$$ 1 \le x y \le 1000000000 $$$ ) test case print answer a single line first test case special pair $$$ ( 3 2 ) $$$ second test case special pair third test case two special pair : $$$ ( 3 2 ) $$$ $$$ ( 4 3 ) $$$","['brute force', 'math']",1700.0
1477/C,nezzar love game osu ! <unknown> ! play <unknown> see array consist distinct point a plane a beatmap call nice three consecutive point $$$ a b c $$$ list order angle three point center $$$ b $$$ strictly less $$$ 90 $$$ degrees nezzar a beatmap $$$ n $$$ distinct point $$$ a_1 a_2 \ldots a_n $$$ nezzar would like reorder $$$ n $$$ point result beatmap nice formally require find a permutation $$$ p_1 p_2 \ldots p_n $$$ integers $$$ 1 $$$ $$$ n $$$ beatmap $$$ a _ { p_1 } a _ { p_2 } \ldots a _ { p_n } $$$ nice impossible determine first line contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 5000 $$$ ) $$$ n $$$ line follow $$$ i $$$ -th contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ -1000000000 \le x_i y_i \le 1000000000 $$$ ) — coordinate point $$$ a_i $$$ guarantee point distinct solution print $$$ -1 $$$ otherwise print $$$ n $$$ integers represent a valid permutation $$$ p $$$ multiple possible answer print illustration first test : please note angle $$$ a_1 $$$ $$$ a_2 $$$ $$$ a_5 $$$ center $$$ a_2 $$$ treat $$$ 0 $$$ degrees however angle $$$ a_1 $$$ $$$ a_5 $$$ $$$ a_2 $$$ center $$$ a_5 $$$ treat $$$ 180 $$$ degrees,"['constructive algorithms', 'geometry', 'greedy', 'math']",2200.0
1475/G,polycarp find street array $$$ a $$$ $$$ n $$$ elements polycarp invent criterion beauty array call array $$$ a $$$ beautiful least one follow condition must meet different pair indices $$$ i \ne j $$$ : example : ugly array upset polycarp want remove elements array $$$ a $$$ become beautiful help polycarp determine smallest number elements remove make array $$$ a $$$ beautiful first line contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 10 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — length array $$$ a $$$ second line test case contain $$$ n $$$ number $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 200000 $$$ ) — elements array $$$ a $$$ test case output one integer — minimum number elements must remove make array $$$ a $$$ beautiful first test case remove $$$ 7 $$$ $$$ 14 $$$ make array $$$ a $$$ beautiful second test case array $$$ a $$$ already beautiful third test case remove one elements $$$ 45 $$$ $$$ 18 $$$ make array $$$ a $$$ beautiful fourth test case array $$$ a $$$ beautiful,"['dp', 'math']",1900.0
1467/D,"$$$ n $$$ cells number $$$ 1,2 \dots n $$$ leave right place a robot cell initially robot must make exactly $$$ k $$$ move one move robot must move one cell leave right provide n't move bound word robot cell $$$ i $$$ must move either cell $$$ i-1 $$$ cell $$$ i+1 $$$ long lie $$$ 1 $$$ $$$ n $$$ ( endpoints inclusive ) cells order visit ( include cell robot place ) together make a good path cell $$$ i $$$ a value $$$ a_i $$$ associate let $$$ c_0 c_1 \dots c_k $$$ sequence cells a good path order visit ( $$$ c_0 $$$ cell robot initially place $$$ c_1 $$$ cell robot first move ; formally $$$ c_i $$$ cell robot $$$ i $$$ move ) value path calculate $$$ a _ { c_0 } + a _ { c_1 } + \dots + a _ { c_k } $$$ task calculate sum value possible good paths since number large output modulo $$$ 1000000000 + 7 $$$ two good paths consider different start cell differ exist integer $$$ i \in [ 1 k ] $$$ current cell robot exactly $$$ i $$$ move different paths must process $$$ q $$$ update $$$ a $$$ print update sum time update change value exactly one cell see input format sample input - output detail first line input contain three space - separated integers $$$ n $$$ $$$ k $$$ $$$ q $$$ ( $$$ 2 \le n \le 5000 $$$ ; $$$ 1 \le k \le 5000 $$$ ; $$$ 1 \le q \le 200000 $$$ ) second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) $$$ q $$$ line follow line contain two space - separated integers $$$ i $$$ $$$ x $$$ ( $$$ 1 \le i \le n $$$ ; $$$ 1 \le x \le 1000000000 $$$ ) indicate must change value $$$ a_i $$$ $$$ x $$$ print $$$ q $$$ integers $$$ i $$$ -th integer sum value good paths first $$$ i $$$ update perform since answer may large print modulo $$$ 1000000000 + 7 $$$ first example good paths $$$ ( 1 2 ) ( 2 1 ) ( 2 3 ) ( 3 2 ) ( 3 4 ) ( 4 3 ) ( 4 5 ) ( 5 4 ) $$$ initially value $$$ a $$$ $$$ [ 3 5 1 4 2 ] $$$ first update become $$$ [ 9 5 1 4 2 ] $$$ second update become $$$ [ 9 4 1 4 2 ] $$$ ,","['dp', 'math']",2200.0
1466/H,"get far contest easy <unknown> solve previous problems impress gods greatly thus decide spare story problem grant a formal statement instead consider $$$ n $$$ agents one initially exactly one item $$$ i $$$ -th agent item number $$$ i $$$ interest <unknown> items among agents assignment valid iff item assign exactly one agent agent assign exactly one item agent a preference items describe a permutation $$$ p $$$ items sort least desirable word agent prefer item $$$ i $$$ item $$$ j $$$ iff $$$ i $$$ appear earlier permutation $$$ p $$$ a preference profile a list $$$ n $$$ permutations length $$$ n $$$ $$$ i $$$ -th permutation describe preferences $$$ i $$$ -th agent possible agents happy assignment items a set dissatisfy agents may choose cooperate agents a case would exchange items possess initially ( $$$ i $$$ -th item belong $$$ i $$$ -th agent ) agents group n't care <unknown> agents outside however need exchange items a way make least one happier none less happy ( comparison give assignment ) formally consider a valid assignment items — $$$ a $$$ let $$$ a ( i ) $$$ denote item assign $$$ i $$$ -th agent also consider a subset agents let $$$ s $$$ set indices say subset agents dissatisfy iff exist a valid assignment $$$ b ( i ) $$$ : assignment optimal subset agents dissatisfy note empty subset dissatisfy prove preference profile precisely one optimal assignment example : consider $$$ 3 $$$ agents follow preference profile : assignment : see set agents $$$ \ { 1 2\ } $$$ dissatisfy reassign ( initial ) items follow way : <unknown> make second agent happier make difference first agent a result third agent get item worse prevent set $$$ \ { 1,2\ } $$$ dissatisfy ( set ) follow assignment would optimal : give assignment $$$ a $$$ calculate number distinct preference profile assignment $$$ a $$$ optimal answer huge output modulo $$$ 1000000000 + 7 $$$ two preference profile different iff assign different preference permutations agent first line input integer $$$ n $$$ ( $$$ 1 \leq n \leq 40 $$$ ) next line contain $$$ n $$$ space separate integers a permutation number $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th number denote item assign agent $$$ i $$$ optimal assignment a single line output one non - negative integer number preference profile assignment items give input optimal modulo $$$ 1000000000 + 7 $$$ assignment first test case optimal follow preference profile : $$$ 2 1 $$$ $$$ 1 2 $$$ agent want initial item give another item would form a dissatisfy set hence allocation optimal preference profile","['dp', 'greedy', 'math']",3300.0
1463/F,let 's call set positive integers $$$ s $$$ correct follow two condition meet : give value $$$ n $$$ $$$ x $$$ $$$ y $$$ find maximum size correct set a single line contain three integers $$$ n $$$ $$$ x $$$ $$$ y $$$ ( $$$ 1 \le n \le 1000000000 $$$ ; $$$ 1 \le x y \le 22 $$$ ) print one integer — maximum size correct set,"['dp', 'math']",3100.0
1462/C,give a positive number $$$ x $$$ find smallest positive integer number sum digits equal $$$ x $$$ digits distinct ( unique ) first line contain a single positive integer $$$ t $$$ ( $$$ 1 \le t \le 50 $$$ ) — number test case test $$$ t $$$ test case follow test case consist a single integer number $$$ x $$$ ( $$$ 1 \le x \le 50 $$$ ) output $$$ t $$$ answer test case :,"['brute force', 'greedy', 'math']",900.0
1452/D,"$$$ n + 2 $$$ towns locate a coordinate line number $$$ 0 $$$ $$$ n + 1 $$$ $$$ i $$$ -th town locate point $$$ i $$$ build a radio tower towns $$$ 1 2 \dots n $$$ probability $$$ \frac { 1 } { 2 } $$$ ( events independent ) , want set signal power tower integer $$$ 1 $$$ $$$ n $$$ ( signal power necessarily also necessarily different ) signal a tower locate a town $$$ i $$$ signal power $$$ p $$$ reach every city $$$ c $$$ $$$ <unknown> - i| < p $$$ build tower want choose signal power a way : example $$$ n = 5 $$$ build tower towns $$$ 2 $$$ $$$ 4 $$$ $$$ 5 $$$ may set signal power tower town $$$ 2 $$$ $$$ 2 $$$ signal power tower towns $$$ 4 $$$ $$$ 5 $$$ $$$ 1 $$$ way towns $$$ 0 $$$ $$$ n + 1 $$$ n't get signal tower towns $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ get signal tower town $$$ 2 $$$ town $$$ 4 $$$ get signal tower town $$$ 4 $$$ town $$$ 5 $$$ get signal tower town $$$ 5 $$$ calculate probability build tower a way set signal power meet constraints first ( ) line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) print one integer — probability a way set signal power constraints meet take modulo $$$ 998244353 $$$ formally probability express irreducible fraction $$$ \frac { x } { y } $$$ print value $$$ x \cdot y^ { -1 } \bmod 998244353 $$$ $$$ y^ { -1 } $$$ integer $$$ y \cdot y^ { -1 } \bmod 998244353 = 1 $$$ real answer first example $$$ \frac { 1 } { 4 } $$$ : real answer second example $$$ \frac { 1 } { 4 } $$$ : real answer third example $$$ \frac { 5 } { 32 } $$$ note even though previous explanations use equal signal power tower necessarily example $$$ n = 5 $$$ tower build towns $$$ 2 $$$ $$$ 4 $$$ $$$ 5 $$$ may set signal power tower town $$$ 2 $$$ $$$ 2 $$$ signal power tower towns $$$ 4 $$$ $$$ 5 $$$ $$$ 1 $$$","['dp', 'math']",1600.0
1437/F,"$$$ n $$$ fishermen return a fish vacation $$$ i $$$ -th fisherman catch a fish weight $$$ a_i $$$ fishermen go show fish catch , firstly choose order show fish ( fisherman show fish exactly , formally order show fish a permutation integers $$$ 1 $$$ $$$ n $$$ ) show fish catch accord choose order a fisherman show fish might either become happy become sad stay content suppose a fisherman show a fish weight $$$ x $$$ maximum weight a previously show fish $$$ y $$$ ( $$$ y = 0 $$$ fisherman first show fish ) : let 's call order fishermen show fish emotional fishermen show fish accord order fisherman become either happy sad calculate number emotional order modulo $$$ 998244353 $$$ first line contain one integer $$$ n $$$ ( $$$ 2 \le n \le 5000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) print one integer — number emotional order take modulo $$$ 998244353 $$$","['dp', 'math']",2600.0
1437/C,chef monocarp put $$$ n $$$ dish oven know $$$ i $$$ -th dish optimal cook time equal $$$ t_i $$$ minutes positive integer minute $$$ t $$$ monocarp put one dish oven $$$ i $$$ -th dish put minute $$$ t $$$ unpleasant value $$$ <unknown> - <unknown> $$$ — absolute difference $$$ t $$$ $$$ t_i $$$ dish oven ca n't go back monocarp put dish oven minimum total unpleasant value monocarp obtain ? first line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 200 $$$ ) — number testcases $$$ q $$$ testcases follow first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200 $$$ ) — number dish oven second line testcase contain $$$ n $$$ integers $$$ t_1 t_2 \dots t_n $$$ ( $$$ 1 \le t_i \le n $$$ ) — optimal cook time dish sum $$$ n $$$ $$$ q $$$ testcases n't exceed $$$ 200 $$$ print a single integer testcase — minimum total unpleasant value monocarp obtain put dish oven remember monocarp put dish positive integer minutes one dish minute first example monocarp put dish minutes $$$ 3 1 5 4 6 2 $$$ way total unpleasant value $$$ |4 - 3| + |2 - 1| + |4 - 5| + |4 - 4| + |6 - 5| + |2 - 2| = 4 $$$ second example monocarp put dish minutes $$$ 4 5 6 7 8 9 10 $$$ third example monocarp put dish minute $$$ 1 $$$ fourth example monocarp put dish minutes $$$ 5 1 2 4 3 $$$ fifth example monocarp put dish minutes $$$ 1 3 4 5 $$$,"['dp', 'greedy', 'math']",1800.0
1426/C,initially array $$$ a $$$ consist one element $$$ 1 $$$ ( $$$ a = [ 1 ] $$$ ) one move one follow things : example consider sequence five move : task find minimum number move require obtain array sum least $$$ n $$$ answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case $$$ t $$$ test case follow line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 1000000000 $$$ ) — lower bind sum array test case print answer : minimum number move require obtain array sum least $$$ n $$$,"['constructive algorithms', 'math']",1100.0
1422/F,yura own a quite ordinary bore array $$$ a $$$ length $$$ n $$$ think nothing bore vladik n't agree ! order make yura 's array even bore vladik make $$$ q $$$ bore query query consist two integers $$$ x $$$ $$$ y $$$ answer a query bound $$$ l $$$ $$$ r $$$ query calculate : $$$ l = ( last + x ) \bmod n + 1 $$$ $$$ r = ( last + y ) \bmod n + 1 $$$ $$$ last $$$ answer previous query ( zero initially ) $$$ \bmod $$$ remainder operation whenever $$$ l > r $$$ swap vladik compute $$$ l $$$ $$$ r $$$ a query compute least common multiple ( lcm ) segment $$$ [ l ; r ] $$$ initial array $$$ a $$$ modulo $$$ 1000000000 + 7 $$$ lcm a multiset integers smallest positive integer divisible elements multiset obtain lcm answer query help vladik compute answer query ! first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length array second line contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le 200000 $$$ ) — elements array third line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) — number query next $$$ q $$$ line contain two integers $$$ x $$$ $$$ y $$$ ( $$$ 1 \le x y \le n $$$ ) — description correspond query print $$$ q $$$ integers — answer query consider example :,"['data structures', 'math']",2700.0
1422/A,yura task build a close fence shape arbitrary non - degenerate simple quadrilateral 's already get three straight fence segment know lengths $$$ a $$$ $$$ b $$$ $$$ c $$$ need find possible integer length $$$ d $$$ fourth straight fence segment build fence use four segment word fence a quadrilateral shape side lengths equal $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ d $$$ help yura find possible length fourth side a non - degenerate simple quadrilateral a quadrilateral three corner lie line cross first line contain a single integer $$$ t $$$ — number test case ( $$$ 1 \le t \le 1000 $$$ ) next $$$ t $$$ line describe test case line contain three integers $$$ a $$$ $$$ b $$$ $$$ c $$$ — lengths three fence segment ( $$$ 1 \le a b c \le 1000000000 $$$ ) test case print a single integer $$$ d $$$ — length fourth fence segment suitable build fence multiple answer print show answer always exist build a quadrilateral side $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ build a quadrilateral side $$$ 12 $$$ $$$ 34 $$$ $$$ 56 $$$ $$$ 42 $$$,"['geometry', 'math']",800.0
1415/E,wabbit play a game $$$ n $$$ boss number $$$ 1 $$$ $$$ n $$$ boss fight order boss need defeat exactly a parameter call boss bonus initially $$$ 0 $$$ $$$ i $$$ -th boss defeat current boss bonus add wabbit 's score value boss bonus increase point increment $$$ c_i $$$ note $$$ c_i $$$ negative mean boss give fewer point however wabbit find a glitch game point time reset playthrough start a new game plus playthrough set current boss bonus $$$ 0 $$$ defeat boss remain defeat current score also save reset zero operation glitch use $$$ k $$$ time reset defeat number boss ( include defeat ) also reset game several time a row without defeat boss help wabbit determine maximum score obtain defeat $$$ n $$$ boss first line input contain two space integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq n \leq 500000 $$$ $$$ 0 \leq k \leq 500000 $$$ ) represent number boss number reset allow next line input contain $$$ n $$$ space integers $$$ c_1 c_2 \ldots c_n $$$ ( $$$ -1000000 \leq c_i \leq 1000000 $$$ ) point increments $$$ n $$$ boss output a single integer maximum score wabbit obtain defeat $$$ n $$$ boss ( value may negative ) first test case reset allow optimal sequence fight would thus answer first test case $$$ 0 + 1 + 2=3 $$$ second test case show one possible optimal sequence fight hence answer second test case $$$ 0 + 5 + 4 + 2 + <unknown> $$$,"['constructive algorithms', 'greedy', 'math']",2200.0
1409/A,give two integers $$$ a $$$ $$$ b $$$ one move choose integer $$$ k $$$ $$$ 1 $$$ $$$ 10 $$$ add $$$ a $$$ subtract $$$ a $$$ word choose integer $$$ k \in [ 1 ; 10 ] $$$ perform $$$ a : = a + k $$$ $$$ a : = a - k $$$ may use different value $$$ k $$$ different move task find minimum number move require obtain $$$ b $$$ $$$ a $$$ answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 20000 $$$ ) — number test case $$$ t $$$ test case follow line test case contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a b \le 1000000000 $$$ ) test case print answer : minimum number move require obtain $$$ b $$$ $$$ a $$$ first test case example n't need anything second test case example follow sequence move apply : $$$ 13 \rightarrow 23 \rightarrow 32 \rightarrow 42 $$$ ( add $$$ 10 $$$ add $$$ 9 $$$ add $$$ 10 $$$ ) third test case example follow sequence move apply : $$$ 18 \rightarrow 10 \rightarrow 4 $$$ ( subtract $$$ 8 $$$ subtract $$$ 6 $$$ ),"['greedy', 'math']",800.0
1408/I,"give a positive integer $$$ k $$$ array $$$ a_1 a_2 \ldots a_n $$$ non - negative distinct integers smaller $$$ k $$$ greater $$$ 2^c-1 $$$ next $$$ k $$$ second one element choose randomly equiprobably $$$ n $$$ elements decrease $$$ 1 $$$ integer $$$ x $$$ $$$ 0 \leq x \leq 2^c - 1 $$$ need find probability end bitwise xor elements array equal $$$ x $$$ value represent irreducible fraction $$$ \frac { p } { q } $$$ need find value $$$ p \cdot q^ { -1 } $$$ modulo $$$ 998\,244\,353 $$$ first line input contain three integers $$$ n k c $$$ ( $$$ 1 \leq n \leq ( 2^c - k ) $$$ $$$ 1 \leq k \leq 16 $$$ $$$ 1 \leq c \leq 16 $$$ ) second line contain $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ k \leq a_i \leq 2^c-1 $$$ ) print $$$ 2^c $$$ integers : probability bitwise xor equal $$$ x $$$ end $$$ x $$$ $$$ \ { 0 1 \ldots <unknown> } $$$ modulo $$$ 998\,244\,353 $$$","['dp', 'math']",3200.0
1404/D,"interactive problem consider a fix positive integer $$$ n $$$ two players first second play a game follow : determine winner game compute sum number choose second sum number a multiple $$$ 2n $$$ second win otherwise first win give integer $$$ n $$$ task decide player wish play win game interaction begin read integer $$$ n $$$ ( $$$ 1 \le n \le 500000 $$$ ) read print a single line contain either first second denote want play interaction vary depend choose play choose play first print a single line contain $$$ 2n $$$ integers $$$ p_1 p_2 \dots p _ { 2n } $$$ denote number $$$ i $$$ belong $$$ p_i $$$ -th pair $$$ 1\le i \le 2n $$$ thus $$$ 1 \le p_i \le n $$$ every number $$$ 1 $$$ $$$ n $$$ inclusive appear exactly twice choose play second interactor print $$$ 2n $$$ integers $$$ p_1 p_2 \dots p _ { 2n } $$$ denote number $$$ i $$$ belong $$$ p_i $$$ -th pair a response print $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ a single line contain exactly one number pair regardless choose play interactor finish print a single integer : $$$ 0 $$$ answer test case correct ( play first choose adequate number pair play second choose number add a multiple $$$ 2n $$$ ) $$$ -1 $$$ incorrect particular interactor print choose number choose play first lose either case program terminate immediately read number point make invalid interaction interactor print $$$ -1 $$$ finish interaction receive a wrong answer verdict make sure terminate immediately avoid get verdicts print something forget output end line flush output otherwise get idleness limit exceed , use : hack formatto hack use follow format : first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 500000 $$$ ) second line contain $$$ 2n $$$ integers $$$ p_1 p_2 \dots p _ { 2n } $$$ denote number $$$ i $$$ belong $$$ p_i $$$ -th pair solution hack choose play second solution hack choose play first pair n't matter $$$ p_1 p_2 \dots p _ { 2n } $$$ must still form a valid partition $$$ 1 2 \dots 2n $$$ $$$ n $$$ disjoint pair first sample $$$ n = 2 $$$ decide play second judge choose pair $$$ ( 1 2 ) $$$ $$$ ( 3 4 ) $$$ reply number $$$ 1 $$$ $$$ 3 $$$ a valid choice since contain exactly one number pair sum $$$ 1 + 3 = 4 $$$ divisible $$$ 4 $$$ second sample $$$ n = 2 $$$ play first choose pair $$$ ( 2 4 ) $$$ $$$ ( 1 3 ) $$$ judge fail choose a number pair sum divisible $$$ 4 $$$ answer correct note sample test illustration interaction protocol n't necessarily correspond behavior real interactor","['constructive algorithms', 'dfs and similar', 'math']",2800.0
1391/C,"a permutation length $$$ n $$$ array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) consider a permutation $$$ p $$$ length $$$ n $$$ build a graph size $$$ n $$$ use follow : case $$$ j $$$ exist make edge also note make edge correspond indices value indices clarity consider example $$$ n = 4 $$$ $$$ p = [ 3,1,4,2 ] $$$ ; edge graph $$$ ( 1,3 ) ( 2,1 ) ( 2,3 ) ( 4,3 ) $$$ a permutation $$$ p $$$ cyclic graph build use $$$ p $$$ least one simple cycle give $$$ n $$$ find number cyclic permutations length $$$ n $$$ since number may large output modulo $$$ 1000000000 + 7 $$$ please refer note section formal definition a simple <unknown> first line contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 1000000 $$$ ) output a single integer $$$ 0 \leq x < 1000000000 + 7 $$$ number cyclic permutations length $$$ n $$$ modulo $$$ 1000000000 + 7 $$$ $$$ 16 $$$ cyclic permutations $$$ n = 4 $$$ $$$ [ 4,2,1,3 ] $$$ one permutation a cycle length four : $$$ 4 \rightarrow 3 \rightarrow 2 \rightarrow 1 \rightarrow 4 $$$ nod $$$ v_1 $$$ $$$ v_2 $$$ $$$ \ldots $$$ $$$ v_k $$$ form a simple cycle follow condition hold :","['dp', 'math']",1500.0
1388/B,"captain flint crew keep head a <unknown> shore byteland several months already drink rum tell stories moments uncle bogdan often remember nephew denis today tell a story denis help come interest problem ask crew solve begin uncle bogdan write a board a positive integer $$$ x $$$ consist $$$ n $$$ digits , wipe $$$ x $$$ write integer $$$ k $$$ instead concatenation binary representations digits $$$ x $$$ consist ( without lead zero ) example let $$$ x = 729 $$$ $$$ k = <unknown> $$$ ( since $$$ 7 = 111 $$$ $$$ 2 = 10 $$$ $$$ 9 = 1001 $$$ ) time uncle bogdan understand n't know $$$ k $$$ ask denis help denis decide wipe last $$$ n $$$ digits $$$ k $$$ name new number $$$ r $$$ a result denis propose find integer $$$ x $$$ length $$$ n $$$ $$$ r $$$ ( number ) maximum possible multiple valid $$$ x $$$ denis interest minimum one crew members include captain flint easily solve task , except <unknown> boy kostya drink think straight ? note : task compare integers ( $$$ x $$$ $$$ k $$$ ) number ( despite representations write ) $$$ 729 < 1999 $$$ $$$ 111 < 1000 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case next $$$ t $$$ line contain test case — one per test case one line test case contain single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length integer $$$ x $$$ need find 's guarantee sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case print minimum integer $$$ x $$$ length $$$ n $$$ obtain denis number $$$ r $$$ maximum possible second test case ( $$$ n = 3 $$$ ) uncle bogdan $$$ x = 998 $$$ $$$ k = <unknown> $$$ denis ( wipe last $$$ n = 3 $$$ digits ) obtain $$$ r = 100110011 $$$ prove $$$ 100110011 $$$ maximum possible $$$ r $$$ denis obtain $$$ 998 $$$ minimum $$$ x $$$ obtain","['greedy', 'math']",1000.0
1386/B,"serge chef famous restaurant ` ` salt pepper & garlic '' try obtain first <unknown> star inform a secret expert plan visit restaurant even even though expert 's name n't disclose serge certain know dish menu order well taste preferences expert namely expert require extremely precise proportion salt pepper garlic powder dish serge keep a set bottle mixtures salt pepper garlic powder a special shelf kitchen bottle know exact amount ingredients kilograms serge combine number bottle mixtures ( use one directly ) get a mixture particular proportion need a certain dish luckily absolute amount a mixture need add a dish small assume amount bottle always sufficient however numeric value describe proportion may quite large serge would like know whether possible obtain expert 's favourite mixture available bottle so — what smallest possible number bottle need achieve furthermore set bottle shelf may change time serge receive new ones lend chefs would like answer question change example assume expert 's favorite mixture $$$ <unknown> $$$ three bottle mixtures shelf : obtain desire mixture enough use equivalent amount mixtures bottle 1 2 . bottle 2 remove longer possible obtain write a program help serge solve task ! first row contain three non - negative integers $$$ s_f $$$ $$$ p_f $$$ $$$ g_f $$$ ( $$$ 0 \leq s_f p_f g_f $$$ ; $$$ 0 < <unknown> \leq 1000000 $$$ ) describe amount salt pepper garlic powder expert 's favourite mixture real $$$ \alpha > 0 $$$ $$$ ( \alpha { s_f } \alpha { p_f } \alpha { g_f } ) $$$ also expert 's favourite mixture second row a positive integer $$$ n $$$ ( number change shelf $$$ n \leq 100\,000 $$$ ) assume initially shelf empty next $$$ n $$$ row describe a single change shelf : output $$$ n $$$ row $$$ j $$$ -th row ( $$$ 1 \leq j \leq n $$$ ) contain number $$$ x_j $$$ smallest number bottle need prepare a mixture expert 's favourite proportion salt pepper garlic powder use bottle available first $$$ j $$$ change shelf $$$ 0 $$$ possible subtasks : pay attention example bottle $$$ 1 $$$ $$$ 3 $$$ contain proportion salt pepper garlic powder","['data structures', 'geometry', 'math']",2900.0
1375/I,a cubic lattice $$$ l $$$ $$$ 3 $$$ -dimensional euclidean space a set point define follow way : $$$ $$$ l=\ { u \cdot \vec r_1 + v \cdot \vec r_2 + w \cdot \vec <unknown> } _ { u v w \in \mathbb z } $$$ $$$ $$$ \vec r_1 \vec r_2 \vec r_3 \in \mathbb { z } <unknown> $$$ integer vectors : find a cubic lattice $$$ l $$$ $$$ a \subset l $$$ $$$ r $$$ maximum possible first line contain single integer $$$ n $$$ ( $$$ 1 \leq n \leq 10000 $$$ ) — number point $$$ a $$$ $$$ i $$$ -th follow $$$ n $$$ line contain integers $$$ x_i $$$ $$$ y_i $$$ $$$ z_i $$$ ( $$$ 0 < <unknown> + <unknown> + <unknown> \leq 10^ { 16 } $$$ ) — coordinate $$$ i $$$ -th point guarantee $$$ \gcd ( g_1 g_2 \dots g_n ) = 1 $$$ $$$ <unknown> ( x_i y_i z_i ) $$$ first line output a single integer $$$ <unknown> $$$ square maximum possible $$$ r $$$ follow $$$ 3 $$$ line output coordinate vectors $$$ \vec r_1 $$$ $$$ \vec r_2 $$$ $$$ \vec r_3 $$$ respectively multiple possible answer output,"['geometry', 'math']",3500.0
1372/B,omkar 's last class math learn least common multiple $$$ lcm $$$ $$$ lcm ( a b ) $$$ smallest positive integer $$$ x $$$ divisible $$$ a $$$ $$$ b $$$ omkar a <unknown> curious mind immediately think a problem involve $$$ lcm $$$ operation : give integer $$$ n $$$ find positive integers $$$ a $$$ $$$ b $$$ $$$ a + b = n $$$ $$$ lcm ( a b ) $$$ minimum value possible help omkar solve <unknown> challenge math problem ? test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 10 $$$ ) description test case follow test case consist a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 10^ { 9 } $$$ ) test case output two positive integers $$$ a $$$ $$$ b $$$ $$$ a + b = n $$$ $$$ lcm ( a b ) $$$ minimum possible first test case number choose $$$ 1 3 $$$ $$$ 2 2 $$$ $$$ lcm ( 1 3 ) = 3 $$$ $$$ lcm ( 2 2 ) = 2 $$$ output $$$ 2 \ 2 $$$ second test case number choose $$$ 1 5 $$$ $$$ 2 4 $$$ $$$ 3 3 $$$ $$$ lcm ( 1 5 ) = 5 $$$ $$$ lcm ( 2 4 ) = 4 $$$ $$$ lcm ( 3 3 ) = 3 $$$ output $$$ 3 \ 3 $$$ third test case $$$ lcm ( 3 6 ) = 6 $$$ show pair number sum $$$ 9 $$$ a lower $$$ lcm $$$,"['greedy', 'math']",1300.0
1360/A,"find minimum area a square land place two identical rectangular $$$ a \times b $$$ house side house parallel side desire square land formally two rectangles touch ( side corner ) intersect rectangles also touch side square must completely inside rotate rectangles take a look examples a better understand first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) — the number test case input $$$ t $$$ test case follow test case a line contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a b \le 100 $$$ ) — side lengths rectangles print $$$ t $$$ answer test case answer must a single integer — minimal area square land contain two rectangles dimension $$$ a \times b $$$ answer first two test case :","['greedy', 'math']",800.0
1359/F,know 's hard conduct a show lot participants spectators place nowadays still give dream make a car crash showcase ! decide replace real cars remote control ones call event ` ` remote control <unknown> show '' stream everything online preparation arrange arena — infinite 2d - field also buy $$$ n $$$ remote control cars set arena unfortunately cars buy go forward without turn leave right around additionally put cars direction want go formal car $$$ i $$$ ( $$$ 1 \le i \le n $$$ ) choose initial position ( $$$ x_i y_i $$$ ) a direction vector ( $$$ dx_i dy_i $$$ ) moreover car a constant speed $$$ s_i $$$ units per second car $$$ i $$$ launch star move ( $$$ x_i y_i $$$ ) direction ( $$$ dx_i dy_i $$$ ) constant speed $$$ s_i $$$ goal show create a car collision fast possible ! note launch every car begin show often fail produce collisions thus plan launch $$$ i $$$ -th car moment $$$ t_i $$$ n't choose $$$ t_i $$$ 's yet decide note 's necessary $$$ t_i $$$ integer $$$ t_i $$$ allow equal $$$ t_j $$$ $$$ i j $$$ show start time $$$ 0 $$$ show end two cars $$$ i $$$ $$$ j $$$ ( $$$ i \ne j $$$ ) collide ( i. e. come coordinate time ) duration show time start end 's fastest crash arrange choose $$$ t_i $$$ ? 's possible arrange a crash print shortest possible duration show otherwise report 's impossible first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 25000 $$$ ) — number cars next $$$ n $$$ line contain five integers $$$ x_i $$$ $$$ y_i $$$ $$$ dx_i $$$ $$$ dy_i $$$ $$$ s_i $$$ ( $$$ -1000 \le x_i y_i \le 1000 $$$ ; $$$ 1 \le <unknown> \le 1000 $$$ ; $$$ 1 \le <unknown> \le 1000 $$$ ; $$$ 1 \le s_i \le 1000 $$$ ) — initial position $$$ i $$$ -th car direction vector speed respectively 's guarantee cars start distinct position ( i. e. $$$ ( x_i y_i ) \neq ( x_j y_j ) $$$ $$$ i \neq j $$$ ) print shortest possible duration show 's possible arrange a crash choose $$$ t_i $$$ otherwise print ` ` show : ( ` ` answer consider correct absolute relative error exceed $$$ 10^ { -6 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ answer accept $$$ \frac { |a - b| } { \max { ( 1 |b| ) } } \le 10^ { -6 } $$$ picture first example : fastest cars crash cars $$$ 2 $$$ $$$ 4 $$$ let 's launch car $$$ 2 $$$ $$$ 0 $$$ car $$$ 4 $$$ $$$ <unknown> $$$ cars $$$ 1 $$$ $$$ 3 $$$ arbitrary time way cars $$$ 2 $$$ $$$ 4 $$$ crash $$$ <unknown> $$$ 's look like moment collision : 's picture second example :,"['brute force', 'data structures', 'geometry', 'math']",2900.0
1355/D,petya vasya compete a new interest game always begin game petya come array $$$ n $$$ positive integers sum elements array equal $$$ s $$$ petya select integer $$$ k $$$ $$$ 0 \leq k \leq s $$$ order win vasya find a non - empty subarray petya 's array sum select elements equal either $$$ k $$$ $$$ s - k $$$ otherwise vasya lose give integers $$$ n $$$ $$$ s $$$ determine petya win consider vasya play optimally petya win help first line contain two integers $$$ n $$$ $$$ s $$$ ( $$$ 1 \leq n \leq s \leq 10^ { 6 } $$$ ) — require length array require sum elements petya win print ` ` yes '' ( without quote ) first line print petya 's array second line array contain $$$ n $$$ positive integers sum equal $$$ s $$$ third line print $$$ k $$$ many correct answer print petya ca n't win print ` ` '' ( without quote ) print letter register ( lowercase uppercase ),"['constructive algorithms', 'math']",1400.0
1338/D,a tree $$$ n $$$ vertices go convert tree $$$ n $$$ rubber band infinitely large plane conversion rule follow : let 's define follow things : prove possible make a conversion sequence nest rubber band give constraints maximum length sequence nest rubber band obtain give tree ? find print first line contain integer $$$ n $$$ ( $$$ 3 \le n \le 10^ { 5 } $$$ ) — number vertices tree $$$ i $$$ -th next $$$ n-1 $$$ line contain two integers $$$ a _ { i } $$$ $$$ b _ { i } $$$ ( $$$ 1 \le a _ { i } \lt b _ { i } \le n $$$ ) — mean edge $$$ a _ { i } $$$ $$$ b _ { i } $$$ guarantee give graph form tree $$$ n $$$ vertices print answer first sample obtain a nest sequence $$$ 4 $$$ rubber band ( $$$ 1 $$$ $$$ 2 $$$ $$$ 5 $$$ $$$ 6 $$$ ) conversion show course conversions exist make a nest sequence $$$ 4 $$$ rubber band however make sequence $$$ 5 $$$ nest rubber band give tree see one possible conversions second sample,"['constructive algorithms', 'dfs and similar', 'dp', 'math']",2700.0
1338/C,consider infinite sequence $$$ s $$$ positive integers create repeat follow step : integer $$$ n $$$ find $$$ n $$$ -th element $$$ s $$$ answer $$$ t $$$ independent test case a sequence $$$ a $$$ lexicographically smaller a sequence $$$ b $$$ first position $$$ a $$$ $$$ b $$$ differ sequence $$$ a $$$ a smaller element correspond element $$$ b $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case next $$$ t $$$ line contain a single integer $$$ n $$$ ( $$$ 1\le n \le 10^ { 16 } $$$ ) — position element want know $$$ t $$$ line output answer correspond test case first elements $$$ s $$$ $$$ 1 2 3 4 8 12 5 10 15 \dots $$$,"['brute force', 'constructive algorithms', 'math']",2200.0
1336/B,"xenia a girl bear a noble due <unknown> <unknown> family xenia find ways amuse recently xenia buy $$$ n_r $$$ red gems $$$ n_g $$$ green gems $$$ n_b $$$ blue gems gems a weight , go pick three gems xenia love colorful things pick exactly one gem color xenia love balance try pick gems little difference weight specifically suppose weight pick gems $$$ x $$$ $$$ y $$$ $$$ z $$$ xenia want find minimum value $$$ ( x - y ) ^2 + ( y - z ) ^2 + ( z - x ) ^2 $$$ dear friend help ? first line contain a single integer $$$ t $$$ ( $$$ 1\le t \le 100 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain three integers $$$ n_r n_g n_b $$$ ( $$$ 1\le n_r n_g <unknown> 100000 $$$ ) — number red gems green gems blue gems respectively second line test case contain $$$ n_r $$$ integers $$$ r_1 r_2 \ldots r _ { n_r } $$$ ( $$$ 1\le r_i \le 1000000000 $$$ ) — $$$ r_i $$$ weight $$$ i $$$ -th red gem third line test case contain $$$ n_g $$$ integers $$$ g_1 g_2 \ldots g _ { n_g } $$$ ( $$$ 1\le g_i \le 1000000000 $$$ ) — $$$ g_i $$$ weight $$$ i $$$ -th green gem fourth line test case contain $$$ n_b $$$ integers $$$ b_1 b_2 \ldots b _ { n_b } $$$ ( $$$ 1\le b_i \le 1000000000 $$$ ) — $$$ b_i $$$ weight $$$ i $$$ -th blue gem guarantee $$$ \sum n_r \le 100000 $$$ $$$ \sum n_g \le 100000 $$$ $$$ \sum n_b \le 100000 $$$ ( sum test case ) test case print a line contain one integer — minimum value xenia want find first test case xenia follow gems : pick red gem weight $$$ 7 $$$ green gem weight $$$ 6 $$$ blue gem weight $$$ 4 $$$ achieve balance selection $$$ ( x - y ) ^2 + ( y - z ) ^2 + ( z - x ) <unknown> ( 7 - 6 ) ^2 + ( 6 - 4 ) ^2 + ( 4 - 7 ) <unknown> $$$","['greedy', 'math']",1700.0
1332/B,a positive integer call composite represent a product two positive integers greater $$$ 1 $$$ example follow number composite : $$$ 6 $$$ $$$ 4 $$$ $$$ 120 $$$ $$$ 27 $$$ follow number n't : $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 17 $$$ $$$ 97 $$$ alice give a sequence $$$ n $$$ composite number $$$ a_1 a_2 \ldots a_n $$$ want choose integer $$$ m \le 11 $$$ color element one $$$ m $$$ color $$$ 1 $$$ $$$ m $$$ : note equal elements color different color — choose one $$$ m $$$ color indices $$$ 1 $$$ $$$ n $$$ alice show already $$$ a_i \le 1000 $$$ always solve task choose $$$ m \le 11 $$$ help alice find require color note n't minimize maximize number color find solution $$$ m $$$ $$$ 1 $$$ $$$ 11 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case descriptions test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — amount number a sequence $$$ a $$$ second line test case contain $$$ n $$$ composite integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 4 \le a_i \le 1000 $$$ ) guarantee sum $$$ n $$$ test case n't exceed $$$ 10000 $$$ test case print $$$ 2 $$$ line first line contain a single integer $$$ m $$$ ( $$$ 1 \le m \le 11 $$$ ) — number use color consider color number $$$ 1 $$$ $$$ m $$$ second line contain color satisfy condition print $$$ n $$$ integers $$$ c_1 c_2 \dots c_n $$$ ( $$$ 1 \le c_i \le m $$$ ) $$$ c_i $$$ color $$$ i $$$ -th element multiple solutions print note n't minimize maximize number color find solution $$$ m $$$ $$$ 1 $$$ $$$ 11 $$$ remember color $$$ 1 $$$ $$$ m $$$ use least two elements color coprime ( i.e gcd greater $$$ 1 $$$ ) first test case $$$ \gcd ( <unknown> ) = 2 $$$ $$$ \gcd ( <unknown> ) =3 $$$ $$$ \gcd ( <unknown> ) = 5 $$$ therefore 's valid color elements color note color satisfy alice 's requirement test case second test case one element color color definitely satisfy alice 's requirement,"['brute force', 'constructive algorithms', 'greedy', 'math']",1400.0
1311/D,give three integers $$$ a \le b \le c $$$ one move add $$$ +1 $$$ $$$ -1 $$$ integers ( i.e increase decrease number one ) perform operation ( possibly zero ) number time even perform operation several time one number note make non - positive number use operations perform minimum number operations order obtain three integers $$$ a \le b \le c $$$ $$$ b $$$ divisible $$$ a $$$ $$$ c $$$ divisible $$$ b $$$ answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case next $$$ t $$$ line describe test case test case give a separate line three space - separated integers $$$ a b $$$ $$$ c $$$ ( $$$ 1 \le a \le b \le c \le 10000 $$$ ) test case print answer first line print $$$ res $$$ — minimum number operations perform obtain three integers $$$ a \le b \le c $$$ $$$ b $$$ divisible $$$ a $$$ $$$ c $$$ divisible $$$ b $$$ second line print suitable triple $$$ a b $$$ $$$ c $$$,"['brute force', 'math']",2000.0
1307/C,bessie cow intercept a text farmer john send burger queen ! however bessie sure a secret message hide inside text a string $$$ s $$$ lowercase latin letter consider a string $$$ t $$$ hide string $$$ s $$$ $$$ t $$$ exist a subsequence $$$ s $$$ whose indices form arithmetic progression example string aab hide string aaabb occur indices $$$ 1 $$$ $$$ 3 $$$ $$$ 5 $$$ form arithmetic progression a common difference $$$ 2 $$$ bessie think hide string occur time secret message two occurrences a subsequence $$$ s $$$ distinct set indices different help find number occurrences secret message ! example string aaabb a hide $$$ 3 $$$ time b hide $$$ 2 $$$ time ab hide $$$ 6 $$$ time aa hide $$$ 3 $$$ time bb hide $$$ 1 $$$ time aab hide $$$ 2 $$$ time aaa hide $$$ 1 $$$ time abb hide $$$ 1 $$$ time aaab hide $$$ 1 $$$ time aabb hide $$$ 1 $$$ time aaabb hide $$$ 1 $$$ time number occurrences secret message $$$ 6 $$$ first line contain a string $$$ s $$$ lowercase latin letter ( $$$ 1 \le |s| \le 100000 $$$ ) — text bessie intercept output a single integer — number occurrences secret message first example hide string <unknown> set : second example hide string occur third example hide string letter l,"['brute force', 'dp', 'math', 'strings']",1500.0
1305/C,become king codeforces kuroni solve follow problem give $$$ n $$$ number $$$ a_1 a_2 \dots a_n $$$ help kuroni calculate $$$ \prod _ { 1\le i < j\le n } |a_i - a_j| $$$ result big output modulo $$$ m $$$ familiar short notation $$$ \prod _ { 1\le i < j\le n } |a_i - a_j| $$$ equal $$$ |a_1 - <unknown> - <unknown> $$$ $$$ \dots $$$ $$$ <unknown> - <unknown> - <unknown> - <unknown> $$$ $$$ \dots $$$ $$$ <unknown> - a_n| \cdot $$$ $$$ \dots $$$ $$$ \cdot |a _ { n-1 } - a_n| $$$ word product $$$ |a_i - a_j| $$$ $$$ 1\le i < j \le n $$$ first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2\le n \le 2\cdot 100000 $$$ $$$ 1\le m \le 1000 $$$ ) — number number modulo second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) output single number — $$$ \prod _ { 1\le i < j\le n } |a_i - a_j| \bmod m $$$ first sample $$$ |8 - 5| = 3 \equiv 3 \bmod 10 $$$ second sample $$$ |1 - 4|\cdot|1 - <unknown> - 5| = 3\cdot 4 = 12 \equiv 0 \bmod 12 $$$ third sample $$$ |1 - 4|\cdot|1 - <unknown> - 9| = 24 \cdot 5 = 120 \equiv 1 \bmod 7 $$$,"['brute force', 'math']",1600.0
1299/D,"guy - manuel thomas plan $$$ 144 $$$ trip around world give a simple weight undirected connect graph $$$ n $$$ vertexes $$$ m $$$ edge follow restriction : n't simple cycle ( i. e. a cycle n't pass vertex ) length greater $$$ 3 $$$ pass vertex $$$ 1 $$$ cost a path ( necessarily simple ) graph define xor weight edge path edge count many time path pass trip cost $$$ 0 $$$ n't excite may choose subset edge incident vertex $$$ 1 $$$ remove many subsets , remove nontrivial cycle cost equal $$$ 0 $$$ pass vertex $$$ 1 $$$ result graph ? a cycle call nontrivial pass edge odd number time answer big output modulo $$$ 1000000000 + 7 $$$ first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 100000 $$$ ) — number vertexes edge graph $$$ i $$$ -th next $$$ m $$$ line contain three integers $$$ a_i $$$ $$$ b_i $$$ $$$ w_i $$$ ( $$$ 1 \le a_i b_i \le n a_i \neq b_i 0 \le w_i < 32 $$$ ) — endpoints $$$ i $$$ -th edge weight 's guarantee n't multiple edge graph connect n't simple cycle length greater $$$ 3 $$$ pass vertex $$$ 1 $$$ output answer modulo $$$ 1000000000 + 7 $$$ picture represent graph examples first example n't nontrivial cycle cost $$$ 0 $$$ either remove keep edge incident vertex $$$ 1 $$$ second example n't remove edge $$$ 1 - 2 $$$ a cycle $$$ 1 - 2 - 4 - 5 - 2 - 1 $$$ cost $$$ 0 $$$ ; also n't remove edge $$$ 1 - 3 $$$ a cycle $$$ 1 - 3 - 2 - 4 - 5 - 2 - 3 - 1 $$$ cost $$$ 0 $$$ valid subset consist edge third example subsets valid except two edge $$$ 1 - 3 $$$ $$$ 1 - 4 $$$ keep","['dfs and similar', 'dp', 'math']",3000.0
1293/B,dear cafe 's owner joe <unknown> soon take part a new game tv - show ` ` 1 <unknown> $$$ n $$$ ` ` ! game go round round host ask joe opponents a common question participants fail answer eliminate show end joe remain ( assume joe never answer a question wrong ! ) question joe answer $$$ s $$$ ( $$$ s > 0 $$$ ) opponents remain $$$ t $$$ ( $$$ 0 \le t \le s $$$ ) make a mistake joe receive $$$ <unknown> { t } { s } $$$ dollars consequently $$$ s - t $$$ opponents leave next question joe wonder maximum possible reward receive best possible scenario yet little time show start help answer instead ? first single line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) denote number joe 's opponents show print a number denote maximum prize ( dollars ) joe could answer consider correct 's absolute relative error wo n't exceed $$$ 10^ { -4 } $$$ word answer $$$ a $$$ jury answer $$$ b $$$ must hold $$$ \frac { |a - b| } { max ( 1 b ) } \le 10^ { -4 } $$$ second example best scenario would : one contestant fail first question fail next one total reward $$$ \displaystyle \frac { 1 } { 2 } + \frac { 1 } { 1 } = 1.5 $$$ dollars,"['greedy', 'math']",1000.0
1292/E,"interactive problem ! a normal day hide office a. r. c. markland - n rin receive artifact give exploration captain <unknown> much analysis realize artifact contain data a strange flower exist way new age however information chemical structure encrypt heavily chemical structure flower represent a string $$$ p $$$ <unknown> paper include rin already know length $$$ n $$$ string also conclude string contain three distinct letter : ` ` c '' ( <unknown> ) ` ` h '' ( <unknown> ) ` ` o '' ( oxygen ) moment rin input a string $$$ s $$$ arbitrary length artifact 's terminal return every start position $$$ s $$$ a substring $$$ p $$$ however artifact limit energy recharge way since technology way ancient <unknown> current a. r. c. 's devices specific : since artifact precious yet fragile rin nervous attempt crack final data give a help hand ? interaction start a single integer $$$ t $$$ ( $$$ 1 \le t \le 500 $$$ ) number test case interaction testcase describe : first read integer $$$ n $$$ ( $$$ 4 \le n \le 50 $$$ ) length string $$$ p $$$ make query type ` ` ? s '' ( $$$ 1 \le |s| \le n $$$ ) find occurrences $$$ s $$$ a substring $$$ p $$$ query need read result a series integers a line : find string $$$ p $$$ print ` ` ! $$$ p $$$ ` ` finish a test case query n't consume energy interactor return integer $$$ 1 $$$ $$$ 0 $$$ interactor return $$$ 1 $$$ proceed next test case terminate program last testcase interactor return $$$ 0 $$$ mean guess incorrect terminate guarantee a ` ` wrong answer '' verdict note every test case string $$$ p $$$ fix beforehand change query i.e interactor adaptive print query forget print end line flush output otherwise might get idleness limit exceed , use : hacksfor hack use follow format note hack one test case : first line contain a single integer $$$ t $$$ ( $$$ t = 1 $$$ ) second line contain integer $$$ n $$$ ( $$$ 4 \le n \le 50 $$$ ) — string 's size third line contain a string size $$$ n $$$ consist character ` ` c '' ` ` h '' ` ` o '' string contestants find note example interaction contain extra empty line 's easier read real interaction n't contain empty line n't print extra empty line well","['constructive algorithms', 'greedy', 'math']",3500.0
1286/C2,"problem different easy version constraints total answer lengthit interactive problemvenya join a tour madhouse orderlies play patients follow game orderlies pick a string $$$ s $$$ length $$$ n $$$ consist lowercase english letter player ask two type query : player ask $$$ 3 $$$ query first type make easier orderlies additional limitation : total number return substrings query first type must exceed $$$ \left\lceil 0.777 ( n+1 ) ^2 \right\rceil $$$ ( $$$ \lceil x \rceil $$$ $$$ x $$$ round ) venya ask write a program guess string interact orderlies ' program act game 's rule program immediately terminate guess string use a query second type case program guess string incorrectly violate game rule receive verdict wrong answer note every test case string fix beforehand change game mean interactor adaptive first line contain number $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — length pick string start interaction read number $$$ n $$$ ask a query a substring $$$ l $$$ $$$ r $$$ inclusively ( $$$ 1 \le l \le r \le n $$$ ) output ? l ron a separate line , substrings $$$ s [ l .. r ] $$$ return random order substring exactly every return substring character randomly shuffle case ask incorrect query ask $$$ 3 $$$ query first type $$$ \left\lceil 0.777 ( n+1 ) ^2 \right\rceil $$$ substrings return total receive verdict wrong answer guess string $$$ s $$$ output ! son a separate line print query forget flush output otherwise get idleness limit exceed flush output use : receive - ( dash ) answer query need terminate program exit code 0 ( example call exit ( 0 ) ) mean error interaction protocol n't terminate exit code 0 receive unsuccessful verdict hack formatto hack a solution use follow format : first line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — length string follow line contain string $$$ s $$$","['brute force', 'constructive algorithms', 'math']",2800.0
1284/C,"recall permutation array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) a sequence $$$ a $$$ a subsegment a sequence $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) elements begin several ( possibly zero ) elements end denote subsegments $$$ [ l r ] $$$ $$$ l r $$$ two integers $$$ 1 \le l \le r \le n $$$ indicate subsegment $$$ l-1 $$$ elements begin $$$ n - r $$$ elements end delete sequence a permutation $$$ p_1 p_2 \ldots p_n $$$ define a frame segment a subsegment $$$ [ l r ] $$$ $$$ \max\ { p_l p _ { l+1 } \dots p_r\ } - \min\ { p_l p _ { l+1 } \dots p_r\ } = r - l $$$ example permutation $$$ ( 6 7 1 8 5 3 2 4 ) $$$ frame segment : $$$ [ 1 2 ] [ 5 8 ] [ 6 7 ] [ 3 3 ] [ 8 8 ] $$$ particular a subsegment $$$ [ i i ] $$$ always a frame segment $$$ i $$$ $$$ 1 $$$ $$$ n $$$ inclusive define happiness a permutation $$$ p $$$ number pair $$$ ( l r ) $$$ $$$ 1 \le l \le r \le n $$$ $$$ [ l r ] $$$ a frame segment example permutation $$$ [ 3 1 2 ] $$$ happiness $$$ 5 $$$ : segment except $$$ [ 1 2 ] $$$ frame segment give integers $$$ n $$$ $$$ m $$$ <unknown> want compute sum happiness permutations length $$$ n $$$ modulo prime number $$$ m $$$ note exist $$$ n ! $$$ ( factorial $$$ n $$$ ) different permutations length $$$ n $$$ line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 250\,000 $$$ $$$ 100000000 \le m \le 1000000000 $$$ $$$ m $$$ prime ) print $$$ r $$$ ( $$$ 0 \le r < m $$$ ) sum happiness permutations length $$$ n $$$ modulo a prime number $$$ m $$$ sample input $$$ n=3 $$$ let 's consider permutations length $$$ 3 $$$ : thus sum happiness $$$ 6 + 5 + 5 + 5 + 5 + 6 = 32 $$$",['math'],1600.0
1270/G,give $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ $$$ 1\le i \le n $$$ hold $$$ i - n\le a_i\le i-1 $$$ find nonempty subset integers whose sum equal $$$ 0 $$$ show a subset exist give constraints several possible subsets zero - sum find test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 1000000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1\le n \le 1000000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ i - n \le a_i \le i-1 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case output two line first line output $$$ s $$$ ( $$$ 1\le s \le n $$$ ) — number elements subset second line output $$$ s $$$ integers $$$ i_1 i_2 \dots i_s $$$ ( $$$ 1\le i_k \le n $$$ ) integers pairwise different $$$ a _ { i_1 } + a _ { i_2 } + \dots + a _ { i_s } $$$ equal $$$ 0 $$$ several possible subsets zero - sum find first example get sum $$$ a_1 = 0 $$$ second example get sum $$$ a_1 + a_4 + a_3 + a_2 = 0 $$$,"['constructive algorithms', 'dfs and similar', 'math']",2700.0
1270/C,"let 's call array $$$ a_1 a_2 \dots a_m $$$ nonnegative integer number good $$$ a_1 + a_2 + \dots + a_m = 2\cdot ( a_1 \oplus a_2 \oplus \dots \oplus a_m ) $$$ $$$ \oplus $$$ denote bitwise xor operation example array $$$ [ 1 2 3 6 ] $$$ good $$$ 1 + 2 + 3 + 6 = 12 = 2\cdot 6 = 2\cdot ( 1\oplus 2 \oplus 3 \oplus 6 ) $$$ time array $$$ [ 1 2 1 3 ] $$$ n't good $$$ 1 + 2 + 1 + 3 = 7 \neq 2\cdot 1 = 2\cdot ( 1\oplus 2 \oplus 1 \oplus 3 ) $$$ give array length $$$ n $$$ : $$$ a_1 a_2 \dots a_n $$$ append $$$ 3 $$$ elements make good append elements n't different show solution always exist give constraints different solutions allow output note n't minimize number add elements ! , array good already allow append elements test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ $$$ ( 1\le n \le 100000 ) $$$ — size array second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0\le a_i \le 1000000000 $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case output two line first line output a single integer $$$ s $$$ ( $$$ 0\le s\le 3 $$$ ) — number elements want append second line output $$$ s $$$ integers $$$ b_1 \dots b_s $$$ ( $$$ 0\le b_i \le 10^ { 18 } $$$ ) — elements want append array different solutions allow output first test case example sum number $$$ 12 $$$ $$$ \oplus $$$ $$$ 6 $$$ condition already satisfy second test case example add $$$ 4 4 $$$ array become $$$ [ 8 4 4 ] $$$ sum number $$$ 16 $$$ $$$ \oplus $$$ number $$$ 8 $$$","['constructive algorithms', 'math']",1400.0
1270/B,"array $$$ a $$$ integers let 's denote maximal element $$$ \max ( a ) $$$ minimal $$$ \min ( a ) $$$ call array $$$ a $$$ $$$ k $$$ integers interest $$$ \max ( a ) - \min ( a ) \ge k $$$ example array $$$ [ 1 3 4 3 ] $$$ n't interest $$$ \max ( a ) - \min ( a ) = 4 - 1 = 3 < 4 $$$ array $$$ [ 7 3 0 4 3 ] $$$ $$$ \max ( a ) - \min ( a ) = 7 - 0 = 7 \ge 5 $$$ give array $$$ a $$$ $$$ n $$$ integers find interest nonempty subarray $$$ a $$$ tell n't exist array $$$ b $$$ a subarray array $$$ a $$$ $$$ b $$$ obtain $$$ a $$$ deletion several ( possibly zero ) elements begin several ( possibly zero ) elements end particular array a subarray first line contain integer number $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) $$$ t $$$ test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2\le n \le 2\cdot 100000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0\le a_i \le 1000000000 $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output ` ` '' a separate line interest nonempty subarray $$$ a $$$ otherwise output ` ` yes '' a separate line next line output two integers $$$ l $$$ $$$ r $$$ ( $$$ 1\le l \le r \le n $$$ ) — bound choose subarray multiple answer print print letter case ( upper lower ) second test case example one interest subarrays $$$ a = [ 2 0 1 9 ] $$$ : $$$ \max ( a ) - \min ( a ) = 9 - 0 = 9 \ge 4 $$$","['constructive algorithms', 'greedy', 'math']",1200.0
1267/K,"karl develop a key storage service user a positive integer key karl know store key plain text bad practice , instead store a key decide store a fingerprint a key however use exist fingerprint algorithm look bore invent one karl 's fingerprint calculate follow process : divide give integer 2 divide result 3 divide result 4 , get a result equal zero ( speak integer division time ) fingerprint define multiset remainder divisions example karl 's fingerprint algorithm apply key 11 : 11 divide 2 remainder 1 result 5 5 divide 3 remainder 2 result 1 1 divide 4 remainder 1 result 0 . thus key 11 produce sequence remainder $$$ [ 1 2 1 ] $$$ fingerprint multiset $$$ \ { 1 1 2\ } $$$ ksenia want prove karl 's fingerprint algorithm good example find key <unknown> 123456 produce fingerprint $$$ \ { 0 0 0 0 2 3 3 4\ } $$$ thus users risk fingerprint collision commonly use easy guess key like 123456 . ksenia want make word <unknown> want calculate number key fingerprint key give list commonly use key task help first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 50\,000 $$$ ) — number commonly use key examine next $$$ t $$$ line contain one integer $$$ k_i $$$ ( $$$ 1 \le k_i \le 10^ { 18 } $$$ ) — key key print one integer — number key fingerprint key fingerprint 11 15 15 produce a sequence remainder $$$ [ 1 1 2 ] $$$ number fingerprint multiset $$$ \ { 1 1 2\ } $$$",['math'],2100.0
1263/C,well - known test system mathforces a draw $$$ n $$$ rat units arrange rat distribute accord follow algorithm : $$$ k $$$ participants take part event $$$ n $$$ rat evenly distribute round nearest lower integer end draw unused rat may remain — give participants example $$$ n = 5 $$$ $$$ k = 3 $$$ participant recieve $$$ 1 $$$ rat unit also $$$ 2 $$$ rat units remain unused $$$ n = 5 $$$ $$$ k = 6 $$$ none participants increase rat vasya participate rat draw information total number participants event therefore want know different value rat increment possible get a result draw ask help example $$$ n=5 $$$ answer equal sequence $$$ 0 1 2 5 $$$ sequence value ( ) obtain $$$ \lfloor n / k \rfloor $$$ positive integer $$$ k $$$ ( $$$ \lfloor x \rfloor $$$ value $$$ x $$$ round ) : $$$ 0 = \lfloor <unknown> \rfloor $$$ $$$ 1 = \lfloor <unknown> \rfloor $$$ $$$ 2 = \lfloor <unknown> \rfloor $$$ $$$ 5 = \lfloor <unknown> \rfloor $$$ write a program a give $$$ n $$$ find a sequence possible rat increments first line contain integer number $$$ t $$$ ( $$$ 1 \le t \le 10 $$$ ) — number test case input $$$ t $$$ test case follow line contain integer $$$ n $$$ ( $$$ 1 \le n \le 1000000000 $$$ ) — total number rat units draw output answer $$$ t $$$ test case answer contain two line first line print a single integer $$$ m $$$ — number different rat increment value vasya get follow line print $$$ m $$$ integers ascend order — value possible rat increments,['math'],1400.0
1260/B,give two integers $$$ a $$$ $$$ b $$$ may perform number operations ( possibly zero ) operation choose positive integer $$$ x $$$ set $$$ a : = a - x $$$ $$$ b : = b - 2x $$$ $$$ a : = a - 2x $$$ $$$ b : = b - x $$$ note may choose different value $$$ x $$$ different operations possible make $$$ a $$$ $$$ b $$$ equal $$$ 0 $$$ simultaneously ? program answer $$$ t $$$ independent test case first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case test case follow test case represent one line contain two integers $$$ a $$$ $$$ b $$$ test case ( $$$ 0 \le a b \le 1000000000 $$$ ) test case print answer — yes possible make $$$ a $$$ $$$ b $$$ equal $$$ 0 $$$ simultaneously otherwise may print every letter case want ( example string yes yes yes yes recognize positive answer ) first test case example two operations use make $$$ a $$$ $$$ b $$$ equal zero :,['math'],1300.0
1257/G,give integer $$$ x $$$ represent a product $$$ n $$$ prime divisors $$$ p_1 \cdot p_2 \cdot \ldots \cdot p_n $$$ let $$$ s $$$ set positive integer divisors $$$ x $$$ ( include $$$ 1 $$$ $$$ x $$$ ) call a set integers $$$ d $$$ good ( ) pair $$$ a \in d $$$ $$$ b \in d $$$ $$$ a \ne b $$$ $$$ a $$$ divide $$$ b $$$ find a good subset $$$ s $$$ maximum possible size since answer large print size subset modulo $$$ 998244353 $$$ first line contain single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number prime divisors representation $$$ x $$$ second line contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 2 \le p_i \le 3000000 $$$ ) — prime factorization $$$ x $$$ print maximum possible size a good subset modulo $$$ 998244353 $$$ first sample $$$ x = <unknown> \cdot 2999957 $$$ one maximum good subsets $$$ \ { 43 2999957 <unknown> \ } $$$ second sample $$$ x = 6 \cdot 6 \cdot 4 = 144 $$$ one maximum good subsets $$$ \ { 9 12 16 \ } $$$,"['greedy', 'math']",2600.0
1254/C,"interactive problem khanh $$$ n $$$ point cartesian plane denote $$$ a_1 a_2 \ldots a_n $$$ point ' coordinate integers $$$ -1000000000 $$$ $$$ 1000000000 $$$ inclusive three point collinear say point vertices a convex polygon ; word exist a permutation $$$ p_1 p_2 \ldots p_n $$$ integers $$$ 1 $$$ $$$ n $$$ polygon $$$ a _ { p_1 } a _ { p_2 } \ldots a _ { p_n } $$$ convex vertices list counter - clockwise order khanh give number $$$ n $$$ hide coordinate point task guess permutation ask multiple query query give khanh $$$ 4 $$$ integers $$$ t $$$ $$$ i $$$ $$$ j $$$ $$$ k $$$ ; either $$$ t = 1 $$$ $$$ t = 2 $$$ ; $$$ i $$$ $$$ j $$$ $$$ k $$$ three distinct indices $$$ 1 $$$ $$$ n $$$ inclusive response khanh tell : recall cross product vector $$$ \overrightarrow { a } = ( x_a y_a ) $$$ vector $$$ \overrightarrow { b } = ( x_b y_b ) $$$ integer $$$ x_a \cdot y_b - x_b \cdot y_a $$$ sign a number $$$ 1 $$$ positive $$$ -1 $$$ otherwise prove cross product obtain query $$$ 0 $$$ ask $$$ 3 \cdot n $$$ query please note khanh fix coordinate point change answer query need guess coordinate permutation $$$ a _ { p_1 } a _ { p_2 } \ldots a _ { p_n } $$$ $$$ p_1 $$$ equal $$$ 1 $$$ indices vertices list counter - clockwise order start interaction read $$$ n $$$ ( $$$ 3 \leq n \leq 1\,000 $$$ ) — number vertices ask a query write $$$ 4 $$$ integers $$$ t $$$ $$$ i $$$ $$$ j $$$ $$$ k $$$ ( $$$ 1 \leq t \leq 2 $$$ $$$ 1 \leq i j k \leq n $$$ ) a separate line $$$ i $$$ $$$ j $$$ $$$ k $$$ distinct read a single integer get answer query explain prove answer a query always integer find permutation write a number $$$ 0 $$$ write $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$ line print a query forget output end line flush output otherwise get idleness limit exceed , use : hack formatto hack use follow format : first line contain integer $$$ n $$$ ( $$$ 3 \leq n \leq 1\,000 $$$ ) — number vertices $$$ i $$$ -th next $$$ n $$$ line contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ -1000000000 \le x_i y_i \le 1000000000 $$$ ) — coordinate point $$$ a_i $$$ image show hide polygon example : interaction example go :","['constructive algorithms', 'geometry', 'math']",2300.0
1254/B1,easier version problem version $$$ 1 \le n \le 100000 $$$ $$$ 0 \le a_i \le 1 $$$ hack problem solve lock problems christmas come protagonist bob prepare a spectacular present long - time best friend alice year decide prepare $$$ n $$$ box chocolate number $$$ 1 $$$ $$$ n $$$ initially $$$ i $$$ -th box contain $$$ a_i $$$ chocolate piece since bob a typical nice guy send alice $$$ n $$$ empty box word least one $$$ a_1 a_2 \ldots a_n $$$ positive since alice dislike coprime set happy exist integer $$$ k > 1 $$$ number piece box divisible $$$ k $$$ note alice wo n't mind exist empty box charlie alice 's boyfriend also bob 's second best friend decide help bob rearrange chocolate piece one second charlie pick a piece box $$$ i $$$ put either box $$$ i-1 $$$ box $$$ i+1 $$$ ( box exist ) course want help friend quickly possible therefore ask calculate minimum number second would need make alice happy first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number chocolate box second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1 $$$ ) — number chocolate piece $$$ i $$$ -th box guarantee least one $$$ a_1 a_2 \ldots a_n $$$ positive way charlie make alice happy print $$$ -1 $$$ otherwise print a single integer $$$ x $$$ — minimum number second charlie help bob make alice happy,"['constructive algorithms', 'greedy', 'math']",1800.0
1250/B,employees jebtrains way celebrate 256 - th day year ! $$$ n $$$ employees $$$ k $$$ team jebtrains employee a member ( exactly one ) team team number $$$ 1 $$$ $$$ k $$$ give array number $$$ t_1 t_2 \dots t_n $$$ $$$ t_i $$$ $$$ i $$$ -th employee 's team number jebtrains go rent a single bus get employees feast bus take one rid a bus pick entire team two entire team three team take a ride together may start a new project consider unacceptable 's prohibit split a team members a team take ride possible rent a bus capacity $$$ s $$$ a bus take $$$ s $$$ people a single ride total cost rent equal $$$ s \cdot r $$$ burl $$$ r $$$ number rid note 's impossible rent two bus help jebtrains calculate minimum cost rent require get employees feast fulfil condition first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le <unknown> 1 \le k \le 8000 $$$ ) — number employees number team jebtrains second line contain a sequence integers $$$ t_1 t_2 \dots t_n $$$ $$$ t_i $$$ ( $$$ 1 \le t_i \le k $$$ ) $$$ i $$$ -th employee 's team number every team contain least one employee print minimum cost rent,"['brute force', 'constructive algorithms', 'greedy', 'math']",1800.0
1249/B2,difference easy hard versions constraints $$$ n $$$ kid read a unique book end day $$$ i $$$ -th kid give book $$$ p_i $$$ -th kid ( case $$$ i = p_i $$$ kid give book ) guarantee value $$$ p_i $$$ distinct integers $$$ 1 $$$ $$$ n $$$ ( i.e $$$ p $$$ a permutation ) sequence $$$ p $$$ n't change day day fix example $$$ n=6 $$$ $$$ p= [ 4 6 1 3 5 2 ] $$$ end first day book $$$ 1 $$$ -st kid belong $$$ 4 $$$ -th kid $$$ 2 $$$ -nd kid belong $$$ 6 $$$ -th kid end second day book $$$ 1 $$$ -st kid belong $$$ 3 $$$ -th kid $$$ 2 $$$ -nd kid belong $$$ 2 $$$ -th kid task determine number day book $$$ i $$$ -th child return back first time every $$$ i $$$ $$$ 1 $$$ $$$ n $$$ consider follow example : $$$ p = [ 5 1 2 4 3 ] $$$ book $$$ 1 $$$ -st kid pass follow kid : fourth day book first kid return owner book fourth kid return first time exactly one day answer $$$ q $$$ independent query first line input contain one integer $$$ q $$$ ( $$$ 1 \le q \le 1000 $$$ ) — number query $$$ q $$$ query follow first line query contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number kid query second line query contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ 1 \le p_i \le n $$$ $$$ p_i $$$ distinct i.e $$$ p $$$ a permutation ) $$$ p_i $$$ kid get book $$$ i $$$ -th kid guarantee $$$ \sum n \le 200000 $$$ ( sum $$$ n $$$ query exceed $$$ 200000 $$$ ) query print answer : $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ $$$ a_i $$$ number day book $$$ i $$$ -th child return back first time query,"['dfs and similar', 'math']",1300.0
1238/C,play a game character overcome different obstacles current problem come a cliff cliff height $$$ h $$$ a move platform height $$$ x $$$ $$$ 1 $$$ $$$ h $$$ platform either hide inside cliff move first $$$ n $$$ move platforms heights $$$ p_1 p_2 \dots p_n $$$ platform height $$$ h $$$ move ( character initially stand ) character stand move platform height $$$ x $$$ pull a special lever switch state two platforms : height $$$ x $$$ $$$ x - 1 $$$ word platform currently stand hide cliff platform one unit change state : hide move move hide second case safely land note way move one platform another character quite fragile safely fall height $$$ 2 $$$ word fall platform $$$ x $$$ platform $$$ x - 2 $$$ okay fall $$$ x $$$ $$$ x - 3 $$$ ( lower ) certain death sometimes 's possible come cliff always buy ( <unknown> currency ) several magic crystals magic crystal use change state single platform ( except platform height $$$ h $$$ <unknown> crystals ) use crystal disappear minimum number magic crystal need buy safely land $$$ 0 $$$ grind level ? first line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 100 $$$ ) — number query query contain two line independent query first line query contain two integers $$$ h $$$ $$$ n $$$ ( $$$ 1 \le h \le 1000000000 $$$ $$$ 1 \le n \le \min ( h 2 \cdot 100000 ) $$$ ) — height cliff number move platforms second line contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ ( $$$ h = p_1 > p_2 > \dots > p_n \ge 1 $$$ ) — correspond move platforms descend order heights sum $$$ n $$$ query exceed $$$ 200000 $$$ query print one integer — minimum number magic crystals spend safely come grind level ( height $$$ 0 $$$ ),"['dp', 'greedy', 'math']",1600.0
1234/E,"let 's define $$$ p_i ( n ) $$$ follow permutation : $$$ [ i 1 2 \dots i - 1 i + 1 \dots n ] $$$ mean $$$ i $$$ -th permutation almost identity ( i.e map every element ) permutation element $$$ i $$$ first position examples : give array $$$ x_1 x_2 \dots x_m $$$ ( $$$ 1 \le x_i \le n $$$ ) let $$$ pos ( p val ) $$$ position element $$$ val $$$ $$$ p $$$ , $$$ pos ( p_1 ( 4 ) 3 ) = 3 pos ( p_2 ( 4 ) 2 ) = 1 pos ( p_4 ( 4 ) 4 ) = 1 $$$ let 's define a function $$$ f ( p ) = \sum\limits _ { i=1 } ^ { m - 1 } <unknown> ( p x_i ) - pos ( p x _ { i + 1 } ) | $$$ $$$ |val| $$$ absolute value $$$ val $$$ function mean sum distance adjacent elements $$$ x $$$ $$$ p $$$ task calculate $$$ f ( p_1 ( n ) ) f ( p_2 ( n ) ) \dots f ( p_n ( n ) ) $$$ first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n m \le 200000 $$$ ) — number elements permutation number elements $$$ x $$$ second line input contain $$$ m $$$ integers ( $$$ m $$$ $$$ n $$$ ) $$$ x_1 x_2 \dots x_m $$$ ( $$$ 1 \le x_i \le n $$$ ) $$$ x_i $$$ $$$ i $$$ -th element $$$ x $$$ elements $$$ x $$$ repeat appear arbitrary order print $$$ n $$$ integers : $$$ f ( p_1 ( n ) ) f ( p_2 ( n ) ) \dots f ( p_n ( n ) ) $$$ consider first example : $$$ x = [ 1 2 3 4 ] $$$ <unknown> second example : $$$ x = [ 2 1 5 3 5 ] $$$ ,",['math'],2000.0
1225/D,give $$$ n $$$ positive integers $$$ a_1 \ldots a_n $$$ integer $$$ k \geq 2 $$$ count number pair $$$ i j $$$ $$$ 1 \leq i < j \leq n $$$ exist integer $$$ x $$$ $$$ a_i \cdot a_j = x^k $$$ first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \leq n \leq 100000 $$$ $$$ 2 \leq k \leq 100 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 100000 $$$ ) print a single integer — number suitable pair sample case suitable pair :,['math'],1800.0
1225/C,vasya fancy number long integer power two petya hand <unknown> like a single integer $$$ p $$$ ( may positive negative zero ) combine taste invent $$$ p $$$ -binary number form $$$ 2^x + p $$$ $$$ x $$$ a non - negative integer example $$$ -9 $$$ -binary ( ` ` minus nine '' binary ) number : $$$ -8 $$$ ( minus eight ) $$$ 7 $$$ $$$ 1015 $$$ ( $$$ <unknown> ^ 0 - 9 $$$ $$$ <unknown> ^ 4 - 9 $$$ $$$ <unknown> { 10 } -9 $$$ ) boys use $$$ p $$$ -binary number represent everything face a problem : give a positive integer $$$ n $$$ 's smallest number $$$ p $$$ -binary number ( necessarily distinct ) need represent $$$ n $$$ sum ? may possible representation impossible altogether help solve problem example $$$ <unknown> $$$ represent $$$ 7 $$$ $$$ 2 ^ 0 + 2 ^ 1 + 2 ^ 2 $$$ $$$ <unknown> $$$ represent $$$ 7 $$$ one number $$$ ( 2 ^ 4 - 9 ) $$$ note negative $$$ p $$$ -binary number allow sum ( see note section example ) line contain two integers $$$ n $$$ $$$ p $$$ ( $$$ 1 \leq n \leq 1000000000 $$$ $$$ -1000 \leq p \leq 1000 $$$ ) impossible represent $$$ n $$$ sum number $$$ p $$$ -binary number print a single integer $$$ -1 $$$ otherwise print smallest possible number summands $$$ 0 $$$ -binary number regular binary power thus first sample case represent $$$ 24 = ( 2 ^ 4 + 0 ) + ( 2 ^ 3 + 0 ) $$$ second sample case represent $$$ 24 = ( 2 ^ 4 + 1 ) + ( 2 ^ 2 + 1 ) + ( 2 ^ 0 + 1 ) $$$ third sample case represent $$$ 24 = ( 2 ^ 4 - 1 ) + ( 2 ^ 2 - 1 ) + ( 2 ^ 2 - 1 ) + ( 2 ^ 2 - 1 ) $$$ note repeat summands allow fourth sample case represent $$$ 4 = ( 2 ^ 4 - 7 ) + ( 2 ^ 1 - 7 ) $$$ note second summand negative allow fifth sample case representation possible,"['brute force', 'math']",1600.0
1216/E1,difference easy hard versions maximum value $$$ k $$$ give infinite sequence form ` ` <unknown> $$$ \dots $$$ ` ` consist block consecutive positive integers write one another first block consist number $$$ 1 $$$ $$$ 1 $$$ second one — $$$ 1 $$$ $$$ 2 $$$ third one — $$$ 1 $$$ $$$ 3 $$$ $$$ \dots $$$ $$$ i $$$ -th block consist number $$$ 1 $$$ $$$ i $$$ first $$$ 56 $$$ elements sequence ` ` <unknown> '' elements sequence number one example $$$ 1 $$$ -st element sequence $$$ 1 $$$ $$$ 3 $$$ -rd element sequence $$$ 2 $$$ $$$ 20 $$$ -th element sequence $$$ 5 $$$ $$$ 38 $$$ -th element $$$ 2 $$$ $$$ 56 $$$ -th element sequence $$$ 0 $$$ task answer $$$ q $$$ independent query $$$ i $$$ -th query give one integer $$$ k_i $$$ calculate digit position $$$ k_i $$$ sequence first line input contain one integer $$$ q $$$ ( $$$ 1 \le q \le 500 $$$ ) — number query $$$ i $$$ -th follow $$$ q $$$ line contain one integer $$$ k_i $$$ $$$ ( 1 \le k_i \le 1000000000 ) $$$ — description correspond query print $$$ q $$$ line $$$ i $$$ -th line print one digit $$$ x_i $$$ $$$ ( 0 \le x_i \le 9 ) $$$ — answer query $$$ i $$$ i.e $$$ x_i $$$ equal element position $$$ k_i $$$ sequence answer query first example describe problem statement,"['brute force', 'math']",1900.0
1214/B,$$$ b $$$ boys $$$ g $$$ girls participate olympiad metropolises a board game tournament even $$$ n $$$ participants accept invitation organizers know many boys girls among organizers prepare red badge girls blue ones boys vasya prepare $$$ n+1 $$$ deck badge $$$ i $$$ -th ( $$$ i $$$ $$$ 0 $$$ $$$ n $$$ inclusive ) deck contain $$$ i $$$ blue badge $$$ n - i $$$ red ones total number badge deck exactly $$$ n $$$ determine minimum number deck among $$$ n+1 $$$ vasya take a suitable deck matter many girls boys among participants tournament first line contain integer $$$ b $$$ ( $$$ 1 \le b \le 300 $$$ ) number boys second line contain integer $$$ g $$$ ( $$$ 1 \le g \le 300 $$$ ) number girls third line contain integer $$$ n $$$ ( $$$ 1 \le n \le b + g $$$ ) number board game tournament participants output integer minimum number badge deck vasya could take first example 4 deck take : ( 0 blue 3 red ) ( 1 blue 2 red ) ( 2 blue 1 red ) ( 3 blue 0 red ) second example 4 deck take : ( 2 blue 3 red ) ( 3 blue 2 red ) ( 4 blue 1 red ) ( 5 blue 0 red ) pile ( 0 blue 5 red ) ( 1 blue 4 red ) use,"['brute force', 'math']",1100.0
1209/H,"airports often use move walkways help walk big distance faster walkway speed effectively increase speed stand a walkway let move could also walk effective speed walk speed plus walkway 's speed limak want get point $$$ 0 $$$ point $$$ l $$$ a straight line $$$ n $$$ disjoint walkways $$$ i $$$ -th walkway describe two integers $$$ x_i $$$ $$$ y_i $$$ a real value $$$ s_i $$$ $$$ i $$$ -th walkway start $$$ x_i $$$ end $$$ y_i $$$ speed $$$ s_i $$$ every walkway locate inside segment $$$ [ 0 l ] $$$ two walkways positive intersection however touch endpoints limak need decide distribute energy example might make sense stand somewhere ( walk slowly ) a lot energy walk faster limak 's initial energy $$$ 0 $$$ must never drop value moment walk speed $$$ v $$$ interval $$$ [ 0 2 ] $$$ cost $$$ v $$$ energy per second continuously recover energy speed $$$ 1 $$$ energy per second , walk speed $$$ v $$$ energy increase $$$ ( 1 - v ) $$$ note negative value would mean lose energy particular walk speed $$$ 1 $$$ wo n't change energy walk speed $$$ <unknown> $$$ effectively give $$$ <unknown> $$$ energy per second limak choose speed arbitrarily ( real value interval $$$ [ 0 2 ] $$$ ) every moment time ( include moments locate non - integer position ) everything continuous ( non - discrete ) fastest time limak get $$$ 0 $$$ $$$ l $$$ ? first line contain integers $$$ n $$$ $$$ l $$$ ( $$$ 1 \le n \le 200\,000 $$$ $$$ 1 \le l \le 1000000000 $$$ ) number walkways distance walk next $$$ n $$$ line contain integers $$$ x_i $$$ $$$ y_i $$$ real value $$$ s_i $$$ ( $$$ 0 \le x_i < y_i \le l $$$ $$$ 0.1 \le s_i \le <unknown> $$$ ) value $$$ s_i $$$ give $$$ 9 $$$ digits decimal point 's guarantee two walkways a positive intersection walkways list leave right , $$$ y_i \le x _ { i + 1 } $$$ $$$ 1 \le i \le n - 1 $$$ print one real value fastest possible time reach $$$ l $$$ answer consider correct absolute relative error wo n't exceed $$$ 10^ { -9 } $$$ draw show first two examples first one a walkway $$$ 0 $$$ $$$ 2 $$$ speed $$$ <unknown> $$$ limak want get point $$$ 5 $$$ second example a walkway $$$ 2 $$$ $$$ 4 $$$ speed $$$ <unknown> $$$ first example one optimal strategies follow total time $$$ 1 + 1 + 1 = 3 $$$","['data structures', 'greedy', 'math']",3300.0
1197/A,let 's denote a $$$ k $$$ -step ladder follow structure : exactly $$$ k + 2 $$$ wooden plank whichnote neither base plank step plank require equal example ladder $$$ 1 $$$ $$$ 3 $$$ correct $$$ 2 $$$ -step ladder ladder $$$ 2 $$$ a correct $$$ 1 $$$ -step ladder first picture lengths plank $$$ [ 3 3 ] $$$ base $$$ [ 1 ] $$$ step second picture lengths $$$ [ 3 3 ] $$$ base $$$ [ 2 ] $$$ step third picture lengths $$$ [ 3 4 ] $$$ base $$$ [ 2 3 ] $$$ step $$$ n $$$ plank length $$$ i $$$ -th plank $$$ a_i $$$ n't a saw ca n't cut plank though a hammer <unknown> assemble improvise ` ` ladder '' plank question : maximum number $$$ k $$$ choose subset give plank assemble a $$$ k $$$ -step ladder use ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number query query independent query consist two line first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ) — number plank second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 100000 $$$ ) — lengths correspond plank 's guarantee total number plank query n't exceed $$$ 100000 $$$ print $$$ t $$$ integers — one per query $$$ i $$$ -th integer maximum number $$$ k $$$ choose subset plank give $$$ i $$$ -th query assemble a $$$ k $$$ -step ladder use print $$$ 0 $$$ ca n't make even $$$ 1 $$$ -step ladder give set plank examples query $$$ 1 - 3 $$$ show image legend section russian meme express quality ladder :,"['greedy', 'math']",900.0
1196/A,"alice bob receive three big pile candy a gift want divide candy fair possible , alice take one pile candy bob take one two pile last pile split alice bob want : example possible alice take whole pile bob get nothing take candy pile alice candy bob discard candy number candy equal number candy bob course bob candy alice bob want many candy possible plan process divide candy accordingly please calculate maximum number candy alice division process ( course bob number candy ) answer $$$ q $$$ independent query let 's see follow example : $$$ [ 1 3 4 ] $$$ alice choose third pile bob take second pile candy first pile go bob — alice $$$ 4 $$$ candy bob $$$ 4 $$$ candy another example $$$ [ 1 10 100 ] $$$ alice choose second pile bob choose first pile candy third pile divide a way bob take $$$ 54 $$$ candy alice take $$$ 46 $$$ candy bob $$$ 55 $$$ candy alice $$$ 56 $$$ candy discard one candy — $$$ 55 $$$ candy first line input contain one integer $$$ q $$$ ( $$$ 1 \le q \le 1000 $$$ ) — number query $$$ q $$$ query follow line query contain three integers $$$ a b $$$ $$$ c $$$ ( $$$ 1 \le a b c \le 10^ { 16 } $$$ ) — number candy first second third pile correspondingly print $$$ q $$$ line $$$ i $$$ -th line contain answer $$$ i $$$ -th query — maximum number candy alice division alice bob act optimally ( course bob number candy )","['brute force', 'constructive algorithms', 'math']",800.0
1195/B,"even dinner sis 's students gather together play game sport mafia tournament alya put candy box serve a prize a winner , perform $$$ n $$$ action first action perform put a single candy box remain move choose two options : thus box empty use second option example one possible sequence alya 's action look follow : way perform $$$ 9 $$$ action number candy end $$$ 11 $$$ alya eat $$$ 4 $$$ candy total know total number action $$$ n $$$ number candy end $$$ k $$$ need find total number sweets alya eat number move first option 's guarantee give $$$ n $$$ $$$ k $$$ answer always exist please note action first option alya take eat exactly one candy first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 1000000000 $$$ ; $$$ 0 \le k \le 1000000000 $$$ ) — total number move number candy box end 's guarantee give $$$ n $$$ $$$ k $$$ answer exist print a single integer — number candy alya eat please note problem n't multiple possible answer — answer unique input data first example alya make one move accord statement first move always put one candy box hence alya eat $$$ 0 $$$ candy second example possible sequence alya 's action look follow : way make exactly $$$ n=9 $$$ action end box contain $$$ 1 + 2 - 1 - 1 + 3 - 1 + 4 - 1 + 5=11 $$$ candy answer $$$ 4 $$$ since eat $$$ 4 $$$ candy total","['brute force', 'math']",1000.0
1189/B,give $$$ n $$$ number $$$ a_1 a_2 \ldots a_n $$$ possible arrange a circle a way every number strictly less sum neighbor ? example array $$$ [ 1 4 5 6 7 8 ] $$$ arrangement leave valid arrangement right $$$ <unknown> 4 + 1 $$$ $$$ 8 > 1 + 6 $$$ first line contain a single integer $$$ n $$$ ( $$$ 3\le n \le 100000 $$$ ) — number number second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \le 1000000000 $$$ ) — number give number necessarily distinct ( i.e duplicate allow ) solution output ` ` '' first line a solution output ` ` yes '' first line second line output $$$ n $$$ number — elements array order stay circle first last element output consider neighbor circle multiple solutions output print circle start element one possible arrangements show first example : $$$ 4 < 2 + 3 $$$ ; $$$ 2 < 4 + 3 $$$ ; $$$ 3 < 4 + 2 $$$ one possible arrangements show second example matter arrange $$$ 13 8 5 $$$ a circle third example $$$ 13 $$$ $$$ 8 $$$ $$$ 5 $$$ neighbor $$$ <unknown> 8 + 5 $$$ solution fourth example,"['greedy', 'math']",1100.0
1182/A,a give integer $$$ n $$$ find number ways fill $$$ 3 \times n $$$ tile shape describe picture upon fill empty space allow shape overlap line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 60 $$$ ) — length print number ways fill first example $$$ 4 $$$ possible case fill second example fill shape $$$ 3 \times 1 $$$ tile,"['dp', 'math']",1000.0
1178/D,"every person like prime number alice a person thus also share love bob want give <unknown> gift could n't think anything inventive hence give a graph original bob ! alice surely thrill ! build graph need four condition satisfy : example $$$ n = 4 $$$ first graph ( leave one ) invalid degree vertex $$$ 2 $$$ ( $$$ 4 $$$ ) equal $$$ 1 $$$ prime second graph ( middle one ) invalid total number edge $$$ 4 $$$ a prime number third graph ( right one ) a valid answer $$$ n = 4 $$$ note graph disconnect please help bob find graph ! input consist a single integer $$$ n $$$ ( $$$ 3 \leq n \leq 1\,000 $$$ ) — number vertices graph satisfy condition print a single line contain integer $$$ -1 $$$ otherwise first print a line contain a prime number $$$ m $$$ ( $$$ 2 \leq m \leq \frac { n ( n-1 ) } { 2 } $$$ ) — number edge graph , print $$$ m $$$ line $$$ i $$$ -th contain two integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1 \leq u_i v_i \leq n $$$ ) — mean edge vertices $$$ u_i $$$ $$$ v_i $$$ degree vertex must prime must multiple ( parallel ) edge self - loops multiple solutions may print note graph disconnect first example describe statement second example degrees vertices $$$ [ 7 5 2 2 3 2 2 3 ] $$$ number prime additionally number edge $$$ 13 $$$ also a prime number hence condition satisfy","['constructive algorithms', 'greedy', 'math']",1500.0
1174/E,"let 's define a function $$$ f ( p ) $$$ a permutation $$$ p $$$ follow let $$$ g_i $$$ greatest common divisor ( gcd ) elements $$$ p_1 $$$ $$$ p_2 $$$ ... $$$ p_i $$$ ( word gcd prefix length $$$ i $$$ ) $$$ f ( p ) $$$ number distinct elements among $$$ g_1 $$$ $$$ g_2 $$$ ... $$$ g_n $$$ let $$$ f _ { max } ( n ) $$$ maximum value $$$ f ( p ) $$$ among permutations $$$ p $$$ integers $$$ 1 $$$ $$$ 2 $$$ ... $$$ n $$$ give integers $$$ n $$$ count number permutations $$$ p $$$ integers $$$ 1 $$$ $$$ 2 $$$ ... $$$ n $$$ $$$ f ( p ) $$$ equal $$$ f _ { max } ( n ) $$$ since answer may large print remainder division $$$ 1000\,000\,007 = 1000000000 + 7 $$$ line contain integer $$$ n $$$ ( $$$ 2 \le n \le 1000000 $$$ ) — length permutations line contain answer modulo $$$ 1000000000 + 7 $$$ consider second example : permutations length $$$ 3 $$$ : maximum value $$$ f _ { max } ( 3 ) = 2 $$$ $$$ 4 $$$ permutations $$$ p $$$ $$$ f ( p ) = 2 $$$","['dp', 'math']",2500.0
1163/A,three friends kuro shiro katie meet ! 's time a party ... cat unite ? right a party since want much fun possible invite friends $$$ n $$$ cat party sit a circle eat soup rule simple : anyone finish soup leave circle katie suddenly notice whenever a cat leave place sit become empty space mean circle divide smaller continuous group cat sit next moment katie observe $$$ m $$$ cat leave circle raise a question katie : maximum possible number group circle divide moment ? could help curiosity ? see examples descriptions picture ` ` note '' section line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n \leq 1000 $$$ $$$ 0 \leq m \leq n $$$ ) — initial number cat party number cat leave circle moment katie observe respectively print a single integer — maximum number group cat moment katie observe first example originally $$$ 7 $$$ cat sit show create a single group : observe moment $$$ 4 $$$ cat leave table suppose cat $$$ 2 $$$ $$$ 3 $$$ $$$ 5 $$$ $$$ 7 $$$ leave $$$ 3 $$$ group remain possible show maximum possible number group remain second example $$$ 6 $$$ cat sit show : observe moment $$$ 2 $$$ cat leave table suppose cat number $$$ 3 $$$ $$$ 6 $$$ leave $$$ 2 $$$ group remain ( $$$ \ { 1 2\ } $$$ $$$ \ { 4 5\ } $$$ ) impossible $$$ 2 $$$ group cat remain third example cat leave $$$ 1 $$$ group consist cat fourth example cat leave circle $$$ 0 $$$ group,"['greedy', 'math']",900.0
1158/F,"let $$$ c $$$ positive integer let 's call array $$$ a_1 a_2 \ldots a_n $$$ positive integers $$$ c $$$ -array $$$ i $$$ condition $$$ 1 \leq a_i \leq c $$$ satisfy let 's call $$$ c $$$ -array $$$ b_1 b_2 \ldots b_k $$$ a subarray $$$ c $$$ -array $$$ a_1 a_2 \ldots a_n $$$ exist set $$$ k $$$ indices $$$ 1 \leq i_1 < i_2 < \ldots < i_k \leq n $$$ $$$ b_j = a _ { i_j } $$$ $$$ 1 \leq j \leq k $$$ let 's define density $$$ c $$$ -array $$$ a_1 a_2 \ldots a_n $$$ maximal non - negative integer $$$ p $$$ $$$ c $$$ -array contain $$$ p $$$ number a subarray $$$ a_1 a_2 \ldots a_n $$$ give a number $$$ c $$$ $$$ c $$$ -array $$$ a_1 a_2 \ldots a_n $$$ $$$ 0 \leq p \leq n $$$ find number sequence indices $$$ 1 \leq i_1 < i_2 < \ldots < i_k \leq n $$$ $$$ 1 \leq k \leq n $$$ density array $$$ a _ { i_1 } a _ { i_2 } \ldots a _ { i_k } $$$ equal $$$ p $$$ find number modulo $$$ 998\,244\,353 $$$ large first line contain two integers $$$ n $$$ $$$ c $$$ separate space ( $$$ 1 \leq n c \leq 3\,000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ separate space ( $$$ 1 \leq a_i \leq c $$$ ) print $$$ n + 1 $$$ number $$$ s_0 s_1 \ldots s_n $$$ $$$ s_p $$$ equal number sequence indices $$$ 1 \leq i_1 < i_2 < \ldots < i_k \leq n $$$ $$$ 1 \leq k \leq n $$$ modulo $$$ 998\,244\,353 $$$ density array $$$ a _ { i_1 } a _ { i_2 } \ldots a _ { i_k } $$$ equal $$$ p $$$ first example 's easy see density array always equal length exist $$$ 4 $$$ sequence one index $$$ 6 $$$ two indices $$$ 4 $$$ three $$$ 1 $$$ four second example sequence indices array non - zero density indices case wo n't least one number $$$ 1 $$$ $$$ 3 $$$ array wo n't satisfy condition density $$$ p \geq 1 $$$","['dp', 'math']",3500.0
1158/B,"let $$$ s $$$ string consist symbols ` ` 0 '' ` ` 1 '' let 's call a string $$$ t $$$ a substring string $$$ s $$$ exist number $$$ 1 \leq l \leq |s| - |t| + 1 $$$ $$$ t = s_l s _ { l+1 } \ldots s _ { l + |t| - 1 } $$$ let 's call a substring $$$ t $$$ string $$$ s $$$ unique exist one $$$ l $$$ example let $$$ s = $$$ ` ` <unknown> '' a string $$$ t = $$$ ` ` 010 '' unique substring $$$ s $$$ $$$ l = 2 $$$ one suitable number , example $$$ t = $$$ ` ` 10 '' n't a unique substring $$$ s $$$ $$$ l = 1 $$$ $$$ l = 3 $$$ suitable example $$$ t = $$$ ` ` 00 '' n't a substring $$$ s $$$ suitable $$$ l $$$ today vasya solve follow problem informatics lesson : give a string consist symbols ` ` 0 '' ` ` 1 '' task find length minimal unique substring write a solution problem want test ask help give $$$ 2 $$$ positive integers $$$ n $$$ $$$ k $$$ $$$ ( n \bmod 2 ) = ( k \bmod 2 ) $$$ $$$ ( x \bmod 2 ) $$$ operation take remainder $$$ x $$$ divide $$$ 2 $$$ find string $$$ s $$$ consist $$$ n $$$ symbols ` ` 0 '' ` ` 1 '' length minimal unique substring equal $$$ k $$$ first line contain two integers $$$ n $$$ $$$ k $$$ separate space ( $$$ 1 \leq k \leq n \leq 100\,000 $$$ $$$ ( k \bmod 2 ) = ( n \bmod 2 ) $$$ ) print a string $$$ s $$$ length $$$ n $$$ consist symbols ` ` 0 '' ` ` 1 '' minimal length unique substring $$$ s $$$ equal $$$ k $$$ find suitable string guarantee exist least one string first test 's easy see unique substring string $$$ s = $$$ ` ` 1111 '' string $$$ s $$$ length $$$ 4 $$$ second test a string $$$ s = $$$ ` ` 01010 '' minimal unique substring $$$ t = $$$ ` ` 101 '' length $$$ 3 $$$ third test a string $$$ s = $$$ ` ` 1011011 '' minimal unique substring $$$ t = $$$ ` ` 110 '' length $$$ 3 $$$","['constructive algorithms', 'math', 'strings']",2200.0
1149/A,"'re give away nice huge bag contain number tile ! a bag want present contain $$$ n $$$ tile a single number write — either $$$ 1 $$$ $$$ 2 $$$ however one condition must fulfill order receive prize need put tile bag a sequence order wish compute sum prefix sequence count many sum prime number want keep prize need maximize number prim get win prize ? hurry bag wait ! first line input contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 200\,000 $$$ ) — number number tile bag follow line contain $$$ n $$$ space - separated integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ a_i \in \ { 1 2\ } $$$ ) — value write tile output a permutation $$$ b_1 b_2 \dots b_n $$$ input sequence $$$ ( a_1 a_2 \dots a_n ) $$$ maximize number prefix sum prime number multiple optimal permutations output first solution produce prefix sum $$$ 1 \mathbf { \color { blue } { 2 } } \mathbf { \color { blue } { 3 } } \mathbf { \color { blue } { 5 } } \mathbf { \color { blue } { 7 } } $$$ ( four prim construct ) prefix sum second solution $$$ 1 \mathbf { \color { blue } { 2 } } \mathbf { \color { blue } { 3 } } \mathbf { \color { blue } { 5 } } 6 \mathbf { \color { blue } { 7 } } 8 10 \mathbf { \color { blue } { 11 } } $$$ ( five prim ) prim mark bold blue case number produce prim maximum possible","['constructive algorithms', 'greedy', 'math']",1200.0
1144/E,give two string $$$ s $$$ $$$ t $$$ consist exactly $$$ k $$$ lowercase latin letter $$$ s $$$ lexicographically less $$$ t $$$ let 's consider list string consist exactly $$$ k $$$ lowercase latin letter lexicographically less $$$ s $$$ greater $$$ t $$$ ( include $$$ s $$$ $$$ t $$$ ) lexicographical order example $$$ k=2 $$$ $$$ s= $$$ ` ` az '' $$$ t= $$$ ` ` bf '' list [ ` ` az '' ` ` ba '' ` ` bb '' ` ` bc '' ` ` bd '' ` ` '' ` ` bf '' ] task print median ( middle element ) list example ` ` bc '' guarantee odd number string lexicographically less $$$ s $$$ greater $$$ t $$$ first line input contain one integer $$$ k $$$ ( $$$ 1 \le k \le 200000 $$$ ) — length string second line input contain one string $$$ s $$$ consist exactly $$$ k $$$ lowercase latin letter third line input contain one string $$$ t $$$ consist exactly $$$ k $$$ lowercase latin letter guarantee $$$ s $$$ lexicographically less $$$ t $$$ guarantee odd number string lexicographically less $$$ s $$$ greater $$$ t $$$ print one string consist exactly $$$ k $$$ lowercase latin letter — median ( middle element ) list string length $$$ k $$$ lexicographically less $$$ s $$$ greater $$$ t $$$,"['math', 'strings']",1900.0
1142/A,"recently a golden circle <unknown> find byteland a circle route go $$$ n \cdot k $$$ cities cities numerate $$$ 1 $$$ $$$ n \cdot k $$$ distance neighbor cities exactly $$$ 1 $$$ km sergey like beetle love burgers fortunately $$$ n $$$ fast food restaurants circle locate $$$ 1 $$$ -st $$$ ( k + 1 ) $$$ -st $$$ ( 2k + 1 ) $$$ -st , $$$ ( ( n-1 ) k + 1 ) $$$ -st cities i.e distance neighbor cities fast food restaurants $$$ k $$$ km sergey begin journey city $$$ s $$$ travel along circle make stop cities $$$ l $$$ km ( $$$ l > 0 $$$ ) stop $$$ s $$$ sergey forget number $$$ s $$$ $$$ l $$$ remember distance city $$$ s $$$ nearest fast food restaurant $$$ a $$$ km distance city stop travel first $$$ l $$$ km $$$ s $$$ nearest fast food restaurant $$$ b $$$ km sergey always travel direction along circle calculate distance restaurants consider directions sergey interest two integers first integer $$$ x $$$ minimum number stop ( exclude first ) sergey could do return $$$ s $$$ second integer $$$ y $$$ maximum number stop ( exclude first ) sergey could do return $$$ s $$$ first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n k \le 100\,000 $$$ ) — number fast food restaurants circle distance neighbor restaurants respectively second line contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 0 \le a b \le \frac { k } { 2 } $$$ ) — distance nearest fast food restaurants initial city city sergey make first stop respectively print two integers $$$ x $$$ $$$ y $$$ first example restaurants locate cities $$$ 1 $$$ $$$ 4 $$$ initial city $$$ s $$$ could $$$ 2 $$$ $$$ 3 $$$ $$$ 5 $$$ $$$ 6 $$$ next city sergey stop could also cities $$$ 2 3 5 6 $$$ let 's loop possible combinations cities $$$ s $$$ city first stop city $$$ 2 $$$ ( example $$$ l = 6 $$$ ) sergey $$$ s $$$ first stop already $$$ x = 1 $$$ pair sergey need $$$ 1 2 3 $$$ $$$ 6 $$$ stop return $$$ s $$$ $$$ y = 6 $$$ second example sergey cities fast food restaurant initially first stop $$$ l $$$ $$$ 2 $$$ $$$ 4 $$$ $$$ 6 $$$ thus $$$ x = 1 $$$ $$$ y = 3 $$$ third example one restaurant possible locations $$$ s $$$ first stop : $$$ ( 6 8 ) $$$ $$$ ( 6 4 ) $$$ first option $$$ l = 2 $$$ second $$$ l = 8 $$$ case sergey need $$$ x = <unknown> $$$ stop go $$$ s $$$","['brute force', 'math']",1700.0
1139/D,vivek initially empty array $$$ a $$$ integer constant $$$ m $$$ perform follow algorithm : find expect length $$$ a $$$ show represent $$$ \frac { p } { q } $$$ $$$ p $$$ $$$ q $$$ coprime integers $$$ <unknown> 0 \pmod { 1000000000 + 7 } $$$ print value $$$ p \cdot q^ { -1 } \pmod { 1000000000 + 7 } $$$ first line contain a single integer $$$ m $$$ ( $$$ 1 \leq m \leq 100000 $$$ ) print a single integer — expect length array $$$ a $$$ write $$$ p \cdot q^ { -1 } \pmod { 1000000000 + 7 } $$$ first example since vivek choose integers $$$ 1 $$$ $$$ 1 $$$ $$$ a= [ 1 ] $$$ first append operation quit algorithm hence length $$$ a $$$ always $$$ 1 $$$ expect value $$$ 1 $$$ well second example vivek time append either $$$ 1 $$$ $$$ 2 $$$ finish algorithm end number $$$ 2 $$$ 's ( possibly zero ) a single $$$ 1 $$$ end expect length list $$$ 1\cdot \frac { 1 } { 2 } + 2\cdot \frac { 1 } { 2 ^ 2 } + 3\cdot \frac { 1 } { 2 ^ 3 } + \ldots = 2 $$$,"['dp', 'math']",2300.0
1139/C,give a tree ( a connect undirected graph without cycle ) $$$ n $$$ vertices $$$ n - 1 $$$ edge tree color either black red also give integer $$$ k $$$ consider sequence $$$ k $$$ vertices let 's call a sequence $$$ [ a_1 a_2 \ldots a_k ] $$$ good satisfy follow criterion : consider tree picture $$$ k=3 $$$ follow sequence good : $$$ [ 1 4 7 ] $$$ $$$ [ 5 5 3 ] $$$ $$$ [ 2 3 7 ] $$$ follow sequence good : $$$ [ 1 4 6 ] $$$ $$$ [ 5 5 5 ] $$$ $$$ [ 3 7 3 ] $$$ $$$ n^k $$$ sequence vertices count many good since number quite large print modulo $$$ 1000000000 + 7 $$$ first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n \le 100000 $$$ $$$ 2 \le k \le 100 $$$ ) size tree length vertex sequence next $$$ n - 1 $$$ line contain three integers $$$ u_i $$$ $$$ v_i $$$ $$$ x_i $$$ ( $$$ 1 \le u_i v_i \le n $$$ $$$ x_i \in \ { 0 1\ } $$$ ) $$$ u_i $$$ $$$ v_i $$$ denote endpoints correspond edge $$$ x_i $$$ color edge ( $$$ 0 $$$ denote red edge $$$ 1 $$$ denote black edge ) print number good sequence modulo $$$ 1000000000 + 7 $$$ first example sequence ( $$$ 4 ^ 4 $$$ ) length $$$ 4 $$$ except follow good : second example edge red hence n't good sequence,"['dfs and similar', 'math']",1500.0
1117/B,"$$$ n $$$ emote popular digital <unknown> card game ( game pretty famous wo n't say name ) $$$ i $$$ -th emote increase opponent 's happiness $$$ a_i $$$ units ( know emote game use make opponents happy ) time use emote $$$ m $$$ time allow use emotion , use restriction use emote $$$ k $$$ time a row ( otherwise opponent think 're troll ) note two emote $$$ i $$$ $$$ j $$$ ( $$$ i \ne j $$$ ) $$$ a_i = a_j $$$ consider different make opponent happy possible find maximum possible opponent 's happiness first line input contain three integers $$$ n m $$$ $$$ k $$$ ( $$$ 2 \le n \le 200000 $$$ $$$ 1 \le k \le m \le 2000000000 $$$ ) — number emote number time use emote maximum number time may use emote a row second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) $$$ a_i $$$ value happiness $$$ i $$$ -th emote print one integer — maximum opponent 's happiness use emote a way satisfy problem statement first example may use emote follow sequence : $$$ 4 4 5 4 4 5 4 4 5 $$$","['greedy', 'math']",1000.0
1113/A,sasha a happy guy 's always move $$$ n $$$ cities country sasha live locate one straight line convenience number $$$ 1 $$$ $$$ n $$$ increase order distance two adjacent cities equal $$$ 1 $$$ kilometer since roads country direct 's possible reach city $$$ y $$$ city $$$ x $$$ $$$ x < y $$$ sasha decide go a trip around country visit $$$ n $$$ cities move help car <unknown> tank capacity model $$$ v $$$ liters spend exactly $$$ 1 $$$ liter fuel $$$ 1 $$$ kilometer way begin journey tank empty sasha locate city number $$$ 1 $$$ want get city number $$$ n $$$ a gas station city $$$ i $$$ -th city price $$$ 1 $$$ liter fuel $$$ i $$$ dollars obvious moment time tank contain $$$ v $$$ liters fuel sasha n't like waste money 's want know minimum amount money need finish trip buy fuel city want help figure ! first line contain two integers $$$ n $$$ $$$ v $$$ ( $$$ 2 \le n \le 100 $$$ $$$ 1 \le v \le 100 $$$ ) — number cities country capacity tank print one integer — minimum amount money need finish trip first example sasha buy $$$ 2 $$$ liters $$$ 2 $$$ dollars ( $$$ 1 $$$ dollar per liter ) first city drive second city spend $$$ 1 $$$ liter fuel buy $$$ 1 $$$ liter $$$ 2 $$$ dollars second city drive $$$ 4 $$$ -th city therefore answer $$$ 1 + 1 + 2=4 $$$ second example capacity tank allow fill tank completely first city drive last city without stop cities,"['dp', 'greedy', 'math']",900.0
1110/E,"grigory $$$ n $$$ magic stone conveniently number $$$ 1 $$$ $$$ n $$$ charge $$$ i $$$ -th stone equal $$$ c_i $$$ sometimes grigory get bore select inner stone ( stone index $$$ i $$$ $$$ 2 \le i \le n - 1 $$$ ) synchronize neighbor stone , choose stone lose charge acquire charge neighbor stone word charge $$$ c_i $$$ change $$$ c_i ' = c _ { i + 1 } + c _ { i - 1 } - c_i $$$ andrew grigory 's friend also $$$ n $$$ stone charge $$$ t_i $$$ grigory curious whether exist a sequence zero synchronization operations transform charge grigory 's stone charge correspond andrew 's stone , change $$$ c_i $$$ $$$ t_i $$$ $$$ i $$$ ? first line contain one integer $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ) — number magic stone second line contain integers $$$ c_1 c_2 \ldots c_n $$$ ( $$$ 0 \le c_i \le 2000000000 $$$ ) — charge grigory 's stone second line contain integers $$$ t_1 t_2 \ldots t_n $$$ ( $$$ 0 \le t_i \le 2000000000 $$$ ) — charge andrew 's stone exist a ( possibly empty ) sequence synchronization operations change charge require ones print ` ` yes '' otherwise print ` ` '' first example perform follow <unknown> ( $$$ 1 $$$ -indexed ) : second example operation second stone change charge","['constructive algorithms', 'math']",2200.0
1101/G,give array $$$ a_1 a_2 \dots a_n $$$ integer number task divide array maximum number segment a way : print maximum number segment array divide print -1 suitable division exist first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — size array second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) print maximum number segment array divide follow give constraints print -1 suitable division exist first example $$$ 2 $$$ maximum number divide array $$$ \ { [ 5 ] [ 5 7 2 ] \ } $$$ xor value subset second segment $$$ 5 \oplus 7 \oplus 2 = 0 $$$ $$$ \ { [ 5 5 ] [ 7 2 ] \ } $$$ value subset first segment $$$ 5 \oplus 5 = 0 $$$ however $$$ \ { [ 5 5 7 ] [ 2 ] \ } $$$ lead subsets $$$ \ { [ 5 5 7 ] \ } $$$ xor $$$ 7 $$$ $$$ \ { [ 2 ] \ } $$$ xor $$$ 2 $$$ $$$ \ { [ 5 5 7 ] [ 2 ] \ } $$$ xor $$$ 5 \oplus 5 \oplus 7 \oplus 2 = 5 $$$ let 's take a look division $$$ 3 $$$ segment — $$$ \ { [ 5 ] [ 5 7 ] [ 2 ] \ } $$$ produce subsets : see subset $$$ \ { [ 5 7 ] [ 2 ] \ } $$$ xor equal $$$ 0 $$$ unacceptable check divisions size $$$ 3 $$$ $$$ 4 $$$ non - empty subset $$$ 0 $$$ xor always exist second example suitable divisions third example array divide $$$ \ { [ 3 ] [ 1 ] [ 10 ] \ } $$$ subset segment xor equal $$$ 0 $$$,['math'],2300.0
1099/B,little sofia fourth grade today geometry lesson learn segment square way home decide draw $$$ n $$$ square snow a side length $$$ 1 $$$ simplicity assume sofia live a plane draw segment length $$$ 1 $$$ parallel coordinate ax vertices integer point order draw a segment sofia proceed follow want draw a vertical segment coordinate end $$$ ( x y ) $$$ $$$ ( x y+1 ) $$$ sofia look already a draw segment coordinate end $$$ ( x ' y ) $$$ $$$ ( x ' y+1 ) $$$ $$$ x ' $$$ a segment exist sofia quickly draw a new segment use old one a guideline segment sofia take a ruler measure a new segment a long time thing happen sofia want draw a horizontal segment check existence a segment coordinate $$$ x $$$ $$$ x+1 $$$ differ coordinate $$$ y $$$ example sofia need draw one square draw two segment use a ruler : draw remain two segment use first two a guide : sofia need draw two square draw three segment use a ruler : draw remain four segment use first three a guide : sofia a hurry want minimize number segment draw a ruler without a guide help find minimum number line input contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 10^ { 9 } $$$ ) number square sofia want draw print single integer minimum number segment sofia draw a ruler without a guide order draw $$$ n $$$ square manner describe,"['constructive algorithms', 'math']",1100.0
1089/F,"give a positive integer $$$ n $$$ find a sequence fraction $$$ \frac { a_i } { b_i } $$$ $$$ i = 1 \ldots k $$$ ( $$$ a_i $$$ $$$ b_i $$$ positive integers ) $$$ k $$$ : $$$ $$$ \begin { case } \text { $ b_i $ divide $ n $ $ 1 < b_i < n $ $ i = 1 \ldots k $ } \\ \text { $ 1 \le a_i < b_i $ $ i = 1 \ldots k $ } \\ \text { $ \sum\limits _ { i=1 } ^k \frac { a_i } { b_i } = 1 - \frac { 1 } { n } $ } \end { case } $$$ $$$ input consist a single integer $$$ n $$$ ( $$$ 2 \le n \le 1000000000 $$$ ) first line print ` ` yes '' exist a sequence fraction ` ` '' otherwise exist a sequence next line contain a description sequence follow format second line contain integer $$$ k $$$ ( $$$ 1 \le k \le 100\,000 $$$ ) — number elements sequence guarantee a sequence exist exist a sequence length $$$ 100\,000 $$$ next $$$ k $$$ line contain fraction sequence two integers $$$ a_i $$$ $$$ b_i $$$ line second example a sequence $$$ \frac { 1 } { 2 } \frac { 1 } { 3 } $$$ $$$ \frac { 1 } { 2 } + \frac { 1 } { 3 } = 1 - \frac { 1 } { 6 } $$$",['math'],1900.0
1081/C,"free time chouti like <unknown> get one new task paint bricks yard $$$ n $$$ bricks line a row grind chouti get $$$ m $$$ paint bucket different color hand paint brick one $$$ m $$$ color finish paint bricks chouti satisfy stand back decide find something fun bricks count find $$$ k $$$ bricks a color different color brick leave ( first brick count sure ) usual need help count many ways could paint bricks two ways paint bricks different least one brick paint different color two ways answer might quite big need output number ways modulo $$$ 998\,244\,353 $$$ first line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \leq n m \leq 2000 0 \leq k \leq n-1 $$$ ) — number bricks number color number bricks color differ color brick leave print one integer — number ways color bricks modulo $$$ 998\,244\,353 $$$ first example since $$$ k=0 $$$ color every brick exactly $$$ m=3 $$$ ways color bricks second example suppose two color bucket yellow lime follow image show $$$ 4 $$$ possible color","['dp', 'math']",1500.0
1066/A,vova plan go conference train initially train point $$$ 1 $$$ destination point path point $$$ l $$$ speed train $$$ 1 $$$ length unit per minute ( i.e first minute train point $$$ 1 $$$ second minute — point $$$ 2 $$$ ) lanterns path place point coordinate divisible $$$ v $$$ ( i.e first lantern point $$$ v $$$ second point $$$ 2v $$$ ) also exactly one stand train occupy point $$$ l $$$ $$$ r $$$ inclusive vova see lantern point $$$ p $$$ $$$ p $$$ divisible $$$ v $$$ stand train position ( $$$ p <unknown> [ l ; r ] $$$ ) thus point lantern one point cover stand train vova ca n't see lantern problem say number lanterns vova see path vova plan go $$$ t $$$ different conferences answer $$$ t $$$ independent query first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number query $$$ t $$$ line follow $$$ i $$$ -th line contain four integers $$$ l_i v_i l_i r_i $$$ ( $$$ 1 \le l v \le 1000000000 $$$ $$$ 1 \le l \le r \le l $$$ ) — destination point $$$ i $$$ -th path period lantern appearance segment occupy stand train print $$$ t $$$ line $$$ i $$$ -th line contain one integer — answer $$$ i $$$ -th query first example query answer $$$ 3 $$$ lanterns position $$$ 2 $$$ $$$ 4 $$$ $$$ 6 $$$ $$$ 8 $$$ $$$ 10 $$$ vova n't see lanterns position $$$ 4 $$$ $$$ 6 $$$ stand train second example query answer $$$ 0 $$$ lantern point $$$ 51 $$$ also a stand train point third example query answer $$$ <unknown> $$$ $$$ 1234 $$$ lanterns vova n't see lanterns position $$$ 100 $$$ position $$$ 199 $$$ inclusive fourth example query answer $$$ 0 $$$ stand train cover whole path,['math'],1100.0
1064/B,"read book ` ` equations mathematical magic '' roman oira - oira cristobal junta find interest equation : $$$ a - ( a \oplus x ) - x = 0 $$$ give $$$ a $$$ $$$ \oplus $$$ stand a bitwise exclusive ( xor ) two integers ( operation denote ^ xor many modern program languages ) oira - oira quickly find $$$ x $$$ solution equation cristobal junta decide oira - oira 's result interest enough ask <unknown> many non - negative solutions equation exist task turn difficult oira - oira ask help test contain several possible value $$$ a $$$ task find number equation 's solution first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number value follow $$$ t $$$ line contain value parameter $$$ a $$$ value integer $$$ 0 $$$ $$$ 2^ { 30 } - 1 $$$ inclusive value $$$ a $$$ print exactly one integer — number non - negative solutions equation give value parameter print answer order value $$$ a $$$ appear input one show number solutions always finite let 's define bitwise exclusive ( xor ) operation give two integers $$$ x $$$ $$$ y $$$ consider binary representations ( possibly lead zero ) : $$$ x_k \dots x_2 x_1 x_0 $$$ $$$ y_k \dots y_2 y_1 y_0 $$$ , $$$ x_i $$$ $$$ i $$$ -th bite number $$$ x $$$ $$$ y_i $$$ $$$ i $$$ -th bite number $$$ y $$$ let $$$ r = x \oplus y $$$ result xor operation $$$ x $$$ $$$ y $$$ $$$ r $$$ define $$$ r_k \dots r_2 r_1 r_0 $$$ : $$$ $$$ r_i = \left\ { \begin { align } 1 ~ \text { } ~ x_i \ne y_i \\ 0 ~ \text { } ~ x_i = y_i \end { align } \right $$$ $$$ first value parameter $$$ x = 0 $$$ a solution equation second value parameter solutions $$$ x = 0 $$$ $$$ x = 2 $$$",['math'],1200.0
1063/E,oleg come see maze mirror maze a $$$ n $$$ $$$ n $$$ room cell either empty contain a mirror connect opposite corner cell mirror maze reflect light a perfect way cause interest visual effect contribute loss orientation maze oleg a person curious nature decide install $$$ n $$$ lasers face internal maze south wall maze north wall maze oleg instal $$$ n $$$ receivers also face internal maze let 's number lasers receivers west east distinct integers $$$ 1 $$$ $$$ n $$$ laser send a beam specific kind receiver number $$$ a_i $$$ receive beam send laser number $$$ i $$$ since two lasers ' beam ca n't come receiver number form a permutation — receiver number occur exactly come maze together oleg help place mirror initially empty maze maximum number lasers ' beam come receivers mirror outside maze laser beam leave maze able go back first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — size maze second line contain a permutation $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le n $$$ ) $$$ a_i $$$ define number receiver beam $$$ i $$$ -th laser come first line print maximum possible number laser beam come receivers next $$$ n $$$ line length $$$ n $$$ print arrangement mirror cause number laser beam come correspond cell empty print ` ` ` ` otherwise print ` ` / '' ` ` \ '' depend orientation mirror output north south west east leave right respectively allow laser beam come receivers correspond count answer multiple arrangements mirror lead optimal answer — print picture illustrate arrangements mirror first example,"['constructive algorithms', 'math']",3000.0
1047/B,$$$ n $$$ point plane $$$ ( x_1 y_1 ) ( x_2 y_2 ) \ldots ( x_n y_n ) $$$ need place isosceles triangle two side coordinate axis cover point ( a point cover lie inside triangle side triangle ) calculate minimum length shorter side triangle first line contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 100000 $$$ ) next $$$ n $$$ line contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1 \leq x_i y_i \leq 1000000000 $$$ ) print minimum length shorter side triangle prove 's always integer illustration first example : illustration second example :,"['geometry', 'math']",900.0
1047/A,little c love number « 3 » much love things a positive integer $$$ n $$$ want split $$$ n $$$ $$$ 3 $$$ positive integers $$$ a b c $$$ $$$ a+b+c = n $$$ none $$$ 3 $$$ integers a multiple $$$ 3 $$$ help find a solution a single line contain one integer $$$ n $$$ ( $$$ 3 \leq n \leq 1000000000 $$$ ) — integer little c print $$$ 3 $$$ positive integers $$$ a b c $$$ a single line $$$ a+b+c = n $$$ none a multiple $$$ 3 $$$ prove least one solution multiple solutions print,['math'],800.0
1045/H,"bore explore moon wall - b decide explore something make — binary number take a binary number decide count many time different substrings length two appear store value $$$ c _ { 00 } $$$ $$$ c _ { 01 } $$$ $$$ c _ { 10 } $$$ $$$ c _ { 11 } $$$ represent many time substrings 00 01 10 11 appear number respectively example : $$$ <unknown> \rightarrow c _ { 00 } = 1 \ c _ { 01 } = 1 \ c _ { 10 } = 2 \ c _ { 11 } = 3 $$$ $$$ 10000 \rightarrow c _ { 00 } = 3 \ c _ { 01 } = 0 \ c _ { 10 } = 1 \ c _ { 11 } = 0 $$$ $$$ <unknown> \rightarrow c _ { 00 } = 1 \ c _ { 01 } = 3 \ c _ { 10 } = 3 \ c _ { 11 } = 0 $$$ $$$ 1 \rightarrow c _ { 00 } = 0 \ c _ { 01 } = 0 \ c _ { 10 } = 0 \ c _ { 11 } = 0 $$$ wall - b notice multiple binary number satisfy $$$ c _ { 00 } $$$ $$$ c _ { 01 } $$$ $$$ c _ { 10 } $$$ $$$ c _ { 11 } $$$ constraints want count many binary number satisfy constraints $$$ c _ { xy } $$$ give interval $$$ [ a b ] $$$ unfortunately process power n't strong enough handle large intervals curious help ? since number large print modulo $$$ 1000000000 + 7 $$$ first two line contain two positive binary number $$$ a $$$ $$$ b $$$ ( $$$ 1 \leq a \leq b < 2^ { 100\,000 } $$$ ) represent start end interval respectively binary number $$$ a $$$ $$$ b $$$ lead zero next four line contain decimal number $$$ c _ { 00 } $$$ $$$ c _ { 01 } $$$ $$$ c _ { 10 } $$$ $$$ c _ { 11 } $$$ ( $$$ 0 \leq c _ { 00 } c _ { 01 } c _ { 10 } c _ { 11 } \leq 100\,000 $$$ ) represent count two - digit substrings 00 01 10 11 respectively output one integer number represent many binary number interval $$$ [ a b ] $$$ satisfy constraints mod $$$ 1000000000 + 7 $$$ example 1 : binary number interval $$$ [ <unknown> ] $$$ $$$ <unknown> $$$ number 110 satisfy constraints : $$$ c _ { 00 } = 0 c _ { 01 } = 0 c _ { 10 } = 1 c _ { 11 } = 1 $$$ example 2 : number interval satisfy constraints",['math'],2400.0
1042/C,give array $$$ a $$$ consist $$$ n $$$ integers perform follow operations : number elements decrease one operation however index position stay delete number ca n't use later operations task perform exactly $$$ n - 1 $$$ operations array a way number remain array maximum possible number rather large instead print need print sequence operations lead maximum number read output format understand exactly need print first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number elements array second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) — elements array print $$$ n - 1 $$$ line $$$ k $$$ -th line contain one two possible operations operation first type look like : $$$ 1~ <unknown> j_k $$$ $$$ 1 $$$ type operation $$$ i_k $$$ $$$ j_k $$$ position choose elements operation second type look like : $$$ 2~ i_k $$$ $$$ 2 $$$ type operation $$$ i_k $$$ position choose element note one operation multiple possible sequence operations lead maximum number — print let x remove number array let 's take a look examples : first example example follow sequence transformations array : $$$ [ 5 -2 0 1 -3 ] \to [ 5 -2 x 1 -3 ] \to [ x -10 x 1 -3 ] \to $$$ $$$ [ x x x -10 -3 ] \to [ x x x x 30 ] $$$ thus maximum answer $$$ 30 $$$ note sequence lead answer $$$ 30 $$$ also correct second example example follow sequence transformations array : $$$ [ 5 2 0 4 0 ] \to [ 5 2 x 4 0 ] \to [ 5 2 x 4 x ] \to [ x 10 x 4 x ] \to $$$ $$$ [ x x x 40 x ] $$$ follow answer also allow : sequence transformations array look like : $$$ [ 5 2 0 4 0 ] \to [ 5 2 0 4 x ] \to [ 5 8 0 x x ] \to [ 40 x 0 x x ] \to $$$ $$$ [ 40 x x x x ] $$$ third example follow sequence transformations array : $$$ [ 2 -1 ] \to [ 2 x ] $$$ fourth example follow sequence transformations array : $$$ [ 0 -10 0 0 ] \to [ x 0 0 0 ] \to [ x x 0 0 ] \to [ x x x 0 ] $$$ fifth example follow sequence transformations array : $$$ [ 0 0 0 0 ] \to [ x 0 0 0 ] \to [ x x 0 0 ] \to [ x x x 0 ] $$$,"['constructive algorithms', 'greedy', 'math']",1700.0
1041/F,"give a tube <unknown> inside represent two non - <unknown> parallel $$$ ox $$$ line line special integer point — position sensors side tube go emit a laser ray tube , choose two integer point $$$ a $$$ $$$ b $$$ first second line respectively ( coordinate negative ) : point $$$ a $$$ responsible position laser point $$$ b $$$ — direction laser ray laser ray a ray start $$$ a $$$ direct $$$ b $$$ reflect side tube ( n't matter sensors a reflection point ) a sensor register ray ray hit exactly position sensor calculate maximum number sensors register ray choose point $$$ a $$$ $$$ b $$$ first second line respectively first line contain two integers $$$ n $$$ $$$ y_1 $$$ ( $$$ 1 \le n \le 100000 $$$ $$$ 0 \le y_1 \le 1000000000 $$$ ) — number sensors first line $$$ y $$$ coordinate second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) — $$$ x $$$ coordinate sensors first line ascend order third line contain two integers $$$ m $$$ $$$ y_2 $$$ ( $$$ 1 \le m \le 100000 $$$ $$$ y_1 < y_2 \le 1000000000 $$$ ) — number sensors second line $$$ y $$$ coordinate fourth line contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 0 \le b_i \le 1000000000 $$$ ) — $$$ x $$$ coordinate sensors second line ascend order print integer — maximum number sensors register ray one solutions illustrate image pair $$$ a_2 $$$ $$$ b_2 $$$","['data structures', 'dp', 'math']",2500.0
1033/F,"alice a computer operate $$$ w $$$ -bit integers computer $$$ n $$$ register value current content register give array $$$ a_1 a_2 \ldots a_n $$$ computer use so - called ` ` number gate '' manipulate data ` ` number gate '' take two register input calculate a function two value store register note use register input ` ` number gate '' assemble bite gate six type bite gate : , xor , xor denote ` ` a '' ` ` o '' ` ` x '' ` ` a '' ` ` o '' ` ` x '' respectively bite gate take two bits input output give input bits $$$ b_1 $$$ $$$ b_2 $$$ give : build a ` ` number gate '' one take $$$ w $$$ bite gate assemble array a ` ` number gate '' take two $$$ w $$$ -bit integers $$$ x_1 $$$ $$$ x_2 $$$ input ` ` number gate '' split integers $$$ w $$$ bits feed $$$ i $$$ -th bite input $$$ i $$$ -th bite gate , assemble result bits form output word instance $$$ 4 $$$ -bit computer might a ` ` number gate '' ` ` <unknown> '' ( xor , ) two input $$$ 13 = <unknown> $$$ $$$ 10 = <unknown> $$$ return $$$ 12 = 1100_2 $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$ xor $$$ 0 $$$ $$$ 1 $$$ ( $$$ 0 $$$ $$$ 1 $$$ ) $$$ 0 $$$ finally $$$ 1 $$$ $$$ 0 $$$ $$$ 0 $$$ give a description $$$ m $$$ ` ` number gate '' gate goal report number register pair ` ` number gate '' output number $$$ 0 $$$ word find number order pair $$$ ( i j ) $$$ $$$ 1 \leq i j \leq n $$$ $$$ w_k ( a_i a_j ) = 0 $$$ $$$ w_k $$$ function compute $$$ k $$$ -th ` ` number gate '' first line contain three integers : $$$ w $$$ $$$ n $$$ $$$ m~ ( 1 \leq w \leq 12 1 \leq n \leq 3\cdot 10000 1 \leq m \leq 5\cdot 10000 ) $$$ — word size number variables number gate second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ $$$ ( 0 \leq a_i < 2^w ) $$$ — value variables store register next $$$ m $$$ line contain a string $$$ <unknown> ( <unknown> = w ) $$$ a description a single gate character $$$ g_j $$$ one ` ` a '' ` ` o '' ` ` x '' ` ` a '' ` ` o '' ` ` x '' print $$$ m $$$ line $$$ i $$$ -th line contain number order pair variables $$$ i $$$ -th gate return zero first test case input binary $$$ 1101 $$$ $$$ 1010 $$$ $$$ 0110 $$$ pair return $$$ 0 $$$ $$$ ( 13 6 ) $$$ $$$ ( 6 13 ) $$$ $$$ ( 6 6 ) $$$ already mention problem statement $$$ 13 \oplus 10 = 10 \oplus 13 = 12 $$$ pair $$$ 13 \oplus 13 = 11 $$$ $$$ 10 \oplus 10 = 8 $$$ $$$ 10 \oplus 6 = 6 \oplus 10 = 4 $$$","['brute force', 'math']",2800.0
1023/B,tanechka shop toy shop exactly $$$ n $$$ toy shop sale cost $$$ i $$$ -th toy $$$ i $$$ burl want choose two toy a way total cost $$$ k $$$ burl many ways ? toy appear shop exactly pair $$$ ( a b ) $$$ $$$ ( b a ) $$$ consider equal pair $$$ ( a b ) $$$ $$$ a = b $$$ allow first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n k \le 10^ { 14 } $$$ ) — number toy expect total cost pair toy print number ways choose pair toy satisfy condition print 0 tanechka choose pair toy a way total cost $$$ k $$$ burl first example tanechka choose pair toy ( $$$ 1 4 $$$ ) pair toy ( $$$ 2 3 $$$ ) second example tanechka choose pair toy ( $$$ 7 8 $$$ ) third example choose pair toy lead total cost less $$$ 20 $$$ answer 0 . fourth example choose follow pair : $$$ ( 1 <unknown> ) $$$ $$$ ( 2 <unknown> ) $$$ $$$ ( 3 <unknown> ) $$$ ... $$$ ( 500000000000 <unknown> ) $$$ number pair exactly $$$ 500000000000 $$$,['math'],1000.0
1017/F,"notice : unusual memory limit ! war destroy cities neutral zone restore children go back school war change world well education hard days a new math concept create know logarithm function describe : $$$ $$$ \log ( p_1^ { a_1 } p_2^ { a_2 } ... p_k^ { a_2 } ) = a_1 \log p_1 + a_2 \log p_2 + ... + a_k \log p_k $$$ $$$ $$$ p_1^ { a_1 } p_2^ { a_2 } ... p_k^ { a_2 } $$$ prime factorization a integer a problem function use definition hard calculate , mathematicians neutral zone invent : $$$ $$$ \text { exlog } _ f ( p_1^ { a_1 } p_2^ { a_2 } ... p_k^ { a_2 } ) = a_1 f ( p_1 ) + a_2 f ( p_2 ) + ... + a_k f ( p_k ) $$$ $$$ notice $$$ \text { exlog } _ f ( 1 ) $$$ always equal $$$ 0 $$$ concept function $$$ f $$$ hard children teachers tell $$$ f $$$ a polynomial degree $$$ 3 $$$ daily use ( i.e. $$$ f ( x ) = <unknown> $$$ ) ` ` class ! n't forget homework ! '' : $$$ $$$ \sum _ { i=1 } ^n \text { exlog } _ f ( i ) $$$ $$$ help children homework since value big need find answer modulo $$$ 2^ { 32 } $$$ line contain five integers $$$ n $$$ $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ d $$$ ( $$$ 1 \le n \le 300000000 $$$ $$$ 0 \le a b c d \le 1000000 $$$ ) print answer modulo $$$ 2^ { 32 } $$$ first sample : $$$ \text { exlog } _ f ( 1 ) = 0 $$$ $$$ \text { exlog } _ f ( 2 ) = 2 $$$ $$$ \text { exlog } _ f ( 3 ) = 3 $$$ $$$ \text { exlog } _ f ( 4 ) = 2 + 2 = 4 $$$ $$$ \text { exlog } _ f ( 5 ) = 5 $$$ $$$ \text { exlog } _ f ( 6 ) = 2 + 3 = 5 $$$ $$$ \text { exlog } _ f ( 7 ) = 7 $$$ $$$ \text { exlog } _ f ( 8 ) = 2 + 2 + 2 = 6 $$$ $$$ \text { exlog } _ f ( 9 ) = 3 + 3 = 6 $$$ $$$ \text { exlog } _ f ( 10 ) = 2 + 5 = 7 $$$ $$$ \text { exlog } _ f ( 11 ) = 11 $$$ $$$ \text { exlog } _ f ( 12 ) = 2 + 2 + 3 = 7 $$$ $$$ \sum _ { i=1 } ^ { 12 } \text { exlog } _ f ( i ) = 63 $$$ second sample : $$$ \text { exlog } _ f ( 1 ) = 0 $$$ $$$ \text { exlog } _ f ( 2 ) = ( 1 \times 2 ^ 3 + 2 \times 2 ^ 2 + 3 \times 2 + 4 ) = 26 $$$ $$$ \text { exlog } _ f ( 3 ) = ( 1 \times 3 ^ 3 + 2 \times 3 ^ 2 + 3 \times 3 + 4 ) = 58 $$$ $$$ \text { exlog } _ f ( 4 ) = 2 \times \text { exlog } _ f ( 2 ) = 52 $$$ $$$ \sum _ { i=1 } ^4 \text { exlog } _ f ( i ) = 0 + 26 + 58 + <unknown> $$$","['brute force', 'math']",2500.0
1016/G,since next season come 'd like form a team two three participants $$$ n $$$ candidates $$$ i $$$ -th candidate rank $$$ a_i $$$ weird requirements teammates : rank $$$ v $$$ choose $$$ i $$$ -th $$$ j $$$ -th candidate $$$ gcd ( v a_i ) = x $$$ $$$ lcm ( v a_j ) = y $$$ must meet experience change rank non - negative integer $$$ x $$$ $$$ y $$$ tie <unknown> fix want know many pair $$$ ( i j ) $$$ exist integer $$$ v $$$ meet follow constraints : $$$ gcd ( v a_i ) = x $$$ $$$ lcm ( v a_j ) = y $$$ 's possible $$$ i = j $$$ form a team two $$$ gcd $$$ greatest common divisor two number $$$ lcm $$$ — least common multiple first line contain three integers $$$ n $$$ $$$ x $$$ $$$ y $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 1 \le x \le y \le 10^ { 18 } $$$ ) — number candidates correspond constants second line contain $$$ n $$$ space separate integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 10^ { 18 } $$$ ) — rank candidates print integer — number pair $$$ ( i j ) $$$ exist integer $$$ v $$$ meet follow constraints : $$$ gcd ( v a_i ) = x $$$ $$$ lcm ( v a_j ) = y $$$ 's possible $$$ i = j $$$ first example next pair valid : $$$ a_j = 1 $$$ $$$ a_i = [ 2 4 6 8 10 12 ] $$$ $$$ a_j = 2 $$$ $$$ a_i = [ 2 4 6 8 10 12 ] $$$ $$$ v $$$ case equal $$$ 2 $$$ second example next pair valid :,['math'],2700.0
1007/B,give a rectangular parallelepiped side positive integer lengths $$$ a $$$ $$$ b $$$ $$$ c $$$ find number different group three integers ( $$$ a $$$ $$$ b $$$ $$$ c $$$ ) $$$ 1\leq a\leq b\leq c $$$ parallelepiped $$$ a\times b\times c $$$ pave parallelepipeds $$$ a\times b\times c $$$ note small parallelepipeds rotate direction example parallelepiped $$$ 1\times 5\times 6 $$$ divide parallelepipeds $$$ 1\times 3\times 5 $$$ divide parallelepipeds $$$ 1\times 2\times 3 $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) — number test case next $$$ t $$$ line contain three integers $$$ a $$$ $$$ b $$$ $$$ c $$$ ( $$$ 1 \leq a b c \leq 100000 $$$ ) — size parallelepiped test case print number different group three point satisfy give condition first test case rectangular parallelepiped $$$ ( 1 1 1 ) $$$ divide rectangular parallelepiped size $$$ ( 1 1 1 ) $$$ second test case rectangular parallelepiped $$$ ( 1 6 1 ) $$$ divide rectangular parallelepipeds size $$$ ( 1 1 1 ) $$$ $$$ ( 1 1 2 ) $$$ $$$ ( 1 1 3 ) $$$ $$$ ( 1 1 6 ) $$$ third test case rectangular parallelepiped $$$ ( 2 2 2 ) $$$ divide rectangular parallelepipeds size $$$ ( 1 1 1 ) $$$ $$$ ( 1 1 2 ) $$$ $$$ ( 1 2 2 ) $$$ $$$ ( 2 2 2 ) $$$,"['brute force', 'math']",2400.0
995/F,"allen graduate moo institute <unknown> ( mit ) start a startup ! allen president startup also hire $$$ n-1 $$$ employees assign a direct superior $$$ u $$$ a superior $$$ v $$$ $$$ v $$$ a superior $$$ w $$$ also $$$ u $$$ a superior $$$ w $$$ additionally $$$ u $$$ $$$ v $$$ $$$ u $$$ superior $$$ v $$$ $$$ v $$$ superior $$$ u $$$ allen superior allen employee number $$$ 1 $$$ others employee number $$$ 2 $$$ $$$ n $$$ finally allen must assign salaries employee company include due budget constraints employee 's salary integer $$$ 1 $$$ $$$ d $$$ additionally employee make strictly superior help allen find number ways assign salaries number may large output modulo $$$ 1000000000 + 7 $$$ first line input contain two integers $$$ n $$$ $$$ d $$$ ( $$$ 1 \le n \le 3000 $$$ $$$ 1 \le d \le 1000000000 $$$ ) remain $$$ n-1 $$$ line contain a single positive integer $$$ i $$$ -th line contain integer $$$ p_i $$$ ( $$$ 1 \le p_i \le i $$$ ) $$$ p_i $$$ denote direct superior employee $$$ i+1 $$$ output a single integer : number ways assign salaries modulo $$$ 1000000000 + 7 $$$ first sample case employee 2 3 report directly allen three salaries order $$$ ( 1,1,1 ) $$$ $$$ ( 2,1,1 ) $$$ $$$ ( 2,1,2 ) $$$ $$$ ( 2,2,1 ) $$$ $$$ ( 2,2,2 ) $$$ second sample case employee 2 report allen employee 3 report employee 2 . order possible salaries $$$ ( 1,1,1 ) $$$ $$$ ( 2,1,1 ) $$$ $$$ ( 2,2,1 ) $$$ $$$ ( 2,2,2 ) $$$ $$$ ( 3,1,1 ) $$$ $$$ ( 3,2,1 ) $$$ $$$ ( 3,2,2 ) $$$ $$$ ( <unknown> ) $$$ $$$ ( <unknown> ) $$$ $$$ ( 3,3,3 ) $$$","['dp', 'math']",2700.0
995/C,a vector $$$ \vec { v } = ( x y ) $$$ define $$$ |v| = \sqrt { x^2 + y^2 } $$$ allen a bite much drink bar origin $$$ n $$$ vectors $$$ \vec { v_1 } \vec { v_2 } \cdots \vec { v_n } $$$ allen make $$$ n $$$ move allen 's sense direction impair $$$ i $$$ -th move either move direction $$$ \vec { v_i } $$$ $$$ <unknown> { v_i } $$$ word position currently $$$ p = ( x y ) $$$ either move $$$ p + \vec { v_i } $$$ $$$ p - \vec { v_i } $$$ allen n't want wander far home ( happen also bar ) need help figure a sequence move ( a sequence sign vectors ) final position $$$ p $$$ satisfy $$$ |p| \le 1.5 \cdot 1000000 $$$ stay safe first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number move follow line contain two space - separated integers $$$ x_i $$$ $$$ y_i $$$ mean $$$ \vec { v_i } = ( x_i y_i ) $$$ $$$ <unknown> \le 1000000 $$$ $$$ i $$$ output a single line contain $$$ n $$$ integers $$$ c_1 c_2 \cdots c_n $$$ either $$$ 1 $$$ $$$ -1 $$$ solution correct value $$$ p = \sum _ { i = 1 } ^n c_i \vec { v_i } $$$ satisfy $$$ |p| \le 1.5 \cdot 1000000 $$$ show a solution always exist give constraints,"['brute force', 'data structures', 'geometry', 'greedy', 'math']",2300.0
992/C,"nastya receive a gift new year — a magic wardrobe magic end month number dress double ( i.e number dress become twice large begin month ) unfortunately right double wardrobe eat one dress ( ) 50 % probability happen every month except last one year nastya own x dress become interest expect number dress one year nastya live byteland year last k + 1 months nastya really busy want solve problem programmer , also find answer modulo 109 + 7 easy see always integer line contain two integers x k ( 0 ≤ x k ≤ 1018 ) x initial number dress k + 1 number months a year byteland line print a single integer — expect number dress nastya one year later modulo 109 + 7 . first example a year consist one month wardrobe eat dress second example first month 3 dress 50 % probability 4 dress 50 % probability thus end year 6 dress 50 % probability 8 dress 50 % probability way answer test ( 6 + 8 ) / 2 = 7",['math'],1600.0
986/F,"surely see insane videos south korean rapper psy ` ` <unknown> style '' ` ` gentleman '' ` ` <unknown> '' might also hear psy record video ` ` <unknown> <unknown> style '' two years ago ( unfortunately could n't find internet ) remind hit look like ( find original description ) : grind $$$ n $$$ platforms number integers $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th platform a dancer number $$$ i $$$ , every second dancers stand platform number $$$ i $$$ jump platform number $$$ f ( i ) $$$ move rule $$$ f $$$ select advance change throughout clip duration clip $$$ k $$$ second rule $$$ f $$$ choose a way $$$ k $$$ second dancers initial position ( i.e $$$ i $$$ -th dancer stand platform number $$$ i $$$ ) allow loop clip collect even like psy know enhance versions old artworks become popular every day decide release a remastered - version video case ` ` enhance version '' mean even insanity number platforms $$$ 10^ { 18 } $$$ ! video director say dancer stay platform time viewer get bore turn video immediately therefore $$$ x $$$ $$$ 1 $$$ $$$ n $$$ $$$ f ( x ) \neq x $$$ must hold big part classic video 's success loop remastered version dancers return initial position end clip well psy n't decide exact number platforms video duration yet ask check a good rule $$$ f $$$ different options first line input one integer $$$ t $$$ ( $$$ 1 \le t \le 10^ { 4 } $$$ ) — number options $$$ n $$$ $$$ k $$$ check next $$$ t $$$ line options give : option describe two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 10^ { 18 } $$$ $$$ 1 \le k \le 10^ { 15 } $$$ ) — number dancers duration second guarantee number different value $$$ k $$$ one test greater $$$ 50 $$$ print $$$ t $$$ line $$$ i $$$ -th option video feasible print ` ` yes '' ( without quote ) $$$ i $$$ -th line otherwise print ` ` '' ( without quote )",['math'],3300.0
981/H,give a tree $$$ n $$$ vertices select $$$ k $$$ ( necessarily distinct ) simple paths a way possible split edge tree three set : edge contain path edge a part exactly one paths edge part select paths latter set non - empty compute number ways select $$$ k $$$ paths modulo $$$ 998244353 $$$ paths enumerate word two ways consider distinct $$$ i $$$ ( $$$ 1 \leq i \leq k $$$ ) edge $$$ i $$$ -th path contain edge one way contain first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq n k \leq 10^ { 5 } $$$ ) — number vertices tree desire number paths next $$$ n - 1 $$$ line describe edge tree line contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a b \le n $$$ $$$ a \ne b $$$ ) — endpoints edge guarantee give edge form a tree print number ways select $$$ k $$$ enumerate necessarily distinct simple paths a way edge either contain path contain exactly one path contain $$$ k $$$ paths intersection paths non - empty answer large print modulo $$$ 998244353 $$$ first example follow ways <unknown> second example $$$ k=1 $$$ $$$ n \cdot ( n - 1 ) / 2 = 20 / 2 = 10 $$$ paths valid third example answer $$$ \geq 998244353 $$$ take modulo $$$ 998244353 $$$ n't forget !,"['data structures', 'dp', 'math']",3100.0
965/C,$$$ k $$$ people want split $$$ n $$$ candy candy give exactly one throw away people number $$$ 1 $$$ $$$ k $$$ arkady first split candy arkady choose integer $$$ x $$$ give first $$$ x $$$ candy next $$$ x $$$ candy second person next $$$ x $$$ candy third person a cycle <unknown> ( remainder divisible $$$ x $$$ ) throw away arkady ca n't choose $$$ x $$$ greater $$$ m $$$ consider greedy also ca n't choose a small $$$ x $$$ person receive candy $$$ d $$$ time consider a slow split please find maximum number candy arkady receive choose valid $$$ x $$$ line contain four integers $$$ n $$$ $$$ k $$$ $$$ m $$$ $$$ d $$$ ( $$$ 2 \le n \le 10^ { 18 } $$$ $$$ 2 \le k \le n $$$ $$$ 1 \le m \le n $$$ $$$ 1 \le d \le \min { ( n 1000 ) } $$$ $$$ m \cdot d \cdot k \ge n $$$ ) — number candy number people maximum number candy give a person maximum number time a person receive candy print a single integer — maximum possible number candy arkady give note always possible choose valid $$$ x $$$ first example arkady choose $$$ x = 4 $$$ give $$$ 4 $$$ candy $$$ 4 $$$ candy second person $$$ 4 $$$ candy third person $$$ 4 $$$ candy fourth person $$$ 4 $$$ candy person give candy $$$ 2 $$$ time arkady receive $$$ 8 $$$ candy total note arkady choose $$$ x = 5 $$$ receive $$$ 5 $$$ candy choose $$$ x = 3 $$$ receive $$$ 3 + 3 = 6 $$$ candy well second person third fourth persons receive $$$ 3 $$$ candy $$$ 2 $$$ candy throw away ca n't choose $$$ x = 1 $$$ $$$ x = 2 $$$ case receive candy $$$ 2 $$$ time second example arkady choose $$$ x = 4 $$$ smaller value lead receive candy $$$ 1 $$$ time,['math'],2000.0
964/A,let 's define a split $$$ n $$$ a <unknown> sequence positive integers sum $$$ n $$$ example follow sequence split $$$ 8 $$$ : $$$ [ 4 4 ] $$$ $$$ [ 3 3 2 ] $$$ $$$ [ 2 2 1 1 1 1 ] $$$ $$$ [ 5 2 1 ] $$$ follow sequence n't split $$$ 8 $$$ : $$$ [ 1 7 ] $$$ $$$ [ 5 4 ] $$$ $$$ [ 11 -3 ] $$$ $$$ [ 1 1 4 1 1 ] $$$ weight a split number elements split equal first element example weight split $$$ [ 1 1 1 1 1 ] $$$ $$$ 5 $$$ weight split $$$ [ 5 5 3 3 3 ] $$$ $$$ 2 $$$ weight split $$$ [ 9 ] $$$ equal $$$ 1 $$$ a give $$$ n $$$ find number different weight split first line contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 1000000000 $$$ ) output one integer — answer problem first sample follow possible weight split $$$ 7 $$$ : weight 1 : [ $$$ \textbf 7 $$$ ] weight 2 : [ $$$ \textbf 3 $$$ $$$ \textbf 3 $$$ 1 ] weight 3 : [ $$$ \textbf 2 $$$ $$$ \textbf 2 $$$ $$$ \textbf 2 $$$ 1 ] weight 7 : [ $$$ \textbf 1 $$$ $$$ \textbf 1 $$$ $$$ \textbf 1 $$$ $$$ \textbf 1 $$$ $$$ \textbf 1 $$$ $$$ \textbf 1 $$$ $$$ \textbf 1 $$$ ],['math'],800.0
959/F,"ehab array a n integers like bitwise - xor operation like bother mahmoud come a problem give mahmoud q query , give mahmoud 2 integers l x ask find number subsequences first l elements array bitwise - xor sum x. help mahmoud answer query ? a subsequence contain elements neighbor first line contain integers n q ( 1 ≤ n q ≤ 105 ) number elements array number query next line contain n integers a1 a2 ... ( 0 ≤ ai < 220 ) elements array next q line contain integers l x ( 1 ≤ l ≤ n 0 ≤ x < 220 ) represent query query output answer modulo 109 + 7 a newline bitwise - xor sum empty set 0 bitwise - xor sum a set contain one element element","['dp', 'math']",2400.0
959/D,mahmoud array a consist n integers ask ehab find another array b length : ehab want choose a special array want lexicographically minimal array variants find ? array x lexicographically greater array y exist index i xi > yi xj = yj 1 ≤ j < i. array x equal array y xi = yi 1 ≤ i ≤ n. first line contain integer n ( 1 ≤ n ≤ 105 ) number elements a b. second line contain n integers a1 a2 ... ( 2 ≤ ai ≤ 105 ) elements a. output n space - separated integers i - th represent bi note second sample array already pairwise coprime print,"['constructive algorithms', 'greedy', 'math']",1900.0
958/E1,rebel fleet afraid empire might want strike back princess heidi need know possible assign r rebel spaceships guard b base every base exactly one guardian spaceship exactly one assign base ( word assignment a perfect match ) since know <unknown> pilot want sure two ( straight ) paths – a base assign spaceship – intersect galaxy plane ( 2d ) risk collision first line contain two space - separated integers r b ( 1 ≤ r b ≤ 10 ) 1 ≤ i ≤ r i + 1 - th line contain two space - separated integers xi yi ( |xi| |yi| ≤ 10000 ) denote coordinate i - th rebel spaceship follow b line format denote position base guarantee two point coincide three point line possible connect rebel spaceships base satisfy constraint output yes otherwise output ( without quote ) first example one possible way connect rebel base order second example perfect match rebel base,"['brute force', 'geometry', 'greedy', 'math']",1600.0
935/D,"ancient egyptians know use a large set symbols write wall temples fafa fifa go one temples find two non - empty word s1 s2 equal lengths wall temple write one since temple ancient symbols word erase symbols set equal probability position erase symbol fifa challenge fafa calculate probability s1 lexicographically greater s2 help fafa task ? know i. e. m distinct character egyptians ' alphabet problem character denote integers 1 m alphabet order a word x lexicographically greater a word y length word position word x a larger character word y. prove probability equal fraction p q coprime integers , print answer value i. e. a non - negative integer less 109 + 7 , mean a b give remainder divide m. first line contain two integers n m ( 1 ≤ n m ≤ 105 ) — length two word size alphabet respectively second line contain n integers a1 a2 ... ( 0 ≤ ai ≤ m ) — symbols s1 ai = 0 symbol position i erase third line contain n integers represent s2 format s1 print value p q coprime answer problem first sample first word convert ( 1 ) ( 2 ) second option one make lexicographically larger second word , answer problem <unknown> , second example replacement zero second word make first one lexicographically larger , answer problem 0",['math'],1900.0
933/B,"order put away old things welcome a fresh new year a thorough clean house a must little tommy find old polynomial clean take modulo another regret ... give two integers p k find a polynomial f ( x ) non - negative integer coefficients strictly less k whose remainder p divide ( x + k ) , f ( x ) = q ( x ) · ( x + k ) + p q ( x ) a polynomial ( necessarily integer coefficients ) line input contain two space - separated integers p k ( 1 ≤ p ≤ 1018 2 ≤ k ≤ 2 000 ) polynomial exist print a single integer -1 output two line otherwise first line print a non - negative integer d — number coefficients polynomial second line print d space - separated integers a0 a1 ... ad - 1 describe a polynomial fulfil give requirements output satisfy 0 ≤ ai < k 0 ≤ i ≤ d - 1 ad - 1 ≠ 0 . many possible solutions print first example f ( x ) = <unknown> + x5 + x4 + x = ( x5 - x4 + <unknown> - <unknown> + <unknown> - 23 ) · ( x + 2 ) + 46 . second example f ( x ) = x2 + <unknown> + 92 = ( x - 9 ) · ( x + <unknown> ) + 2018",['math'],2000.0
930/E,"arkady kirill visit exhibition rare coin coin locate a row enumerate leave right 1 k coin either lay obverse ( front ) side reverse ( back ) side arkady kirill make photos coin photo contain a segment neighbor coin <unknown> interest <unknown> photo make least one coin obverse side contrary kirill interest reverse photo make least one coin reverse side photos lose arkady kirill still remember bound segment coin photo contain give information compute remainder division 109 + 7 number ways choose upper side coin a way arkady 's photo least one coin obverse side kirill 's photo least one coin reverse side first line contain three integers k n m ( 1 ≤ k ≤ 109 0 ≤ n m ≤ 105 ) — total number coin number photos make arkady number photos make kirill respectively next n line contain descriptions arkady 's photos one per line line contain two integers l r ( 1 ≤ l ≤ r ≤ k ) mean among coin l - th r - th least one obverse side next m line contain descriptions kirill 's photos one per line line contain two integers l r ( 1 ≤ l ≤ r ≤ k ) mean among coin l - th r - th least one reverse side print line — number ways choose side coin modulo 109 + 7 = 1000000007 . first example follow ways possible ( ' o ' — obverse ' r ' — reverse side ) : second example information contradictory : second coin obverse reverse side time impossible , answer 0","['data structures', 'dp', 'math']",2900.0
920/C,array a consist n integers integer 1 n appear exactly array indices i ( 1 ≤ i ≤ n - 1 ) possible swap i - th element ( i + 1 ) -th indices possible may perform number swap operations order limit number time swap i - th element ( i + 1 ) -th ( position forbid ) make array sort ascend order perform sequence swap operations ? first line contain one integer n ( 2 ≤ n ≤ 200000 ) — number elements array second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 200000 ) — elements array integer 1 n appear exactly third line contain a string n - 1 character character either 0 1 . i - th character 1 swap i - th element ( i + 1 ) -th number time otherwise forbid swap i - th element ( i + 1 ) -th possible sort array ascend order use sequence swap allow make print yes otherwise print first example may swap a3 a4 swap a4 a5,"['dfs and similar', 'greedy', 'math']",1400.0
901/B,"suppose two polynomials polynomial uniquely represent follow way : do use long division , denote degree polynomial p ( x ) call remainder division polynomial polynomial also denote since a way divide polynomials remainder define euclid 's algorithm find greatest common divisor two polynomials algorithm take two polynomials polynomial zero result otherwise result value algorithm return pair step degree second argument decrease algorithm work finite number step large number could ? answer question give integer n. build two polynomials degrees greater n coefficients integers exceed 1 absolute value lead coefficients ( ones greatest power x ) equal one describe euclid 's algorithm perform exactly n step find greatest common divisor moreover degree first polynomial greater degree second a step algorithm mean transition pair pair give a single integer n ( 1 ≤ n ≤ 150 ) — number step algorithm need reach print two polynomials follow format first line print a single integer m ( 0 ≤ m ≤ n ) — degree polynomial second line print m + 1 integers - 1 1 — coefficients polynomial constant lead degree first polynomial greater degree second polynomial lead coefficients equal 1 . euclid 's algorithm perform exactly n step call use polynomials answer give n print -1 . multiple answer print second example print polynomials x2 - 1 x. sequence transition <unknown> two step","['constructive algorithms', 'math']",2200.0
899/D,"n shovel polycarp 's shop i - th shovel cost i burl , first shovel cost 1 burle second shovel cost 2 burl third shovel cost 3 burl , polycarps want sell shovel pair visitors likely buy a pair shovel total cost end several 9s , polycarp want choose a pair shovel sell a way sum cost end maximum possible number nines example choose shovel cost 12345 <unknown> total cost <unknown> end two nines compute number pair shovel total cost end maximum possible number nines two pair consider different a shovel present one pair , first line contain a single integer n ( 2 ≤ n ≤ 109 ) — number shovel polycarp 's shop print number pair shovel total cost end maximum possible number nines note possible largest number 9s end 0 count ways guarantee every n ≤ 109 answer n't exceed 2·109 first example maximum possible number nines end one polycarp <unknown> choose follow pair shovel purpose : second example maximum number nines end total cost two shovel one follow pair shovel suit polycarp : third example necessary choose shovel 49 50 sum cost 99 mean total number nines equal two maximum possible n = 50","['constructive algorithms', 'math']",1800.0
899/C,petya n integers : 1 2 3 ... n. want split integers two non - empty group a way absolute difference sum integers group small possible help petya split integers n integers exactly one group first line contain a single integer n ( 2 ≤ n ≤ 60 000 ) — number integers petya print smallest possible absolute difference first line second line print size first group follow integers group print integers arbitrary order multiple answer print first example put integers 1 4 first group 2 3 second way sum group 5 absolute difference 0 . second example two integers since group non - empty put one integer first group one second way absolute difference sum integers group 1,"['constructive algorithms', 'math']",1300.0
898/F,a correct expression form a+b = c write ; a b c non - negative integers without lead zero expression plus equally sign lose task restore expression word one character ' + ' one character ' = ' insert give sequence digits : guarantee give test answer always exist first line contain a non - empty string consist digits length string exceed 106 . output restore expression several solutions print note answer first contain two term ( divide symbol ' + ' ) result addition <unknown> ' separate number operation sign space strictly follow output format give examples remove symbol ' + ' symbol ' = ' answer string get a string string input data,"['brute force', 'math']",2300.0
889/E,"give a sequence integers a1 a2 ... , let 1 ≤ i < n. denote modulus operation find maximum value f ( x 1 ) nonnegative integers x. first line contain a single integer n ( 1 ≤ n ≤ 200000 ) — length sequence second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 1013 ) — elements sequence output a single integer — maximum value f ( x 1 ) nonnegative integers x. first example choose example x = 19 . second example choose example x = 3 x = 2","['dp', 'math']",3000.0
883/M,polycarp take part a quadcopter competition accord rule a fly robot : polycarp know coordinate start point ( x1 y1 ) coordinate point flag situate ( x2 y2 ) polycarp ’ s quadcopter fly parallel side field tick change exactly one coordinate 1 . mean one tick quadcopter fly point ( x y ) four point : ( x - 1 y ) ( x + 1 y ) ( x y - 1 ) ( x y + 1 ) thus quadcopter path a close cycle start finish ( x1 y1 ) contain point ( x2 y2 ) strictly inside minimal length quadcopter path ? first line contain two integer number x1 y1 ( - 100 ≤ x1 y1 ≤ 100 ) — coordinate quadcopter start ( finish ) point second line contain two integer number x2 y2 ( - 100 ≤ x2 y2 ≤ 100 ) — coordinate flag guarantee quadcopter start point flag coincide print length minimal path quadcopter surround flag return back,"['greedy', 'math']",1100.0
870/C,give several query i - th query give a single positive integer ni represent ni a sum maximum possible number composite summands print maximum number print -1 splittings integer greater 1 composite prime i.e positive divisors equal 1 integer first line contain single integer q ( 1 ≤ q ≤ 105 ) — number queries.q line follow ( i + 1 ) -th line contain single integer ni ( 1 ≤ ni ≤ 109 ) — i - th query query print maximum possible number summands a valid split composite summands -1 <unknown> = 4 + 4 + 4 = 4 + 8 = 6 + 6 = 12 first split maximum possible number <unknown> = 4 + 4 6 ca n't split several composite <unknown> 2 3 less composite number valid splittings,"['dp', 'greedy', 'math']",1300.0
865/F,"game egg roulette play two players initially 2r raw egg 2c cook egg place randomly a carton shell leave way distinguish a raw egg a cook egg one a time a player select egg smash egg his / her forehead egg cook much happen egg raw make quite mess continue one player break r raw egg point player declare loser player win order players take turn describe a string ' a ' ' b ' character i - th character tell player choose i - th egg traditionally players take turn go one , follow order ` ` ababab ... '' n't fair though second player win often first 'd like find a better order players take turn let 's define unfairness order absolute difference first player 's win probability second player 's win probability 're interest order minimize unfairness consider order valid contain number ' a 's ' b 's also give a string s length 2 ( r + c ) contain ' a ' ' b ' ' ? ' character order say match s differ s position s contain a ' ? ' valid order minimize unfairness many match s ? first line input contain integers r c ( 1 ≤ r c ≤ 20 r + c ≤ 30 ) second line input contain string s length 2 ( r + c ) consist character ' a ' ' b ' ' ? ' print number valid order minimize unfairness match s. first test case minimum unfairness 0 order achieve ` ` abba '' ` ` baab '' neither match s. note order ` ` abbb '' would also unfairness 0 invalid contain number ' a 's ' b 's second example match order ` ` <unknown> ''","['brute force', 'math']",3300.0
859/B,"security guard friend recently get a new job a new security company company require patrol area city <unknown> exactly n city block let choose block , friend must walk perimeter a region whose area exactly n block friend quite lazy would like help find shortest possible route meet requirements city lay a square grid pattern large enough sake problem consider infinite input consist a single integer n ( 1 ≤ n ≤ 106 ) number city block must enclose route print minimum perimeter achieve possible shape examples :","['brute force', 'geometry', 'math']",1000.0
856/C,"borya 's eleventh birthday get a great present : n card number i - th card number ai write borya want put card a row get one greater number example borya card number 1 31 12 put a row order would get a number 13112 . 11 already know n ! ways put card a row today a special day interest ways result big number divisible eleven , way previous paragraph good 13112 = <unknown> × 11 put card follow order : 31 1 12 would get a number <unknown> divisible 11 way good borya help borya find many good ways put card borya consider card different even contain number example borya two card 1 two good ways help borya find number good ways put card number large output modulo 998244353 . input data contain multiple test case first line input data contain integer t — number test case ( 1 ≤ t ≤ 100 ) descriptions test case follow test describe two line first line contain integer n ( 1 ≤ n ≤ 2000 ) — number card borya 's present second line contain n integers ai ( 1 ≤ ai ≤ 109 ) — number write card guarantee total number card test one input data n't exceed 2000 . test case output one line : number ways put card table result big number divisible 11 print number modulo 998244353","['dp', 'math']",2400.0
854/B,maxim want buy apartment a new house line avenue metropolis house n apartments number 1 n arrange a row two apartments adjacent indices differ 1 . apartments already inhabit others available sale maxim often visit neighbor apartment good available sale least one already inhabit apartment adjacent maxim know exactly k already inhabit apartments n't know indices yet find could minimum possible maximum possible number apartments good maxim line input contain two integers : n k ( 1 ≤ n ≤ 109 0 ≤ k ≤ n ) print minimum possible maximum possible number apartments good maxim sample test number good apartments could minimum possible example apartments indices 1 2 3 inhabit case apartment 4 good maximum possible number could example apartments indices 1 3 5 inhabit case apartments : 2 4 6 good,"['constructive algorithms', 'math']",1200.0
851/B,"arpa take a geometry exam last problem exam give three point a b c. find a point angle rotate page around point angle new position a old position b new position b old position c. arpa doubt problem a solution ( i.e exist a point angle satisfy condition ) help arpa determine question a solution line contain six integers ax ay bx , cx cy ( <unknown> <unknown> <unknown> <unknown> <unknown> <unknown> ≤ 109 ) 's guarantee point distinct print ` ` yes '' problem a solution ` ` '' otherwise print letter case ( upper lower ) first sample test rotate page around ( 0.5 0.5 ) second sample test ca n't find solution","['geometry', 'math']",1400.0
850/F,"a bag ball n different color ai ball i - th color least two different color ball bag perform follow step : let m = 109 + 7 . prove expect amount time need stop represent a rational number p q coprime integers q divisible m. return value first line input contain a single integer n ( 1 ≤ n ≤ 2 500 ) — number color next line input contain n space separate integers a1 a2 ... ( 1 ≤ ai ≤ 105 ) — number ball color print a single integer answer problem first sample matter happen ball become color one step second sample 6 ball let ’ s label ball 1 6 without loss <unknown> let ’ s say ball 1,2,3 initially color 1 ball 4,5 color 2 ball 6 color 3 . example step go : show answer case",['math'],2800.0
848/E,"floral clock stand side mirror lake years though unable keep time remind people passage time good old days rim floral clock 2n flower number 1 2n clockwise a colour among n possible ones colour exactly two flower distance either less equal 2 equal n. additionally flower u v colour flower opposite u opposite v colour well — symmetry beautiful ! formally distance two flower 1 plus number flower minor arc ( <unknown> ) a possible arrangement n = 6 cover possibilities beauty arrangement define product lengths flower segment separate opposite flower colour word order compute beauty remove circle flower colour flower opposite , beauty product lengths remain segment note include segment length 0 product flower colour flower opposite beauty equal 0 . instance beauty arrangement equal 1 × 3 × 1 × 3 = 9 — segment { 2 } { 4 5 6 } { 8 } { 10 11 12 } keep constraints satisfy may lot different arrangements find sum beauty possible arrangements modulo 998 244 353 . two arrangements consider different a pair ( u v ) ( 1 ≤ u v ≤ 2n ) exist flower u v colour one , first line input contain a lonely positive integer n ( 3 ≤ n ≤ 50 000 ) — number colour present floral clock output one integer — sum beauty possible arrangements flower modulo 998 244 353 . n = 3 follow six arrangements a beauty 2 × 2 = 4 . many others leave one figure a beauty 0 . right one invalid since 's <unknown>","['dp', 'math']",3400.0
841/B,leha somehow find array consist n integers look come a task two players play game array players move one one first player choose move a subsegment non - zero length odd sum number remove array remain part glue together one array game continue second player choose a subsegment non - zero length even sum remove lose one make a move win play optimally ? first line input data contain single integer n ( 1 ≤ n ≤ 106 ) — length array next line contain n integers a1 a2 ... ( 0 ≤ ai ≤ 109 ) output answer single line ` ` first '' first player win ` ` second '' otherwise ( without quote ) first sample first player remove whole array one move win second sample first player ca n't make a move lose,['math'],1100.0
838/D,airplane n row front back m people board airplane airplane entrance front back plane person assign seat possible multiple people assign seat people board plane one one start person 1 . person independently choose either front entrance back entrance enter plane a person walk plane walk directly assign seat try sit occupy continue walk direction walk empty seat - take earliest empty seat find get end row without find a seat angry find number ways assign ticket passengers board plane without anyone get angry two ways different exist a passenger choose a different entrance ways assign seat different print count modulo 109 + 7 . first line input contain two integers n m ( 1 ≤ m ≤ n ≤ 1 000 000 ) number seat number passengers respectively print a single number number ways modulo 109 + 7 . denote a passenger seat assign side come ( either ` ` f '' ` ` b '' front back respectively ) example one valid way 3b 3b 3b ( i.e passengers assign seat 3 come back entrance ) another valid way would 2f <unknown> 3f one invalid way would 2b 2b 2b since third passenger would get front without find a seat,['math'],2700.0
822/D,"pavlopolis university noora study decide hold beauty contest ` ` miss pavlopolis university '' let 's describe process choose beautiful girl university detail contest hold several stag suppose exactly n girls participate competition initially participants divide equal group x participants group furthermore number x choose arbitrarily i. e. every stage number x different within group jury contest compare beauty girls format ` ` '' way group consist x girls comparisons occur , group beautiful participant select select girls enter next stage competition thus n girls divide group x participants group exactly participants enter next stage contest continue exactly one girl leave ` ` miss pavlopolis university '' jury contest a tedious task would like divide girls group stage total number pairwise comparisons girls possible let f ( n ) minimal total number comparisons make select beautiful participant admit n girls first stage organizers competition insane give noora three integers t l r ask poor girl calculate value follow expression : <unknown> ( l ) + <unknown> ( l + 1 ) + ... + tr - <unknown> ( r ) however since value expression quite large organizers ask calculate modulo 109 + 7 . noora calculate value expression organizers promise help beauty contest poor girl strong mathematics turn help leha turn first single line contain three integers t l r ( 1 ≤ t < 109 + 7 2 ≤ l ≤ r ≤ 5·106 ) first line print single integer — value expression modulo 109 + 7 . consider sample necessary find value <unknown> ( 2 ) = 1 . two girls form one group two people one <unknown> ( 3 ) = 3 . three girls form one group three people three <unknown> ( 4 ) = 3 . four girls form two group two girls first stage two comparisons one two group second stage two girls one comparison total 2 + 1 = 3 comparisons also leave girls group first stage comparisons occur obviously 's better split girls group first way value expression","['brute force', 'dp', 'greedy', 'math']",1800.0
820/B,one quiet day <unknown> mister b decide draw angle a field alien already visit field leave many different geometric figure one figure regular convex n - gon ( regular convex polygon n side ) 's mister b decide use polygon mister b must find three distinct vertices v1 v2 v3 angle ( v2 vertex angle v1 v3 lie side ) close possible a. word value minimum possible many optimal solutions mister b satisfy first line contain two space - separated integers n a ( 3 ≤ n ≤ 105 1 ≤ a ≤ 180 ) — number vertices polygon need angle degrees print three space - separated integers : vertices v1 v2 v3 form multiple optimal solutions print vertices number 1 n clockwise order first sample test vertices regular triangle create angle 60 degrees 's every possible angle correct vertices square create 45 90 degrees angle 's second sample test angle 45 degrees choose since |45 - 67| < |90 - 67| correct answer : ` ` 3 1 2 '' ` ` 3 2 4 '' ` ` 4 2 3 '' ` ` 4 3 1 '' ` ` 1 3 4 '' ` ` 1 4 2 '' ` ` 2 4 1 '' ` ` 4 1 3 '' ` ` 3 1 4 '' ` ` 3 4 2 '' ` ` 2 4 3 '' ` ` 2 3 1 '' ` ` 1 3 2 '' ` ` 1 2 4 '' ` ` 4 2 1 '' third sample test contrary angle 90 degrees choose since |90 - 68| < |45 - 68| correct answer : ` ` 2 1 4 '' ` ` 3 2 1 '' ` ` 1 2 3 '' ` ` 4 3 2 '' ` ` 2 3 4 '' ` ` 1 4 3 '' ` ` 3 4 1 '',"['constructive algorithms', 'geometry', 'math']",1300.0
802/F,task exact easy version time marmots subtract village 's population p random number respond heidi 's request also villages a single inhabitant mean help heidi find whether a village follow a poisson a uniform distribution ? easy medium versions remember 1 ≤ p ≤ 1000 marmots may provide positive well negative integers output one line per village order provide input village 's line shall state poisson village 's distribution poisson type uniform answer come a uniform distribution,['math'],2800.0
774/E,stepan a big positive integer let 's consider cyclic shift stepan 's integer ( look integer like a string ) also integers ( i.e lead zero ) let 's call shift good shift example integer 10203 good shift integer 10203 integers <unknown> <unknown> . stepan want know minimum remainder division give number m among good shift task determine minimum remainder division m. first line contain integer stepan length stepan 's integer 2 200 000 digits inclusive guarantee stepan 's integer contain lead zero second line contain integer m ( 2 ≤ m ≤ 108 ) — number stepan divide good shift integer print minimum remainder stepan get divide good shift integer give number m. first example good shift integer 521 ( good shift equal 521 215 152 ) remainder 2 divide 3 . second example two good shift : stepan 's integer shift one position right integer 1001 remainder divide 5 equal 1 . shift one position right equal 1100 remainder divide 5 equal 0 minimum possible remainder,['math'],2300.0
772/C,give integer m a list n distinct integers 0 m - 1 . would like construct a sequence satisfy properties : construct sequence satisfy properties first line input contain two integers n m ( 0 ≤ n < m ≤ 200 000 ) — number forbid prefix products modulus n non - zero next line input contain n distinct integers 0 m - 1 forbid prefix products n zero line n't exist first line print number k denote length sequence second line print k space separate integers denote sequence first case prefix products sequence modulo m [ 1 2 3 4 0 ] second case prefix products sequence modulo m [ 3 7 4 6 8 0 ],"['constructive algorithms', 'dp', 'math']",2300.0
772/A,"n devices want use simultaneously i - th device use ai units power per second usage continuous , λ second device use <unknown> units power i - th device currently bi units power store devices store arbitrary amount power a single charger plug single device charger add p units power per second a device charge continuous , plug a device λ second gain <unknown> units power switch device charge arbitrary unit time ( include real number ) time take switch negligible wonder maximum amount time use devices one hit 0 units power use devices indefinitely print -1 . otherwise print maximum amount time one device hit 0 power first line contain two integers n p ( 1 ≤ n ≤ 100 000 1 ≤ p ≤ 109 ) — number devices power charger follow n line contain two integers line i contain integers ai bi ( 1 ≤ ai bi ≤ 100 000 ) — power device amount power store device begin use devices indefinitely print -1 . otherwise print maximum amount time one device hit 0 power answer consider correct absolute relative error exceed 10 - 4 . namely let 's assume answer a answer jury b. checker program consider answer correct sample test 1 charge first device entire time hit zero power second device enough power last time without charge sample test 2 use device indefinitely sample test 3 charge third device 2 / 5 a second switch charge second device a 1 / 10 a second",['math'],1800.0
766/E,mahmoud ehab live a country n cities number 1 n connect n - 1 undirected roads 's guarantee reach city use roads city a number ai attach define distance city x city y xor number attach cities path x y ( include x y ) word value attach cities path x y form array p length l distance bitwise xor operation mahmoud ehab want choose two cities make a journey one another index start city always less equal index finish city ( may start finish city case distance equal number attach city ) ca n't determine two cities try every city a start every city greater index a finish want know total distance pair cities first line contain integer n ( 1 ≤ n ≤ 105 ) — number cities mahmoud ehab 's country second line contain n integers a1 a2 ... ( 0 ≤ ai ≤ 106 ) represent number attach cities integer ai attach city i. next n - 1 line contain two integers u v ( 1 ≤ u v ≤ n u ≠ v ) denote undirected road cities u v. 's guarantee reach city use roads output one number denote total distance pair cities a bitwise xor take two bite integers equal length perform logical xor operation pair correspond bits result position 1 first bite 1 second bite 1 0 0 1 . read bitwise xor operation : https : //en.wikipedia.org / wiki / bitwise_operation # xor first sample available paths :,"['constructive algorithms', 'data structures', 'dfs and similar', 'dp', 'math']",2100.0
762/A,give two integers n k. find k - th smallest divisor n report n't exist divisor n natural number n divide without remainder first line contain two integers n k ( 1 ≤ n ≤ 1015 1 ≤ k ≤ 109 ) n less k divisors output -1 . otherwise output k - th smallest divisor n. first example number 4 three divisors : 1 2 4 . second one 2 . second example number 5 two divisors : 1 5 . third divisor n't exist answer -1,['math'],1400.0
758/F,give n l r find number distinct geometrical progression contain n distinct integers less l greater r. word progression follow must hold : l ≤ ai ≤ r ai ≠ aj a1 a2 ... geometrical progression 1 ≤ i j ≤ n i ≠ j. geometrical progression a sequence number a1 a2 ... term first find multiply previous one a fix non - zero number d call common ratio note task d may non - integer example progression 4 6 9 common ratio two progressions a1 a2 ... b1 b2 ... bn consider different i ( 1 ≤ i ≤ n ) ai ≠ bi first line <unknown> three integers n l r ( 1 ≤ n ≤ 107 1 ≤ l ≤ r ≤ 107 ) print integer k — answer problem possible progressions first test examples : possible progressions second test examples : possible progressions third test examples : possible progressions fourth test examples :,"['brute force', 'math']",2400.0
757/B,bash set a journey become greatest pokemon master get first pokemon go professor zulu 's lab since bash professor zulu 's favourite student zulu allow take many pokemon lab please zulu warn a group k > 1 pokemon strengths { s1 s2 s3 ... sk } tend fight among gcd ( s1 s2 s3 ... sk ) = 1 ( see note gcd definition ) bash smart want pokemon fight among however also want maximize number pokemon take lab help bash find maximum number pokemon take ? note : a pokemon fight input consist two line first line contain integer n ( 1 ≤ n ≤ 105 ) number pokemon lab next line contain n space separate integers i - th denote si ( 1 ≤ si ≤ 105 ) strength i - th pokemon print single integer — maximum number pokemons bash <unknown> ( greatest common divisor ) positive integers set { a1 a2 ... } maximum positive integer divide integers { a1 a2 ... } first sample take pokemons strengths { 2 4 } since gcd ( 2 4 ) = 2 . second sample take pokemons strengths { 2 4 6 } larger group gcd ≠ 1,"['greedy', 'math']",1400.0
747/F,igor like hexadecimal notation consider positive integer hexadecimal notation interest digit letter appear t time example t = 3 integers <unknown> aaa <unknown> interest number aaaa abababab 1000000 interest task find k - th smallest interest igor integer hexadecimal notation integer contain lead zero first line contain two integers k t ( 1 ≤ k ≤ 2·109 1 ≤ t ≤ 10 ) — number require integer maximum number time integer letter appear interest integer show answer always exist constraints print hexadecimal notation integer k - th smallest interest integer igor first 20 interest integers t = 1 : 1 2 3 4 5 6 7 8 9 a b c d e f 10 12 13 14 15 . answer first example equal 12,"['brute force', 'dp', 'math']",2500.0
736/E,ostap prepare play chess time prepare thus closely monitor one recent chess tournament m players participate pair players play exactly one game victory give 2 point draw — 1 point lose — 0 point ostap lazy never try remember outcome game instead compute total number point earn players ( sum point game take part ) sort value non - ascending order remember first n integers list great <unknown> ostap wonder whether remember everything correct consider correct exist least one tournament result table produce give integers mean count sum point player sort take first n elements result coincide ostap remember check table exist ? first line input contain two integers m n ( 1 ≤ n ≤ m ≤ 3000 ) — number participants tournament number top result ostap remember second line contain n integers provide non - ascending order — number point earn top participants ostap remember 's guarantee integers non - negative exceed 2·m tournament ostap obtain give set integers use procedure describe statement print ` ` '' line output otherwise first line output contain word ` ` yes '' next m line provide description valid tournament line must contain m character ' x ' ' w ' 'd ' ' l ' character ' x ' always locate main diagonal ( ) i - th position i - th string character ' w ' j - th position i - th string mean i - th player game j - th way character ' l ' mean loose 'd ' mean draw table print must consistent point earn best n participants match memory ostap many possible answer print,"['constructive algorithms', 'greedy', 'math']",2900.0
702/D,vasiliy a car want get home post office distance need pass equal d kilometers vasiliy 's car new — break drive every k kilometers vasiliy need t second repair repair car vasiliy drive ( k kilometers break ) begin trip car repair station drive one kilometer car vasiliy spend a second walk one kilometer foot need b second ( a < b ) task find minimal time vasiliy able reach post office consider every moment time vasiliy leave car start go foot first line contain 5 positive integers d k a b t ( 1 ≤ d ≤ 1012 ; 1 ≤ k a b t ≤ 106 ; a < b ) : print minimal time vasiliy able reach post office first example vasiliy need drive first 2 kilometers car ( 2 second ) walk foot 3 kilometers ( 12 second ) answer equal 14 second second example vasiliy need drive first 2 kilometers car ( 2 second ) repair car ( 5 second ) drive 2 kilometers car ( 2 second ) need walk foot 1 kilometer ( 4 second ) answer equal 13 second,['math'],1900.0
685/C,river bring gerda house old lady know magic lady decide make gerda daughter want gerda forget kay put roses garden underground mole live garden watch roses without go surface typical mole blind mole grant special vision old lady watch underground object distance even obstacles object however quality picture depend manhattan distance object observe mole want find optimal point watch roses point integer coordinate maximum manhattan distance rise minimum possible usual ask help manhattan distance point ( x1 y1 z1 ) ( x2 y2 z2 ) define |x1 - x2| + |y1 - y2| + <unknown> - <unknown> first line input contain integer t t ( 1 ≤ t ≤ 100 000 ) — number test case follow exactly t block contain description exactly one test first line block contain integer ni ( 1 ≤ ni ≤ 100 000 ) — number roses test follow ni line contain three integers — coordinate correspond rise note two roses may share position 's guarantee sum ni n't exceed 100 000 coordinate greater 1018 absolute value t test case print three integers — coordinate optimal point watch roses many optimal answer print coordinate optimal point may coincide coordinate rise first sample maximum manhattan distance point rise equal 4 . second sample maximum possible distance 0 . note position roses may coincide position optimal point,['math'],2900.0
683/D,a chocolate bar a rectangular shape consist n × m slice word a bar consist n row m slice chocolate row slice chocolate know weigh 1 gram task determine q chocolate bar whether possible obtain a piece weigh p grams break bar several ( possibly zero ) time final piece chocolate bar whole break make along line slice ' section whole length current piece first line contain positive integer q ( 1 ≤ q ≤ 100 ) — number chocolate bar follow q line contain three positive integers n m p ( 1 ≤ n m p ≤ 1000 ) — size chocolate bar weight piece obtain output contain q line i - th line must contain ` ` yes '' ( without quote ) possible perform task i - th chocolate bar ` ` '' otherwise,['math'],1400.0
679/A,"interactive problem output section see information flush output bear limak think hide number — integer interval [ 2 100 ] task say hide number prime composite integer x > 1 call prime exactly two distinct divisors 1 x. integer x > 1 prime 's call composite ask 20 query divisors hide number query print integer interval [ 2 100 ] system answer ` ` yes '' integer a divisor hide number otherwise answer ` ` '' example hide number 14 system answer ` ` yes '' print 2 7 14 . do ask query print ` ` prime '' ` ` composite '' terminate program get wrong answer verdict ask 20 query print integer range [ 2 100 ] also get wrong answer verdict print answer n't correct get idleness limit exceed verdict n't print anything ( ) forget flush output ( info ) query read one string input ` ` yes '' print integer a divisor hide number ` ` '' otherwise 20 time ask a query — print integer interval [ 2 100 ] one line print end - of - line character flush output flush read a response input moment print answer ` ` prime '' ` ` composite '' ( without quote ) , flush output terminate program flush use ( print integer end - of - line ) : hack hack someone input print hide number — one integer interval [ 2 100 ] course his / her solution wo n't able read hide number input hide number first query 30 . a table see a better form provide example communication process hide number divisible 2 5 . thus must composite note n't necessary know exact value hide number test hide number <unknown> a divisor hide number interval [ 2 100 ] one number divisor hide number must 59 prime note answer know even second query could print terminate though n't forbid ask unnecessary query ( unless exceed limit 20 query )","['constructive algorithms', 'math']",1400.0
678/D,consider a linear function f ( x ) = ax + b. let 's define g ( 0 ) ( x ) = x g ( n ) ( x ) = f ( g ( n - 1 ) ( x ) ) n > 0 . give integer value a b n x find value g ( n ) ( x ) modulo 109 + 7 . line contain four integers a b n x ( 1 ≤ a b x ≤ 109 1 ≤ n ≤ 1018 ) — parameters problem statement note give value n large use 64 - bit integer type store c++ use long long integer type java use long integer type print integer s — value g ( n ) ( x ) modulo 109 + 7,['math'],1700.0
676/E,100 years pass since last victory man versus computer go technologies make a huge step forward robots conquer earth ! 's time final fight human robot decide <unknown> planet follow game choose fight : initially a polynomial polynomial p ( x ) say divisible polynomial q ( x ) exist a representation p ( x ) = b ( x ) q ( x ) b ( x ) also polynomial move make already wonder true human guarantee victory play optimally ? first line input contain two integers n k ( 1 ≤ n ≤ 100 000 |k| ≤ 10 000 ) — size polynomial integer k. i - th follow n + 1 line contain character ' ? ' coefficient near xi - 1 yet undefined integer value ai coefficient already know ( - 10 000 ≤ ai ≤ 10 000 ) integers ai ( even ) may equal 0 . please note 's guarantee give position game 's computer 's turn move print ` ` yes '' ( without quote ) human win strategy ` ` '' ( without quote ) otherwise first sample computer set a0 - 1 first move human set coefficient a1 0.5 win second sample coefficients already set result polynomial divisible x - 100 human,['math'],2400.0
662/C,"give a table consist n row m columns cell table contain either 0 1 . one move allow pick row column invert value , replace 0 1 vice versa minimum number cells value 1 get apply number operations ? first line input contain two integers n m ( 1 ≤ n ≤ 20 1 ≤ m ≤ 100 000 ) — number row number columns respectively n line follow descriptions row line length m contain digits ' 0 ' ' 1 ' output a single integer — minimum possible number ones get apply sequence operations","['brute force', 'dp', 'math']",2600.0
662/A,know game ` ` nim '' play n pile stone i - th pile initially contain ai stone two players alternate turn a turn a player pick non - empty pile remove positive number stone one able make a move lose game petya vasya tire play nim invent version game name ` ` gamble nim '' n two - sided card one side i - th card number ai write side number bi begin game players put card table card one side side choose independently uniformly thus obtain a sequence c1 c2 ... cn ci equal ai bi take n pile stone i - th pile contain exactly ci stone play nim petya take first turn give players play optimally find probability petya 's victory output answer irreducible fraction first line input contain a single integer n ( 1 ≤ n ≤ 500 000 ) — number card deck follow n line contain description one card consist two integers ai bi ( 0 ≤ ai bi ≤ 1018 ) output answer irreducible fraction p / q. probability petya 's victory 0 print 0/1,['math'],2400.0
645/F,attempt make peace <unknown> mess makers bessie farmer john plan plant flower garden complement <unknown> <unknown> field bovinia good horticulturist know garden plant must exact arrangement flower initially farmer john n different species flower plant ai flower i - th species next q days farmer john receive a batch flower a new species day j receive cj flower species a different species farmer john already farmer john know right balance <unknown> <unknown> want exactly k species flower use furthermore reduce waste flower k species farmer john choose must plant garden garden must identical ; say k choose species equal number flower garden farmer john a proponent national equality would like create greatest number garden possible receive flower q days farmer john would like know sum possible choices k species maximum number garden could create since could a large number output result modulo 109 + 7 . first line input contain three integers n k q ( 1 ≤ k ≤ n ≤ 100 000 1 ≤ q ≤ 100 000 ) i - th ( 1 ≤ i ≤ n ) next n line input contain integer ai ( 1 ≤ ai ≤ 1 000 000 ) number flower species i farmer john initially j - th ( 1 ≤ j ≤ q ) next q line input contain integer cj ( 1 ≤ cj ≤ 1 000 000 ) number flower a new species farmer john receive day j. q days output sum maximum possible number garden sum take possible choices k species modulo 109 + 7 . first sample case first day farmer john ( 4 6 9 8 ) type flower k = 3 . choose ( 4 6 8 ) let make 2 garden ( 2 3 4 ) flower respectively choose ( 4 6 9 ) ( 4 9 8 ) ( 6 9 8 ) let make one garden since number garden species evenly split sum choices k = 3 flower 2 + 1 + 1 + 1 = 5 . second day farmer john ( 4 6 9 8 6 ) flower sum choices 1 + 2 + 2 + 1 + 1 + 2 + 2 + 3 + 1 + 1 = 16 . second sample case k = 1 . x flower farmer john make x garden answer query 6 + 5 + 4 + 3 + 2 = 20 6 + 5 + 4 + 3 + 2 + 1 = 21,['math'],2500.0
643/F,"n bear inn p place sleep bear party together number nights ( days ) bear love drink juice n't like wine ca n't distinguish juice taste smell a bear n't sleep unless drink wine a bear must go sleep a hours drink a wine wake many days party radewoosh owner inn want put number barrel front bear one barrel contain wine ones contain juice radewoosh challenge bear find a barrel wine night follow happen exact order : end 's sure wine least one awake bear bear win ( unless lose number place sleep ) radewoosh want allow bear win consider q scenarios i - th scenario party last i nights , let ri denote maximum number barrel bear surely win behave optimally let 's define task find denote exclusive ( also denote xor ) note barrel may choose many bear go sleep line input contain three integers n p q ( 1 ≤ n ≤ 109 1 ≤ p ≤ 130 1 ≤ q ≤ 2 000 000 ) — number bear number place sleep number scenarios respectively print one integer equal first sample 5 bear 1 place sleep r1 = 6 r2 = 11 r3 = 16 answer let 's analyze optimal strategy scenario 2 days r2 = 11 barrel 10 contain juice second sample one bear choose empty set barrel night otherwise would maybe get wine bear would lose ( must least one awake bear ) , number days ri = 1 . answer","['dp', 'math']",2900.0
638/A,"main street berland a straight line n house build along ( n even number ) house locate side street house odd number one side street number 1 n - 1 order begin street end ( picture : leave right ) house even number side street number 2 n order end street begin ( picture : right leave ) correspond house even odd number strictly opposite , house 1 opposite house n house 3 opposite house n - 2 house 5 opposite house n - 4 vasya need get house number a quickly possible start drive begin street drive car house a. get begin street house number 1 n spend exactly 1 second also spend exactly one second drive distance two neighbour house vasya park side road distance begin street house stand opposite one another consider task : find minimum time vasya need reach house a. first line input contain two integers n a ( 1 ≤ a ≤ n ≤ 100 000 ) — number house street number house vasya need reach correspondingly guarantee number n even print a single integer — minimum time vasya need get begin street house a. first sample four house street two house side house 2 last vasya 's right second sample correspond picture n = 8 . house 5 one last vasya 's leave","['constructive algorithms', 'math']",1100.0
632/E,a thief make way a shop usual lucky knapsack knapsack contain k object n kinds products shop infinite number products kind cost one product kind i ai thief greedy take exactly k products ( 's possible kinds take several products kind ) find possible total cost products thief nick knapsack first line contain two integers n k ( 1 ≤ n k ≤ 1000 ) — number kinds products number products thief take second line contain n integers ai ( 1 ≤ ai ≤ 1000 ) — cost products kinds 1 n. print line possible total cost steal products separate a space number print ascend order,"['dp', 'math']",2400.0
630/M,vasya start work a machine vision company city vasya 's team create software hardware identification people face one project 's know - <unknown> a camera rotate around <unknown> axis shoot people see eye - <unknown> gadget — a rotate camera — come see better look camera take photo time could better high quality identification ? everything simple picture camera appear rotate ( clockwise camera rotation frame content become rotate counter - clockwise ) identification algorithm work face slightly deviate vertical vasya entrust correct situation — rotate a capture image image would minimally deviate vertical requirements severe firstly picture rotate angle divisible 90 degrees lose a bite information image secondly frame camera huge fps big adequate rotation speed provide hardware fpga solution solution rotate 90 degrees clockwise course one apply 90 degrees turn several time sake performance number turn minimize help vasya implement program give rotation angle camera determine minimum number 90 degrees clockwise turn necessary get a picture direction deviation vertical minimum next figure contain frame take <unknown> camera rotate 90 degrees clockwise rotate 90 degrees counter - clockwise arrows show direction ` ` true '' next figure show 90 degrees clockwise turn fpga hardware line input contain one integer x ( - 1018 ≤ x ≤ 1018 ) — camera angle degrees positive value denote clockwise camera rotation negative — counter - clockwise output one integer — minimum require number 90 degrees clockwise turn camera rotate 60 degrees counter - clockwise ( second example ) image rotate 60 degrees clockwise one 90 degrees clockwise turn image result 150 degrees clockwise total rotation deviation ` ` true '' one turn 150 degrees two 90 degrees clockwise turn image result 240 degrees clockwise total rotation deviation ` ` true '' two turn 120 degrees 240 degrees clockwise equal 120 degrees counter - clockwise three 90 degrees clockwise turn image result 330 degrees clockwise total rotation deviation ` ` true '' three turn 30 degrees 330 degrees clockwise equal 30 degrees counter - clockwise 60 150 120 30 degrees <unknown> smallest 30 achieve three 90 degrees clockwise turn,"['geometry', 'math']",1800.0
630/K,city company develop computer game decide upgrade way reward employees look follow way a new game release users start buy actively company track number sales precision transaction every time next number sales divisible number 2 10 every developer game get a small bonus a game designer petya know company release a new game partly develop basis experience predict n people buy game first month petya want determine many time get bonus help know line input contain one integer n ( 1 ≤ n ≤ 1018 ) — prediction number people buy game output one integer show many number 1 n divisible number 2 10,['math'],1500.0
630/G,budget cut one company establish new non - financial reward system instead bonuses two kinds action reward : fix critical bug suggest new interest feature a man fix a critical bug get ` ` i fix a critical bug '' pennant table a man suggest a new interest feature get ` ` i suggest a new feature '' pennant table limit budget new reward system 5 ` ` i fix a critical bug '' pennants 3 ` ` i suggest a new feature '' pennants buy order use pennants a long time make challenge ones a man fix a new critical bug one earlier award ` ` i fix a critical bug '' pennants pass table a man suggest a new interest feature one earlier award ` ` i suggest a new feature '' pennants pass table one man several pennants one type course pennants type table n table company find number ways place pennants table give pennant situate one table table big enough contain number pennants line input contain one integer n ( 1 ≤ n ≤ 500 ) — number table company output one integer — amount ways place pennants n table,['math'],1600.0
627/A,two positive integers a b a sum s a bitwise xor x. many possible value order pair ( a b ) ? first line input contain two integers s x ( 2 ≤ s ≤ 1012 0 ≤ x ≤ 1012 ) sum bitwise xor pair positive integers respectively print a single integer number solutions give condition solutions exist print 0 . first sample follow solutions : ( 2 7 ) ( 3 6 ) ( 6 3 ) ( 7 2 ) second sample solutions ( 1 2 ) ( 2 1 ),"['dp', 'math']",1700.0
603/E,land bovinia n pasture paths connect pasture course a terrible situation kevin sun plan <unknown> construct m undirected paths connect pair distinct pasture make transportation efficient also plan pave new paths kevin particular certain aspects path - <unknown> since love odd number want pasture odd number pave paths connect thus call a pave sunny pasture incident odd number pave paths also enjoy short paths long paths would like longest pave path short possible add path kevin want know a sunny pave exist paths bovinia least one minimum possible length longest path a pave note ` ` longest path '' mean maximum - weight edge first line contain two integers n ( 2 ≤ n ≤ 100 000 ) m ( 1 ≤ m ≤ 300 000 ) denote number pasture paths respectively next m line contain three integers ai bi li describe i - th path i - th path connect pasture ai bi ( 1 ≤ ai bi ≤ n ; ai ≠ bi ) length li ( 1 ≤ li ≤ 109 ) paths give order construct output m line i - th line contain a single integer denote minimum possible length longest path ( maximum - weight edge ) a sunny pave use first i paths kevin pave a set paths pasture incident odd number pave paths output - 1 . note pave hypothetical — <unknown> answer add i - th path affect previous answer first sample paths kevin pave build i - th path : second sample never exist a pave make kevin happy,"['data structures', 'math']",3000.0
593/C,every day ruslan try count sheep fall asleep n't help find a interest thing first think set circle a plane try choose a beautiful set point least one point set inside border imagine circle yesterday ruslan try solve problem case set point consider beautiful give ( xt = f ( t ) yt = g ( t ) ) argument t take integer value 0 50 . moreover f ( t ) g ( t ) correct function assume w ( t ) h ( t ) correct function c integer range 0 50 . function s ( t ) correct 's obtain one follow rule : yesterday ruslan think could cope task ask write a program compute appropriate f ( t ) g ( t ) set 50 circle function f ( t ) g ( t ) allow use 50 multiplications length function exceed <unknown> character function contain space ruslan ca n't keep big number memory choose f ( t ) g ( t ) integer t 0 50 value f ( t ) g ( t ) intermediate calculations wo n't exceed 109 absolute value first line input contain number n ( 1 ≤ n ≤ 50 ) — number circle ruslan think next follow n line contain three integers xi yi ri ( 0 ≤ xi yi ≤ 50 2 ≤ ri ≤ 50 ) — coordinate center <unknown> i - th circle first line print a correct function f ( t ) second line print a correct function g ( t ) set point ( xt = f ( t ) yt = g ( t ) ) ( 0 ≤ t ≤ 50 ) must satisfy condition least one point inside border circle ruslan think begin correct function : incorrect function :,"['constructive algorithms', 'math']",2200.0
592/C,"vector willman array bolt two famous athletes byteforces go compete a race a distance l meter today willman bolt exactly speed compete result always a tie a problem organizers want a winner watch previous race organizers notice willman perform step length equal w meter bolt perform step length equal b meter organizers decide slightly change rule race , end racetrack aby winner declare athlete manage run farther start point racetrack ( subject change athletes ) note none athletes run infinitely far moment time face point one step cause fall aby word athlete fall aby total length step less equal choose distance l. since organizers fair go set length racetrack integer choose randomly uniformly range 1 t ( include ) probability willman bolt tie today ? first line input contain three integers t w b ( 1 ≤ t w b ≤ 5·1018 ) — maximum possible length racetrack length willman 's step length bolt 's step respectively print answer problem irreducible fraction follow format sample output fraction ( p q integers p ≥ 0 q > 0 hold ) call irreducible integer d > 1 p q divisible d. first sample willman bolt tie case 1 6 7 choose length racetrack",['math'],1800.0
592/B,ari monster always wake early first ray sun first thing feed squirrel ari draw a regular convex polygon floor number 's vertices 1 2 ... n clockwise order start vertex 1 draw a ray direction vertex ray stop reach a vertex intersect another ray draw ari repeat process vertex 2 3 ... n ( particular order ) put a <unknown> region inside polygon ada squirrel want collect walnuts allow step line draw ari mean ada perform a small jump want go one region another ada jump one region p another region q p q share a side a corner assume ada start outside picture minimum number jump perform order collect walnuts ? first line input contain a single integer n ( 3 ≤ n ≤ <unknown> ) - number vertices regular polygon draw ari print minimum number jump ada make collect walnuts note n't need leave polygon one possible solutions first sample show picture,['math'],1100.0
588/B,duff love lovely number ! a positive integer x call lovely positive integer a > 1 a2 a divisor x. malek a number store ! store divisors positive integer n ( ) a birthday present malek want give a lovely number store want number big possible malek always issue math ask help please tell biggest lovely number store first line input contain one integer n ( 1 ≤ n ≤ 1012 ) print answer one line first sample case number 1 2 5 10 shop 10 n't divisible perfect square 10 lovely second sample case number 1 2 3 4 6 12 shop 12 divisible 4 = 22 12 lovely 6 indeed lovely,['math'],1300.0
582/D,"a give prime integer p integers α a calculate number pair integers ( n k ) 0 ≤ k ≤ n ≤ a divisible <unknown> answer rather large print remainder answer <unknown> 109 + 7 . let us remind number ways k object choose set n object first line contain two integers p α ( 1 ≤ p α ≤ 109 p prime ) second line contain decimal record integer a ( 0 ≤ a < 101000 ) without lead zero single line print answer problem first sample three <unknown> coefficients divisible 4 ,","['dp', 'math']",3300.0
576/A,vasya petya play a simple game vasya think number x 1 n petya try guess number petya ask question like : ` ` unknown number divisible number y ? ` ` game play follow rule : first petya ask question interest ( also ask question ) vasya respond question a ' yes ' a ' no ' receive answer petya determine number vasya think unfortunately petya familiar number theory help find minimum number question ask make a guarantee guess vasya 's number number yi ask question a single line contain number n ( 1 ≤ n ≤ 103 ) print length sequence question k ( 0 ≤ k ≤ n ) follow k number — question yi ( 1 ≤ yi ≤ n ) several correct sequence question minimum length allow print sequence answer first sample test actually correct unknown number divisible one sequence number equal 1 . unknown number divisible 4 4 . unknown number divisible 3 unknown number 3 . otherwise equal 2 . therefore sequence question allow guess unknown number show correct sequence question length 2 shorter,['math'],1500.0
575/H,"sasha ira two best friends ’ t friends software engineer experts artificial intelligence develop algorithm two bots play a two - player game game cooperative turn base turn one players make a move ( ’ t matter player 's possible players turn alternate ) algorithm bots sasha ira develop work keep track state game time either bot make a move state change , since game dynamic never go back state already point past sasha ira perfectionists want algorithm optimal win strategy notice optimal win strategy bots make exactly n move , order find optimal strategy algorithm need analyze possible state game ( ’ t learn <unknown> - beta <unknown> yet ) pick best sequence move worry efficiency algorithm wonder total number state game need analyze ? first line contain integer n. output contain a single integer – number possible state modulo 109 + 7 . start : game state a. overall 19 possible state game algorithm need analyze","['dp', 'math']",1800.0
575/A,<unknown> sequence integer recursive sequence define recurrence relation sequence s infinite almost cyclic sequence a cycle length n. a sequence s call almost cyclic a cycle length n i ≥ n except a finite number value si ( i ≥ n ) follow example almost cyclic sequence a cycle length 4 : notice value s equality hold s6 ( s6 = 7 s2 = 8 ) give s0 s1 ... sn - 1 value sequence s ( i ≥ n ) find first line contain two number k p. second line contain a single number n. third line contain n number separate space represent first n number sequence s. fourth line contain a single number m number value sequence s follow m line contain two number j v indicate sj = v. j - s distinct output contain a single integer equal,"['data structures', 'math']",2700.0
557/D,vitaly expel university become interest graph theory vitaly especially like cycle odd length vertex occur vitaly wonder solve follow problem give undirected graph consist n vertices m edge necessarily connect without parallel edge loop need find t — minimum number edge must add give graph order form a simple cycle odd length consist one vertex moreover must find w — number ways add t edge order form a cycle odd length ( consist one vertex ) prohibit add loop parallel edge two ways add edge graph consider equal set add edge since vitaly study university ask help task first line input contain two integers n m ( — number vertices graph number edge graph next m line contain descriptions edge graph one edge per line edge give a pair integers ai bi ( 1 ≤ ai bi ≤ n ) — vertices connect i - th edge number line separate a single space guarantee give graph n't contain loop parallel edge graph n't necessarily connect print first line output two space - separated integers t w — minimum number edge add graph form a simple cycle odd length consist one vertex vertex occur number ways simple cycle a cycle n't contain vertex twice,"['dfs and similar', 'math']",2000.0
549/E,berlanders like eat <unknown> a hard day misha square sasha circle local authorities berland control point cone trade misha n point sasha — m. since subordinate constantly conflict decide build a fence form a circle point trade one businessman strictly inside a circle point one strictly outside n't matter two gentlemen trade point inside circle determine whether build a fence first line contain two integers n m ( 1 ≤ n m ≤ 10000 ) number misha 's sasha 's trade point respectively next n line contain pair space - separated integers mx ( - 104 ≤ mx ≤ 104 ) coordinate misha 's trade point next m line contain pair space - separated integers sx sy ( - 104 ≤ sx sy ≤ 104 ) coordinate sasha 's trade point guarantee n + m point distinct output line contain either word ` ` yes '' without quote case possible build a fence word ` ` '' case first sample possibility separate point circle contain point ( - 1 0 ) ( 1 0 ) also contain least one point set ( 0 - 1 ) ( 0 1 ) vice - versa : circle contain point ( 0 - 1 ) ( 0 1 ) also contain least one point set ( - 1 0 ) ( 1 0 ) second sample one possible solution show misha 's point mark red colour sasha 's mark blue,"['geometry', 'math']",2700.0
535/E,"tavas a cheerleader new sport competition name ` ` <unknown> '' competition consist two part : swim run people immediately start run r meter finish swim exactly s meter a winner a person nobody else finish run him / her ( may one winner ) match start tavas know n competitors register match also know i - th person 's swim speed si meter per second his / her run speed ri meter per second unfortunately n't know value r s know real number greater 0 . a cheerleader tavas want know cheer , want know people might win consider a competitor might win value r s value ( s ) a winner tavas n't really familiar program ask help first line input contain a single integer n ( 1 ≤ n ≤ 2 × 105 ) next n line contain detail competitors i - th line contain two integers si ri ( 1 ≤ si ri ≤ 104 ) first line output print a sequence number possible winners increase order","['geometry', 'math']",2600.0
535/C,"karafs kind <unknown> shape 1 × h rectangle <unknown> people love karafs use karafs almost kind food tavas , crazy karafs karafs a positive integer height tavas infinite 1 - based sequence karafses height i - th karafs si = a + ( i - 1 ) × b. a give m let 's define m - bite operation decrease height m distinct eat karafses 1 . karafs consider eat height become zero saddas ask n query query give number l t m find largest number r l ≤ r sequence sl sl + 1 ... sr eat perform m - bite t time print -1 number r. first line input contain three integers a b n ( 1 ≤ a b ≤ 106 1 ≤ n ≤ 105 ) next n line contain information query i - th line contain integers l t m ( 1 ≤ l t m ≤ 106 ) i - th query query print answer a single line","['greedy', 'math']",1900.0
526/C,a sweet little monster om nom love candy much one day find a rather tricky situation require think a bite order enjoy candy would succeed task place ? one day come friend <unknown> om nom n't find home find two bag candy first full blue candy second bag full red candy om nom know red candy weigh wr grams blue candy weigh wb grams eat a single red candy give om nom hr joy units eat a single blue candy give om nom hb joy units candy important thing world hand overeat good om nom know eat c grams candy get sick om nom think n't proper leave candy leftovers eat a whole candy om nom a great mathematician quickly determine many candy type eat order get maximum number joy units repeat achievement ? assume bag contain candy om nom eat single line contain five integers c hr hb wr wb ( 1 ≤ c hr hb wr wb ≤ 109 ) print a single integer — maximum number joy units om nom get sample test om nom eat two candy type thus get 16 joy units,"['brute force', 'greedy', 'math']",2000.0
525/E,"anya love fold stick today decide anya n cub lie a line number 1 n leave right natural number write also k stickers exclamation mark know number stickers exceed number cub anya stick exclamation mark cube get factorial number write cube example a cube read 5 stick read 5 ! equal 120 . need help anya count many ways choose cub stick choose cub k exclamation mark sum number write choose cub stick become equal s. anya stick one exclamation mark cube ? two ways consider set choose cub set cub exclamation mark first line input contain three space - separated integers n k s ( 1 ≤ n ≤ 25 0 ≤ k ≤ n 1 ≤ s ≤ 1016 ) — number cub number stickers anya sum need get second line contain n positive integers ai ( 1 ≤ ai ≤ 109 ) — number write cub cub input describe order leave right start first one multiple cub contain number output number ways choose number cub stick exclamation mark sum number become equal give number s. first sample way choose cub stick exclamation mark second sample way choose cub n't stick exclamation mark third sample possible choose cub three ways also may choose stick stick exclamation mark , total number ways six","['brute force', 'dp', 'math']",2100.0
525/C,even contest ilya bore really felt like maximize remember a set n stick instrument stick characterize length li ilya decide make a rectangle stick due whim decide make rectangles a way maximize total area stick use make one rectangle possible stick remain unused bend stick allow stick lengths a1 a2 a3 a4 make a rectangle follow properties observe : a rectangle make stick lengths example 3 3 3 3 2 2 4 4 . a rectangle make example stick 5 5 5 7 . ilya also instrument reduce length stick stick make a special material length stick reduce one example a stick length 5 either stay length transform a stick length 4 . answer question — maximum total area rectangles ilya get a file make rectangles available stick ? first line input contain a positive integer n ( 1 ≤ n ≤ 105 ) — number available stick second line input contain n positive integers li ( 2 ≤ li ≤ 106 ) — lengths stick first line output must contain a single non - negative integer — maximum total area rectangles ilya make available stick,"['greedy', 'math']",1600.0
525/B,pasha get a beautiful string s birthday string consist lowercase latin letter letter string number 1 |s| leave right |s| length give string pasha n't like present much decide change birthday pasha spend m days perform follow transformations string — day choose integer ai reverse a piece string ( a segment ) position ai position |s| - ai + 1 . guarantee 2·ai ≤ |s| face follow task : determine pasha 's string look like m days first line input contain pasha 's string s length 2 2·105 character consist lowercase latin letter second line contain a single integer m ( 1 ≤ m ≤ 105 ) — number days pasha change string third line contain m space - separated elements ai ( 1 ≤ ai ; 2·ai ≤ |s| ) — position pasha start transform string i - th day first line output print pasha 's string s look like m days,"['constructive algorithms', 'greedy', 'math', 'strings']",1400.0
520/C,vasya become interest <unknown> 's go write article similar cyclic dna sequence invent a new method determine similarity cyclic sequence let 's assume string s t length n function h ( s t ) define number position respective symbols s t function h ( s t ) use define function vasya distance ρ ( s t ) : vasya find a string s length n internet want count many string t vasya distance string s attain maximum possible value formally speak t must satisfy equation : vasya could try possible string find answer need help answer may large count number string modulo 109 + 7 . first line input contain a single integer n ( 1 ≤ n ≤ 105 ) second line input contain a single string length n consist character ` ` <unknown> '' print a single number — answer modulo 109 + 7 . please note two distinct string t1 t2 value ρ ( s t1 ) и ρ ( s t2 ) maximum among possible t string must take account answer even one obtain a circular shift another one first sample ρ ( ` ` c '' ` ` c '' ) = 1 remain string t length 1 value ρ ( s t ) 0 . second sample ρ ( ` ` ag '' ` ` ag '' ) = ρ ( ` ` ag '' ` ` ga '' ) = ρ ( ` ` ag '' ` ` aa '' ) = ρ ( ` ` ag '' ` ` gg '' ) = 4 . third sample ρ ( ` ` ttt '' ` ` ttt '' ) = 27,"['math', 'strings']",1500.0
509/E,"sasha study seventh grade start listen music a lot order evaluate songs like introduce notion song 's prettiness title song a word consist uppercase latin letter prettiness song prettiness title let 's define simple prettiness a word ratio number vowels word number letter word let 's define prettiness a word sum simple prettiness substrings word formally let 's define function vowel ( c ) equal 1 c a vowel 0 otherwise let si i - th character string s si .. j substring word s star i - th character end j - th character ( sisi + 1 ... sj i ≤ j ) simple prettiness s define formula : prettiness s equal find prettiness give song title assume vowels i e a o u y. input contain a single string s ( 1 ≤ |s| ≤ 5·105 ) — title song print prettiness song absolute relative error 10 - 6 . first sample letter vowels simple prettiness substring 1 . word length 7 28 substrings , prettiness song equal 28","['math', 'strings']",2000.0
493/D,vasya decide learn play chess classic chess n't seem interest play sort chess queen piece capture square vertical horizontal diagonal line cell locate vertical horizontal diagonal line queen cell contain a piece enemy color queen able move square enemy 's piece remove board queen move a cell contain enemy piece piece queen n × n chessboard 'll denote a cell intersection r - th row c - th column ( r c ) square ( 1 1 ) contain white queen square ( 1 n ) contain black queen square contain green pawn n't belong anyone players move turn player move first play white queen opponent play black queen move player capture piece queen ( move a square contain either a green pawn enemy queen ) player lose either capture piece move opponent take queen previous move help vasya determine win players play optimal strategy board n × n. input contain a single number n ( 2 ≤ n ≤ 109 ) — size board first line print answer problem — string ` ` white '' string ` ` black '' depend win players play optimally answer ` ` white '' also print two integers r c represent cell ( r c ) first player make first move win multiple cells print one minimum r. still multiple square print one minimum c. first sample test white queen capture black queen first move white player win second test statement white queen capture green pawn locate central vertical line capture black queen next move move white player capture green pawn locate ( 2 1 ) similarly black queen n't options capture green pawn locate ( 2 3 ) otherwise go middle vertical line capture white queen next move thing happen — neither white black queen options rather capture green pawn situate thus white queen end square ( 3 1 ) black queen end square ( 3 3 ) situation white queen capture green pawn locate middle vertical line capture black queen thus player play black queen win,"['constructive algorithms', 'math']",1700.0
492/E,vanya decide walk field size n × n cells field contain m apple tree i - th apple tree cell coordinate ( xi yi ) vanya move towards vector ( dx dy ) mean vanya cell ( x y ) a second cell follow condition satisfy vector : largest integer divide a b. vanya end path reach square already visit vanya wonder square field start path see many apple tree possible first line contain integers n m dx dy ( 1 ≤ n ≤ 106 1 ≤ m ≤ 105 1 ≤ dx dy ≤ n ) — size field number apple tree vector vanya 's movement next m line contain integers xi yi ( 0 ≤ xi yi ≤ n - 1 ) — coordinate apples one cell may contain multiple apple tree print two space - separated number — coordinate cell start path several answer allow print first sample vanya 's path look like : ( 1 3 ) - ( 3 1 ) - ( 0 4 ) - ( 2 2 ) - ( 4 0 ) - ( 1 3 ) second sample : ( 0 0 ) - ( 1 1 ) - ( 0 0 ),['math'],2000.0
484/B,give a sequence a consist n integers find maximum possible value ( integer remainder ai divide aj ) 1 ≤ i j ≤ n ai ≥ aj first line contain integer n — length sequence ( 1 ≤ n ≤ 2·105 ) second line contain n space - separated integers ai ( 1 ≤ ai ≤ 106 ) print answer problem,['math'],2100.0
472/A,one way create a task learn math generate random math statement modify theorems get something new build a new task example a statement call ` ` goldbach 's conjecture '' say : ` ` even number less four express sum two prim '' let 's modify a statement like : ` ` integer less 12 express sum two composite number . '' like goldbach 's conjecture i prove theorem give integer n less 12 express a sum two composite number line contain integer n ( 12 ≤ n ≤ 106 ) output two composite integers x y ( 1 < x y < n ) x + y = n. multiple solutions output first example 12 = 4 + 8 4 8 composite number output ` ` 6 6 '' ` ` 8 4 '' well second example 15 = 6 + 9 . note ca n't output ` ` 1 14 '' 1 a composite number,['math'],800.0
468/E,little x solve # p - complete problem polynomial time recently give task a special n × n matrix a calculate permanent modulo 1000000007 ( 109 + 7 ) special property matrix a almost elements equal 1 . k elements specify value find definition permanent link : https : //en.wikipedia.org / wiki / <unknown> first line contain two space - separated integers n k ( 1 ≤ n ≤ 105 ; 1 ≤ k ≤ 50 ) next k line contain description matrix i - th line contain three space - separated integers xi yi wi ( 1 ≤ xi yi ≤ n ; 0 ≤ wi ≤ 109 ) number denote axi yi = wi elements matrix except give elements equal 1 . 's guarantee position ( xi yi ) distinct print permanent matrix modulo 1000000007 ( 109 + 7 ),"['dp', 'math']",3100.0
468/A,little x use play a card game call ` ` 24 game '' recently find easy invent a new game initially a sequence n integers : 1 2 ... n. a single step pick two let 's denote a b erase sequence append sequence either a + b a - b a × b. n - 1 step one number leave make number equal 24 ? first line contain a single integer n ( 1 ≤ n ≤ 105 ) 's possible print ` ` yes '' first line otherwise print ` ` '' ( without quote ) a way obtain 24 result number follow n - 1 line print require operations operation per line operation form : ` ` a op b = c '' a b number ' ve pick operation ; op either ` ` + '' ` ` - '' ` ` * '' ; c result correspond operation note absolute value c must n't greater 1018 . result last operation must equal 24 . separate operator sign equality sign number space multiple valid answer may print,"['constructive algorithms', 'greedy', 'math']",1500.0
457/E,"a computer network consist n nod number 1 n. link network connect pair nod a pair nod may multiple link node a link link support unlimited bandwidth ( either direction ) however a link may transmit a single direction give time cost send data across a link proportional square bandwidth specifically link a positive weight cost send data across link weight time square bandwidth network connect ( a series link node node ) furthermore design remain connect event single node <unknown> need send data node 1 node n a bandwidth positive number k. wish assign a bandwidth link bandwidth a node minus bandwidth a node - k node 1 k node n 0 nod individual bandwidths need integers wish minimize total cost draw a diagram network give task intern solve intern claim solve task write optimal bandwidths diagram spill coffee render much unreadable ( include part original diagram value k ) information available determine intern 's solution may optimal , determine exist a valid network total bandwidth optimal solution a <unknown> give information furthermore determine efficiency intern 's solution ( possible ) efficiency define total cost divide total bandwidth input begin two integers n m ( 2 ≤ n ≤ 200000 ; 0 ≤ m ≤ 200000 ) number nod number know link network respectively follow m line four integers : f t w b ( 1 ≤ f ≤ n ; 1 ≤ t ≤ n ; f ≠ t ; 1 ≤ w ≤ 100 ; 0 ≤ b ≤ 100 ) indicate a link nod f t weight w carry b bandwidth direction bandwidth f t. intern 's solution definitely optimal print ` ` bad x '' x first link input violate optimality solution intern 's solution may optimal print efficiency solution determine round nearest integer otherwise print ` ` unknown '' although know weight bandwidths happen always integers weight bandwidths remain link restrict integers","['constructive algorithms', 'math']",3000.0
457/D,game bingo play a 5 × 5 square grid fill distinct number 1 75 . problem consider a generalize version play n × n grid distinct number 1 m ( m ≥ n2 ) a player begin select a randomly generate bingo grid ( generate uniformly among available grids ) k distinct number 1 m call random ( call uniformly among available set k number ) call number appear grid player mark cell score end 2 raise power ( number completely mark row plus number completely mark columns ) determine expect value score expect score may large expect score larger 1099 print 1099 instead ( example ` ` <unknown> '' without quote ) input consist three integers n m k ( 1 ≤ n ≤ 300 ; n2 ≤ m ≤ 100000 ; n ≤ k ≤ m ) print smaller 1099 expect score answer must correct within absolute relative error 10 - 9,['math'],2700.0
449/A,jzzhu a big rectangular chocolate bar consist n × m unit square want cut bar exactly k time cut must meet follow requirements : picture show a possible way cut a 5 × 6 chocolate 5 time imagine jzzhu make k cut big chocolate splitted several piece consider smallest ( area ) piece chocolate jzzhu want piece large possible maximum possible area smallest piece get exactly k cut ? area a chocolate piece number unit square a single line contain three integers n m k ( 1 ≤ n m ≤ 109 ; 1 ≤ k ≤ 2·109 ) output a single integer represent answer impossible cut big chocolate k time print -1 . first sample jzzhu cut chocolate follow picture : second sample optimal division look like : third sample 's impossible cut a 2 × 3 chocolate 4 time,"['greedy', 'math']",1700.0
438/D,children 's day child come pick 's house mess house pick angry a lot important things lose particular favorite sequence pick fortunately pick remember repair sequence initially create integer array a [ 1 ] a [ 2 ] ... a [ n ] perform a sequence m operations operation one follow : help pick perform whole sequence operations ? first line input contain two integer : n m ( 1 ≤ n m ≤ 105 ) second line contain n integers separate space : a [ 1 ] a [ 2 ] ... a [ n ] ( 1 ≤ a [ i ] ≤ 109 ) — initial value array elements next m line begin a number type operation 1 please print a line contain answer notice answer may exceed 32 - bit integer consider first testcase :,"['data structures', 'math']",2300.0
402/E,matrix a size n × n. let 's number row matrix 1 n top bottom let 's number columns 1 n leave right let 's use aij represent element intersection i - th row j - th column matrix a meet follow two condition : matrix b strictly positive number i j ( 1 ≤ i j ≤ n ) inequality bij > 0 hold task determine integer k ≥ 1 matrix ak strictly positive first line contain integer n ( 2 ≤ n ≤ 2000 ) — number row columns matrix a. next n line contain description row matrix a. i - th line contain n non - negative integers ai1 ai2 ... ( 0 ≤ aij ≤ 50 ) guarantee a positive integer k ≥ 1 matrix ak strictly positive print ` ` yes '' ( without quote ) otherwise print ` ` '' ( without quote ),['math'],2200.0
402/D,array positive integers a [ 1 ] a [ 2 ] ... a [ n ] a set bad prime number b1 b2 ... bm prime number occur set b consider good beauty array a sum function f ( s ) determine follow : allow perform arbitrary ( probably zero ) number operations improve array a. operation improvement follow sequence action : maximum beauty array get ? first line contain two integers n m ( 1 ≤ n m ≤ 5000 ) show many number array many bad prime number second line contain n space - separated integers a [ 1 ] a [ 2 ] ... a [ n ] ( 1 ≤ a [ i ] ≤ 109 ) — array a. third line contain m space - separated integers b1 b2 ... bm ( 2 ≤ b1 < b2 < ... < bm ≤ 109 ) — set bad prime number print a single integer — answer problem note answer problem negative gcd ( x1 x2 ... xk ) maximum positive integer divide xi,"['dp', 'greedy', 'math']",1800.0
401/E,problem delete contest use previously another competition,['math'],2500.0
389/A,fox ciel play a game number ciel n positive integers : x1 x2 ... xn follow operation many time need : select two different index i j xi > xj hold apply assignment xi = xi - xj goal make sum number small possible please help ciel find minimal sum first line contain integer n ( 2 ≤ n ≤ 100 ) second line contain n integers : x1 x2 ... xn ( 1 ≤ xi ≤ 100 ) output a single integer — require minimal sum first example optimal way assignment : x2 = x2 - x1 second example optimal sequence operations : x3 = x3 - x2 x2 = x2 - x1,"['greedy', 'math']",1000.0
370/A,"little petya learn play chess already learn move a king a rook a bishop let us remind rule move chess piece a chessboard 64 square field organize 8 × 8 table a field represent a pair integers ( r c ) — number row number column ( a classical game columns traditionally index letter ) chess piece take exactly one field make a move move a chess piece piece move follow rule : petya think follow problem : minimum number move need piece move field ( r1 c1 ) field ( r2 c2 ) ? , assume piece besides one board help solve problem input contain four integers r1 c1 r2 c2 ( 1 ≤ r1 c1 r2 c2 ≤ 8 ) — coordinate start final field start field n't coincide final one assume chessboard row number top bottom 1 8 columns number leave right 1 8 . print three space - separated integers : minimum number move rook bishop king ( order ) need move field ( r1 c1 ) field ( r2 c2 ) a piece make a move print a 0 instead correspond number",['math'],1100.0
359/B,a permutation p order group number p1 p2 ... pn consist n distinct positive integers n. 'll define number n length permutation p1 p2 ... pn simon a positive integer n a non - negative integer k 2k ≤ n. help find permutation a length 2n meet equation : first line contain two integers n k ( 1 ≤ n ≤ 50000 0 ≤ 2k ≤ n ) print 2n integers a1 a2 ... a2n — require permutation a. guarantee solution exist multiple solutions print record |x| represent absolute value number x. first sample |1 - 2| - |1 - 2| = 0 . second sample |3 - 2| + |1 - 4| - |3 - 2 + 1 - 4| = 1 + 3 - 2 = 2 . third sample |2 - 7| + |4 - 6| + |1 - 3| + |5 - 8| - |2 - 7 + 4 - 6 + 1 - 3 + 5 - 8| = 12 - 12 = 0,"['constructive algorithms', 'dp', 'math']",1400.0
346/C,give a sequence positive integers x1 x2 ... xn two non - negative integers a b. task transform a b. perform follow move : operation a mod xi mean take remainder division number a number xi want know minimum number move need transform a b. first line contain a single integer n ( 1 ≤ n ≤ 105 ) second line contain n space - separated integers x1 x2 ... xn ( 2 ≤ xi ≤ 109 ) third line contain two integers a b ( 0 ≤ b ≤ a ≤ 109 a - b ≤ 106 ) print a single integer — require minimum number move need transform number a number b,"['greedy', 'math']",2200.0
343/A,"mad scientist mike build a time machine spare time finish work need a resistor a certain resistance value however mike lot identical resistors unit resistance r0 = 1 . elements resistance construct resistors problem consider follow elements : consecutive connection resistance new element equal r = + r0 parallel connection resistance new element equal case equal resistance element connect mike need assemble element a resistance equal fraction determine smallest possible number resistors need make element single input line contain two space - separated integers a b ( 1 ≤ a b ≤ 1018 ) guarantee fraction irreducible guarantee a solution always exist print a single number — answer problem please use % lld specifier read write 64 - bit integers с++ recommend use cin cout stream % i64d specifier first sample one resistor enough second sample one connect resistors parallel take result element connect a third resistor consecutively , get element resistance make element use two resistors",['math'],1600.0
336/B,one beautiful day vasily bear paint 2 m circle radius r a coordinate plane circle number 1 m center point ( 2r - r 0 ) ( 4r - r 0 ) ... ( 2rm - r 0 ) respectively circle number m + 1 2 m center point ( 2r - r 2r ) ( 4r - r 2r ) ... ( 2rm - r 2r ) respectively naturally bear paint circle a simple experiment a fly experiment continue m2 days day experiment get unique number 0 m2 - 1 inclusive day number i follow things happen : help vasily count average distance fly go along coordinate plane m2 days first line contain two integers m r ( 1 ≤ m ≤ 105 1 ≤ r ≤ 10 ) a single line print a single real number — answer problem answer consider correct absolute relative error n't exceed 10 - 6 . figure second sample,['math'],1900.0
335/E,a number skyscrapers build a line number skyscrapers choose uniformly random 2 314 ! ( 314 factorial a large number ) height skyscraper choose randomly independently height i probability 2 - i positive integers i. floor a skyscraper height i number 0 i - 1 . speed transit time a number zip line instal skyscrapers specifically a zip line connect i - th floor one skyscraper i - th floor another skyscraper skyscrapers i - th floor alice bob decide count number skyscrapers alice thorough want know exactly many skyscrapers begin leftmost skyscraper a counter 1 . move right one skyscraper a time add 1 counter time move continue reach rightmost skyscraper bob impatient want finish fast possible begin leftmost skyscraper a counter 1 . move build build use zip line stage bob use highest available zip line right ignore floor a height greater h due fear heights bob use a zip line travel fast count many skyscrapers pass instead add 2i counter i number floor 's currently continue reach rightmost skyscraper consider follow example 6 build heights 1 4 3 4 1 2 leave right h = 2 . alice begin counter 1 add 1 five time a result 6 . bob begin counter 1 add 1 4 4 2 order a result 12 . note bob ignore highest zip line fear heights ( h = 2 ) bob 's counter top image alice 's counter bottom zip line show bob 's path show green dash line alice 's pink dash line floor skyscrapers number zip line bob use mark amount add counter alice bob reach right - most skyscraper compare counter give either value alice 's counter value bob 's counter must compute expect value 's counter first line input a name either string ` ` alice '' ` ` bob '' second line input contain two integers n h ( 2 ≤ n ≤ 30000 0 ≤ h ≤ 30 ) name ` ` alice '' n represent value alice 's counter reach rightmost skyscraper otherwise n represent value bob 's counter reach rightmost skyscraper ; h represent highest floor number bob will use output a single real value give expect value alice 's counter give bob 's counter bob 's counter give alice 's counter answer consider correct absolute relative error n't exceed 10 - 9 . first example bob 's counter a <unknown> % chance 3 a 25 % chance 4 a <unknown> % chance 5,"['dp', 'math']",2800.0
311/D,"learn computational geometry tiny simultaneously learn a useful data structure call segment tree interval tree <unknown> <unknown> come a strange problem : give integer sequence a1 a2 ... , run q query two type : every query type 1 output answer tiny surely work ask help addition tiny a prime lover tell answer may huge output modulo 95542721 ( number a prime number ) first line contain integer n ( 1 ≤ n ≤ 105 ) represent length sequence second line contain n space - separated integers a1 a2 ... ( 0 ≤ ai ≤ 109 ) third line contain integer q ( 1 ≤ q ≤ 105 ) represent number query follow q line line contain three integers ti ( 1 ≤ ti ≤ 2 ) li ri ( 1 ≤ li ≤ ri ≤ n ) ti stand type query li ri parameters query correspondingly 1 - type query print answer per line notice print number non - negative less 95542721","['data structures', 'math']",2600.0
303/C,"give n distinct integers a1 a2 ... , remove k find minimum modular m ( m > 0 ) every pair remain integers ( ai aj ) follow <unknown> hold : first line contain two integers n k ( 1 ≤ n ≤ 5000 0 ≤ k ≤ 4 ) mention second line contain n distinct integers a1 a2 ... ( 0 ≤ ai ≤ 106 ) print a single positive integer — minimum m","['brute force', 'math']",2400.0
300/E,"a far away galaxy war treacherous republic make k precision strike power ai empire possessions cope <unknown> threat <unknown> council decide deal a <unknown> blow enemy force successfully complete conflict confrontation balance blow a positive integer balance confrontation a number look like p = n ! ( n power imperial strike ) , many years war empire 's resources low reduce cost n a minimum positive integer approve commanders help empire find minimum positive integer n describe fraction a positive integer first line contain integer k ( 1 ≤ k ≤ 106 ) second line contain k integers a1 a2 ... ak ( 1 ≤ ai ≤ 107 ) print minimum positive integer n need empire win please use % lld read write 64 - <unknown> integers с++ prefer use cin cout stream % i64d specificator",['math'],2300.0
286/A,a permutation p size n sequence p1 p2 ... pn consist n distinct integers 1 n ( 1 ≤ pi ≤ n ) a lucky permutation permutation p integer i ( 1 ≤ i ≤ n ) meet condition ppi = n - i + 1 . integer n. find lucky permutation p size n. first line contain integer n ( 1 ≤ n ≤ 105 ) — require permutation size print ` ` -1 '' ( without quote ) lucky permutation p size n n't exist otherwise print n distinct integers p1 p2 ... pn ( 1 ≤ pi ≤ n ) a space — require permutation multiple answer print,"['constructive algorithms', 'math']",1400.0
271/B,' ve get n × m matrix matrix consist integers one move apply a single transformation matrix : choose arbitrary element matrix increase 1 . element increase arbitrary number time really curious prime number let us remind a prime number a positive integer exactly two distinct positive integer divisors : number one example number 2 3 5 prime number 1 4 6 a matrix prime least one two follow condition fulfill : task count minimum number move need get a prime matrix one ' ve get first line contain two integers n m ( 1 ≤ n m ≤ 500 ) — number row columns matrix correspondingly follow n line contain m integers — initial matrix matrix elements positive integers number initial matrix exceed 105 . number line separate single space print a single integer — minimum number move need get a prime matrix one ' ve get ' ve get a prime matrix print 0 . first sample need increase number 1 cell ( 1 1 ) thus first row consist prime number : 2 2 3 . second sample need increase number 8 cell ( 1 2 ) three time thus second column consist prime number : 11 2 . third sample n't anything second column already consist prime number : 3 2,"['brute force', 'math']",1300.0
269/E,emuskald innovative musician always try push boundaries music production come idea a revolutionary musical instrument — a rectangular harp a rectangular harp a rectangle n × m consist n row m columns row number 1 n top bottom similarly columns number 1 m leave right string pin space evenly across every side one per unit thus n pin leave right side harp m pin top bottom harp exactly n + m different string string connect two different pin a different side harp emuskald order apprentice construct first ever rectangular harp however n't mention two string cross otherwise would impossible play harp two string cross segment connect pin intersect fix harp emuskald perform operations two type : follow example fix harp swap two columns : help emuskald complete creation find permutations row columns harp need rearrange tell impossible <unknown> <unknown> string pin physical layout string n't matter first line input contain two space - separated integers number n m ( 1 ≤ n m ≤ 105 ) height width harp units follow n + m line contain 4 space - separated tokens describe a single string : two symbols ai bi two integer number pi qi pair ai pi describe first pin pair bi qi describe second pin string ; a pair s x describe position a single pin a follow way : guarantee two different string connect pin possible rearrange row columns fix harp first line output n space - separated integers — old number row place top bottom fix harp second line output m space - separated integers — old number columns place leave right fix harp impossible rearrange row columns fix harp output ` ` solution '' ( without quote ),"['geometry', 'math', 'strings']",3100.0
266/C,give a square matrix consist n row n columns assume row number 1 n top bottom columns number 1 n leave right cells ( n - 1 cells total ) matrix fill ones remain cells fill zero apply follow operations matrix : ask transform matrix a special form use operations special form ones must cells lie main diagonal cell matrix locate intersection i - th row j - th column lie main diagonal i > j. first line contain integer n ( 2 ≤ n ≤ 1000 ) — number row columns follow n - 1 line contain one 's position one per line position describe two integers xk yk ( 1 ≤ xk yk ≤ n ) separate a space a pair ( xk yk ) mean cell locate intersection xk - th row yk - th column contain one guarantee position distinct print description action action transform matrix describe special form first line print a non - negative integer m ( m ≤ 105 ) — number action next m line print three space - separated integers t i j ( 1 ≤ t ≤ 2 1 ≤ i j ≤ n i ≠ j ) t = 1 want swap row t = 2 want swap columns i j denote number row columns respectively please note need minimize number operations number exceed 105 . several solutions may print,"['constructive algorithms', 'greedy', 'math']",2100.0
248/E,piglet get a birthday today friend winnie pooh want make best present — a honey pot course winnie realize wo n't manage get full pot piglet fact likely eat honey pot soon winnie plan a snack way pot initially much honey possible day winnie pooh replenish honey stock winnie - the - pooh n shelve home shelf contain perhaps zero number honey pot day winnie come honey shelve q time ; i - th time come shelf ui take pot ki taste honey pot put pot shelf vi winnie choose pot follow intuition mean among set ki pot shelf ui equiprobably choose one winnie remember action perform honey pot want take party pot n't try day must know mathematical expectation number m shelve n't a single <unknown> pot evaluate chance better winnie - the - pooh want know value m action perform task write a program find value first line input contain a single number n ( 1 ≤ n ≤ 105 ) — number shelve winnie 's place second line contain n integers ai ( 1 ≤ i ≤ n 0 ≤ ai ≤ 100 ) — number honey pot a shelf number i. next line contain integer q ( 1 ≤ q ≤ 105 ) — number action winnie day follow q line i - th describe event follow chronologically ; line contain three integers ui vi ki ( 1 ≤ ui vi ≤ n 1 ≤ ki ≤ 5 ) — number shelf winnie take pot number shelf winnie put pot taste number pot winnie taste correspondingly consider shelve pot number integers 1 n. guarantee winnie - the - pooh never try take pot shelf winnie 's action print value mathematical expectation m moment action perform relative absolute error value must n't exceed 10 - 9,"['dp', 'math']",2600.0
238/A,a sequence non - negative integers a1 a2 ... length n call a wool sequence exist two integers l r ( 1 ≤ l ≤ r ≤ n ) word wool sequence contain a subsequence consecutive elements xor equal 0 . expression mean apply operation a bitwise xor number x y. give operation exist modern program languages example languages c++ java mark ` ` ^ '' pascal — ` ` xor '' problem ask compute number sequence make n integers 0 2 m - 1 a wool sequence print number modulo 1000000009 ( 109 + 9 ) line input contain two space - separated integers n m ( 1 ≤ n m ≤ 105 ) print require number sequence modulo 1000000009 ( 109 + 9 ) line output sequence length 3 make integers 0 1 2 3 a wool sequence ( 1 3 1 ) ( 1 2 1 ) ( 2 1 2 ) ( 2 3 2 ) ( 3 1 3 ) ( 3 2 3 ),"['constructive algorithms', 'math']",1300.0
226/A,"expedition group fly planet <unknown> earth order study <unknown> species ( representatives n't even antennas head ! ) fly saucer brave <unknown> set consist three section section connect a chain : 1 - st section adjacent 2 - nd one 2 - nd one — 1 - st 3 - rd ones 3 - rd one — 2 - nd one transition possible adjacent section <unknown> team consist n alien give a rank — integer 1 n. rank astronauts distinct rule establish saucer state alien may move section a section b senior rank alien segment a b ( besides segment a b course require adjacent ) alien require exactly 1 minute make a move besides safety regulations require one alien move minute along ship alien a senior rank alien b number indicate rank a correspond number b. moment whole saucer team 3 - rd segment need move 1 - st segment one member crew alien identification number cfr-140 decide calculate minimum time ( minutes ) need perform task help cfr-140 figure minimum time ( minutes ) astronauts need move 3 - rd segment 1 - st one since number rather large count modulo m. first line contain two space - separated integers : n m ( 1 ≤ n m ≤ 109 ) — number alien saucer number modulo print answer correspondingly print a single number — answer problem modulo m. first sample crew member move segment 3 segment 2 segment 2 segment 1 without problems thus whole move take two minutes briefly describe movements second sample use value would correspond alien rank i move segment moment segment number j. use value describe movements segment second sample : , , , , , , , , , , , , ; total : alien need 26 move remainder divide 26 8 equal 2 answer test 2",['math'],1400.0
217/D,byteland try send a space mission onto bit - x planet task complicate fact orbit planet regularly patrol captain bitonix leader space force bit - x n station around bit - x number clockwise 1 n. station evenly place a circular orbit station number i i + 1 ( 1 ≤ i < n ) station number 1 n neighbor distance every pair adjacent station equal m space miles go a patrol captain bitonix jump rocket one station fly a circle cover a distance least one space mile finish ( perhaps start ) station bitonix ' rocket move burn fuel tank bitonix attach x - liter fuel tank choose direction ( clockwise counter - clockwise ) rocket fly exactly x space miles along a circular orbit choose direction note rocket brake ; possible rocket stop <unknown> a fuel tank example assume n = 3 m = 60 bitonix fuel tank volumes 10 60 90 100 liters bitonix start station 1 use 100 - liter fuel tank go clockwise use 90 - liter fuel tank go clockwise use 10 - liter fuel tank go counterclockwise finish back station 1 . constitute a valid patrol note bitonix use available fuel tank another valid option bitonix example would simply use 60 - liter fuel tank fly either station 2 3 . however n equal 3 m equal 60 fuel tank available bitonix one 10 - liter tank one 100 - liter tank would way complete a valid patrol ( would n't able finish patrol exactly station ) byteland space agency want destroy captain bitonix ' fuel tank complete valid patrol find many different subsets tank agency destroy prevent captain bitonix complete a patrol output answer modulo 1000000007 ( 109 + 7 ) first line input contain three integers n ( 2 ≤ n ≤ 1000 ) — number station m ( 1 ≤ m ≤ 120 ) — distance adjacent station t ( 1 ≤ t ≤ 10000 ) — number fuel tank own captain bitonix second line input contain t space - separated integers 1 109 inclusive — volumes bitonix ' fuel tank output a single number — number distinct subsets tank bytelandian space agency destroy order prevent captain bitonix complete a patrol modulo 109 + 7 . fuel tank distinct even capacity,"['brute force', 'dfs and similar', 'math']",2900.0
209/A,polycarpus play red blue marble put n marble leave right a row turn marble form a zebroid a non - empty sequence red blue marble a zebroid color marble sequence alternate example sequence ( red ; blue ; red ) ( blue ) <unknown> sequence ( red ; red ) a zebroid polycarpus wonder many ways pick a zebroid subsequence sequence help solve problem find number ways modulo 1000000007 ( 109 + 7 ) first line contain a single integer n ( 1 ≤ n ≤ 106 ) — number marble polycarpus 's sequence print a single number — answer problem modulo 1000000007 ( 109 + 7 ) let 's consider first test sample let 's assume polycarpus initially sequence ( red ; blue ; red ) six ways pick a zebroid : prove polycarpus pick ( blue ; red ; blue ) initial sequence number ways wo n't change,"['dp', 'math']",1600.0
204/C,little elephant love furik rubik meet a small city <unknown> little elephant two string equal length a b consist uppercase english letter little elephant select a pair substrings equal length — first one string a second one string b. choice equiprobable among possible pair let 's denote substring a x substring b — y. little elephant give string x furik string y — rubik let 's assume f ( x y ) number position i ( 1 ≤ i ≤ |x| ) xi = yi ( |x| length line x y xi yi i - th character string x y correspondingly ) help furik rubik find expect value f ( x y ) first line contain a single integer n ( 1 ≤ n ≤ 2·105 ) — length string a b. second line contain string a third line contain string b. string consist uppercase english letter length string equal n. a single line print a real number — answer problem answer consider correct relative absolute error exceed 10 - 6 . let 's assume give string a = a1a2 ... a|a| let 's denote string 's length |a| i - th character — ai a substring a [ l ... r ] ( 1 ≤ l ≤ r ≤ |a| ) string a string alal + 1 ... ar string a a substring string b exist pair integers l r ( 1 ≤ l ≤ r ≤ |b| ) b [ l ... r ] = a. let 's consider first test sample first sample 5 possible substring pair : ( ` ` a '' ` ` b '' ) ( ` ` a '' ` ` a '' ) ( ` ` b '' ` ` b '' ) ( ` ` b '' ` ` a '' ) ( ` ` ab '' ` ` ba '' ) second third pair value f ( x y ) equal 1 rest equal 0 . probability choose pair equal 's answer · 0 + · 1 + · 1 + · 0 + · 0 = = 0.4,['math'],2000.0
201/A,consider square matrix a side n consist zero ones n row number 1 n top bottom n columns number 1 n leave right matrix 'll denote element matrix locate intersection i - row j - th column ai j. let 's call matrix a clear two cells contain ones a common side let 's call matrix a symmetrical match matrices form a horizontal and/or a vertical reflection formally pair ( i j ) ( 1 ≤ i j ≤ n ) follow condition must meet : ai j = - i + 1 j ai j = ai n - j + 1 . let 's define sharpness matrix a number ones give integer x task find smallest positive integer n exist a clear symmetrical matrix a side n sharpness x. line contain a single integer x ( 1 ≤ x ≤ 100 ) — require sharpness matrix print a single number — seek value n. figure show matrices correspond sample :,"['constructive algorithms', 'dp', 'math']",1700.0
197/B,give two polynomials : calculate limit first line contain two space - separated integers n m ( 0 ≤ n m ≤ 100 ) — degrees polynomials p ( x ) q ( x ) correspondingly second line contain n + 1 space - separated integers — factor polynomial p ( x ) : a0 a1 ... - 1 ( - 100 ≤ ai ≤ 100 a0 ≠ 0 ) third line contain m + 1 space - separated integers — factor polynomial q ( x ) : b0 b1 ... bm - 1 bm ( - 100 ≤ bi ≤ 100 b0 ≠ 0 ) limit equal + ∞ print ` ` infinity '' ( without quote ) limit equal - ∞ print ` ` <unknown> '' ( without quote ) value limit equal zero print ` ` 0/1 '' ( without quote ) otherwise print irreducible fraction — value limit format ` ` p / q '' ( without quote ) p — numerator q ( q > 0 ) denominator fraction let 's consider sample : learn definition properties limit follow link : http : //en.wikipedia.org / wiki / <unknown>,['math'],1400.0
183/A,sensation sensation two - dimensional kingdom ! police catch a highly dangerous outlaw member notorious ` ` <unknown> '' gang law department state outlaw drive gang 's headquarter car crash ice cream stall stall car headquarter occupy exactly one point two - dimensional kingdom outlaw 's car equip a gps transmitter transmitter show car make exactly n movements way headquarter stall a movement move car point ( x y ) one four point : point ( x - 1 y ) mark letter ` ` l '' point ( x + 1 y ) — ` ` r '' point ( x y - 1 ) — ` ` d '' point ( x y + 1 ) — ` ` u '' gps transmitter <unknown> n't preserve exact sequence car 's movements instead keep record car 's possible movements record a string one type : ` ` ul '' ` ` ur '' ` ` dl '' ` ` dr '' ` ` uldr '' string mean car make a single movement correspond one character string example string ` ` ul '' mean car move either ` ` u '' ` ` l '' ' ve receive journal outlaw 's possible movements headquarter stall journal record give a chronological order give ice - cream stall locate point ( 0 0 ) task print number different point contain gang headquarter ( number different possible locations car 's origin ) first line contain a single integer n ( 1 ≤ n ≤ 2·105 ) — number car 's movements headquarter stall follow n line describe car 's possible movements guarantee possible movement one follow string : ` ` ul '' ` ` ur '' ` ` dl '' ` ` dr '' ` ` uldr '' movements give chronological order please use % lld specifier read write 64 - bit integers c++ prefer use cin cout stream % i64d specifier print a single integer — number different possible locations gang 's headquarter figure show nine possible position gang headquarter first sample : example follow movements get car point ( 1 0 ) point ( 0 0 ) :,"['constructive algorithms', 'math']",1700.0
175/D,vasya play plane tank tank describe follow attribute : gun damage describe a segment [ l r ] l r integer number potential gun damage x choose equal probability among integer number segment [ l r ] shoot pierce armor enemy 's tank enemy lose x hit point number hit point become non - positive enemy tank consider destroy possible shoot pierce armor a tank case number hit point n't change probability armor pierce consider shoot tank attribute depend players ' behavior victory near one enemy tank leave vasya ready battle — one battle good evil inevitable ! two enemies saw fire a shoot moment ... last battle begin ! help vasya determine probability win battle destroy enemy tank ? tank destroy ( simultaneous shots ) vasya consider a winner assume player fire a shoot gun recharge tank infinite number ammo first line contain five integer number separate space describe vasya 's tank : number hit point hp ( 10 ≤ hp ≤ 200 ) interval two shots dt ( 1 ≤ dt ≤ 30 ) gun damage segment l r ( 10 ≤ l ≤ r ≤ 100 ) probability enemy 's tank armor pierce p ( 0 ≤ p ≤ 100 ) ( percents ) second line describe tank vasya 's enemy format print number absolute relative error 10 - 4 — probability vasya 's victory first example tank destroy second shoot probability destroy enemy tank 1 . second example vasya 's enemy tank fire second shoot vasya 's tank time third shoot order destroy vasya 's tank necessary fire two shots damage 50 . probability event = otherwise vasya win third example vasya 's enemy tank fire three shots probability armor pierce 0.5 . order destroy vasya 's tank necessary least 2 3 shots pierce armor vasya 's tank probability event 0.5,"['brute force', 'dp', 'math']",2400.0
154/B,2312 n large hadron colliders inhabit part universe correspond a single natural number 1 n. however scientists know activate several colliders simultaneously could cause colliders deactivate 2312 a <unknown> discovery : a collider 's activity safe number activate colliders pairwise relatively prime ( two number relatively prime greatest common divisor equal 1 ) ! two colliders relatively <unknown> number activate cause a global collapse upon learn physicists rush turn colliders carry sort experiment make sure scientists ' <unknown> n't end big trouble large hadron colliders ' large remote control create commission write software remote ( well expect anybody operate manually ? ) initially colliders deactivate program receive multiple request form ` ` activate / deactivate i - th collider '' program handle request order receive program print process result format describe request ` ` + i '' ( activate i - th collider ) program print exactly one follow responses : request ` ` - i '' ( deactivate i - th collider ) receive one follow responses program : n't need print quote output responses request first line contain two space - separated integers n m ( 1 ≤ n m ≤ 105 ) — number colliders number request correspondingly next m line contain number request one per line form either ` ` + i '' ( without quote ) — activate i - th collider ` ` - i '' ( without quote ) — deactivate i - th collider ( 1 ≤ i ≤ n ) print m line — result execute request give format request process order give input n't forget responses request print without quote note sample colliders n't turn second ninth request ninth request could also receive response ` ` conflict 3 '',['math'],1600.0
142/A,upon a time kingdom far far away live sam farmer sam a cow name dawn deeply attach sam would spend whole summer stock hay fee dawn winter sam <unknown> hay put haystack sam a bright farmer try make process store hay simpler convenient use collect hay cubical hay block size store block barn a summer spend hard <unknown> sam store <unknown> hay block store a barn a rectangular parallelepiped a layer high layer b row row c block end autumn sam come barn admire one time hay 'd stack hard summer unfortunately sam horrify see hay block <unknown> scatter around barn place a complete mess turn thieve sneak barn completely dissemble take away a layer block parallelepiped 's front back top side a result barn a parallelepiped contain ( a - 1 ) × ( b - 2 ) × ( c - 2 ) hay block hide evidence crime thieve dissemble parallelepiped single 1 × 1 × 1 block scatter around barn theft sam count n hay block barn forget number a b и c. give number n find minimally possible maximally possible number steal hay block line contain integer n problem 's statement ( 1 ≤ n ≤ 109 ) print space - separated minimum maximum number hay block could steal thieve note answer problem large enough must use 64 - bit integer type calculations please use % lld specificator read write 64 - bit integers с++ prefer use cin cout stream % i64d specificator let 's consider first sample test initially sam a parallelepiped consist 32 = 2 × 4 × 4 hay block barn theft barn 4 = ( 2 - 1 ) × ( 4 - 2 ) × ( 4 - 2 ) hay block leave thus thieve could steal 32 - 4 = 28 hay block sam initially a parallelepiped consist 45 = 5 × 3 × 3 hay block barn theft barn 4 = ( 5 - 1 ) × ( 3 - 2 ) × ( 3 - 2 ) hay block leave thus thieve could steal 45 - 4 = 41 hay block variants block ' initial arrangement ( leave sam exactly 4 block theft ) permit thieve steal less 28 41 block,"['brute force', 'math']",1600.0
141/B,nearly half winter maria dream summer 's feed skate <unknown> dream hopscotch night long 's a popular children 's game game field court look show figure ( block square number bottom top block row number leave right ) let us describe hopscotch number denote number square row star lowest one : 1 - 1 - 2 - 1 - 2 - 1 - 2- ( 1 - 2 ) ... period repeat ( 1 - 2 ) coordinate system define show figure side square equal length a. maria a smart clever girl concern quite serious issue : throw a stone a point coordinate ( x y ) hit square ? answer positive also require determine number square believe stone fall square locate strictly inside word a stone fall square border consider a hit a square input line contain three integers : a x y a ( 1 ≤ a ≤ 100 ) side square x y ( - 106 ≤ x ≤ 106 0 ≤ y ≤ 106 ) coordinate stone print number square inside stone fell stone a border stone outside court print ` ` -1 '' without quote,"['geometry', 'math']",1400.0
140/A,gerald set new year table table form a circle ; radius equal r. gerald invite many guests concern whether table enough space plat guests consider plat round radii equal r. plate must completely inside table must touch edge table course plat must intersect touch help gerald determine whether table large enough n plat first line contain three integers n r r ( 1 ≤ n ≤ 100 1 ≤ r r ≤ 1000 ) — number plat radius table plat ' radius print ` ` yes '' ( without quote ) possible place n plat table rule give impossible print ` ` '' remember plate must touch edge table possible arrangement plat first sample :,"['geometry', 'math']",1700.0
115/C,little john <unknown> become a <unknown> ! today draw a grid consist n row m columns consist n × m square cells cell draw a pipe segment draw four type segment number 1 4 illustrate follow : pipe segment two end illustrate arrows picture example segment 1 end top leave side little john consider pip system leak least one pipe segment inside grid whose end connect another pipe 's end border grid image show example leak non - leaking systems size 1 × 2 . give grid partially fill little john cell either contain one four segment empty find number possible different non - leaking final systems little john finish fill empty cells pipe segment print number modulo 1000003 ( 106 + 3 ) note rotations flip grid allow two configurations identical one rotate flip either horizontally vertically consider two different configurations first line contain two single - space separate integers n m ( 1 ≤ n m n·m ≤ 5·105 ) — number row columns respectively n line follow contain exactly m character — description grid character describe a cell either one : print a single integer denote number possible final non - leaking pipe systems modulo 1000003 ( 106 + 3 ) configurations print 0 . first example initial configuration grid follow two possible final non - leaking pipe configurations follow : second example initial grid already leak final grid non - leaking final example 's one possible non - leaking final grid follow,['math'],2200.0
113/C,math lesson a teacher ask pupil come lucky number a fan number theory peter choose prime number bob original say number t lucky number represent : boys decide find many days interval [ l r ] ( l ≤ r ) suitable pair program decide day i ( l ≤ i ≤ r ) suitable pair program number i lucky peter lucky bob time help boys find number days first line input contain integer number l r ( 1 ≤ l r ≤ <unknown> ) line print number days segment [ l r ] lucky peter bob time,"['brute force', 'math']",2200.0
108/B,tattah 's <unknown> brother tuftuf new program since older brother a good programmer biggest dream <unknown> tuftuf a student german university cairo ( guc ) learn write program gava today tuftuf introduce gava 's unsigned integer datatypes gava n unsigned integer datatypes size ( bits ) a1 a2 ... i - th <unknown> size ai bits represent every integer 0 2ai - 1 inclusive tuftuf think learn a better program language exist integer x x fit type i ( ai bits ) <unknown> fit type j ( aj bits ) ai < aj tuftuf stop use gava task determine tuftuf 's <unknown> first line contain integer n ( 2 ≤ n ≤ 105 ) — number gava 's unsigned integer datatypes ' size second line contain a single - space - separated list n integers ( 1 ≤ ai ≤ 109 ) — size datatypes bits datatypes may equal size print ` ` yes '' tuftuf stop use gava ` ` '' otherwise second example x = 7 ( 1112 ) fit 3 bits x2 = 49 ( <unknown> ) fit 4 bits,['math'],1400.0
107/B,a german university cairo ( guc ) student a basketball player herr wafa delight hear news guc finally participate annual basketball competition ( abc ) a team form n players guc students however team might players belong different departments m departments guc number 1 m. herr wafa 's department number h. department i herr wafa know number si — many students play basketball belong department herr wafa also able guarantee a spot team use special power since hat floating - point number need help find probability least one teammate belong department note every possible team contain herr wafa equally probable consider students different first line contain three integers n m h ( 1 ≤ n ≤ 100 1 ≤ m ≤ 1000 1 ≤ h ≤ m ) — number players team number departments guc herr wafa 's department correspondingly second line contain a single - space - separated list m integers si ( 1 ≤ si ≤ 100 ) denote number students i - th department note sh include herr wafa print probability herr wafa least one teammate department enough basketball players guc participate abc print -1 . answer accept absolute relative error exceed 10 - 6 . first example 3 players ( 2 department 1 1 department 2 ) must choose team players wafa 's departments choose 's guarantee a teammate department second example enough players third example three possibilities compose team contain herr wafa two player herr wafa 's department part team,"['dp', 'math']",1600.0
100/I,ehsan love geometry ! especially like rotate point ! give a point plane ehsan like rotate k degrees ( counter - clockwise ) around origin result rotation ? a single integer k ( 0 ≤ k < 360 ) give first line two integer number x y give second line ( - 1390 ≤ x y ≤ 1390 ) write two number result rotation answer must a relative error less 10 - 1,"['geometry', 'math']",1500.0
95/D,petya like horse race much horse number l r take part race petya want evaluate probability victory ; reason need know amount nearly lucky horse ' number a nearly lucky number integer number least two lucky digits distance exceed k. petya learn mat <unknown> lucky digits digits 4 7 . distance digits absolute difference position number a horse example k = 2 number <unknown> 404 <unknown> nearly lucky number 4 <unknown> <unknown> petya prepare t intervals [ li ri ] invent number k common task find many nearly happy number segment since answer quite large output modulo 1000000007 ( 109 + 7 ) first line contain two integers t k ( 1 ≤ t k ≤ 1000 ) — number segment distance number correspondingly next t line contain pair integers li ri ( 1 ≤ l ≤ r ≤ 101000 ) number give without lead zero number line separate exactly one space character output t line line print one integer — answer correspond segment modulo 1000000007 ( 109 + 7 ) first sample four nearly lucky number 44 47 74 77 . second sample 74 77 give segment,"['dp', 'math']",2500.0
86/E,"a sequence a0 a1 ... call a recurrent binary sequence term ai ( i = 0 1 ... ) equal 0 1 exist coefficients note a sequence uniquely recover k - tuple { + 1 ... + k - 1 } periodic moreover a k - tuple contain zero sequence contain zero case interest otherwise minimal period sequence greater 2k - 1 k - tuple determine next element 2k - 1 non - zero k - tuples let us call a sequence long minimal period exactly 2k - 1 . task find a long sequence a give k , input contain a single integer k ( 2 ≤ k ≤ 50 ) long sequence a give k output ` ` -1 '' ( without quote ) otherwise first line output contain k integer number : c1 c2 ... ck ( coefficients ) second line contain first k elements sequence : a0 a1 ... ak - 1 . ( elements coefficients ) equal 0 1 least one ci equal 1 . several solutions output <unknown> first sample : c1 = 1 c2 = 1 = - 1 + - 2 ( mod 2 ) thus sequence : period equal 3 = 22 - 1.2 . second sample : c1 = 0 c2 = 1 c3 = 1 = - 2 + - 3 ( mod 2 ) thus sequence : period equal 7 = 23 - 1 . periods color","['brute force', 'math']",2700.0
77/B,reason many american cartoon anvils fall time time onto heroes ' head course safes <unknown> <unknown> plan fall sometimes ... anvils anvils come different size shape quite often get hero stick deep grind ever think throw anvils sky ? height ? sure question never trouble ! turn throw anvil properly easy task let 's describe one popular anvil throw model let height p potential victim vary range [ 0 ; a ] direction wind q vary range [ - b ; b ] p q could real ( float ) number assume anvil fit <unknown> 's head perfectly follow equation least one real root : determine probability aim successfully hit anvil assume p q coefficients choose equiprobably independently range first line contain integer t ( 1 ≤ t ≤ 10000 ) — amount testcases follow t line contain two space - separated integers a b ( 0 ≤ a b ≤ 106 ) pretests contain test 0 < a < 10 0 ≤ b < 10 . print t line — probability a successful anvil hit testcase absolute relative error answer exceed 10 - 6,['math'],1800.0
73/E,vasya play elder troll iii : <unknown> a huge list items inventory however limit size things vasya know total amount items sure x less 2 items inventory a new patch game appear view inventory n different modes display mode i a partition inventory items page ( except maybe last one ) show exactly ai items addition mode show many page bi a complete list great ! perhaps information enough vasya find require number moreover interest fewest number modes vasya see inventory determine number items ? vasya use information receive look inventory mode selection next action i. e. vasya choose set modes first see result determine size know number ai x assume vasya smart check whether uniquely determine number items inventory many modes need know number ai x able know number bi view items mode i. first line contain two integers n x ( 0 ≤ n ≤ 105 2 ≤ x ≤ 109 ) second line contain integers ai ( 1 ≤ ai ≤ 109 ) number among ai may equal output fewest amount modes require uniquely determine amount items inventory solution output - 1 . second example vasya able determine items count uniquely 3 items well 4 items display two page,['math'],2400.0
72/C,positive integer a a divisor positive integer b exist a positive integer c a × c = b. king <unknown> think a positive integer x extraordinarily nice number even divisors equal number odd divisors example 3 two positive divisors 3 1 odd 3 extraordinarily nice hand 2 divisible 2 1 one odd one even divisor therefore 2 extraordinarily nice give a positive integer x determine whether 's extraordinarily nice input contain a single integer x ( 1 ≤ x ≤ 103 ) write a single yes write yes number extraordinarily nice otherwise n't need care capital small letter output case - insensitive,['math'],1200.0
71/C,n knight sit round table equal distance either a good a bad mood <unknown> wizard predict king arthur next month turn particularly fortunate regular polygon find vertices polygon knight a good mood locate otherwise next month bring <unknown> a convex polygon regular side length angle equal problem consider regular polygons least 3 vertices i. e. <unknown> a picture examples polygons present green point mean knight a good mood red point mean ones a bad mood king arthur know knight ' moods help find next month fortunate first line contain number n number knight round table ( 3 ≤ n ≤ 105 ) second line contain space - separated moods n knight order pass around table ` ` 1 '' mean knight a good mood ` ` 0 '' mean a bad mood print ` ` yes '' without quote follow month turn lucky otherwise print ` ` '',"['dp', 'math']",1600.0
50/E,a schoolboy petya study square equations equations include school <unknown> usually look simple : petya notice equations two real root one root equations n't real root moreover turn several different square equations a common root petya interest many different real root equations type describe possible pair number b c 1 ≤ b ≤ n 1 ≤ c ≤ m. help petya find number single line contain two integers n m. ( 1 ≤ n m ≤ 5000000 ) print a single number number real root describe set equations second test statement follow equations analyse : b = 1 c = 1 : x2 + 2x + 1 = 0 ; root x = - 1 b = 1 c = 2 : x2 + 2x + 2 = 0 ; root overall 's one <unknown> second test follow equations analyse : b = 1 c = 1 : x2 + 2x + 1 = 0 ; root x = - 1 b = 1 c = 2 : x2 + 2x + 2 = 0 ; root b = 1 c = 3 : x2 + 2x + 3 = 0 ; root b = 2 c = 1 : x2 + 4x + 1 = 0 ; root b = 2 c = 2 : x2 + 4x + 2 = 0 ; root b = 2 c = 3 : x2 + 4x + 3 = 0 ; root x1 = - 3 x2 = - 1 b = 3 c = 1 : x2 + 6x + 1 = 0 ; root b = 3 c = 2 : x2 + 6x + 2 = 0 ; root b = 3 c = 3 : x2 + 6x + 3 = 0 ; root overall 13 root root - 1 repeat twice mean 12 different root,['math'],2300.0
49/C,vasya buy collect work a well - known berland poet petya n volumes volumes number 1 n. think arrange book simply accord order vasya want minimize number disposition ’ s divisors — positive integers i least one j ( 1 ≤ j ≤ n ) true : j mod i = 0 time p ( j ) mod i = 0 p ( j ) number tome stand j - th place mod operation take division remainder naturally one volume occupy exactly one place one place stand exactly one volume help vasya — find volume disposition minimum number divisors first line contain number n ( 1 ≤ n ≤ 100000 ) represent number volumes free place print n number — seek disposition minimum divisor number j - th number ( 1 ≤ j ≤ n ) equal p ( j ) — number tome stand j - th place several solutions print,"['constructive algorithms', 'math']",1700.0
18/B,one one - dimensional world n platforms platform index k ( platforms number 1 ) a segment coordinate [ ( k - 1 ) m ( k - 1 ) m + l ] l < m. grasshopper bob start jump along platforms point 0 jump move exactly d units right find coordinate point bob fall grasshopper fall find platform find edge platform n't fall first input line contain 4 integer number n d m l ( 1 ≤ n d m l ≤ 106 l < m ) — respectively : amount platforms length grasshopper bob 's jump number m l need find coordinate k - th platform : [ ( k - 1 ) m ( k - 1 ) m + l ] output coordinate point <unknown> fall n't forget bob find platform edge n't fall,"['brute force', 'math']",1700.0
4/A,one hot summer day pete friend billy decide buy a watermelon choose biggest <unknown> one opinion watermelon weigh scale show w kilos rush home die <unknown> decide divide berry however face a hard problem pete billy great fan even number 's want divide watermelon a way two part weigh even number kilos time obligatory part equal boys extremely tire want start meal soon possible 's help find divide watermelon way want sure get a part positive weight first ( ) input line contain integer number w ( 1 ≤ w ≤ 100 ) — weight watermelon buy boys print yes boys divide watermelon two part weigh even number kilos ; opposite case example boys divide watermelon two part 2 6 kilos respectively ( another variant — two part 4 4 kilos ),"['brute force', 'math']",800.0
1801/G,", take string $$$ t $$$ a set $$$ n $$$ string $$$ s_1 $$$ $$$ s_2 $$$ $$$ s_3 $$$ ... $$$ s_n $$$ philip $$$ m $$$ query $$$ i $$$ th philip want take a substring string $$$ t $$$ $$$ l_i $$$ th $$$ r_i $$$ th character count number substrings match string set formally philip want count number pair position $$$ a $$$ $$$ b $$$ $$$ l_i \le a \le b \le r_i $$$ substring string $$$ t $$$ $$$ a $$$ th $$$ b $$$ th character coincide string $$$ s_j $$$ set a substring string $$$ t $$$ $$$ a $$$ th $$$ b $$$ th character a string obtain $$$ t $$$ remove $$$ a - 1 $$$ character begin $$$ |t| - b $$$ character end $$$ |t| $$$ denote length string $$$ t $$$ philip already solve problem ? first line contain two positive integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 500\,000 $$$ ) — number row set number query second line contain a single string $$$ t $$$ consist lowercase letter english alphabet ( $$$ 1 \le |t| \le 5000000 $$$ ) follow $$$ n $$$ line describe string set $$$ i $$$ th a single string $$$ s_i $$$ give consist lowercase letter english alphabet denote $$$ s $$$ total length string set guarantee $$$ s \le 1000000 $$$ well string $$$ s_i $$$ different follow line query enter $$$ i $$$ th contain two positive integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le |t| $$$ ) — leave right border substring $$$ t $$$ $$$ i $$$ -th query a single line print $$$ m $$$ integers $$$ i $$$ th equal answer $$$ i $$$ th query first example first query require entire string count number substrings include set substrings $$$ [ 1 3 ] $$$ $$$ [ 4 6 ] $$$ coincide string ` ` aba '' substrings match string ` ` a '' $$$ [ 1 1 ] $$$ $$$ [ 3 3 ] $$$ $$$ [ 5 5 ] $$$ $$$ [ 7 7 ] $$$ substring $$$ [ 3 4 ] $$$ match string ` ` ac '' total turn 7 substrings string ` ` abacaba '' match string set second query a substring position 1 position 3 take source string string ` ` aba '' string ` ` aba '' enter 1 time string ` ` a '' enter 2 time string ` ` ac '' enter a substring third query a substring 2nd 7th position take source string string ` ` bacaba '' string ` ` aba '' include 1 time string ` ` a '' include 3 time string ` ` ac '' include 1 time a substring","['data structures', 'strings']",3400.0
1608/G,give $$$ m $$$ string a tree $$$ n $$$ nod edge letter write answer $$$ q $$$ query query describe $$$ 4 $$$ integers $$$ u $$$ $$$ v $$$ $$$ l $$$ $$$ r $$$ answer query total number occurrences $$$ str ( u v ) $$$ string indices $$$ l $$$ $$$ r $$$ $$$ str ( u v ) $$$ define string make concatenate letter write edge shortest path $$$ u $$$ $$$ v $$$ ( order traverse ) first line input contain three integers $$$ n $$$ $$$ m $$$ $$$ q $$$ ( $$$ 2 \le n \le 100000 $$$ $$$ 1 \le m q \le 100000 $$$ ) $$$ i $$$ -th follow $$$ n-1 $$$ line contain two integers $$$ u_i v_i $$$ a lowercase latin letter $$$ c_i $$$ ( $$$ 1 \le u_i v_i \le n $$$ $$$ u_i \neq v_i $$$ ) denote edge nod $$$ u_i v_i $$$ a character $$$ c_i $$$ 's guarantee edge form a tree follow $$$ m $$$ line contain string consist lowercase latin letter total length string exceed $$$ 100000 $$$ $$$ q $$$ line follow contain four integers $$$ u $$$ $$$ v $$$ $$$ l $$$ $$$ r $$$ ( $$$ 1 \le u v \le n $$$ $$$ u \neq v $$$ $$$ 1 \le l \le r \le m $$$ ) denote query query print a single integer — answer query,"['data structures', 'dfs and similar', 'strings']",3500.0
1437/G,simplicity let 's say ` ` death note '' a notebook kill a person name write 's easy kill 's pretty hard keep track people n't kill still plan decide make a ` ` death database management system '' — a computer program provide easy access database possible victims let describe specifications let 's define a victim <unknown> : a victim a name ( necessarily unique ) consist lowercase latin letter integer suspicion value start program user enter a list $$$ n $$$ victim name a database suspicion value set $$$ 0 $$$ user make query two type : remind program n't kill people help search name write actual notebook thus list victims database n't change throughout query wait ? write program ! first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 300000 $$$ ) — number victims number query respectively next $$$ n $$$ line contain a single string $$$ s_i $$$ — name $$$ i $$$ -th victim name consist lowercase latin letter next $$$ m $$$ line contain a query one two type : least one query second type total length string $$$ s_i $$$ n't exceed $$$ 300000 $$$ total length string $$$ q $$$ n't exceed $$$ 300000 $$$ query second type print integer value victim name a contiguous substring $$$ q $$$ print $$$ -1 $$$ otherwise print maximum suspicion value a victim whose name a contiguous substring $$$ q $$$,"['data structures', 'strings']",2600.0
1387/C,"committee research binary viruses discover a method replication a large family viruses whose <unknown> cod sequence zero ones virus originate a single gene ; simplicity genes denote integers $$$ 0 $$$ $$$ g - 1 $$$ moment time a virus a sequence genes mutation occur one genes sequence replace a certain sequence genes accord mutation table virus stop mutate consist genes $$$ 0 $$$ $$$ 1 $$$ instance follow mutation table : $$$ $$$ 2 \to \langle 0\ 1 \rangle \\ 3 \to \langle 2\ 0\ <unknown> 3 \to \langle 1\ <unknown> 4 \to \langle 0\ 3\ 1\ <unknown> 5 \to \langle 2\ <unknown> 5 \to \langle <unknown> $$$ $$$ a virus initially consist a single gene $$$ 4 $$$ could mutate follow : $$$ $$$ \langle 4 \rangle \to \langle \underline { 0\ 3\ 1\ 2 } \rangle \to \langle 0\ \underline { 2\ 0\ 0 } \ 1\ 2 \rangle \to \langle 0\ \underline { 0\ 1 } \ 0\ 0\ 1\ 2 \rangle \to \langle 0\ 0\ 1\ 0\ 0\ 1\ \underline { 0\ 1 } \rangle $$$ $$$ another way : $$$ $$$ \langle 4 \rangle \to \langle \underline { 0\ 3\ 1\ 2 } \rangle \to \langle 0\ \underline { 1\ 3 } \ 1\ 2 \rangle \to \langle 0\ 1\ 3\ 1\ \underline { 0\ 1 } \rangle \to \langle 0\ 1\ \underline { 2\ 0\ 0 } \ 1\ 0\ 1 \rangle \to \langle 0\ 1\ \underline { 0\ 1 } \ 0\ 0\ 1\ 0\ 1 \rangle $$$ $$$ viruses detect antibodies identify presence specific continuous fragment zero ones viruses ' cod example antibody react a fragment $$$ \langle 0\ 0\ 1\ 0\ 0 \rangle $$$ detect a virus $$$ \langle 0\ 0\ 1\ 0\ 0\ 1\ 0\ 1 \rangle $$$ detect a virus $$$ \langle 0\ 1\ 0\ 1\ 0\ 0\ 1\ 0\ 1 \rangle $$$ gene $$$ 2 $$$ $$$ <unknown> $$$ scientists wonder whether a give set antibodies enough detect viruses emerge mutations gene , want know length shortest virus detect may happen sometimes scientists n't antibodies course virus detect scientists interest length shortest possible virus emerge gene mutations first line input contain three integers $$$ g $$$ $$$ n $$$ $$$ m $$$ ( $$$ g > 2 $$$ $$$ n \geq g - 2 $$$ $$$ m \geq 0 $$$ ) specify number genes number row mutation table number antibodies follow $$$ n $$$ line contain descriptions row mutation table ; line begin two integers $$$ a $$$ $$$ k $$$ ( $$$ 2 \leq a < g $$$ $$$ k \geq 1 $$$ ) follow a sequence $$$ k $$$ integers $$$ b_1 b_2 \ldots b_k $$$ ( $$$ 0 \leq b_i < g $$$ ) encode row $$$ $$$ a \to \langle <unknown> <unknown> \ldots\ b_k \rangle $$$ $$$ sum value $$$ k $$$ exceed $$$ 100 $$$ every integer $$$ 2 $$$ $$$ g - 1 $$$ appear table $$$ a $$$ least next $$$ m $$$ line contain descriptions antibodies ; line begin integer $$$ \ell $$$ ( $$$ \ell \geq 1 $$$ ) follow a sequence $$$ \ell $$$ integers $$$ c_1 c_2 \ldots <unknown> $$$ ( $$$ 0 \leq c_i \leq 1 $$$ ) describe antibody sum value $$$ \ell $$$ exceed $$$ 50 $$$ program need output exactly $$$ g - 2 $$$ line contain answer subsequent genes $$$ 2 $$$ $$$ g - 1 $$$ viruses mutate single gene detect give set antibodies need print word ` ` yes '' also need print viruses could originate gene ( happen sequence never stop mutate ) otherwise need print word ` ` '' follow integer denote minimal length <unknown> virus assume prepare input data value smaller $$$ 2^ { 63 } $$$ subtasks :",['dp'],2900.0
1326/D2,hard version problem difference constraint sum lengths string number test case make hack solve versions task give a string $$$ s $$$ consist lowercase english letter find longest string $$$ t $$$ satisfy follow condition : input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) number test case next $$$ t $$$ line describe a test case test case a non - empty string $$$ s $$$ consist lowercase english letter guarantee sum lengths string test case exceed $$$ 1000000 $$$ test case print longest string satisfy condition describe exist multiple possible solutions print first test string $$$ s = $$$ ` ` a '' satisfy condition second test string ` ` <unknown> '' satisfy condition : prove exist a longer string satisfy condition fourth test string ` ` c '' correct ` ` c '' $$$ = $$$ ` ` c '' $$$ + $$$ ` ` '' $$$ a $$$ $$$ b $$$ empty possible solution test ` ` s '',"['greedy', 'strings']",1800.0
917/E,know eleven special abilities thus hopper convince close gate upside world mind upside monsters like move worlds go attack hopper eleven order make stop monsters live vines vines form a tree n vertices number 1 n. 's a lowercase english letter write tunnel ( edge ) upside a magical world m type monsters upside number 1 m. type monster a special word give power special word type i si q monsters upside one a junction ( vertex ) go junction monster type k go junction i junction j power gain number time see special world ( sk ) consecutively tunnel formally : f ( i j ) string get concatenate letter write tunnel shortest path i j power monster gain number occurrences sk f ( i j ) hopper eleven want get prepare monster want know power monster gain move first line input contain three integers n m q ( 2 ≤ n ≤ 105 1 ≤ m q ≤ 105 ) next n - 1 line contain tunnel ( edge ) line contain two integers v u ( 1 ≤ v u ≤ n v ≠ u ) a lowercase english letter c mean 's a tunnel connect junctions v u write c guarantee give graph a tree next m line contain special word i - th line contain a single string si ( 1 ≤ |si| ≤ 105 ) consist lowercase english letter guarantee |s1| + |s2| + ... + <unknown> ≤ 105 ) next q line contain monsters line contain three integers i j k ( 1 ≤ i j ≤ n i ≠ j 1 ≤ k ≤ m ) mean a monster type k go junction number i junction number j. print q line i - th line contain a single integer power i - th monster gain move,"['data structures', 'strings']",3400.0
822/E,first semester end know end first semester holiday begin holiday noora decide return vičkopolis a modest souvenir leha bring a sausage length m pavlopolis everyone know sausage represent a string lowercase english letter length equal length sausage leha please gift immediately eat sausage realize a quite <unknown> act sausage a souvenir ! hacker immediately go butcher shop unfortunately another sausage length n shop however leha upset buy sausage come home decide cut purchase sausage several piece number piece start 1 leave right want select several piece glue together obtain sausage equal sausage noora give hacker glue two piece together number leave piece less number right piece besides know glue x piece noora notice <unknown> souvenir sausage upset course leha ’ t want upset girl hacker ask find whether able cut sausage buy glue piece noora n't notice anything formally give two string s t. length string s n length string t m. require select several pairwise non - intersecting substrings s concatenation order substrings appear s equal string t. denote f ( s t ) minimal number substrings choose concatenation equal string t. impossible choose substrings f ( s t ) = ∞ leha really want know whether ’ s true f ( s t ) ≤ x. first line contain single integer n ( 1 ≤ n ≤ 105 ) — length sausage buy leha i.e length string s. second line contain string s length n consist lowercase english letter third line contain single integer m ( 1 ≤ m ≤ n ) — length sausage buy noora i.e length string t. fourth line contain string t length m consist lowercase english letter fifth line contain single integer x ( 1 ≤ x ≤ 30 ) — maximum number piece sausage leha glue noora ’ t notice anything line print ` ` yes '' ( without quote ) leha able succeed create new sausage noora n't notice anything otherwise print ` ` '' ( without quote ) let 's consider first sample optimal answer leha cut sausage buy follow way : <unknown> = h + <unknown> + a + y + g + rt number receive part 1 6 : hereupon hacker glue part number 2 4 6 get sausage <unknown> equal one give noora thus glue three piece since x = 3 print ` ` yes '' ( without quote ) second sample sausages coincide sausages first sample however since x = 2 print ` ` '' ( without quote ),['dp'],2400.0
653/F,alex program valentina ( <unknown> daughter ) get start ask many question round bracket ( parenthesis ) code explain a bite get give a task order finish code time purpose problem consider string consist open close round bracket character ' ( ' ' ) ' sequence bracket call correct : example sequence ` ` ( ) ( ) '' ` ` ( ( ( ) ) ) ( ( ) ) '' correct ` ` ) ( ( ) '' ` ` ( ( ( ( ( ` ` ` ` ( ) ) '' alex take a piece paper write a string s consist bracket ask valentina count number distinct non - empty substrings s correct sequence bracket word task count number non - empty correct sequence bracket occur a string s a substring ( n't mix subsequences ) valentina finish task alex notice n't know answer help n't loose face front valentina solve problem ! first line input contain integer n ( 1 ≤ n ≤ 500 000 ) — length string s. second line contain a string s length n consist ' ( ' ' ) ' print number distinct non - empty correct sequence occur s substring first sample 5 distinct substrings count : ` ` ( ) '' ` ` ( ) ( ) '' ` ` ( ) ( ) ( ) '' ` ` ( ) ( ) ( ) ( ) '' ` ` ( ) ( ) ( ) ( ) ( ) '' second sample 3 distinct substrings count : ` ` ( ) '' ` ` ( ( ) ) '' ` ` ( ( ) ) ( ) '',"['data structures', 'strings']",2600.0
547/E,what - the - fatherland a strange country ! phone number string consist lowercase english letter double strange a phone number associate several bear ! country a rock band call cf consist n bear ( include mike ) number 1 n. phone number i - th member cf si may <unknown> a holiday name phone call day last phone call day everyone call number substrings his / her number ( one may call number several time ) particular everyone call ( really strange country ) denote call ( i j ) number time i - th member cf call j - th member cf <unknown> mike q question want ask question give number l r k tell number first line input contain integers n q ( 1 ≤ n ≤ 2 × 105 1 ≤ q ≤ 5 × 105 ) next n line contain phone number i - th line contain a string si consist lowercase english letter ( ) next q line contain information question contain integers l r k ( 1 ≤ l ≤ r ≤ n 1 ≤ k ≤ n ) print answer question a separate line,"['data structures', 'strings']",2800.0
452/E,give three string ( s1 s2 s3 ) integer l ( 1 ≤ l ≤ min ( |s1| |s2| |s3| ) need find many triple ( i1 i2 i3 ) exist three string sk [ ik ... ik + l - 1 ] ( k = 1 2 3 ) pairwise equal print find number modulo 1000000007 ( 109 + 7 ) see note sure <unknown> use statement first three line contain three non - empty input string sum lengths string 3·105 string consist lowercase english letter need output min ( |s1| |s2| |s3| ) number separate space — answer problem modulo 1000000007 ( 109 + 7 ) consider a string t = t1t2 ... t|t| ti denote i - th character string |t| denote length string t [ i ... j ] ( 1 ≤ i ≤ j ≤ |t| ) represent string <unknown> + 1 ... tj ( substring t position i position j inclusive ),"['data structures', 'strings']",2400.0
1795/G,give a simple undirected graph consist $$$ n $$$ vertices $$$ m $$$ edge vertices number $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th vertex a value $$$ a_i $$$ write remove vertices graph allow remove vertex $$$ i $$$ degree equal $$$ a_i $$$ a vertex remove edge incident also remove thus decrease degree adjacent non - removed vertices a valid sequence removals a permutation $$$ p_1 p_2 \dots p_n $$$ $$$ ( 1 \le p_i \le n ) $$$ $$$ i $$$ -th vertex remove $$$ p_i $$$ every removal allow a pair $$$ ( x y ) $$$ vertices nice exist two valid sequence removals $$$ x $$$ remove $$$ y $$$ one $$$ y $$$ remove $$$ x $$$ one count number nice pair $$$ ( x y ) $$$ $$$ x < y $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 100000 $$$ ; $$$ 0 \le m \le \min ( 100000 \frac { n \cdot ( n - 1 ) } { 2 } ) $$$ ) — number vertices number edge graph second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le n - 1 $$$ ) — degree requirements removal next $$$ m $$$ line contain two integers $$$ v $$$ $$$ u $$$ ( $$$ 1 \le v u \le n $$$ ; $$$ v \neq u $$$ ) — description edge graph n't contain self - loops multiple edge sum $$$ n $$$ testcases n't exceed $$$ 100000 $$$ sum $$$ m $$$ testcases n't exceed $$$ 100000 $$$ additional constraint input : always exist least one valid sequence removals testcase print a single integer — number nice pair vertices,['dfs and similar'],2700.0
1780/F,"one day kira find $$$ n $$$ friends morioh decide gather around a table a peaceful conversation height friend $$$ i $$$ equal $$$ a_i $$$ happen height friends unique unfortunately $$$ 3 $$$ chair kira 's house obviously possible seat friends ! , kira invite $$$ 3 $$$ friends everything simple ! heights lowest tallest invite friends coprime friends play trick greatly anger kira kira become interest many ways choose $$$ 3 $$$ friends n't play trick ? two ways consider different a friend invite one way , formally kira invite friends $$$ i $$$ $$$ j $$$ $$$ k $$$ follow true : $$$ \gcd ( \min ( a_i a_j a_k ) \max ( a_i a_j a_k ) ) = 1 $$$ $$$ \gcd ( x y ) $$$ denote greatest common divisor ( gcd ) number $$$ x $$$ $$$ y $$$ kira strong computer science ask count number ways <unknown> friends first line contain number $$$ n $$$ ( $$$ 3 \le n \le 3\cdot100000 $$$ ) — number kira 's friends next line contain $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 3\cdot100000 $$$ ) — heights kira 's friends a single line output number ways invite three friends first example one way suitable : invite friends $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 1 < 2 < 3 $$$ number $$$ 1 $$$ $$$ 3 $$$ coprime","['brute force', 'data structures', 'dp']",2300.0
1779/F,misha ban play chess good since accuse cheat engine therefore retire decide become a <unknown> one day take a walk a park misha come across a root tree nod number $$$ 1 $$$ $$$ n $$$ root tree node $$$ 1 $$$ $$$ 1\le i\le n $$$ node $$$ i $$$ contain $$$ a_i $$$ stone misha recently learn a new spell <unknown> class want test a spell consist : misha perform $$$ 2n $$$ spell want remove stone tree formally want $$$ a_i=0 $$$ hold $$$ 1\leq i \leq n $$$ help perform spell ? a tree $$$ n $$$ nod a connect acyclic graph contain $$$ n-1 $$$ edge subtree node $$$ i $$$ set nod $$$ j $$$ $$$ i $$$ lie simple path $$$ 1 $$$ ( root ) $$$ j $$$ consider $$$ i $$$ contain subtree first line contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 2\cdot 100000 $$$ ) — size <unknown> second line contain array integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a_i \leq 31 $$$ ) describe number stone node initially third line contain array integers $$$ p_2 p_3 \ldots p_n $$$ ( $$$ 1 \leq p_i \leq i-1 $$$ ) $$$ p_i $$$ mean edge connect $$$ p_i $$$ $$$ i $$$ a valid sequence spell output $$$ -1 $$$ otherwise output a single integer $$$ q $$$ ( $$$ 0 \leq q \leq 2n $$$ ) first line — number perform spell second line output a sequence integers $$$ v_1 v_2 \ldots <unknown> $$$ ( $$$ 1 \leq v_i \leq n $$$ ) — $$$ i $$$ -th spell perform subtree node $$$ v_i $$$ please note order matter multiple solutions exist output n't minimize number operations please refer follow picture explanation third test first $$$ 4 $$$ spell show since last $$$ 2 $$$ nothing first picture represent tree initially number stone node write green change apply current spell highlight red,"['constructive algorithms', 'dp']",2500.0
1747/D,give array $$$ a $$$ $$$ n $$$ integers $$$ a_1 a_2 a_3 \ldots a_n $$$ answer $$$ q $$$ independent query consist two integers $$$ l $$$ $$$ r $$$ find detail xor operation first line contain two integers $$$ n $$$ $$$ q $$$ $$$ ( 1 \le n q \le 2 \cdot 100000 ) $$$ — length array $$$ a $$$ number query next line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ $$$ ( 0 \le a_i \lt 2^ { 30 } ) $$$ — elements array $$$ a $$$ $$$ i $$$ -th next $$$ q $$$ line contain two integers $$$ l_i $$$ $$$ r_i $$$ $$$ ( 1 \le l_i \le r_i \le n ) $$$ — description $$$ i $$$ -th query query output a single integer — answer query first query $$$ l = 3 r = 4 $$$ subarray = $$$ [ 3 3 ] $$$ apply operation subarrays length $$$ 1 $$$ wo n't change array ; hence impossible make elements equal $$$ 0 $$$ second query $$$ l = 4 r = 6 $$$ subarray = $$$ [ 3 1 2 ] $$$ choose whole subarray $$$ ( l = 4 r = 6 ) $$$ replace elements xor $$$ ( 3 \oplus 1 \oplus 2 ) = 0 $$$ make subarray $$$ [ 0 0 0 ] $$$ fifth query $$$ l = 1 r = 6 $$$ subarray = $$$ [ 3 0 3 3 1 2 ] $$$ make operations follow :,"['constructive algorithms', 'data structures']",1900.0
1720/D2,hard version problem difference version $$$ a_i \le 1000000000 $$$ give array $$$ n $$$ integers $$$ a_0 a_1 a_2 \ldots a _ { n - 1 } $$$ bryap want find longest beautiful subsequence array array $$$ b = [ b_0 b_1 \ldots b _ { m-1 } ] $$$ $$$ 0 \le b_0 < b_1 < \ldots < b _ { m - 1 } < n $$$ a subsequence length $$$ m $$$ array $$$ a $$$ subsequence $$$ b = [ b_0 b_1 \ldots b _ { m-1 } ] $$$ length $$$ m $$$ call beautiful follow condition hold : $$$ a \oplus b $$$ denote bitwise xor $$$ a $$$ $$$ b $$$ example $$$ 2 \oplus 4 = 6 $$$ $$$ 3 \oplus 1=2 $$$ bryap a simple person want know length longest subsequence help bryap find answer question first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 300000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_0 a_1 ... a _ { n-1 } $$$ ( $$$ 0 \leq a_i \leq 1000000000 $$$ ) — elements array guarantee sum $$$ n $$$ test case exceed $$$ 300000 $$$ test case print a single integer — length longest beautiful subsequence first test case pick whole array a beautiful subsequence $$$ 1 \oplus 1 < 2 \oplus 0 $$$ second test case pick elements index $$$ 1 $$$ $$$ 2 $$$ $$$ 4 $$$ ( $$$ 0 $$$ indexation ) elements hold : $$$ 2 \oplus 2 < 4 \oplus 1 $$$ $$$ 4 \oplus 4 < 1 \oplus 2 $$$,"['data structures', 'dp', 'strings']",2400.0
1705/E,"watch a certain anime go sleep mark dream stand old classroom a blackboard a sequence $$$ n $$$ positive integers $$$ a_1 a_2 \dots a_n $$$ , professor koro come perform follow operation : professor koro ask mark question ` ` maximum possible number could appear board operations ? ` ` mark quickly solve question still slower professor koro thus professor koro decide give mark additional challenge update initial sequence integers $$$ q $$$ time time choose positive integers $$$ k $$$ $$$ l $$$ change $$$ a_k $$$ $$$ l $$$ update ask mark question help mark answer question faster professor koro ! note update persistent change make sequence $$$ a $$$ apply process future update first line input contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 2\leq n\leq 2\cdot 100000 $$$ $$$ 1\leq q\leq 2\cdot 100000 $$$ ) — length sequence $$$ a $$$ number update respectively second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1\leq a_i\leq 2\cdot 100000 $$$ ) $$$ q $$$ line follow consist two integers $$$ k $$$ $$$ l $$$ ( $$$ 1\leq k\leq n $$$ $$$ 1\leq l\leq 2\cdot 100000 $$$ ) tell update $$$ a_k $$$ $$$ l $$$ print $$$ q $$$ line $$$ i $$$ -th line consist a single integer — answer $$$ i $$$ -th update first example test program must proceed $$$ 4 $$$ update sequence first update $$$ [ <unknown> ] $$$ one sequence operations achieve number $$$ 6 $$$ follow , second update array change $$$ [ <unknown> ] $$$ time mark achieve $$$ 6 $$$ however one sequence mark use achieve $$$ 5 $$$ show third update array change $$$ [ <unknown> ] $$$ one way achieve $$$ 4 $$$ show","['brute force', 'data structures', 'greedy']",2300.0
1679/E,"today a holiday residence hall — oleh arrive honor girls give a string oleh like gift a lot immediately think offer best friend follow problem give a string $$$ s $$$ length $$$ n $$$ consist first $$$ 17 $$$ lowercase latin letter { $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ \ldots $$$ $$$ p $$$ $$$ q $$$ } question mark $$$ q $$$ query query define a set pairwise distinct lowercase first $$$ 17 $$$ letter latin alphabet use replace question mark string $$$ s $$$ answer query sum number distinct substrings palindromes string obtain original string $$$ s $$$ replace question mark available character answer must calculate modulo $$$ 998\,244\,353 $$$ pay attention ! two substrings different start end position string different , number different substrings palindromes string aba $$$ 4 $$$ : a b a aba consider examples replace question mark letter example string aba ? ? ee query { $$$ a $$$ $$$ b $$$ } get string <unknown> <unknown> get string pizza <unknown> abacaba aba ? fee <unknown> <unknown> recall a palindrome a string read leave right right leave first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1\,000 $$$ ) — length string $$$ s $$$ second line contain string $$$ s $$$ consist $$$ n $$$ lowercase latin letter question mark guarantee letter string belong set { $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ \ldots $$$ $$$ p $$$ $$$ q $$$ } third line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 200000 $$$ ) — number query follow $$$ q $$$ line contain a single line $$$ t $$$ — a set character replace question mark ( $$$ 1 \le |t| \le 17 $$$ ) guarantee letter string belong set { $$$ a $$$ $$$ b $$$ $$$ c $$$ $$$ \ldots $$$ $$$ p $$$ $$$ q $$$ } occur query print one number — total number palindromic substrings string obtain string $$$ s $$$ modulo $$$ 998\,244\,353 $$$ consider first example first query get one string a result replace question mark — abaaaba follow palindrome substrings : third request get 4 line : abaaaba abababa abbaaba <unknown>","['dp', 'strings']",2400.0
1661/B,suppose integer $$$ v $$$ one operation : give $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ minimum number operations need make $$$ a_i $$$ equal $$$ 0 $$$ ? first line contain single integer $$$ n $$$ ( $$$ 1 \le n \le 32768 $$$ ) — number integers second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i < 32768 $$$ ) print $$$ n $$$ integers $$$ i $$$ -th integer equal minimum number operations require make $$$ a_i $$$ equal $$$ 0 $$$ let 's consider $$$ a_i $$$ :,"['brute force', 'dfs and similar', 'dp', 'greedy']",1300.0
1609/E,become a successful trader william get a university degree education interest situation happen william start listen homework assignments much attentively follow a formal description homework assignment william hear : give a string $$$ s $$$ length $$$ n $$$ consist character ` ` a '' ` ` b '' ` ` c '' $$$ q $$$ query format ( $$$ pos c $$$ ) mean replace element string $$$ s $$$ position $$$ pos $$$ character $$$ c $$$ query must output minimal number character string replace string n't contain string ` ` abc '' a subsequence a valid replacement a character replace ` ` a '' ` ` b '' ` ` c '' a string $$$ x $$$ say a subsequence string $$$ y $$$ $$$ x $$$ obtain $$$ y $$$ delete character without change order remain character first line contain two integers $$$ n $$$ $$$ q $$$ $$$ ( 1 \le n q \le 100000 ) $$$ length string number query respectively second line contain string $$$ s $$$ consist character ` ` a '' ` ` b '' ` ` c '' next $$$ q $$$ line contain integer $$$ i $$$ character $$$ c $$$ $$$ ( 1 \le i \le n ) $$$ index value new item string respectively guarantee character 's $$$ c $$$ value ` ` a '' ` ` b '' ` ` c '' query output minimal number character would replace string n't contain ` ` abc '' a subsequence let 's consider state string query :,"['data structures', 'dp']",2400.0
1600/J,receive data a bubble bot know task make factory facilities even start need know big factory many room look data see dimension construction rectangle shape : n x m. next n line m number number represent factory tile go 0 15 . number look binary form number know side tile wall example number 10 's binary form 1010 mean a wall north side n't a wall east a wall south side n't a wall west side go north east south west guarantee construction always wall 's edge input correct task print size room biggest smallest first line two number n m size construction integers : $$$ n $$$ ( $$$ 1 \leq n \leq 1000 $$$ ) $$$ m $$$ ( $$$ 1 \leq m \leq 1000 $$$ ) next n x m number represent tile construction finish process data output consist one line sort biggest smallest room size,['dfs and similar'],1400.0
1582/F1,easier version problem smaller constraints korney korneevich dag array $$$ a $$$ length $$$ n $$$ korney korneevich recently read operation bitwise xor wish experiment purpose decide find integers $$$ x \ge 0 $$$ exist increase subsequence array $$$ a $$$ bitwise xor number equal $$$ x $$$ n't take a long time korney korneevich find $$$ x $$$ want check result 's ask solve problem ! a sequence $$$ s $$$ a subsequence a sequence $$$ b $$$ $$$ s $$$ obtain $$$ b $$$ deletion several ( possibly zero ) elements a sequence $$$ s_1 s_2 \ldots s_m $$$ call increase $$$ s_1 < s_2 < \ldots < s_m $$$ first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 500 $$$ ) — elements array $$$ a $$$ first line print a single integer $$$ k $$$ — number find $$$ x $$$ value second line print $$$ k $$$ integers increase order $$$ x_1 x_2 \ldots x_k $$$ ( $$$ 0 \le x_1 < \ldots < x_k $$$ ) — find $$$ x $$$ value first test case :,"['dp', 'greedy']",1800.0
1566/C,a binary string a string consist character $$$ 0 $$$ $$$ 1 $$$ a bi - table a table exactly two row equal length a binary string let $$$ \operatorname { mex } $$$ a bi - table smallest digit among $$$ 0 $$$ $$$ 1 $$$ $$$ 2 $$$ occur bi - table example $$$ \operatorname { mex } $$$ $$$ \begin { bmatrix } <unknown> 1010 \end { bmatrix } $$$ $$$ 2 $$$ $$$ 0 $$$ $$$ 1 $$$ occur bi - table least $$$ \operatorname { mex } $$$ $$$ \begin { bmatrix } <unknown> 111 \end { bmatrix } $$$ $$$ 0 $$$ $$$ 0 $$$ $$$ 2 $$$ occur bi - table $$$ 0 < 2 $$$ give a bi - table $$$ n $$$ columns cut number bi - tables ( consist consecutive columns ) column exactly one bi - table possible cut bi - table a single bi - table — whole bi - table maximal sum $$$ \operatorname { mex } $$$ result bi - tables ? input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line description test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number columns bi - table next two line contain a binary string length $$$ n $$$ — row bi - table 's guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case print a single integer — maximal sum $$$ \operatorname { mex } $$$ bi - tables possible get cut give bi - table optimally first test case cut bi - table follow : sum $$$ \operatorname { mex } $$$ $$$ 8 $$$,"['constructive algorithms', 'dp', 'greedy']",1000.0
1566/B,a binary string a string consist character $$$ 0 $$$ $$$ 1 $$$ let $$$ \operatorname { mex } $$$ a binary string smallest digit among $$$ 0 $$$ $$$ 1 $$$ $$$ 2 $$$ occur string example $$$ \operatorname { mex } $$$ $$$ 001011 $$$ $$$ 2 $$$ $$$ 0 $$$ $$$ 1 $$$ occur string least $$$ \operatorname { mex } $$$ $$$ 1111 $$$ $$$ 0 $$$ $$$ 0 $$$ $$$ 2 $$$ occur string $$$ 0 < 2 $$$ a binary string $$$ s $$$ give cut number substrings character exactly one substring possible cut string a single substring — whole string a string $$$ a $$$ a substring a string $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) character begin several ( possibly zero ) character end minimal sum $$$ \operatorname { mex } $$$ substrings piece ? input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow test case contain a single binary string $$$ s $$$ ( $$$ 1 \le |s| \le 100000 $$$ ) 's guarantee sum lengths $$$ s $$$ test case exceed $$$ 100000 $$$ test case print a single integer — minimal sum $$$ \operatorname { mex } $$$ substrings possible get cut $$$ s $$$ optimally first test case minimal sum $$$ \operatorname { mex } ( 0 ) + \operatorname { mex } ( 1 ) = 1 + 0 = 1 $$$ second test case minimal sum $$$ \operatorname { mex } ( 1111 ) = 0 $$$ third test case minimal sum $$$ \operatorname { mex } ( 01100 ) = 2 $$$,"['constructive algorithms', 'dp', 'greedy']",800.0
1552/G,"andrea come believe a novel sort algorithm array length $$$ n $$$ algorithm work follow initially array $$$ n $$$ integers $$$ a_1 \ a_2 \ \dots \ a_n $$$ , $$$ k $$$ step execute $$$ 1\le i\le k $$$ $$$ i $$$ -th step subsequence array $$$ a $$$ index $$$ j _ { i,1 } < j _ { i,2 } < \dots < j _ { i q_i } $$$ sort without change value remain index , subsequence $$$ a _ { j _ { i,1 } } \ a _ { j _ { i,2 } } \ \dots \ a _ { j _ { i q_i } } $$$ sort elements $$$ a $$$ leave untouched andrea eager share discovery academic community send a short paper describe algorithm journal ` ` <unknown> sort algorithms '' referee paper ( person must judge correctness paper ) must decide whether andrea 's algorithm correct , sort array $$$ a $$$ $$$ n $$$ integers first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1\le n\le 40 $$$ $$$ 0\le k\le 10 $$$ ) — length array handle andrea 's algorithm number step andrea 's algorithm $$$ k $$$ line follow describe subsequence consider a step andrea 's algorithm $$$ i $$$ -th line contain integer $$$ q_i $$$ ( $$$ 1\le q_i\le n $$$ ) follow $$$ q_i $$$ integers $$$ j _ { i,1 } \ j _ { i,2 } \ \dots \ j _ { i q_i } $$$ ( $$$ 1\le j _ { i,1 } < j _ { i,2 } < \cdots < j _ { i q_i } \le n $$$ ) — length subsequence consider $$$ i $$$ -th step index subsequence andrea 's algorithm correct print accept otherwise print reject explanation first sample : algorithm consist $$$ 3 $$$ step first one sort subsequence $$$ [ a_1 a_2 a_3 ] $$$ second one sort subsequence $$$ [ a_2 a_3 a_4 ] $$$ third one sort subsequence $$$ [ a_1 a_2 ] $$$ example initially $$$ a= [ 6 5 6 3 ] $$$ algorithm transform array follow ( subsequence get sort highlight red ) $$$ $$$ [ { \color { red } 6 } { \color { red } 5 } { \color { red } 6 } , 3 ] \rightarrow [ 5 { \color { red } 6 } { \color { red } 6 } { \color { red } 3 } ] \rightarrow [ { \color { red } 5 } { \color { red } 3 } 6 6 ] \rightarrow [ 3 5 6 6 ] \ , $$$ $$$ one prove initial array $$$ a $$$ end algorithm array $$$ a $$$ sort explanation second sample : algorithm consist $$$ 3 $$$ step first one sort subsequence $$$ [ a_1 a_2 a_3 ] $$$ second one sort subsequence $$$ [ a_2 a_3 a_4 ] $$$ third one sort subsequence $$$ [ a_1 a_3 a_4 ] $$$ example initially $$$ a= [ 6 5 6 3 ] $$$ algorithm transform array follow ( subsequence get sort highlight red ) $$$ $$$ [ { \color { red } 6 } { \color { red } 5 } { \color { red } 6 } , 3 ] \rightarrow [ 5 { \color { red } 6 } { \color { red } 6 } { \color { red } 3 } ] \rightarrow [ { \color { red } 5 } 3 { \color { red } 6 } { \color { red } 6 } ] \rightarrow [ 5 3 6 6 ] \ , $$$ $$$ notice $$$ a= [ <unknown> ] $$$ example array sort algorithm explanation third sample : algorithm consist $$$ 4 $$$ step first $$$ 3 $$$ step nothing sort subsequences length $$$ 1 $$$ whereas fourth step sort subsequence $$$ [ a_1 a_3 ] $$$ example initially $$$ a= [ 5,6,4 ] $$$ algorithm transform array follow ( subsequence get sort highlight red ) $$$ $$$ [ { \color { red } 5 } , 6,4 ] \rightarrow [ 5 { \color { red } 6 } , 4 ] \rightarrow [ 5 { \color { red } 6 } , 4 ] \rightarrow [ { \color { red } 5 } , 6 { \color { red } 4 } ] \rightarrow [ <unknown> ] \ , $$$ $$$ notice $$$ a= [ 5,6,4 ] $$$ example array sort algorithm explanation fourth sample : algorithm consist $$$ 2 $$$ step first step sort subsequences $$$ [ a_2 a_3 a_4 ] $$$ second step sort whole array $$$ [ a_1 a_2 a_3 a_4 a_5 ] $$$ example initially $$$ a= [ <unknown> ] $$$ algorithm transform array follow ( subsequence get sort highlight red ) $$$ $$$ [ 9 { \color { red } 8 } { \color { red } 1 } { \color { red } 1 } , 1 ] \rightarrow [ { \color { red } 9 } { \color { red } 1 } { \color { red } 1 } { \color { red } 8 } { \color { red } 1 } ] \rightarrow [ <unknown> ] \ , $$$ $$$ since last step whole array sort clear initial array $$$ a $$$ end algorithm array $$$ a $$$ sort","['brute force', 'dfs and similar']",3000.0
1446/C,"a give sequence distinct non - negative integers $$$ ( b_1 b_2 \dots b_k ) $$$ determine good follow way : possible number $$$ b_i $$$ $$$ b_j $$$ try add edge twice nevertheless add edge find example ( picture correspond first test case ) sequence $$$ ( 0 1 5 2 6 ) $$$ good reach $$$ 1 $$$ $$$ 5 $$$ however sequence $$$ ( 0 1 5 2 ) $$$ good give a sequence $$$ ( a_1 a_2 \dots a_n ) $$$ distinct non - negative integers would like remove elements ( possibly none ) make remain sequence good minimum possible number removals require achieve goal ? show sequence remove number elements leave least $$$ 2 $$$ remain sequence good first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200,000 $$$ ) — length sequence second line contain $$$ n $$$ distinct non - negative integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) — elements sequence output exactly one integer — minimum possible number elements remove order make remain sequence good note number remove n't impact procedure tell whether result sequence good possible number $$$ b_i $$$ $$$ b_j $$$ try add edge twice nevertheless add edge","['data structures', 'dp']",2100.0
1395/C,boboniu like bite operations want play a game boboniu give two sequence non - negative integers $$$ a_1 a_2 \ldots a_n $$$ $$$ b_1 b_2 \ldots b_m $$$ $$$ i $$$ ( $$$ 1\le i\le n $$$ ) 're ask choose a $$$ j $$$ ( $$$ 1\le j\le m $$$ ) let $$$ c_i = a_i\ & b_j $$$ $$$ \ & $$$ denote bitwise operation note pick $$$ j $$$ different $$$ i $$$ 's find minimum possible $$$ c_1 | c_2 | \ldots | c_n $$$ $$$ | $$$ denote bitwise operation first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1\le n m\le 200 $$$ ) next line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0\le a_i < 2 ^ 9 $$$ ) next line contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 0\le b_i < 2 ^ 9 $$$ ) print one integer : minimum possible $$$ c_1 | c_2 | \ldots | c_n $$$ first example $$$ c_1 = a_1\ & <unknown> $$$ $$$ c_2 = a_2\ & <unknown> $$$ $$$ c_3 = a_3\ & b_1=0 $$$ $$$ c_4 = a_4\ & b_1=0 $$$ thus $$$ c_1 | c_2 | c_3 <unknown> = 2 $$$ minimal answer get,"['brute force', 'dp', 'greedy']",1600.0
1360/F,give $$$ n $$$ string $$$ a_1 a_2 \ldots a_n $$$ : length $$$ m $$$ string consist lowercase english letter find string $$$ s $$$ length $$$ m $$$ give $$$ n $$$ string differ $$$ s $$$ one position formally give string $$$ a_i $$$ one position $$$ j $$$ $$$ a_i [ j ] \ne s [ j ] $$$ note desire string $$$ s $$$ may equal one give string $$$ a_i $$$ may differ give string example string abac <unknown> answer problem might string abab differ first last character second first first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case $$$ t $$$ test case follow test case start a line contain two positive integers $$$ n $$$ ( $$$ 1 \le n \le 10 $$$ ) $$$ m $$$ ( $$$ 1 \le m \le 10 $$$ ) — number string length follow $$$ n $$$ string $$$ a_i $$$ one per line length $$$ m $$$ consist lowercase english letter print $$$ t $$$ answer test case answer ( exist ) a string length $$$ m $$$ consist lowercase english letter several answer print answer exist print ` ` -1 '' ( ` ` minus one '' without quote ) first test case explain statement second test case answer exist,"['brute force', 'constructive algorithms', 'dp', 'strings']",1700.0
1325/D,give 2 integers $$$ u $$$ $$$ v $$$ find shortest array bitwise - xor elements $$$ u $$$ sum elements $$$ v $$$ line contain 2 integers $$$ u $$$ $$$ v $$$ $$$ ( 0 \le u v \le 10^ { 18 } ) $$$ 's array satisfy condition print ` ` -1 '' otherwise : first line contain one integer $$$ n $$$ represent length desire array next line contain $$$ n $$$ positive integers array multiple possible answer print first sample $$$ 3\oplus 1 = 2 $$$ $$$ 3 + 1 = 4 $$$ valid array smaller length notice fourth sample array empty,"['constructive algorithms', 'greedy']",1700.0
1209/E1,easier version next problem difference constraints give a rectangular $$$ n \times m $$$ matrix $$$ a $$$ one move choose column cyclically shift elements column perform operation many time want ( possibly zero ) perform operation a column multiple time do cyclical shift compute every row maximal value suppose $$$ i $$$ -th row equal $$$ r_i $$$ maximal possible value $$$ r_1+r_2+\ldots+r_n $$$ ? first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 40 $$$ ) number test case input first line test case contain integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 4 $$$ $$$ 1 \le m \le 100 $$$ ) — number row number columns give matrix $$$ a $$$ follow $$$ n $$$ line contain $$$ m $$$ integers elements $$$ a $$$ ( $$$ 1 \le a _ { i j } \le 100000 $$$ ) print $$$ t $$$ integers : answer test case order give input first test case shift third column one way $$$ r_1 = 5 $$$ $$$ r_2 = 7 $$$ second case n't rotate anything way $$$ r_1 = r_2 = 10 $$$ $$$ r_3 = 9 $$$,"['brute force', 'dp', 'greedy']",2000.0
1208/F,give array $$$ a $$$ $$$ n $$$ integers need find maximum value $$$ a _ { i } | ( a _ { j } \ & a _ { k } ) $$$ triplets $$$ ( i j k ) $$$ $$$ i < j < k $$$ $$$ \ & $$$ denote bitwise operation $$$ | $$$ denote bitwise operation first line input contain integer $$$ n $$$ ( $$$ 3 \le n \le 10^ { 6 } $$$ ) size array $$$ a $$$ next line contain $$$ n $$$ space separate integers $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_n $$$ ( $$$ 0 \le a _ { i } \le 2 \cdot 10^ { 6 } $$$ ) represent elements array $$$ a $$$ output a single integer maximum value expression give statement first example possible triplet $$$ ( 1 2 3 ) $$$ hence answer $$$ 2 | ( 4 \ & 6 ) = 6 $$$ second example $$$ 4 $$$ possible triplets : maximum value hence $$$ 12 $$$,"['dfs and similar', 'dp', 'greedy']",2600.0
981/D,mr keks a typical white - <unknown> byteland a bookshelf office book book integer positive price mr keks define value a shelf sum book price miraculously mr keks promote move a new office learn new office a single bookshelf exactly $$$ k $$$ bookshelves decide beauty $$$ k $$$ shelve bitwise value shelve also decide wo n't spend time reorder book place several first book first shelf several next book next shelf course place least one book shelf way put book $$$ k $$$ shelve a way beauty shelve large possible compute maximum possible beauty first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq k \leq n \leq 50 $$$ ) — number book number shelve new office second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 < a_i < 2^ { 50 } $$$ ) — price book order stand old shelf print maximum possible beauty $$$ k $$$ shelve new office first example split book follow : $$$ $$$ ( 9 + 14 + 28 + 1 + 7 ) \ & ( 13 + 15 ) \ & ( 29 + 2 ) \ & ( 31 ) = 24 $$$ $$$ second example split book follow : $$$ $$$ ( 3 + 14 + 15 + 92 ) \ & ( 65 ) \ & ( 35 + 89 ) = 64 $$$ $$$,"['dp', 'greedy']",1900.0
453/B,princess twilight go celestia <unknown> 's old castle research chest elements harmony a sequence positive integers bi harmony every two elements sequence greatest common divisor equal 1 . accord ancient book key chest a harmony sequence bi minimize follow expression : give sequence ai help princess twilight find key first line contain integer n ( 1 ≤ n ≤ 100 ) — number elements sequence a b. next line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 30 ) output key — sequence bi minimize sum describe multiple optimal sequence output,"['brute force', 'dp']",2000.0
385/D,"one day a bear live oxy axis afraid dark could n't move night along plane point n't light one day bear want a night walk house point ( l 0 ) friend 's house point ( r 0 ) along segment length ( r - l ) course want make walk need point segment light 's bear call friend ( yes middle night ) ask a <unknown> favor oxy axis contain n floodlight floodlight i point ( xi yi ) light angle plane large ai degree vertex point ( xi yi ) bear ask friend turn floodlight ( bear ) could go far away house possible walk along segment kind friend agree fulfill request , bear wonder : furthest go away house ? <unknown> find distance consider plane obstacles light source besides floodlight bear 's friend turn floodlight bear 's walk assume floodlight turn correct direction bear go a walk friend go bed first line contain three space - separated integers n l r ( 1 ≤ n ≤ 20 ; - 105 ≤ l ≤ r ≤ 105 ) i - th next n line contain three space - separated integers xi yi ai ( - 1000 ≤ xi ≤ 1000 ; 1 ≤ yi ≤ 1000 ; 1 ≤ ai ≤ 90 ) — floodlight ' description note two floodlight point plane print a single real number — answer problem answer consider correct relative absolute error n't exceed 10 - 6 . first sample one possible solutions : second sample a single solution : third sample a single solution :","['dp', 'geometry']",2200.0
379/D,many countries a new year christmas tradition write a letter santa include a wish list present vasya ordinary programmer boy like ordinary boys go write letter santa new year eve ( russians actually expect santa new year christmas ) vasya come algorithm follow write a letter first choose two string s1 <unknown> s2 consist uppercase english letter boy make string sk use a recurrent equation sn = sn - 2 + sn - 1 operation ' + ' mean a concatenation ( sequential record ) string give order vasya write string sk a piece paper put envelope send santa vasya absolutely sure santa bring best present result string sk exactly x occurrences substring ac ( short - cut remind оf accept problems ) besides vasya decide string s1 length n string s2 length m. vasya n't decide anything else moment vasya 's get urgent new year business ask choose two string s1 s2 require manner help vasya first line contain four integers k x n m ( 3 ≤ k ≤ 50 ; 0 ≤ x ≤ 109 ; 1 ≤ n m ≤ 100 ) first line print string s1 consist n uppercase english letter second line print string s2 consist m uppercase english letter multiple valid string print require pair string n't exist print ` ` happy new year ! '' without quote,"['brute force', 'dp']",2000.0
367/D,"sereja m non - empty set integers a1 a2 ... , a lucky coincidence ! give set a partition set integers 1 n. word integer v ( 1 ≤ v ≤ n ) exactly one set also sereja integer d. sereja decide choose set set let 's suppose i1 i2 ... ik ( 1 ≤ i1 < i2 < ... < ik ≤ m ) index choose set let 's define array integers b sort ascend order a union choose set , 'll represent element number j array ( ascend order ) bj sereja consider choice set correct follow condition meet : sereja want know minimum number set ( k ) choose choice correct help first line contain integers n m d ( 1 ≤ d ≤ n ≤ 105 1 ≤ m ≤ 20 ) next m line contain set first number i - th line si ( 1 ≤ si ≤ n ) number denote size i - th set line contain si distinct integers 1 n — set ai guarantee set form partition integers 1 n. a single line print answer problem — minimum value k right choice",['dfs and similar'],2400.0
333/E,many schoolchildren look a job summer one day gerald still a schoolboy also decide work summer gerald quite unusual schoolboy find quite unusual work a certain company agree pay a certain sum money draw three identical circle a plane circle must interfere ( may touch ) choose center circle n options grant company free choose radius circle ( three <unknown> must equal ) please note larger radius get pay help gerald earn much possible first line contain a single integer n — number center ( 3 ≤ n ≤ 3000 ) follow n line contain two integers xi yi ( - 104 ≤ xi yi ≤ 104 ) — coordinate potential circle center provide company give point distinct print a single real number — maximum possible radius circle answer accept relative absolute error n't exceed 10 - 6,"['brute force', 'geometry']",2500.0
201/D,"a widely know among people belarusian sport programmer lesha decide make money buy a one square meter larger flat , want make carry a super rat match ( srm ) site torcoder.com 's a problem — a severe torcoder coordinator ivan accept lesha 's problem call offensive word ` ` dupe '' ( duplicate ) one day nearely quarrel yet another problem ivan would n't accept invite act a fair judge determine whether problem indeed brand new ivan right problem bear resemblance use previous srms give descriptions lesha 's problem torcoder.com archive problems description problem a sequence word besides guarantee lesha 's problem repeat word description archive problem may contain number repeat word ` ` similarity '' lesha 's problem archive problem find follow among permutations word lesha 's problem choose one occur archive problem a subsequence multiple permutations choose one smallest number inversions ` ` similarity '' a problem write n number word lesha 's problem x number inversions choose permutation note ` ` similarity '' p always a positive integer problem call brand new a single problem ivan 's archive contain a permutation word lesha 's problem a subsequence help boys determine whether propose problem new specify problem archive resemble lesha 's problem otherwise first line contain a single integer n ( 1 ≤ n ≤ 15 ) — number word lesha 's problem second line contain n space - separated word — short description problem third line contain a single integer m ( 1 ≤ m ≤ 10 ) — number problems torcoder.com archive next m line contain descriptions problems ` ` k s1 s2 ... sk '' k ( 1 ≤ k ≤ 500000 ) number word problem si a word problem description word problem descriptions contain 10 lowercase english letter guarantee total length word problem descriptions exceed <unknown> . lesha 's problem brand new print string ` ` brand new problem ! '' ( without quote ) otherwise first line print index archive problem resemble lesha 's problem multiple problems print one smallest index second line print a string consist character [ : character | repeat p time character : ] p ` ` similarity '' problem lesha 's one archive problems number start one order give input let us remind number inversions number pair word follow permutation original order thus example original problem ` ` add two number '' permutation ` ` number add two '' contain two inversions — pair word ` ` number '' ` ` add '' ` ` number '' ` ` two '' sequence b1 b2 ... bk a subsequence sequence a1 a2 ... exist a set indices 1 ≤ i1 < i2 < ... < ik ≤ n aij = bj ( word sequence b obtain a delete elements ) first test case first problem contain ` ` find palindrome next '' permutation a subsequence number inversions equal 1 ( word ` ` palindrome '' ` ` next '' ) second test case problem contain a permutation word lesha 's problem a subsequence","['brute force', 'dp']",2600.0
165/E,"two integers x y compatible result bitwise ` ` '' equal zero , a & b = 0 . example number 90 ( 10110102 ) 36 ( 1001002 ) compatible 10110102 & 1001002 = 02 number 3 ( 112 ) 6 ( 1102 ) compatible 112 & 1102 = 102 . give array integers a1 a2 ... , task find follow array element : element compatible element give array ? answer question positive also find suitable element first line contain integer n ( 1 ≤ n ≤ 106 ) — number elements give array second line contain n space - separated integers a1 a2 ... ( 1 ≤ ai ≤ <unknown> ) — elements give array number array coincide print n integers ansi ai n't compatible element give array a1 a2 ... , ansi equal -1 . otherwise ansi number ai & ansi = 0 also ansi occur array a1 a2 ... ,","['brute force', 'dfs and similar', 'dp']",2200.0
1810/E,"undirected graph $$$ n $$$ vertices $$$ m $$$ edge initially vertex $$$ i $$$ a monster danger $$$ a _ { i } $$$ vertex a monster danger $$$ a _ { i } $$$ defeat defeat least $$$ a _ { i } $$$ monsters want defeat monsters first choose vertex $$$ s $$$ defeat monster vertex ( since n't defeat monsters $$$ a _ { s } $$$ $$$ 0 $$$ ) , move edge want move vertex $$$ u $$$ vertex $$$ v $$$ follow must hold : either monster vertex $$$ v $$$ defeat defeat second case defeat monster vertex $$$ v $$$ reach vertex $$$ v $$$ pass vertices edge number time determine whether defeat monsters test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 200000 $$$ ) — number vertices edge graph respectively second line test case contain $$$ n $$$ integers $$$ a _ { 1 } a _ { 2 } \ldots a _ { n } $$$ ( $$$ 0 \le a _ { i } \le n $$$ ) — dangers monsters correspond vertices follow $$$ m $$$ line line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ ) describe edge connect vertex $$$ u $$$ vertex $$$ v $$$ guarantee multi - edges self - loops graph guarantee sum $$$ n $$$ sum $$$ m $$$ test case exceed $$$ 200000 $$$ test case output ` ` yes '' defeat monsters ` ` '' otherwise output answer case ( upper lower ) example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize positive responses first test case start vertex $$$ 3 $$$ defeat monster go vertices $$$ 2 $$$ $$$ 1 $$$ order defeat monsters well return vertex $$$ 3 $$$ go vertex $$$ 4 $$$ defeat monster third test case path vertex $$$ 4 $$$ start vertex $$$ 1 $$$ also path vertices $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ start vertex $$$ 4 $$$","['brute force', 'data structures', 'dfs and similar', 'greedy']",2100.0
1806/E,give a tree $$$ n $$$ weight vertices label $$$ 1 $$$ $$$ n $$$ root vertex $$$ 1 $$$ parent vertex $$$ i $$$ $$$ p_i $$$ weight vertex $$$ i $$$ $$$ a_i $$$ convenience define $$$ <unknown> $$$ two vertices $$$ x $$$ $$$ y $$$ depth $$$ ^\dagger $$$ define $$$ f ( x y ) $$$ follow : process $$$ q $$$ query $$$ i $$$ -th query give two integers $$$ x_i $$$ $$$ y_i $$$ need calculate $$$ f ( x_i y_i ) $$$ $$$ ^\dagger $$$ depth vertex $$$ v $$$ number edge unique simple path root tree vertex $$$ v $$$ first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 2 \le n \le 100000 $$$ ; $$$ 1 \le q \le 100000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 100000 $$$ ) third line contain $$$ n-1 $$$ integers $$$ p_2 \ldots p_n $$$ ( $$$ 1 \le p_i < i $$$ ) next $$$ q $$$ line contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1\le x_i y_i\le n $$$ ) guarantee $$$ x_i $$$ $$$ y_i $$$ depth output $$$ q $$$ line $$$ i $$$ -th line contain a single integer value $$$ f ( x_i y_i ) $$$ consider first example : first query answer $$$ <unknown> <unknown> <unknown> a_2+a_1\cdot a_1=3 + 4 + 25 + <unknown> $$$ second query answer $$$ <unknown> <unknown> a_2+a_1\cdot <unknown> + 25 + <unknown> $$$,"['brute force', 'data structures', 'dfs and similar']",2200.0
1796/E,monocarp a tree consist $$$ n $$$ vertices go select vertex $$$ r $$$ perform follow operations vertex $$$ v $$$ $$$ 1 $$$ $$$ n $$$ : a nice color satisfy two condition : note monocarp choose amount different color want use use color count number vertices color cost tree minimum number maximum cost tree ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 200000 $$$ ) — number vertices tree next $$$ n-1 $$$ line contain two integers $$$ v $$$ $$$ u $$$ ( $$$ 1 \le v u \le n $$$ ) — description edge give edge form a tree sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print a single integer — maximum possible cost tree,"['dfs and similar', 'dp', 'greedy']",2500.0
1774/E,"<unknown> a tree $$$ n $$$ nod will share mean operate initially two chess piece node $$$ 1 $$$ tree one step choose piece move neighbor node also give integer $$$ d $$$ need ensure distance two piece n't ever exceed $$$ d $$$ two piece a sequence nod need pass order eventually return root a curious boy want know minimum step need take first line contain two integers $$$ n $$$ $$$ d $$$ ( $$$ 2 \le d \le n \le 2\cdot 100000 $$$ ) $$$ i $$$ -th follow $$$ n - 1 $$$ line contain two integers $$$ u_i v_i $$$ $$$ ( 1 \le u_i v_i \le n ) $$$ denote edge nod $$$ u_i v_i $$$ tree 's guarantee edge form a tree next line contain integer $$$ m_1 $$$ ( $$$ 1 \le m_1 \le n $$$ ) $$$ m_1 $$$ integers $$$ a_1 a_2 \ldots a _ { m_1 } $$$ ( $$$ 1 \le a_i \le n $$$ $$$ a_i $$$ distinct ) — sequence nod first piece need pass second line contain integer $$$ m_2 $$$ ( $$$ 1 \le m_2 \le n $$$ ) $$$ m_2 $$$ integers $$$ b_1 b_2 \ldots b _ { m_2 } $$$ ( $$$ 1 \le b_i \le n $$$ $$$ b_i $$$ distinct ) — sequence nod second piece need pass output a single integer — minimum step need take first sample one possible sequence step length $$$ 6 $$$ second piece move route $$$ 1 \to 2 \to 4 \to 2 \to 1 $$$ , first piece move route $$$ 1 \to 3 \to 1 $$$ second sample one possible sequence step length $$$ 8 $$$ : first piece move route $$$ 1 \to 2 \to 3 $$$ , second piece move route $$$ 1 \to 2 $$$ , first piece move route $$$ 3 \to 4 \to 3 \to 2 \to 1 $$$ , second piece move route $$$ 2 \to 1 $$$","['dfs and similar', 'dp', 'greedy']",1900.0
1763/F,give undirected connect graph $$$ n $$$ nod $$$ m $$$ edge nod $$$ u $$$ graph satisfy follow : need answer $$$ q $$$ query query give node $$$ a $$$ node $$$ b $$$ edge belong simple path $$$ a $$$ $$$ b $$$ count number edge remove edge $$$ a $$$ $$$ b $$$ reachable first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n \le 200000 $$$ $$$ 1 \le m \le \min $$$ ( $$$ 200000 $$$ $$$ ( n \cdot ( n-1 ) ) /2 $$$ ) ) — total number nod edge graph respectively next $$$ m $$$ line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le $$$ $$$ u $$$ $$$ v $$$ $$$ \le n $$$ $$$ u \neq v $$$ ) — describe edge imply nod $$$ u $$$ $$$ v $$$ connect guarantee one edge pair vertices graph give graph connect next line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 200000 $$$ ) — number query $$$ q $$$ line follow represent a query query contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \le $$$ $$$ a $$$ $$$ b $$$ $$$ \le n $$$ ) query output a single integer — answer query graph first sample : first query $$$ ( 1 4 ) $$$ $$$ 5 $$$ total edge belong simple path $$$ 1 $$$ $$$ 4 $$$ edge $$$ ( 3 4 ) ( 4 5 ) ( 5 3 ) $$$ count answer query fourth query $$$ ( 2 8 ) $$$ one simple path $$$ 2 $$$ $$$ 8 $$$ thus none edge count answer query fifth query $$$ ( 7 10 ) $$$ $$$ 4 $$$ total edge belong simple path $$$ 7 $$$ $$$ 10 $$$ count answer query,"['data structures', 'dfs and similar', 'dp']",3000.0
1753/D,"andrew love sea 's height summer season decide go beach take a sunbed <unknown> beach a rectangular field $$$ n $$$ row $$$ m $$$ columns cells beach free roads stone shop non - movable object two adjacent along side cells <unknown> locate either horizontally vertically andrew hop put sunbed somewhere 's a bad luck may longer free place ! 's andrew ask help find a free place sunbed andrew 's sunbed also place two adjacent cells two adjacent free cells order free place a sunbed disturb tourists follow action : moment sunbed occupy two adjacent free cells move one sunbed a time help andrew free a space sunbed cause minimum possible number units discomfort tourists detect impossible first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 300\,000 $$$ $$$ 1 \le n \cdot m \le 300\,000 $$$ ) — number row columns rectangle second line contain two integers $$$ p $$$ $$$ q $$$ ( $$$ 1 \le p q \le 1000000000 $$$ ) — number units discomfort cause rotation shift a sunbed respectively follow $$$ n $$$ line contain $$$ m $$$ character describe cells rectangle line consist character ` ` l '' ` ` r '' ` ` d '' ` ` u '' ` ` . '' ` ` # '' denote type cell character ` ` l '' ` ` r '' ` ` d '' ` ` u '' denote a half a sunbed place cell — leave right bottom top half respectively character ` ` . '' denote a free cell character ` ` # '' — a cell occupy non - movable object print one integer — minimum possible number units discomfort cause tourists free a space a sunbed impossible free a space a sunbed print $$$ -1 $$$ first example shift upper sunbed leave lower sunbed — right andrew able put sunbed vertically middle beach well cause $$$ 2 + 2 = 4 $$$ units discomfort easy prove optimal answer","['constructive algorithms', 'dfs and similar']",2400.0
1749/E,monocarp play minecraft want build a wall cacti want build a field sand size $$$ n \times m $$$ cells initially cacti cells field note minecraft cacti grow cells adjacent side — initial field meet restriction monocarp plant new cacti ( must also fulfil aforementioned condition ) ca n't chop cacti already grow field — n't axe cacti <unknown> hand monocarp believe wall complete path top row field bottom row : task plant minimum number cacti build a wall ( report impossible ) first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n m \le 200000 $$$ ; $$$ n \times m \le 400000 $$$ ) — number row columns respectively $$$ n $$$ row follow $$$ i $$$ -th row contain a string $$$ s_i $$$ length $$$ m $$$ $$$ s _ { i j } $$$ ' # ' a cactus grow intersection $$$ i $$$ -th row $$$ j $$$ -th column otherwise $$$ s _ { i j } $$$ ' . ' sum $$$ n \times m $$$ test case exceed $$$ 400000 $$$ test case print first line impossible build a cactus wall without break rule otherwise print yes first line print $$$ n $$$ line $$$ m $$$ character — field $$$ j $$$ -th character $$$ i $$$ -th line equal ' # ' a cactus intersection $$$ i $$$ -th row $$$ j $$$ -th column otherwise ' . ' multiple optimal answer print,"['constructive algorithms', 'dfs and similar']",2400.0
1746/D,give a root tree consist $$$ n $$$ vertices vertices number $$$ 1 $$$ $$$ n $$$ root vertex $$$ 1 $$$ also give a score array $$$ s_1 s_2 \ldots s_n $$$ a multiset $$$ k $$$ simple paths call valid follow two condition true show always possible find least one valid multiset find maximum value among valid multisets test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case description test case follow first line test case contain two space - separated integers $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) $$$ k $$$ ( $$$ 1 \le k \le 1000000000 $$$ ) — size tree require number paths second line contain $$$ n - 1 $$$ space - separated integers $$$ p_2 p_3 \ldots p_n $$$ ( $$$ 1\le p_i\le n $$$ ) $$$ p_i $$$ parent $$$ i $$$ -th vertex guarantee value describe a valid tree root $$$ 1 $$$ third line contain $$$ n $$$ space - separated integers $$$ s_1 s_2 \ldots s_n $$$ ( $$$ 0 \le s_i \le 10000 $$$ ) — score vertices guarantee sum $$$ n $$$ test case exceed $$$ 20 ^ 5 $$$ test case print a single integer — maximum value a path multiset first test case one optimal solutions four paths $$$ 1 \to 2 \to 3 \to 5 $$$ $$$ 1 \to 2 \to 3 \to 5 $$$ $$$ 1 \to 4 $$$ $$$ 1 \to 4 $$$ $$$ c= [ <unknown> ] $$$ value equal $$$ 4\cdot 6 + 2\cdot 2 + 2\cdot 1 + 2\cdot 5 + 2\cdot 7=54 $$$ second test case one optimal solution three paths $$$ 1 \to 2 \to 3 \to 5 $$$ $$$ 1 \to 2 \to 3 \to 5 $$$ $$$ 1 \to 4 $$$ $$$ c= [ <unknown> ] $$$ value equal $$$ 3\cdot 6 + 2\cdot 6 + 2\cdot 1 + 1\cdot 4 + 2\cdot <unknown> $$$,"['dfs and similar', 'dp', 'greedy']",1900.0
1726/D,give a connect undirected unweighted graph $$$ n $$$ vertices $$$ m $$$ edge notice limit number edge : $$$ m \le n + 2 $$$ let 's say color edge red remain edge blue consider red edge count number connect components graph let value $$$ c_1 $$$ similarly consider blue edge count number connect components graph let value $$$ c_2 $$$ find assignment color edge quantity $$$ <unknown> $$$ minimise test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n \le 200000 $$$ ; $$$ n-1 \leq m \leq \min { \left ( n+2 \frac { n \cdot ( n-1 ) } { 2 } \right ) } $$$ ) — number vertices number edge respectively $$$ m $$$ line follow $$$ i $$$ -th line contain two integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1 \le u_i v_i \le n $$$ $$$ u_i \ne v_i $$$ ) denote $$$ i $$$ -th edge go vertices $$$ u_i $$$ $$$ v_i $$$ input guarantee multiple edge self loop graph also guarantee connect guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ guarantee sum $$$ m $$$ test case exceed $$$ 2000000 $$$ test case output a binary string length $$$ m $$$ $$$ i $$$ -th character string 1 $$$ i $$$ -th edge color red 0 color blue multiple ways assign color edge give minimum answer may output $$$ c_1 + c_2 = 1 + 2 = 3 $$$ $$$ c_1 + c_2 = 2 + 2 = 4 $$$,"['brute force', 'constructive algorithms', 'dfs and similar']",2000.0
1712/F,a tree a connect undirected graph without cycle a weight tree a weight assign edge degree a vertex number edge connect vertex give a weight tree $$$ n $$$ vertices edge a weight $$$ 1 $$$ let $$$ l $$$ set vertices degree equal $$$ 1 $$$ answer $$$ q $$$ independent query $$$ i $$$ -th query : diameter a graph equal $$$ \max\limits _ { 1 \le u < v \le n } { \operatorname { d } ( u v ) } $$$ $$$ \operatorname { d } ( u v ) $$$ length shortest path vertex $$$ u $$$ vertex $$$ v $$$ first line contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 1000000 $$$ ) second line contain $$$ n - 1 $$$ integers $$$ p_2 p_3 \ldots p_n $$$ ( $$$ 1 \le p_i < i $$$ ) indicate edge vertices $$$ i $$$ $$$ p_i $$$ guarantee give edge form a tree third line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 10 $$$ ) fourth line contain $$$ q $$$ integers $$$ x_1 x_2 \ldots x_q $$$ ( $$$ 1 \le x_i \le n $$$ ) $$$ x_i $$$ distinct print $$$ q $$$ integers a single line — answer query graph first test add edge :,"['data structures', 'dfs and similar']",3200.0
1702/G2,a hard version problem difference easy a hard version number query polycarp grow a tree $$$ n $$$ vertices remind a tree $$$ n $$$ vertices undirected connect graph $$$ n $$$ vertices $$$ n-1 $$$ edge contain cycle call a set vertices passable a path tree pass vertex set without pass edge twice path visit vertices ( set ) word a set vertices call passable a simple path pass vertices set ( possibly ) example a tree set $$$ \ { 3 2 5\ } $$$ $$$ \ { 1 5 4\ } $$$ $$$ \ { 1 4\ } $$$ passable $$$ \ { 1 3 5\ } $$$ $$$ \ { 1 2 3 4 5\ } $$$ polycarp ask answer $$$ q $$$ query query a set vertices query need determine whether correspond set vertices passable first line input contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number vertices follow $$$ n - 1 $$$ line a description tree .. line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ $$$ u \ne v $$$ ) — indices vertices connect edge follow line contain single integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) — number query follow $$$ 2 \cdot q $$$ line contain descriptions set first line description contain integer $$$ k $$$ ( $$$ 1 \le k \le n $$$ ) — size set second line description contain $$$ k $$$ distinct integers $$$ p_1 p_2 \dots p_k $$$ ( $$$ 1 \le p_i \le n $$$ ) — indices vertices set guarantee sum $$$ k $$$ value query exceed $$$ 200000 $$$ output $$$ q $$$ line contain answer correspond query answer output ` ` yes '' set passable ` ` '' otherwise output answer case ( example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive answer ),"['data structures', 'dfs and similar']",2000.0
1695/D2,"difference problem d1 bind size tree give unrooted tree $$$ n $$$ vertices hide vertex $$$ x $$$ tree try find , may ask $$$ k $$$ query $$$ v_1 v_2 \ldots v_k $$$ $$$ v_i $$$ vertices tree finish ask query give $$$ k $$$ number $$$ d_1 d_2 \ldots d_k $$$ $$$ d_i $$$ number edge shortest path $$$ v_i $$$ $$$ x $$$ note know distance correspond query minimum $$$ k $$$ exist query $$$ v_1 v_2 \ldots v_k $$$ let always uniquely identify $$$ x $$$ ( matter $$$ x $$$ ) note n't actually need output query test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 2\cdot100000 $$$ ) — number vertices tree next $$$ n-1 $$$ line contain two integers $$$ x $$$ $$$ y $$$ ( $$$ 1 \le x y \le n $$$ ) mean edge vertices $$$ x $$$ $$$ y $$$ tree guarantee give edge form a tree guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case print a single nonnegative integer minimum number query need line first test case one vertex n't need query second test case ask a single query node $$$ 1 $$$ , $$$ x = 1 $$$ get $$$ 0 $$$ otherwise get $$$ 1 $$$","['constructive algorithms', 'dfs and similar', 'dp', 'greedy']",2300.0
1681/F,give a tree consist $$$ n $$$ vertices edge integer value write let $$$ f ( v u ) $$$ number value appear exactly edge a simple path vertices $$$ v $$$ $$$ u $$$ calculate sum $$$ f ( v u ) $$$ pair vertices $$$ v $$$ $$$ u $$$ $$$ 1 \le v < u \le n $$$ first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 500000 $$$ ) — number vertices tree next $$$ n-1 $$$ line contain three integers $$$ v u $$$ $$$ x $$$ ( $$$ 1 \le v u x \le n $$$ ) — description edge : vertices connect value write give edge form a tree print a single integer — sum $$$ f ( v u ) $$$ pair vertices $$$ v $$$ $$$ u $$$ $$$ v < u $$$,"['data structures', 'dfs and similar', 'dp']",2300.0
1680/F,give a simple connect undirected graph consist $$$ n $$$ vertices $$$ m $$$ edge vertices number $$$ 1 $$$ $$$ n $$$ a vertex cover a graph a set vertices edge least one endpoints set let 's call a lenient vertex cover a vertex cover one edge endpoints set find a lenient vertex cover a graph report none multiple answer print first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n \le 1000000 $$$ ; $$$ n - 1 \le m \le \min ( 1000000 \frac { n \cdot ( n - 1 ) } { 2 } ) $$$ ) — number vertices number edge graph next $$$ m $$$ line contain two integers $$$ v $$$ $$$ u $$$ ( $$$ 1 \le v u \le n $$$ ; $$$ v \neq u $$$ ) — descriptions edge testcase graph connect n't multiple edge sum $$$ n $$$ testcases n't exceed $$$ 1000000 $$$ sum $$$ m $$$ testcases n't exceed $$$ 1000000 $$$ testcase first line contain yes a lenient vertex cover exist otherwise exist second line contain a binary string $$$ s $$$ length $$$ n $$$ $$$ s_i = 1 $$$ mean vertex $$$ i $$$ vertex cover $$$ s_i = 0 $$$ mean vertex $$$ i $$$ n't multiple answer print graph first example vertices lenient vertex cover mark red,['dfs and similar'],2600.0
1677/C,tokitsukaze two colorful tap $$$ n $$$ distinct color number $$$ 1 $$$ $$$ n $$$ color appear exactly two tap denote color $$$ i $$$ -th position first tape $$$ ca_i $$$ color $$$ i $$$ -th position second tape $$$ cb_i $$$ tokitsukaze want select color integer value $$$ 1 $$$ $$$ n $$$ distinct color put color value color position tap denote number $$$ i $$$ -th position first tape $$$ <unknown> $$$ number $$$ i $$$ -th position second tape $$$ <unknown> $$$ example picture assume color red value $$$ x $$$ ( $$$ 1 \leq x \leq n $$$ ) appear $$$ 1 $$$ -st position first tape $$$ 3 $$$ -rd position second tape $$$ <unknown> = <unknown> = x $$$ note color $$$ i $$$ $$$ 1 $$$ $$$ n $$$ a distinct value color appear tap value label color beauty two tap calculate $$$ $$$ \sum _ { i=1 } ^ { n } <unknown> - <unknown> $$$ $$$ please help tokitsukaze find highest possible beauty first contain a single positive integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case test case first line contain a single integer $$$ n $$$ ( $$$ 1\leq n \leq 100000 $$$ ) — number color second line contain $$$ n $$$ integers $$$ <unknown> <unknown> \ldots <unknown> $$$ ( $$$ 1 \leq ca_i \leq n $$$ ) — color position first tape guarantee $$$ ca $$$ a permutation third line contain $$$ n $$$ integers $$$ <unknown> <unknown> \ldots <unknown> $$$ ( $$$ 1 \leq cb_i \leq n $$$ ) — color position second tape guarantee $$$ cb $$$ a permutation guarantee sum $$$ n $$$ test case exceed $$$ 2 \cdot 10^ { 5 } $$$ test case print a single integer — highest possible beauty optimal solution first test case show follow figure : beauty $$$ <unknown> - 3 \right|+\left|3 - 5 <unknown> - 4 \right|+\left|5 - 2 \right|+\left|1 - 6 \right|+\left|6 - 1 <unknown> $$$ optimal solution second test case show follow figure : beauty $$$ <unknown> - 2 \right|+\left|1 - 6 \right|+\left|3 - 3 \right|+\left|6 - 1 <unknown> - 4 \right|+\left|5 - 5 <unknown> $$$,"['constructive algorithms', 'dfs and similar', 'greedy']",1900.0
1676/G,give a root tree consist $$$ n $$$ vertices number $$$ 1 $$$ $$$ n $$$ root vertex $$$ 1 $$$ also a string $$$ s $$$ denote color vertex : $$$ s_i = \texttt { b } $$$ vertex $$$ i $$$ black $$$ s_i = \texttt { w } $$$ vertex $$$ i $$$ white a subtree tree call balance number white vertices equal number black vertices count number balance subtrees a tree a connect undirected graph without cycle a root tree a tree a select vertex call root problem tree root $$$ 1 $$$ tree specify array parent $$$ a_2 \dots a_n $$$ contain $$$ n-1 $$$ number : $$$ a_i $$$ parent vertex number $$$ i $$$ $$$ i = 2 \dots n $$$ parent a vertex $$$ u $$$ a vertex next vertex a simple path $$$ u $$$ root subtree a vertex $$$ u $$$ set vertices pass $$$ u $$$ a simple path root example picture $$$ 7 $$$ subtree $$$ 3 $$$ simple path $$$ 7 \to 5 \to 3 \to 1 $$$ pass $$$ 3 $$$ note a vertex include subtree subtree root entire tree first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain integer $$$ n $$$ ( $$$ 2 \le n \le 4000 $$$ ) — number vertices tree second line test case contain $$$ n-1 $$$ integers $$$ a_2 \dots a_n $$$ ( $$$ 1 \le a_i < i $$$ ) — parent vertices $$$ 2 \dots n $$$ third line test case contain a string $$$ s $$$ length $$$ n $$$ consist character $$$ \texttt { b } $$$ $$$ \texttt { w } $$$ — color tree guarantee sum value $$$ n $$$ test case exceed $$$ 200000 $$$ test case output a single integer — number balance subtrees first test case picture statement subtrees vertices $$$ 2 $$$ $$$ 3 $$$ balance second test case subtree vertex $$$ 1 $$$ balance third test case subtrees vertices $$$ 1 $$$ $$$ 3 $$$ $$$ 5 $$$ $$$ 7 $$$ balance,"['dfs and similar', 'dp']",1300.0
1675/F,"vlad nastya live a city consist $$$ n $$$ house $$$ n-1 $$$ road house get move along roads , city a tree vlad live a house index $$$ x $$$ nastya live a house index $$$ y $$$ vlad decide visit nastya however remember postpone later $$$ k $$$ things come nastya $$$ i $$$ -th thing need come $$$ a_i $$$ -th house things do order $$$ 1 $$$ minute walk one house another connect a road vlad really like walk interest minimum number minutes spend road things come nastya house $$$ a_1 a_2 \dots a_k $$$ visit order visit house multiple time ( want ) first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number input test case empty line test case first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 2\cdot 100000 $$$ ) — number house things respectively second line test case contain two integers $$$ x $$$ $$$ y $$$ ( $$$ 1 \le x y \le n $$$ ) — indices house vlad nastya live respectively third line test case contain $$$ k $$$ integers $$$ a_1 a_2 \dots a_k $$$ ( $$$ 1 \le a_i \le n $$$ ) — indices house vlad need come things follow $$$ n-1 $$$ line contain description city line contain two integers $$$ v_j $$$ $$$ u_j $$$ ( $$$ 1 \le u_j v_j \le n $$$ ) — indices house connect road $$$ j $$$ guarantee sum $$$ n $$$ case exceed $$$ 2\cdot100000 $$$ output $$$ t $$$ line contain answer correspond test case input answer output single integer — minimum number minutes vlad need road things come nastya tree best path first test case : tree best path second test case : tree best path third test case :","['dfs and similar', 'dp', 'greedy']",1800.0
1674/G,give a direct acyclic graph consist $$$ n $$$ vertices $$$ m $$$ edge vertices number $$$ 1 $$$ $$$ n $$$ multiple edge self - loops let $$$ \mathit { } _ v $$$ number incoming edge ( <unknown> ) $$$ \mathit { } _ v $$$ number outgo edge ( <unknown> ) vertex $$$ v $$$ ask remove edge graph let new degrees $$$ \mathit { ' } _ v $$$ $$$ \mathit { ' } _ v $$$ allow remove edge follow condition hold every vertex $$$ v $$$ : let 's call a set vertices $$$ s $$$ cute pair vertices $$$ v $$$ $$$ u $$$ ( $$$ v \neq u $$$ ) $$$ v \in s $$$ $$$ u \in s $$$ exist a path either $$$ v $$$ $$$ u $$$ $$$ u $$$ $$$ v $$$ non - removed edge maximum possible size a cute set $$$ s $$$ remove edge graph indegrees outdegrees vertices either decrease remain equal $$$ 0 $$$ ? first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 0 \le m \le 200000 $$$ ) — number vertices number edge graph next $$$ m $$$ line contain two integers $$$ v $$$ $$$ u $$$ ( $$$ 1 \le v u \le n $$$ ; $$$ v \neq u $$$ ) — description edge give edge form a valid direct acyclic graph multiple edge print a single integer — maximum possible size a cute set $$$ s $$$ remove edge graph indegrees outdegrees vertices either decrease remain equal $$$ 0 $$$ first example remove edge $$$ ( 1 2 ) $$$ $$$ ( 2 3 ) $$$ $$$ \mathit { } = [ 0 1 2 ] $$$ $$$ \mathit { } = [ 2 1 0 ] $$$ $$$ \mathit { ' } = [ 0 0 1 ] $$$ $$$ \mathit { ' } = [ 1 0 0 ] $$$ see $$$ v $$$ condition hold maximum cute set $$$ s $$$ form vertices $$$ 1 $$$ $$$ 3 $$$ still connect directly edge a path second example edge since $$$ \mathit { } _ v $$$ $$$ \mathit { } _ v $$$ equal $$$ 0 $$$ leave a graph zero edge allow $$$ 5 $$$ cute set contain a single vertex thus maximum size $$$ 1 $$$ third example remove edge $$$ ( 7 1 ) $$$ $$$ ( 2 4 ) $$$ $$$ ( 1 3 ) $$$ $$$ ( 6 2 ) $$$ maximum cute set $$$ s = \ { 7 3 2\ } $$$ remove edge $$$ ( 7 3 ) $$$ well answer wo n't change picture graph third example :,"['dfs and similar', 'dp']",2000.0
1627/C,"give a tree $$$ n $$$ vertices number $$$ 1 $$$ $$$ n $$$ edge number $$$ 1 $$$ $$$ n-1 $$$ a tree a connect undirected graph without cycle assign integer weight edge tree resultant graph a prime tree a prime tree a tree weight every path consist one two edge prime a path visit vertex twice weight a path sum edge weight path consider graph a prime tree weight every path two less edge prime example follow path two edge : $$$ 2 \to 1 \to 3 $$$ a weight $$$ 11 + 2 = 13 $$$ prime similarly path one edge : $$$ 4 \to 3 $$$ a weight $$$ 5 $$$ also prime print valid assignment weight resultant tree a prime tree assignment print $$$ -1 $$$ prove a valid assignment exist one exist weight $$$ 1 $$$ $$$ 100000 $$$ well input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case description test case follow first line test case contain one integer $$$ n $$$ ( $$$ 2 \leq n \leq 100000 $$$ ) — number vertices tree , $$$ n-1 $$$ line follow $$$ i $$$ -th line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \leq u v \leq n $$$ ) denote edge number $$$ i $$$ vertices $$$ u $$$ $$$ v $$$ guarantee edge form a tree guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case a valid assignment exist print a single line contain $$$ n-1 $$$ integers $$$ a_1 a_2 \dots a _ { n-1 } $$$ ( $$$ 1 \leq a_i \le 100000 $$$ ) $$$ a_i $$$ denote weight assign edge number $$$ i $$$ otherwise print $$$ -1 $$$ multiple solutions may print first test case two paths one edge : $$$ 1 \to 2 $$$ $$$ 2 \to 1 $$$ a weight $$$ 17 $$$ prime second test case describe statement prove assignment exist third test case","['constructive algorithms', 'dfs and similar']",1400.0
1621/H,railway network one city consist $$$ n $$$ station connect $$$ n-1 $$$ roads station roads form a tree station $$$ 1 $$$ a city center road know time train spend pass road assume train n't spend time stop let 's define $$$ dist ( v ) $$$ time train spend get station $$$ v $$$ station $$$ 1 $$$ railway network splitted zone name first $$$ k $$$ capital latin letter zone $$$ i $$$ -th station $$$ z_i $$$ city center zone a. station guarantee first station road station city center either zone zone lexicographically smaller name road completely own zone distant end city center tourist arrive airport soon go city center 's trip station $$$ v $$$ station $$$ 1 $$$ <unknown> : tourist always select way buy ticket pay fin minimize total cost trip let $$$ f ( v ) $$$ cost station $$$ v $$$ unfortunately tourist n't know current value $$$ pass_i $$$ $$$ fine_i $$$ different zone forget location airport ask query $$$ 3 $$$ type : first line contain single integer $$$ n $$$ ( $$$ 2 \leq n \leq 200000 $$$ ) — number station next $$$ n - 1 $$$ line contain three integers $$$ v_i $$$ $$$ u_i $$$ $$$ t_i $$$ ( $$$ 1 \leq v_i u_i \leq n 1 \leq t_i \leq 1000000000 $$$ ) — end $$$ i $$$ -th road time take a train pass road guarantee roads form a tree next line contain single integer $$$ k $$$ ( $$$ 1 \leq k \leq 26 $$$ ) — number zone next line contain $$$ n $$$ symbols $$$ <unknown> \ldots <unknown> $$$ — $$$ z_i $$$ name zone $$$ i $$$ -th station guarantee condition second paragraph satisfy next line contain $$$ k $$$ integers $$$ <unknown> $$$ $$$ <unknown> $$$ $$$ \ldots $$$ $$$ <unknown> $$$ ( $$$ 1 \leq pass_i \leq 1000000000 $$$ ) — initial cost ticket next line contain $$$ k $$$ integers $$$ <unknown> $$$ $$$ <unknown> $$$ $$$ \ldots $$$ $$$ <unknown> $$$ ( $$$ 1 \leq fine_i \leq 1000000000 $$$ ) — initial fin next line contain single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000000000 $$$ ) — time gap scan control system next line contain single integer $$$ q $$$ ( $$$ 1 \leq q \leq 200000 $$$ ) — number query next $$$ q $$$ line contain query describe statement guarantee query first second type $$$ i $$$ a correct name zone ( one first $$$ k $$$ capital latin letter ) $$$ 1 \leq c \leq 1000000000 $$$ query third type $$$ 1 \leq u \leq n $$$ query third type print answer note fine cheaper pass first query airport locate near station $$$ 2 $$$ near station $$$ 4 $$$ trip tourist always stay zone a. already pass zone answer $$$ 0 $$$ second query cost pass zone a become $$$ 10 $$$ third query airport locate near station $$$ 3 $$$ optimal solution buy pass zone a. first $$$ 3 $$$ second trip tourist zone b. move zone a scan $$$ 4 $$$ -th $$$ 8 $$$ -th second ride since a pass zone wo n't pay fin forth query fine zone a become $$$ 3 $$$ fifth query airport locate near station $$$ 7 $$$ $$$ f ( 7 ) = 6 $$$ sixth query airport locate near station $$$ 6 $$$ near station $$$ 8 $$$ since $$$ f ( 6 ) = 9 $$$ $$$ f ( 8 ) = 6 $$$ answer $$$ 6 $$$,['dfs and similar'],3500.0
1611/E2,difference e1 question problem vlad build a maze $$$ n $$$ room $$$ n-1 $$$ bidirectional corridors room $$$ u $$$ room $$$ v $$$ reach a sequence corridors thus room system form undirected tree vlad invite $$$ k $$$ friends play a game vlad start game room $$$ 1 $$$ win reach a room $$$ 1 $$$ exactly one corridor lead friends place maze : friend number $$$ i $$$ room $$$ x_i $$$ two friends room ( $$$ x_i \neq x_j $$$ $$$ i \neq j $$$ ) friends win one meet vlad room corridor win one unit time participant game go one corridor participants move time participants may move room fit participants time friends know plan a maze intend win n't want waste much energy ask determine win minimum number friends must remain maze always catch vlad word need determine size minimum ( number elements ) subset friends catch vlad say a subset exist first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case input input contain empty string test case first line test case contain two number $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k < n \le 2\cdot 100000 $$$ ) — number room friends respectively next line test case contain $$$ k $$$ integers $$$ x_1 x_2 \dots x_k $$$ ( $$$ 2 \le x_i \le n $$$ ) — number room friends $$$ x_i $$$ different next $$$ n-1 $$$ line contain descriptions corridors two number per line $$$ v_j $$$ $$$ u_j $$$ ( $$$ 1 \le u_j v_j \le n $$$ ) — number room connect $$$ j $$$ corridor corridors bidirectional room go move along corridors guarantee sum value $$$ n $$$ test case test greater $$$ 2\cdot100000 $$$ print $$$ t $$$ line line contain answer correspond test case answer a test case $$$ -1 $$$ vlad win anyway a minimal number friends otherwise first set input even friends stay maze vlad still win therefore answer ` ` -1 '' second set input enough leave friends room $$$ 6 $$$ $$$ 7 $$$ vlad able win answer ` ` 2 '' third fourth set input vlad win friends stay maze therefore answer ` ` 1 '' ` ` 2 '',"['dfs and similar', 'dp', 'greedy']",1900.0
1594/D,theofanis start play new online game call ` ` among '' however always play cypriot players name : ` ` andreas '' ( common name <unknown> ) game theofanis play $$$ n $$$ players since name number $$$ 1 $$$ $$$ n $$$ players write $$$ m $$$ comment chat a comment structure ` ` $$$ i $$$ $$$ j $$$ $$$ c $$$ ` ` $$$ i $$$ $$$ j $$$ two distinct integers $$$ c $$$ a string ( $$$ 1 \le i j \le n $$$ ; $$$ i \neq j $$$ ; $$$ c $$$ either imposter crewmate ) comment mean player $$$ i $$$ say player $$$ j $$$ role $$$ c $$$ imposter always lie a crewmate always tell truth help theofanis find maximum possible number imposters among cypriot players determine comment contradict ( see note explanation ) note player exactly one role : either imposter crewmate first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 0 \le m \le 500000 $$$ ) — number players except theofanis number comment next $$$ m $$$ line contain a comment make players structure ` ` $$$ i $$$ $$$ j $$$ $$$ c $$$ ` ` $$$ i $$$ $$$ j $$$ two distinct integers $$$ c $$$ a string ( $$$ 1 \le i j \le n $$$ ; $$$ i \neq j $$$ ; $$$ c $$$ either imposter crewmate ) multiple comment pair $$$ ( i j ) $$$ guarantee sum $$$ n $$$ exceed $$$ 200000 $$$ sum $$$ m $$$ exceed $$$ 500000 $$$ test case print one integer — maximum possible number imposters comment contradict print $$$ -1 $$$ first test case imposters andreas $$$ 2 $$$ $$$ 3 $$$ second test case imposters andreas $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 5 $$$ third test case comment contradict player $$$ 1 $$$ say player $$$ 2 $$$ imposter player $$$ 2 $$$ say player $$$ 1 $$$ a crewmate player $$$ 1 $$$ a crewmate must tell truth player $$$ 2 $$$ must imposter player $$$ 2 $$$ imposter must lie player $$$ 1 $$$ ca n't a crewmate contradiction,"['constructive algorithms', 'dfs and similar', 'dp']",1700.0
1574/F,a subarray array $$$ a $$$ index $$$ l $$$ index $$$ r $$$ array $$$ [ a_l a _ { l+1 } \dots a _ { r } ] $$$ number occurrences array $$$ b $$$ array $$$ a $$$ number subarrays $$$ a $$$ equal $$$ b $$$ give $$$ n $$$ array $$$ a_1 a_2 \dots a_n $$$ ; elements array integers $$$ 1 $$$ $$$ k $$$ build array $$$ a $$$ consist $$$ m $$$ integers $$$ 1 $$$ $$$ k $$$ a way every give subarray $$$ a_i $$$ number occurrences $$$ a_i $$$ array $$$ a $$$ less number occurrences non - empty subarray $$$ a_i $$$ $$$ a $$$ note $$$ a_i $$$ n't occur $$$ a $$$ subarray $$$ a_i $$$ occur $$$ a $$$ condition still meet $$$ a_i $$$ task calculate number different array $$$ a $$$ build print modulo $$$ 998244353 $$$ first line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \le n m k \le 300000 $$$ ) — number give array desire length array $$$ a $$$ upper bind value array $$$ n $$$ line follow $$$ i $$$ -th line represent array $$$ a_i $$$ first integer $$$ i $$$ -th line $$$ c_i $$$ ( $$$ 1 \le c_i \le m $$$ ) — number elements $$$ a_i $$$ ; $$$ c_i $$$ integers $$$ 1 $$$ $$$ k $$$ follow — elements array $$$ a_i $$$ additional constraint input : $$$ \sum\limits _ { i=1 } ^n c_i \le 300000 $$$ ; i. e. number elements give array total exceed $$$ 300000 $$$ print one integer — number different array $$$ a $$$ build take modulo $$$ 998244353 $$$,"['dfs and similar', 'dp']",2700.0
1566/E,a tree a connect graph without cycle a root tree a special vertex call root parent a vertex $$$ v $$$ ( different root ) previous $$$ v $$$ vertex shortest path root vertex $$$ v $$$ children vertex $$$ v $$$ vertices $$$ v $$$ parent a vertex a leaf children call a vertex a bud follow three condition satisfy : give a root tree $$$ n $$$ vertices vertex $$$ 1 $$$ root one operation choose bud children ( leave ) re - hang vertex tree delete edge connect bud parent add edge bud choose vertex tree choose vertex bud children children bud stay connect bud minimum number leave possible get make number above - mentioned operations ( possibly zero ) ? input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number vertices give tree next $$$ n-1 $$$ line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ $$$ u \neq v $$$ ) mean edge vertices $$$ u $$$ $$$ v $$$ tree guarantee give graph a tree guarantee sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case print a single integer — minimal number leave possible get operations first test case tree look follow : firstly choose a bud vertex $$$ 4 $$$ re - hang vertex $$$ 3 $$$ choose a bud vertex $$$ 2 $$$ re - hang vertex $$$ 7 $$$ a result follow tree $$$ 2 $$$ leave : prove minimal number leave possible get second test case tree look follow : choose a bud vertex $$$ 3 $$$ re - hang vertex $$$ 5 $$$ a result follow tree $$$ 2 $$$ leave : prove minimal number leave possible get,"['constructive algorithms', 'dfs and similar', 'dp', 'greedy']",2000.0
1558/E,a certain video game player control a hero characterize a single integer value : power current level hero get a system $$$ n $$$ cave number $$$ 1 $$$ $$$ n $$$ $$$ m $$$ tunnel tunnel connect two distinct cave two cave connect one tunnel cave reach cave move via tunnel hero start level cave $$$ 1 $$$ every cave contain a monster hero move cave via tunnel hero leave a cave enter a tunnel must finish movement arrive opposite end tunnel hero use tunnel move directions however hero use tunnel twice a row formally hero move cave $$$ i $$$ cave $$$ j $$$ via a tunnel head back cave $$$ i $$$ immediately head cave connect cave $$$ j $$$ a tunnel know least two tunnel come every cave thus hero never find a dead end even consider requirement pass level hero must beat monsters cave hero enter a cave first time fight monster hero beat monster cave $$$ i $$$ hero 's power strictly greater $$$ a_i $$$ case beat monster hero 's power increase $$$ b_i $$$ hero ca n't beat monster 's fight game end player lose hero beat monster cave $$$ i $$$ subsequent visit cave $$$ i $$$ wo n't consequences : cave wo n't monsters hero 's power wo n't change either find smallest possible power hero must start level able beat monsters pass level test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 3 \le n \le 1000 $$$ ; $$$ n \le m \le min ( \frac { n ( n-1 ) } { 2 } 2000 ) $$$ ) — number cave tunnel second line contain $$$ n-1 $$$ integers $$$ a_2 a_3 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — value hero 's power compare fight monsters cave $$$ 2 3 \ldots n $$$ third line contain $$$ n-1 $$$ integers $$$ b_2 b_3 \ldots b_n $$$ ( $$$ 1 \le b_i \le 1000000000 $$$ ) — increase apply hero 's power beat monsters cave $$$ 2 3 \ldots n $$$ next $$$ m $$$ line contain two integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1 \le u_i v_i \le n $$$ ; $$$ u_i \ne v_i $$$ ) — number cave connect a tunnel two cave connect one tunnel cave reach cave move via tunnel least two tunnel come every cave guarantee sum $$$ n $$$ test case exceed $$$ 1000 $$$ sum $$$ m $$$ test case exceed $$$ 2000 $$$ test case print a single integer — smallest possible power hero must start level able beat monsters pass level first test case hero pass level initial power $$$ 15 $$$ follow : second test case situation similar except power increase beat monsters cave $$$ 2 $$$ $$$ 4 $$$ exchange hero follow a different route $$$ 1 \rightarrow 4 \rightarrow 3 \rightarrow 2 $$$ pass level initial power $$$ 15 $$$ third test case hero pass level initial power $$$ 19 $$$ follow :,"['dfs and similar', 'greedy']",3000.0
1528/C,soroush keshi a label root tree $$$ n $$$ vertices tree root vertex $$$ 1 $$$ soroush keshi use war endless decades fight finally become ally prepare a codeforces round celebrate fortunate event decide make a memorial graph $$$ n $$$ vertices add edge vertices $$$ u $$$ $$$ v $$$ memorial graph follow condition hold : vertex $$$ u $$$ consider ancestor vertex $$$ v $$$ $$$ u $$$ lie path $$$ 1 $$$ ( root ) $$$ v $$$ pop nowhere mashtali try find maximum clique memorial graph reason fail graph big help mashtali find size maximum clique memorial graph a reminder clique a subset vertices graph two connect edge first line contain integer $$$ t $$$ $$$ ( 1\le t\le 3 \cdot 100000 ) $$$ — number test case description test case follow first line test case contain integer $$$ n $$$ $$$ ( 2\le n\le 3 \cdot 100000 ) $$$ second line test case contain $$$ n-1 $$$ integers $$$ a_2 \ldots a_n $$$ $$$ ( 1 \le a_i < i ) $$$ $$$ a_i $$$ parent vertex $$$ i $$$ soroush 's tree third line test case contain $$$ n-1 $$$ integers $$$ b_2 \ldots b_n $$$ $$$ ( 1 \le b_i < i ) $$$ $$$ b_i $$$ parent vertex $$$ i $$$ keshi 's tree guarantee give graph tree guarantee sum $$$ n $$$ test case n't exceed $$$ 300000 $$$ test case print a single integer — size maximum clique memorial graph first third test case pick vertex second test case one maximum cliques $$$ \ { 2 3 4 5\ } $$$ fourth test case one maximum cliques $$$ \ { 3 4 6\ } $$$,"['data structures', 'dfs and similar', 'greedy']",2300.0
1499/F,"give integer $$$ k $$$ undirected tree consist $$$ n $$$ vertices length a simple path ( a path vertex appear ) pair vertices number edge path a diameter a tree maximum length a simple path pair vertices tree remove a set edge tree tree split multiple smaller tree edge remove set edge valid result tree diameter less equal $$$ k $$$ two set edge different edge appear one set count number valid set edge modulo $$$ 998\,244\,353 $$$ first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n \le 5000 $$$ $$$ 0 \le k \le n - 1 $$$ ) — number vertices tree maximum allow diameter respectively next $$$ n-1 $$$ line contain a description edge : two integers $$$ v $$$ $$$ u $$$ ( $$$ 1 \le v u \le n $$$ $$$ v \neq u $$$ ) give edge form a tree print a single integer — number valid set edge modulo $$$ 998\,244\,353 $$$ first example diameter give tree already less equal $$$ k $$$ thus choose set edge remove result tree diameter less equal $$$ k $$$ $$$ 2 ^ 3 $$$ set include empty one second example remove edge otherwise diameter $$$ 1 $$$ greater $$$ 0 $$$ tree third fourth examples :","['dfs and similar', 'dp']",2400.0
1491/E,let $$$ f_k $$$ denote $$$ k $$$ -th term fibonacci sequence define : give a tree $$$ n $$$ vertices recall a tree a connect undirected graph without cycle call a tree a fib - tree number vertices equal $$$ f_k $$$ $$$ k $$$ least one follow condition hold : determine whether give tree a fib - tree first line input contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — number vertices tree $$$ n-1 $$$ line follow contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1\leq u v \leq n $$$ $$$ u \neq v $$$ ) represent edge vertices $$$ u $$$ $$$ v $$$ 's guarantee give edge form a tree print ` ` yes '' give tree a fib - tree ` ` '' otherwise print answer case example answer ` ` yes '' output ` ` yes '' ` ` yes '' also consider correct answer first sample cut edge $$$ ( 1 2 ) $$$ tree split $$$ 2 $$$ tree size $$$ 1 $$$ $$$ 2 $$$ correspondently tree size $$$ 2 $$$ a fib - tree split $$$ 2 $$$ tree size $$$ 1 $$$ second sample matter edge cut tree split $$$ 2 $$$ tree size $$$ 1 $$$ $$$ 4 $$$ $$$ 4 $$$ n't $$$ f_k $$$ $$$ k $$$ 's fib - tree third sample one possible order cut edge tree process fib - trees : $$$ ( 1 3 ) ( 1 2 ) ( 4 5 ) ( 3 4 ) $$$,"['brute force', 'dfs and similar']",2400.0
1485/E,give $$$ n - 1 $$$ integers $$$ a_2 \dots a_n $$$ a tree $$$ n $$$ vertices root vertex $$$ 1 $$$ leave distance $$$ d $$$ root recall a tree a connect undirected graph without cycle distance two vertices number edge simple path non - root vertices degree $$$ 1 $$$ leave vertices $$$ s $$$ $$$ f $$$ connect edge distance $$$ f $$$ root greater distance $$$ s $$$ root $$$ f $$$ call a child $$$ s $$$ initially a red coin a blue coin vertex $$$ 1 $$$ let $$$ r $$$ vertex red coin let $$$ b $$$ vertex blue coin make $$$ d $$$ move a move consist three step : note $$$ r $$$ $$$ b $$$ equal time number write root move gain $$$ <unknown> - <unknown> $$$ point 's maximum number point gain $$$ d $$$ move ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 200000 $$$ ) — number vertices tree second line test case contain $$$ n-1 $$$ integers $$$ v_2 v_3 \dots v_n $$$ ( $$$ 1 \leq v_i \leq n $$$ $$$ v_i \neq i $$$ ) — $$$ i $$$ -th indicate edge vertices $$$ i $$$ $$$ v_i $$$ guarantee edge form a tree third line test case contain $$$ n-1 $$$ integers $$$ a_2 \dots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — number write vertices guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print a single integer : maximum number point gain $$$ d $$$ move first test case optimal solution : total number point $$$ |7 - 2| + |6 - 9| + |3 - 9| = 14 $$$ second test case optimal solution : total number point $$$ <unknown> - <unknown> + <unknown> - <unknown> + |5 - <unknown> = 45 $$$,"['dfs and similar', 'dp', 'greedy']",2500.0
1477/D,"nezzar design a brand new game ` ` hide permutations '' share best friend nanako begin game nanako nezzar know integers $$$ n $$$ $$$ m $$$ game go follow way : however nezzar accidentally know nanako 's unordered pair decide take advantage please help nezzar find two permutations $$$ p $$$ $$$ q $$$ score maximize first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 500000 $$$ ) — number test case first line test case contain two integers $$$ n m $$$ ( $$$ 1 \le n \le 5 \cdot 100000 0 \le m \le \min ( \frac { n ( n-1 ) } { 2 } , 5 \cdot 100000 ) $$$ ) $$$ m $$$ line follow $$$ i $$$ -th contain two integers $$$ l_i r_i $$$ ( $$$ 1 \le l_i r_i \le n $$$ $$$ l_i \neq r_i $$$ ) describe $$$ i $$$ -th unordered pair nanako choose guarantee $$$ m $$$ unordered pair distinct guarantee sum $$$ n $$$ test case exceed $$$ 500000 $$$ sum $$$ m $$$ test case exceed $$$ 5\cdot 100000 $$$ test case print two permutations $$$ p_1 p_2 \ldots p_n $$$ $$$ q_1 q_2 \ldots q_n $$$ score nezzar get maximize first test case pair give nanako : nezzar lose instantly nezzar gain score $$$ 4 $$$ $$$ p_i \neq q_i $$$ $$$ 1 \leq i \leq 4 $$$ obviously maximum possible score nezzar get","['constructive algorithms', 'dfs and similar']",2800.0
1453/E,"gildong play dog badugi 're a park $$$ n $$$ intersections $$$ n-1 $$$ bidirectional roads $$$ 1 $$$ meter length connect two intersections intersections number $$$ 1 $$$ $$$ n $$$ every $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a b \le n $$$ ) possible get $$$ b $$$ -th intersection $$$ a $$$ -th intersection use set roads gildong put one snack every intersection park gildong give badugi a mission eat snack badugi start $$$ 1 $$$ -st intersection move follow rule : unfortunately gildong n't know value $$$ k $$$ , want find minimum value $$$ k $$$ make possible badugi complete mission badugi move optimally test contain one test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) first line test case contain one integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — number intersections park next $$$ n-1 $$$ line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ $$$ u \ne v $$$ ) mean a road intersection $$$ u $$$ $$$ v $$$ roads bidirectional distinct guarantee : test case print one integer — minimum possible value $$$ k $$$ badugi complete mission first case badugi complete mission $$$ k=2 $$$ move follow : second case possible sequence move make $$$ 1 $$$ – $$$ 2 $$$ – $$$ 3 $$$ – $$$ 4 $$$ – $$$ 1 $$$ since distance $$$ 4 $$$ -th intersection $$$ 1 $$$ -st intersection $$$ 3 $$$ $$$ k $$$ need least $$$ 3 $$$ badugi complete mission third case badugi make move follow : $$$ 1 $$$ – $$$ 5 $$$ – $$$ 6 $$$ – $$$ 7 $$$ – $$$ 8 $$$ – $$$ 2 $$$ – $$$ 3 $$$ – $$$ 4 $$$ – $$$ 1 $$$ show possible sequence move badugi complete mission $$$ k=3 $$$","['dfs and similar', 'dp', 'greedy']",2300.0
1403/B,spring clean probably bore part live except year flóra mother find a <unknown> old tree graph carpet tree $$$ n $$$ nod ( number $$$ 1 $$$ $$$ n $$$ ) connect $$$ n-1 $$$ edge edge gather much dust flóra 's mom decide clean clean edge arbitrary tree do repeat follow process : choose 2 different leave ( a node a leaf connect exactly one node edge ) clean every edge lie shortest path path $$$ d $$$ edge cost clean path $$$ d $$$ n't want harm leave tree choose every one a tree clean edge clean cost sum cost clean paths flóra think tree find small simple imagine $$$ q $$$ variations $$$ i $$$ -th variation add a total $$$ d_i $$$ extra leave original tree : new leaf choose a node original tree connect node new leaf edge note nod may stop leave step $$$ q $$$ variations interest minimum cost require clean tree first line contain two space - separated integer $$$ n $$$ $$$ q $$$ ( $$$ 3 \leq n \leq 10^ { 5 } $$$ $$$ 1 \leq q \leq 10^ { 5 } $$$ ) – number nod tree number variations next $$$ n-1 $$$ line contain two space - separated integers $$$ u $$$ $$$ v $$$ denote nod $$$ u $$$ $$$ v $$$ connect edge ( $$$ 1 \leq u v \leq n $$$ ) next $$$ q $$$ line describe variations first integer $$$ i $$$ th line $$$ d_i $$$ ( $$$ 1 \leq d_i \leq 10^ { 5 } $$$ ) $$$ d_i $$$ space - separated integers follow : $$$ j $$$ th number $$$ a_j $$$ mean flóra add a new leaf node $$$ a_j $$$ ( $$$ 1 \leq a_j \leq n $$$ ) may add one leaf node $$$ \sum _ { 1 } ^ { q } d_i \leq 10^ { 5 } $$$ i.e sum $$$ d_i $$$ <unknown> $$$ 100000 $$$ variation flóra restart add extra leave original tree print $$$ q $$$ line $$$ i $$$ -th line print a single integer : minimum cost require clean $$$ i $$$ -th variation tree tree clean print $$$ -1 $$$ follow picture show second variation a possible solution clean path leave $$$ 1 - 6 $$$ $$$ a - 7 $$$ $$$ b - 3 $$$ download example additional ( bigger ) sample input : https : //gofile.io / <unknown>,"['data structures', 'dfs and similar']",2300.0
1402/C,unite federation planets alliance $$$ n $$$ planets index $$$ 1 $$$ $$$ n $$$ planets connect space tunnel a space tunnel a starship fly ways really fast exactly $$$ n-1 $$$ space tunnel travel planet planet federation use tunnel 's well know $$$ d $$$ additional parallel universes exact copy universe planets space tunnel index $$$ 1 $$$ $$$ d $$$ ( universe index $$$ 0 $$$ ) denote planet $$$ x $$$ universe $$$ i $$$ $$$ p_x^i $$$ travel one universe another use dimension portals every $$$ i $$$ ( $$$ 0\leq i \leq d-1 $$$ ) place exactly one portal allow us fly $$$ p _ { a_i } ^i $$$ $$$ p _ { b_i } ^ { i+1 } $$$ planet indices $$$ a_i $$$ $$$ b_i $$$ ( i.e $$$ 1 \leq a_i b_i \leq n $$$ ) portals place starship <unknown> embark <unknown> <unknown> currently orbit around $$$ p_1 ^ 0 $$$ captain ágnes lieutenant gábor decide play follow game : choose alternately a destination ( a planet ) fly planet universe a space tunnel go another universe a portal go aim visit place one go 's visit a planet $$$ p_x^i $$$ never go back ( visit planet $$$ x $$$ another universe ) captain ágnes choose first destination ( gábor ágnes etc . ) somebody ca n't choose a planet his / her turn he / she lose captain ágnes lieutenant gábor clever : know locations tunnel portals play optimally many different placements portals captain ágnes win game ? two placements different index $$$ i $$$ ( $$$ 0\leq i \leq d-1 $$$ ) $$$ i $$$ th portal connect different pair planets two placements ( i.e $$$ a_i $$$ $$$ b_i $$$ differ ) number big interest modulo $$$ 1000000000 + 7 $$$ first line contain two space - separated integers $$$ n $$$ ( $$$ 1\leq n \leq 10^ { 5 } $$$ ) – number planets $$$ d $$$ ( $$$ 1 \leq d \leq 10^ { 18 } $$$ ) – number additional parallel universes next $$$ n-1 $$$ line contain two space - separated integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \leq u v \leq n $$$ ) denote $$$ <unknown> $$$ $$$ <unknown> $$$ connect a space tunnel $$$ i $$$ ( $$$ 0 \leq i \leq d $$$ ) print a single integer number possible placements portals captain ágnes win modulo $$$ 1000000000 + 7 $$$ 1 portal $$$ 9 = 9 $$$ different placements follow 4 placements captain win,"['dfs and similar', 'dp']",2600.0
1394/B,"boboniu a direct graph $$$ n $$$ vertices $$$ m $$$ edge out - degree vertex $$$ k $$$ edge integer weight $$$ 1 $$$ $$$ m $$$ two edge equal weight boboniu like walk graph specific rule represent a tuple $$$ ( c_1 c_2 \ldots c_k ) $$$ stand a vertex $$$ u $$$ out - degree $$$ i $$$ go next vertex edge $$$ c_i $$$ -th $$$ ( 1\le c_i\le i ) $$$ smallest weight among edge outgo $$$ u $$$ boboniu ask calculate number tuples $$$ ( c_1 c_2 \ldots c_k ) $$$ thatthe first line contain three integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 2\le n\le 2\cdot 100000 $$$ $$$ 2\le m\le \min ( 2\cdot 100000 n ( n-1 ) ) $$$ $$$ 1\le k\le 9 $$$ ) next $$$ m $$$ line contain three integers $$$ u $$$ $$$ v $$$ $$$ w $$$ $$$ ( 1\le u v\le n u\ne <unknown> w\le m ) $$$ denote edge $$$ u $$$ $$$ v $$$ weight $$$ w $$$ guarantee self - loops multiple edge vertex least one edge start guarantee out - degree vertex $$$ k $$$ two edge equal weight print one integer : number tuples first example two tuples : $$$ ( 1,1,3 ) $$$ $$$ ( 1,2,3 ) $$$ blue edge picture denote $$$ c_i $$$ -th smallest edge vertex boboniu choose go third example 's one tuple : $$$ ( 1,2,2,2 ) $$$ out - degree vertex $$$ u $$$ mean number edge outgo $$$ u $$$","['brute force', 'dfs and similar']",2300.0
1381/D,"undirected tree $$$ n $$$ vertices connect $$$ n-1 $$$ bidirectional edge also a snake stick inside tree head vertex $$$ a $$$ tail vertex $$$ b $$$ snake 's body occupy vertices unique simple path $$$ a $$$ $$$ b $$$ snake want know reverse — move head tail start tail head start unfortunately snake 's movements restrict tree 's structure operation snake move head adjacent vertex currently occupy snake , tail move one vertex closer head length snake remain unchanged similarly snake also move tail adjacent vertex currently occupy snake , head move one unit closer tail determine possible reverse snake sequence operations first line contain a single integer $$$ t $$$ ( $$$ 1\le t\le 100 $$$ ) — number test case next line contain descriptions test case first line test case contain three integers $$$ n a b $$$ ( $$$ 2\le n\le <unknown> a b\le n a\ne b $$$ ) next $$$ n-1 $$$ line contain two integers $$$ u_i v_i $$$ ( $$$ 1\le u_i v_i\le n u_i\ne v_i $$$ ) indicate edge vertices $$$ u_i $$$ $$$ v_i $$$ guarantee give edge form a tree guarantee sum $$$ n $$$ across test case exceed $$$ 100000 $$$ test case output ` ` yes '' possible snake reverse ` ` '' otherwise first test case picture second test case tree a path show snake reverse third test case show snake reverse fourth test case example solution : $$$ ( <unknown> ) \to ( <unknown> ) \to ( <unknown> ) \to ( <unknown> ) \to ( 8,13 ) \to ( <unknown> ) \to ( 1,10 ) $$$ $$$ \to ( <unknown> ) \to ( 3,4 ) \to ( 2,5 ) \to ( 1,6 ) \to ( 4,7 ) \to ( <unknown> ) \to ( 10,5 ) $$$ $$$ \to ( <unknown> ) \to ( <unknown> ) \to ( <unknown> ) \to ( <unknown> ) \to ( <unknown> ) \to ( <unknown> ) $$$","['dfs and similar', 'dp', 'greedy']",3000.0
1354/E,give undirected graph without self - loops multiple edge consist $$$ n $$$ vertices $$$ m $$$ edge also give three integers $$$ n_1 $$$ $$$ n_2 $$$ $$$ n_3 $$$ label vertex one three number 1 2 3 way : multiple valid label print first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 5000 $$$ ; $$$ 0 \le m \le 100000 $$$ ) — number vertices edge graph second line contain three integers $$$ n_1 $$$ $$$ n_2 $$$ $$$ n_3 $$$ ( $$$ 0 \le n_1 n_2 n_3 \le n $$$ ) — number label 1 2 3 respectively 's guarantee $$$ n_1 + n_2 + n_3 = n $$$ next $$$ m $$$ line <unknown> description edge : $$$ i $$$ -th line contain two integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1 \le u_i v_i \le n $$$ ; $$$ u_i \neq v_i $$$ ) — vertices $$$ i $$$ -th edge connect 's guarantee graph n't contain self - loops multiple edge valid label exist print ` ` yes '' ( without quote ) first line second line print string length $$$ n $$$ consist 1 2 3 . $$$ i $$$ -th letter equal label $$$ i $$$ -th vertex valid label print ` ` '' ( without quote ),"['dfs and similar', 'dp']",2100.0
1340/D,"denis come nastya discover happy see ... one chance become happy denis want buy things nastya like certainly agree talk map city live a lot square connect roads exactly one way pair square visit vertex twice turn graph city a tree denis locate vertex $$$ 1 $$$ time $$$ 0 $$$ want visit every vertex least get back soon possible denis walk one road $$$ 1 $$$ time unfortunately city large take a long time visit square therefore denis take a desperate step pull pocket time machine construct basement help denis change time non - negative time less current time time machine one feature hero find place time twice explosion universal proportion nastya stay unhappy therefore denis ask find a route use a time machine get around square return first time maximum time visit square minimal formally denis 's route represent a sequence pair : $$$ \ { v_1 <unknown> } \ { v_2 <unknown> } \ { v_3 <unknown> } \ldots \ { v_k <unknown> } $$$ $$$ v_i $$$ number square $$$ t_i $$$ time boy follow condition must meet : need find a route maximum time square minimal , route $$$ \max { ( t_1 t_2 \ldots t_k ) } $$$ minimum possible first line contain a single integer $$$ n $$$ $$$ ( 1 \leq n \leq 100000 ) $$$ — number square city next $$$ n - 1 $$$ line contain two integers $$$ u $$$ $$$ v $$$ $$$ ( 1 \leq v u \leq n u \neq v ) $$$ - number square connect road guarantee give graph a tree first line output integer $$$ k $$$ $$$ ( 1 \leq k \leq 1000000 ) $$$ — length path denis next $$$ k $$$ line output pair $$$ v_i t_i $$$ — pair describe denis 's route ( statement ) route requirements describe statements must meet guarantee give restrictions least one route answer whose length exceed $$$ 1000000 $$$ several possible answer print","['constructive algorithms', 'dfs and similar']",2600.0
1340/C,girl n't go denis denis go girl use rule young man leave home buy flower go nastya way denis 's house girl 's house a road $$$ n $$$ line road ca n't always cross one green light foresee good mayor decide place safety islands part road safety island locate a line well begin end road pedestrians relax gain strength wait a green light denis come edge road exactly moment green light turn boy know traffic light first light $$$ g $$$ second green $$$ r $$$ second red $$$ g $$$ second green formally road represent a segment $$$ [ 0 n ] $$$ initially denis point $$$ 0 $$$ task get point $$$ n $$$ shortest possible time know many different integers $$$ d_1 d_2 \ldots d_m $$$ $$$ 0 \leq d_i \leq n $$$ — coordinate point safety islands locate one point boy a time red light unfortunately denis n't always able control excitement restrictions impose : denis cross road soon coordinate become equal $$$ n $$$ task simple 's possible impossible cross road since denis thoughts love could n't solve problem ask us help find minimal possible time cross road accord rule find impossible first line contain two integers $$$ n $$$ $$$ m $$$ $$$ ( 1 \leq n \leq 1000000 2 \leq m \leq min ( n + 1 10000 ) ) $$$ — road width number safety islands second line contain $$$ m $$$ distinct integers $$$ d_1 d_2 \ldots d_m $$$ $$$ ( 0 \leq d_i \leq n ) $$$ — point safety islands locate guarantee $$$ 0 $$$ $$$ n $$$ among third line contain two integers $$$ g r $$$ $$$ ( 1 \leq g r \leq 1000 ) $$$ — time green light stay time red light stay output a single integer — minimum time denis cross road obey rule impossible cross road output $$$ -1 $$$ first test optimal route : total $$$ 45 $$$ second obtain second test impossible cross road accord rule,"['dfs and similar', 'dp']",2400.0
1320/E,"$$$ n $$$ cities treeland connect $$$ n - 1 $$$ bidirectional roads a way city reachable ; word graph cities roads a tree treeland prepare a seasonal virus epidemic currently try evaluate different infection scenarios scenario several cities initially infect different virus species suppose $$$ k_i $$$ virus species $$$ i $$$ -th scenario let us denote $$$ v_j $$$ initial city virus $$$ j $$$ $$$ s_j $$$ propagation speed virus $$$ j $$$ spread viruses happen turn : first virus $$$ 1 $$$ spread follow virus $$$ 2 $$$ , virus $$$ k_i $$$ spread process start virus $$$ 1 $$$ a spread turn virus $$$ j $$$ proceed follow city $$$ x $$$ infect virus start turn end turn become infect virus $$$ j $$$ a city $$$ y $$$ : a city infect a virus stay infect indefinitely infect virus spread stop cities infect need process $$$ q $$$ independent scenarios scenario describe $$$ k_i $$$ virus species $$$ m_i $$$ important cities important city determine virus infect end first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — number cities treeland follow $$$ n - 1 $$$ line describe roads $$$ i $$$ -th line contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1 \leq x_i y_i \leq n $$$ ) — indices cities connect $$$ i $$$ -th road guarantee give graph cities roads a tree next line contain a single integer $$$ q $$$ ( $$$ 1 \leq q \leq 200000 $$$ ) — number infection scenarios $$$ q $$$ scenario descriptions follow description $$$ i $$$ -th scenario start a line contain two integers $$$ k_i $$$ $$$ m_i $$$ ( $$$ 1 \leq k_i m_i \leq n $$$ ) — number virus species number important cities scenario respectively guarantee $$$ \sum _ { i = 1 } ^ q k_i $$$ $$$ \sum _ { i = 1 } ^ q m_i $$$ exceed $$$ 200000 $$$ follow $$$ k_i $$$ line describe virus species $$$ j $$$ -th line contain two integers $$$ v_j $$$ $$$ s_j $$$ ( $$$ 1 \leq v_j \leq n $$$ $$$ 1 \leq s_j \leq 1000000 $$$ ) – initial city propagation speed virus species $$$ j $$$ guarantee initial cities virus species within a scenario distinct follow line contain $$$ m_i $$$ distinct integers $$$ u_1 \ldots u _ { m_i } $$$ ( $$$ 1 \leq u_j \leq n $$$ ) — indices important cities print $$$ q $$$ line $$$ i $$$ -th line contain $$$ m_i $$$ integers — indices virus species cities $$$ u_1 \ldots u _ { m_i } $$$ infect end $$$ i $$$ -th scenario","['data structures', 'dfs and similar', 'dp']",3000.0
1292/C,"another floor a. r. c. markland - n young man simon ` ` xenon '' jackson take a break finish project early ( always ) a lot free time decide put legendary hacker ` ` x '' instinct fight gang <unknown> world target a network $$$ n $$$ small gang network contain exactly $$$ n - 1 $$$ direct link connect two gang together link place a way every pair gang connect a sequence direct link mine data xenon figure gang use a form cross - encryption avoid bust : every link assign integer $$$ 0 $$$ $$$ n - 2 $$$ assign integers distinct every integer assign link <unknown> try access encrypt data <unknown> $$$ s $$$ password layer $$$ s $$$ define follow formula : $$$ $$$ s = \sum _ { 1 \leq u < v \leq n } mex ( u v ) $$$ $$$ $$$ mex ( u v ) $$$ denote smallest non - negative integer appear link unique simple path gang $$$ u $$$ gang $$$ v $$$ xenon n't know way integers assign 's a problem decide let ai 's instance try passwords <unknown> , need know maximum possible value $$$ s $$$ <unknown> deploy efficiently , xenon write ai script expect finish two hours find maximum possible $$$ s $$$ return ? first line contain integer $$$ n $$$ ( $$$ 2 \leq n \leq 3000 $$$ ) number gang network next $$$ n - 1 $$$ line contain integers $$$ u_i $$$ $$$ v_i $$$ ( $$$ 1 \leq u_i v_i \leq n $$$ ; $$$ u_i \neq v_i $$$ ) indicate 's a direct link gang $$$ u_i $$$ $$$ v_i $$$ 's guarantee link place a way pair gang connect exactly one simple path print maximum possible value $$$ s $$$ — number password layer gang ' network first example one achieve maximum $$$ s $$$ follow assignment : assignment $$$ mex ( 1 2 ) = 0 $$$ $$$ mex ( 1 3 ) = 2 $$$ $$$ mex ( 2 3 ) = 1 $$$ therefore $$$ s = 0 + 2 + 1 = 3 $$$ second example one achieve maximum $$$ s $$$ follow assignment : assignment non - zero mex value list : therefore $$$ s = 1 + 2 + 1 + 2 + 1 + 3 = 10 $$$","['dfs and similar', 'dp', 'greedy']",2300.0
1263/F,electrical grid berland palaces consist 2 grids : main reserve wire palaces make expensive material sell would a good idea ! grid ( main reserve ) a head node ( number $$$ 1 $$$ ) every node get electricity head node node reach head node a unique path also grids exactly $$$ n $$$ nod spread electricity word every grid a root direct tree $$$ n $$$ leave a root node number $$$ 1 $$$ tree independent enumeration nod one grid connect nod another grid also palace $$$ n $$$ electrical devices device connect one node main grid one node reserve grid devices connect nod electricity spread ( nod tree 's leave ) grid 's leaf connect exactly one device guarantee whole grid ( two grids $$$ n $$$ devices ) show way ( like picture ) : formally tree exist a depth - first search node number $$$ 1 $$$ visit leave order connection devices $$$ 1 2 \dots n $$$ ( firstly node connect device $$$ 1 $$$ node connect device $$$ 2 $$$ etc . ) businessman want sell ( remove ) maximal amount wire device power least one grid ( main reserve ) word device exist least one path head node ( main grid reserve grid ) contain nod one grid first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — number devices palace next line contain integer $$$ a $$$ ( $$$ 1 + n \le a \le 1000 + n $$$ ) — amount nod main grid next line contain $$$ a - 1 $$$ integers $$$ p_i $$$ ( $$$ 1 \le p_i \le a $$$ ) integer $$$ p_i $$$ mean main grid contain a wire $$$ p_i $$$ -th node $$$ ( i + 1 ) $$$ -th next line contain $$$ n $$$ integers $$$ x_i $$$ ( $$$ 1 \le x_i \le a $$$ ) — number a node main grid connect $$$ i $$$ -th device next line contain integer $$$ b $$$ ( $$$ 1 + n \le b \le 1000 + n $$$ ) — amount nod reserve grid next line contain $$$ b - 1 $$$ integers $$$ q_i $$$ ( $$$ 1 \le q_i \le b $$$ ) integer $$$ q_i $$$ mean reserve grid contain a wire $$$ q_i $$$ -th node $$$ ( i + 1 ) $$$ -th next line contain $$$ n $$$ integers $$$ y_i $$$ ( $$$ 1 \le y_i \le b $$$ ) — number a node reserve grid connect $$$ i $$$ -th device guarantee grid a tree exactly $$$ n $$$ leave leaf connect one device also guarantee tree exist a depth - first search node $$$ 1 $$$ visit leave order connection devices print a single integer — maximal amount wire cut device power first example picture show one possible solutions ( wire remove mark red ) : second third examples see :,"['data structures', 'dfs and similar', 'dp']",2400.0
1153/D,serval a junior high school student japari middle school still thrill math a talented boy mathematics like play number time want play number a root tree a tree a connect graph without cycle a root tree a special vertex call root a parent a node $$$ v $$$ last different $$$ v $$$ vertex path root vertex $$$ v $$$ children vertex $$$ v $$$ nod $$$ v $$$ parent a vertex a leaf children root tree serval own $$$ n $$$ nod node $$$ 1 $$$ root serval write number nod tree however restrictions nod except leave operation $$$ \max $$$ $$$ \min $$$ write indicate number node equal maximum minimum number sons respectively assume $$$ k $$$ leave tree serval want put integers $$$ 1 2 \ldots k $$$ $$$ k $$$ leave ( number use exactly ) love large number want maximize number root best friend help ? first line contain integer $$$ n $$$ ( $$$ 2 \leq n \leq 3\cdot 100000 $$$ ) size tree second line contain $$$ n $$$ integers $$$ i $$$ -th represent operation node $$$ i $$$ $$$ 0 $$$ represent $$$ \min $$$ $$$ 1 $$$ represent $$$ \max $$$ node a leaf still a number $$$ 0 $$$ $$$ 1 $$$ ignore third line contain $$$ n-1 $$$ integers $$$ f_2 f_3 \ldots f_n $$$ ( $$$ 1 \leq f_i \leq i-1 $$$ ) $$$ f_i $$$ represent parent node $$$ i $$$ output one integer — maximum possible number root tree picture explain examples number write middle nod indices number write top number write nod first example matter arrange number answer $$$ 1 $$$ second example matter arrange number answer $$$ 4 $$$ third example one best solution achieve $$$ 4 $$$ arrange $$$ 4 $$$ $$$ 5 $$$ nod $$$ 4 $$$ $$$ 5 $$$ fourth example best solution arrange $$$ 5 $$$ node $$$ 5 $$$,"['dfs and similar', 'dp', 'greedy']",1900.0
1111/E,"give a tree $$$ n $$$ nod $$$ q $$$ query every query start three integers $$$ k $$$ $$$ m $$$ $$$ r $$$ follow $$$ k $$$ nod tree $$$ a_1 a_2 \ldots a_k $$$ answer a query assume tree root $$$ r $$$ want divide $$$ k $$$ give nod $$$ m $$$ group follow condition meet : need output number ways modulo $$$ 10^ { 9 } +7 $$$ every query first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \le n q \le 10^ { 5 } $$$ ) — number vertices tree number query respectively next $$$ n-1 $$$ line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n u \ne v $$$ ) denote edge connect vertex $$$ u $$$ vertex $$$ v $$$ guarantee give graph a tree next $$$ q $$$ line start three integers $$$ k $$$ $$$ m $$$ $$$ r $$$ ( $$$ 1 \le k r \le n $$$ $$$ 1 \le m \le min ( 300 k ) $$$ ) — number nod maximum number group root tree current query respectively follow $$$ k $$$ distinct integers $$$ a_1 a_2 \ldots a_k $$$ ( $$$ 1 \le a_i \le n $$$ ) denote nod current query guarantee sum $$$ k $$$ query exceed $$$ 10^ { 5 } $$$ print $$$ q $$$ line $$$ i $$$ -th line contain answer $$$ i $$$ -th query consider first example first query divide three give nod ( $$$ 7 $$$ $$$ 4 $$$ $$$ 3 $$$ ) maximum three group assume tree root $$$ 2 $$$ tree root $$$ 2 $$$ $$$ 4 $$$ ancestor $$$ 3 $$$ $$$ 7 $$$ ca n't put nod one group $$$ 1 $$$ way divide give nod two group $$$ [ 4 ] $$$ $$$ [ 3 7 ] $$$ also one way divide give nod three group $$$ [ 7 ] $$$ $$$ [ 4 ] $$$ $$$ [ 3 ] $$$ , total $$$ 2 $$$ ways divide give nod a maximum three group second query tree root $$$ 4 $$$ $$$ 6 $$$ ancestor $$$ 2 $$$ $$$ 2 $$$ ancestor $$$ 1 $$$ , ca n't put give nod one group","['data structures', 'dfs and similar', 'dp']",2500.0
1065/D,stumble upon a new kind chess puzzle chessboard give necesserily $$$ 8 \times 8 $$$ still $$$ n \times n $$$ square number write number $$$ 1 $$$ $$$ n^2 $$$ number pairwise distinct $$$ j $$$ -th square $$$ i $$$ -th row a number $$$ a _ { ij } $$$ write chess set three piece : a knight a bishop a rook first put one square number $$$ 1 $$$ ( choose one ) want reach square $$$ 2 $$$ ( possibly pass square process ) square $$$ 3 $$$ reach square $$$ n^2 $$$ one step allow either make a valid move current piece replace piece square visit arbitrary number time a knight move a square two square away horizontally one square vertically two square vertically one square horizontally a bishop move diagonally a rook move horizontally vertically move perform a different square one a piece currently stand want minimize number step whole traversal among paths number step want choose one lowest number piece replacements path take satisfy condition ? first line contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 10 $$$ ) — size chessboard next $$$ n $$$ line contain $$$ n $$$ integers $$$ a _ { i1 } a _ { i2 } \dots a _ { } $$$ ( $$$ 1 \le a _ { ij } \le n^2 $$$ ) — number write square $$$ i $$$ -th row board guarantee $$$ a _ { ij } $$$ pairwise distinct line contain two integers — number step best answer number replacement move step first example ( start piece a knight ) :,"['dfs and similar', 'dp']",2200.0
982/C,'re give a tree $$$ n $$$ vertices task determine maximum possible number edge remove a way remain connect components even size first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) denote size tree next $$$ n - 1 $$$ line contain two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ ) describe vertices connect $$$ i $$$ -th edge 's guarantee give edge form a tree output a single integer $$$ k $$$ — maximum number edge remove leave connect components even size $$$ -1 $$$ impossible remove edge order satisfy property first example remove edge vertices $$$ 1 $$$ $$$ 4 $$$ graph two connect components two vertices second example ca n't remove edge a way components even number vertices answer $$$ -1 $$$,"['dfs and similar', 'dp', 'greedy']",1500.0
939/D,valya tolya ideal pair quarrel sometimes recently valya take <unknown> boyfriend come t - shirt letter differ letter pullover n't want see tolya seat room cry photos day long story could sad fairy godmother ( tolya 's grandmother ) decide help restore relationship secretly take tolya 's t - shirt valya 's pullover want make letter order one unit mana buy a spell change letter clothe task calculate minimum amount mana tolya 's grandmother spend rescue love tolya valya formally letter tolya 's t - shirt valya 's pullover two string length n consist lowercase english letter use one unit mana grandmother buy a spell form ( c1 c2 ) ( c1 c2 lowercase english letter ) arbitrary number time transform a single letter c1 c2 vise - versa tolya 's t - shirt valya 's pullover find minimum amount mana grandmother spend buy a set spell make letter equal addition output require set spell first line contain a single integer n ( 1 ≤ n ≤ 105 ) — length letter second line contain a string length n consist lowercase english letter — letter valya 's pullover third line contain letter tolya 's t - shirt format first line output a single integer — minimum amount mana t require rescue love valya tolya next t line output pair space - separated lowercase english letter — spell tolya 's grandmother buy spell letter spell print order many optimal answer output first example 's enough buy two spell : ( ' a ' 'd ' ) ( ' b ' ' a ' ) first letter coincide replace letter ' a ' 'd ' second letter coincide replace ' b ' ' a ' third letter coincide first replace ' b ' ' a ' ' a ' 'd ',"['dfs and similar', 'greedy', 'strings']",1600.0
877/D,"olya love energy drink love much room full empty can energy drink formally room represent a field n × m cells cell empty litter can olya drink a lot energy drink run k meter per second second choose one four directions ( , leave right ) run 1 k meter direction course run empty cells olya need get cell ( x1 y1 ) cell ( x2 y2 ) many second take move optimally ? 's guarantee cells ( x1 y1 ) ( x2 y2 ) empty cells coincide first line contain three integers n m k ( 1 ≤ n m k ≤ 1000 ) — size room olya 's speed n line follow contain m character i - th contain j - th position ` ` # '' cell ( i j ) litter can ` ` . '' otherwise last line contain four integers x1 y1 x2 y2 ( 1 ≤ x1 x2 ≤ n 1 ≤ y1 y2 ≤ m ) — coordinate first last cells print a single integer — minimum time take olya get ( x1 y1 ) ( x2 y2 ) 's impossible get ( x1 y1 ) ( x2 y2 ) print -1 . first sample olya run 3 meter right first second 2 meter second second 3 meter leave third second second sample olya run right 3 second 2 second leave 3 second olya recommend drink energy drink generally believe bad","['data structures', 'dfs and similar']",2100.0
858/F,berland residents wait unprecedented tour wizard blue helicopter cities berland ! well - known n cities berland pair connect bidirectional roads pair cities connect one road guarantee road network connect i.e possible ca n't reach city tour contain several episodes episodes : know wizard n't like use roads agree use road ( regardless direction ) word road a b drive a b drive b a use road wizards want plan many episodes possible without violation rule help wizard ! please note wizard visit city multiple time restriction roads first line contain two integers n m ( 1 ≤ n ≤ 2·105 0 ≤ m ≤ 2·105 ) — number cities number roads berland respectively roads description follow one line description a pair two integers ai bi ( 1 ≤ ai bi ≤ n ai ≠ bi ) ai bi ids cities connect i - th road guarantee two roads connect pair cities every road bidirectional cities number 1 n. possible road network berland connect first line print w — maximum possible number episodes next w line contain episodes format x y z — three integers denote ids cities order wizard 's visit,"['constructive algorithms', 'dfs and similar']",2300.0
855/G,"destroy voldemort 's horcruxes harry voldemort final battle cast spell <unknown> spell collide battle scene hogwarts represent form a tree , total n place hogwarts join use n - 1 undirected roads ron view battle harry voldemort wonder many triplets place ( u v w ) harry stand place u voldemort stand place v spell collide a place w. possible a triplet u v w distinct exist paths u w v w pass roads , due battle <unknown> new paths add time tell ron answer addition formally give a tree n vertices n - 1 edge q new edge add nod tree addition need tell number triplets ( u v w ) u v w distinct exist two paths one u w another v w paths edge common first line contain integer n ( 1 ≤ n ≤ 105 ) number place hogwarts next n - 1 line contain two space separate integers u v ( 1 ≤ u v ≤ n ) indicate a road place u v. guarantee give roads form a connect tree next line contain a single integer q ( 1 ≤ q ≤ 105 ) number new edge add next q line contain two space separate integers u v ( 1 ≤ u v ≤ n ) represent new road add note possible a newly add road connect place connect a road also a newly add road may connect a place first line print value number triplets change occur print q line a single integer ansi line contain value number triplets i - th edge addition first sample case initial tree ( 1 3 2 ) ( 3 1 2 ) possible triplets ( u v w ) addition edge 2 3 ( 1 3 2 ) ( 3 1 2 ) ( 1 2 3 ) ( 2 1 3 ) possible triplets","['dfs and similar', 'dp']",3300.0
846/E,igor a post - graduate student chemistry faculty berland state university ( bersu ) need conduct a complicate experiment write thesis laboratory bersu n't contain materials require experiment fortunately chemical laws allow material transformations ( yes chemistry berland differ ) rule transformation a bite strange berland chemists aware n materials number order discover material transform material ( vice versa ) formally i ( 2 ≤ i ≤ n ) exist two number xi ki denote a possible transformation : ki kilograms material xi transform 1 kilogram material i 1 kilogram material i transform 1 kilogram material xi chemical process equipment bersu allow transformation amount result material always integer number kilograms i ( 1 ≤ i ≤ n ) igor know experiment require ai kilograms material i laboratory contain bi kilograms material possible conduct experiment transform materials ( none ) ? first line contain one integer number n ( 1 ≤ n ≤ 105 ) — number materials discover berland chemists second line contain n integer number b1 b2 ... bn ( 1 ≤ bi ≤ 1012 ) — supply bersu laboratory third line contain n integer number a1 a2 ... ( 1 ≤ ai ≤ 1012 ) — amount require experiment n - 1 line follow j - th contain two number xj + 1 kj + 1 denote transformation ( j + 1 ) -th material ( 1 ≤ xj + 1 ≤ j 1 ≤ kj + 1 ≤ 109 ) print yes possible conduct experiment otherwise print,"['dfs and similar', 'greedy']",2300.0
796/D,inzane finally find zane a lot money spare together decide establish a country rule a country easy job thieve terrorists always ready ruin country 's peace fight back zane inzane <unknown> a effective law : city must possible reach a police station travel d kilometers along roads n cities country number 1 n connect exactly n - 1 roads roads 1 kilometer long initially possible travel a city city use roads country also k police station locate cities particular city 's structure satisfy requirement enforce previously mention law also note multiple police station one city however zane feel like many n - 1 roads unnecessary country financial issue want minimize road maintenance cost shut many roads possible help zane find maximum number roads shut without break law also help determine roads first line contain three integers n k d ( 2 ≤ n ≤ 3·105 1 ≤ k ≤ 3·105 0 ≤ d ≤ n - 1 ) — number cities number police station distance limitation kilometers respectively second line contain k integers p1 p2 ... pk ( 1 ≤ pi ≤ n ) — denote city police station locate i - th follow n - 1 line contain two integers ui vi ( 1 ≤ ui vi ≤ n ui ≠ vi ) — cities directly connect road index i. guarantee possible travel one city city use roads also possible city reach a police station within d kilometers first line print one integer s denote maximum number roads shut second line print s distinct integers indices roads order multiple answer print first sample shut road 5 cities still reach a police station within k = 4 kilometers second sample although largest valid set roads shut print either 4 5 5 4 second line,"['constructive algorithms', 'dfs and similar', 'dp']",2100.0
769/C,"robot a rectangular maze size n × m. cell maze either empty occupy obstacle robot move neighbor cells side leave ( symbol ` ` l '' ) right ( symbol ` ` r '' ) ( symbol ` ` u '' ) ( symbol ` ` d '' ) robot move cell empty initially robot empty cell task find lexicographically minimal robot 's cycle length exactly k begin end cell robot initially allow robot visit cell many time ( include start ) consider robot 's way give a line consist symbols ` ` l '' ` ` r '' ` ` u '' ` ` d '' example firstly robot go leave right mean way write ` ` <unknown> '' task n't need minimize length way find minimum lexicographical ( alphabet order dictionary ) line satisfy requirements first line contain three integers n m k ( 1 ≤ n m ≤ 1000 1 ≤ k ≤ 106 ) — size maze length cycle follow n line contain m symbols — description maze symbol equal ` ` . '' current cell empty symbol equal ` ` * '' current cell occupy obstacle symbol equal ` ` x '' initially robot cell empty guarantee symbol ` ` x '' find maze exactly print lexicographically minimum robot 's way length exactly k start end cell initially robot way print ` ` impossible '' ( without quote ) first sample two cyclic ways robot length 2 exist — ` ` ud '' ` ` rl '' second cycle lexicographically less second sample robot move follow way : leave , leave leave leave right right right , right , third sample robot ca n't move neighbor cells occupy obstacles","['dfs and similar', 'greedy']",1700.0
768/B,"jon fight bravely rescue <unknown> attack white - walkers <unknown> arrival sam tell want go <unknown> train citadel become a maester return take decease <unknown> 's place maester castle black jon agree sam 's proposal sam set journey citadel however become a trainee citadel a <unknown> hence <unknown> citadel give sam a problem test eligibility initially sam a list a single element n. perform certain operations list operation sam must remove element x x > 1 list insert position , sequentially must continue operations elements list either 0 1 . master want total number 1s range l r ( 1 - indexed ) sam want become a maester unfortunately solve problem help sam pass eligibility test ? first line contain three integers n l r ( 0 ≤ n < 250 0 ≤ r - l ≤ 105 r ≥ 1 l ≥ 1 ) – initial element range l r. guarantee r greater length final list output total number 1s range l r final sequence consider first example : elements position 2 - nd 5 - th list [ 1 1 1 1 ] number ones 4 . second example : elements position 3 - rd 10 - th list [ 1 1 1 0 1 0 1 0 ] number ones 5","['constructive algorithms', 'dfs and similar']",1600.0
756/A,pavel cook barbecue n skewer lay a <unknown> a row one n position pavel want skewer cook time every n position two directions : one direct originally reverse direction pavel a plan : a permutation p a sequence b1 b2 ... bn consist zero ones second pavel move skewer position i position pi bi equal 1 reverse hope every skewer visit every position directions unfortunately every pair permutation p sequence b suit pavel minimum total number elements give permutation p give sequence b need change every skewer visit 2n placements ? note change permutation remain a permutation well problem pavel skewer visit placements several time end cook word a permutation p a sequence b suit integer k ( k ≥ 2n ) k second skewer visit 2n placements show suitable pair permutation p sequence b exist n. first line contain integer n ( 1 ≤ n ≤ 2·105 ) — number skewer second line contain a sequence integers p1 p2 ... pn ( 1 ≤ pi ≤ n ) — permutation accord pavel want move skewer third line contain a sequence b1 b2 ... bn consist zero ones accord pavel want reverse skewer print single integer — minimum total number elements give permutation p give sequence b need change every skewer visit 2n placements first example pavel change permutation 4 3 1 2 . second example pavel change element b 1,"['constructive algorithms', 'dfs and similar']",1700.0
743/D,generous sponsor olympiad chloe vladik take part allow participants choose a prize christmas come sponsor decide decorate christmas tree prize take n prize contestants write a unique i d ( integer 1 n ) a gift i characterize integer ai — pleasantness gift pleasantness gift positive negative zero sponsor place gift 1 top tree gift hang a rope tie gift gift hang first gift possibly a sequence rope another gift formally gift form a root tree n vertices prize - <unknown> procedure go follow way : participants come tree one another choose remain gift cut rope prize hang note rope use hang prize choose one cut contestant get choose gift well gift hang possibly a sequence rope another gift friends chloe vladik share first place olympiad choose prize time ! keep fight decide choose two different gift set gift hang a sequence rope another gift n't intersect word n't gift hang gift choose chloe gift choose vladik possible variants choose pair prize sum pleasantness gift take cut rope large possible print maximum sum pleasantness vladik chloe get impossible choose gift without fight print impossible first line contain a single integer n ( 1 ≤ n ≤ 2·105 ) — number gift next line contain n integers a1 a2 ... ( - 109 ≤ ai ≤ 109 ) — pleasantness gift next ( n - 1 ) line contain two number i - th line contain integers ui vi ( 1 ≤ ui vi ≤ n ui ≠ vi ) — description tree 's edge mean gift number ui vi connect a rope gift ' ids description rope give <unknown> order : vi hang ui ui hang vi guarantee gift hang first gift possibly a sequence rope another gift possible chloe vladik choose prize without fight print single integer — maximum possible sum pleasantness get together otherwise print impossible,"['dfs and similar', 'dp']",1800.0
741/D,case somebody miss : wonderful girls arpa ’ s land arpa a root tree ( connect acyclic graph ) consist n vertices vertices number 1 n vertex 1 root a letter write edge tree mehrdad a fan dokhtar - kosh things call a string dokhtar - kosh shuffle character string become palindrome ask arpa vertex v length longest simple path subtree v form a dokhtar - kosh string first line contain integer n ( 1 ≤ n ≤ 5·105 ) — number vertices tree ( n - 1 ) line follow i - th contain integer pi + 1 a letter ci + 1 ( 1 ≤ pi + 1 ≤ i ci + 1 lowercase english letter a v inclusively ) mean edge nod pi + 1 i + 1 a letter ci + 1 write edge print n integers i - th length longest simple path subtree i - th vertex form a dokhtar - kosh string,"['data structures', 'dfs and similar']",2900.0
741/B,"remind girls arpa 's land really nice mehrdad want invite hose palace a dance party hos weight wi beauty bi also hos may friends hose divide friendship group two hose x y friendship group a sequence hose a1 a2 ... ak ai ai + 1 friends 1 ≤ i < k a1 = x ak = y. arpa allow use amphitheater palace mehrdad party arpa 's amphitheater hold w weight mehrdad greedy want invite hose sum weight greater w sum beauties large possible along friendship group either invite hose one otherwise hose hurt find mehrdad maximum possible total beauty hose invite one get hurt total weight n't exceed w. first line contain integers n m w ( 1 ≤ n ≤ 1000 , 1 ≤ w ≤ 1000 ) — number hose number pair friends maximum total weight invite second line contain n integers w1 w2 ... wn ( 1 ≤ wi ≤ 1000 ) — weight hose third line contain n integers b1 b2 ... bn ( 1 ≤ bi ≤ 106 ) — beauties hose next m line contain pair friends i - th contain two integers xi yi ( 1 ≤ xi yi ≤ n xi ≠ yi ) mean hose xi yi friends note friendship bidirectional pair ( xi yi ) distinct print maximum possible total beauty hose mehrdad invite one get hurt total weight n't exceed w. first sample two friendship group : hose { 1 2 } hos { 3 } best way choose hose first group sum weight equal 5 sum beauty 6 . second sample two friendship group : hose { 1 2 3 } hos { 4 } mehrdad ca n't invite hose first group total weight 12 > 11 thus best way choose first hos first group one second group total weight 8 total beauty 7","['dfs and similar', 'dp']",1600.0
723/E,n cities m two - way roads berland road connect two cities know one road connect pair cities road connect city possible way get one city city use roads road minister decide make a reform berland orient roads country i.e make road one - way minister want maximize number cities number roads begin city equal number roads end first line contain a positive integer t ( 1 ≤ t ≤ 200 ) — number testsets input testsets give follow way first line contain two integers n m ( 1 ≤ n ≤ 200 0 ≤ m ≤ n · ( n - 1 ) / 2 ) — number cities number roads berland next m line contain description roads berland line contain two integers u v ( 1 ≤ u v ≤ n ) — cities correspond road connect 's guarantee self - loops multiple roads possible way along roads a pair cities guarantee total number cities testset input data n't exceed 200 . pay attention hack use test consist one testset t equal one testset print maximum number cities number roads begin city equal number roads end next m line print orient roads first print number city road begin number city road end several answer print allow print roads test arbitrary order road print exactly,"['constructive algorithms', 'dfs and similar', 'greedy']",2200.0
700/B,treeland a country n towns connect n - 1 two - way road 's possible get town town treeland 2k universities locate different towns recently president sign decree connect universities high - speed network ministry education understand decree way decide enough connect university another one use a cable formally decree do ! maximum sum budget ministry decide divide universities pair total length require cable maximum word total distance universities k pair large possible help ministry find maximum total distance course university present one pair consider roads length equal 1 . first line input contain two integers n k ( 2 ≤ n ≤ 200 000 1 ≤ k ≤ n / 2 ) — number towns treeland number university pair consider towns number 1 n. second line contain 2k distinct integers u1 u2 ... <unknown> ( 1 ≤ ui ≤ n ) — indices towns universities locate next n - 1 line contain description roads line contain pair integers xj yj ( 1 ≤ xj yj ≤ n ) mean j - th road connect towns xj yj two - way roads move town use roads print maximum possible sum distance division universities k pair figure show one possible division pair first test connect universities number 1 6 ( mark red ) universities number 2 5 ( mark blue ) use cable total distance equal 6 maximum sum example,"['dfs and similar', 'dp']",1800.0
698/B,"a tree undirected connect graph without cycle let 's consider a root undirected tree n vertices number 1 n. many ways represent a tree one way create array n integers p1 p2 ... pn pi denote a parent vertex i ( convenience a root consider parent ) give a sequence p1 p2 ... pn one able restore a tree : a sequence p1 p2 ... pn call valid describe procedure generate ( ) root tree example n = 3 sequence ( 1,2,2 ) ( 2,3,1 ) ( 2,1,3 ) valid give a sequence a1 a2 ... , necessarily valid task change minimum number elements order get a valid sequence print minimum number change example a valid sequence number change many valid sequence achievable minimum number change print first line input contain integer n ( 2 ≤ n ≤ 200 000 ) — number vertices tree second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ n ) first line print minimum number elements change order get a valid sequence second line print valid sequence possible get ( a1 a2 ... ) minimum number change many sequence accept first sample 's enough change one element provide output a sequence represent a tree root a vertex 4 ( p4 = 4 ) see leave draw one correct solutions would a sequence 2 3 3 2 represent a tree root vertex 3 ( right draw ) draw root paint red second sample give sequence already valid","['constructive algorithms', 'dfs and similar']",1700.0
653/B,limak a little polar bear polar bear hate long string thus like compress also know limak young know first six letter english alphabet : ' a ' ' b ' ' c ' 'd ' ' e ' ' f ' give a set q possible operations limak perform order operation may apply number time i - th operation describe a string ai length two a string bi length one two q possible operations string ai limak a string s perform i - th operation s first two letter s match a two - letter string ai perform i - th operation remove first two letter s insert a string bi see note section clarification may note perform operation decrease length a string s exactly 1 . also set operations may a string compress first two letter n't match ai limak want start a string length n perform n - 1 operations finally get a one - letter string ` ` a '' many ways choose start string able get ` ` a '' ? remember limak use letter know first line contain two integers n q ( 2 ≤ n ≤ 6 1 ≤ q ≤ 36 ) — length initial string number available operations next q line describe possible operations i - th contain two string ai bi ( |ai| = 2 |bi| = 1 ) 's guarantee ai ≠ aj i ≠ j ai bi consist first six lowercase english letter print number string length n limak able transform string ` ` a '' apply operations give input first sample count initial string length 3 limak get a require string ` ` a '' 4 string : ` ` abb '' ` ` cab '' ` ` <unknown> '' ` ` <unknown> '' first one limak compress use operation 1 two time ( change ` ` ab '' a single ` ` a '' ) first operation would change ` ` abb '' ` ` ab '' second operation would change ` ` ab '' ` ` a '' three string may compress follow : second sample correct initial string ` ` eb '' immediately compress ` ` a '',"['brute force', 'dfs and similar', 'dp', 'strings']",1300.0
652/E,johnny play a well - known computer game game country player freely travel pass quest gain experience country n islands m bridge travel island middle bridge lie ancient powerful artifacts johnny interest artifacts get money sell artifact start johnny island a artifact - dealer island b ( possibly island ) johnny want find artifact come dealer sell difficulty bridge old destroy right pass <unknown> 's character ca n't swim fly teleport problem become difficult note johnny ca n't pass half bridge collect artifact return island determine johnny find artifact sell first line contain two integers n m ( 1 ≤ n ≤ 3·105 0 ≤ m ≤ 3·105 ) — number islands bridge game next m line contain description bridge — three integers xi yi zi ( 1 ≤ xi yi ≤ n xi ≠ yi 0 ≤ zi ≤ 1 ) xi yi islands connect i - th bridge zi equal one bridge contain artifact zero otherwise one bridge pair islands guarantee 's possible travel pair islands last line contain two integers a b ( 1 ≤ a b ≤ n ) — islands johnny artifact - dealer respectively johnny find artifact sell print word ` ` yes '' ( without quote ) otherwise print word ` ` '' ( without quote ),['dfs and similar'],2300.0
650/C,"little petya fond data compression algorithms already study <unknown> bz zip algorithms many others inspire new knowledge petya develop new compression algorithm want name dis petya decide compress table give a table a consist n row m columns fill positive integers want build table a ' consist positive integers relative order elements row column remain , row i initial table ai j < ai k result table a ' i j < a ' i k ai j = ai k a ' i j = a ' i k. similarly column j initial table ai j < ap j compress table a ' i j < a ' p j ai j = ap j a ' i j = a ' p j. large value require space store maximum value a ' small possible petya good theory however need help implement algorithm first line input contain two integers n m ( number row number columns table respectively follow n row contain m integers ai j ( 1 ≤ ai j ≤ 109 ) value table output compress table form n line contain m integers exist several answer maximum number compress table minimum possible allow output first sample test despite fact a1 2 ≠ <unknown> locate row column may become equal compression","['dfs and similar', 'dp', 'greedy']",2200.0
638/B,berland scientists face a important task - give part short dna fragment restore dinosaur dna ! genome a berland dinosaur note common genome ' ve use : 26 distinct nucleotide type a nucleotide type occur assign distinct english letter nucleotides genome a berland dinosaur represent a non - empty string consist small english letter letter occur scientists n genome fragment represent substrings ( non - empty sequence consecutive nucleotides ) seek genome face follow problem : help scientists restore dinosaur genome guarantee input contradictory least one suitable line always exist scientists find a strong programmer ask addition choose one minimum length multiple string choose string first line input contain a positive integer n ( 1 ≤ n ≤ 100 ) — number genome fragment next line contain one descriptions a fragment fragment a non - empty string consist distinct small letter english alphabet guarantee give fragment distinct fragment could arbitrarily overlap one fragment could a substring another one guarantee string distinct letter contain give fragment substrings single line output print genome minimum length contain give part nucleotides genome must distinct multiple suitable string print string minimum length also multiple suitable string print,"['dfs and similar', 'strings']",1500.0
618/D,a group n cities connect a network roads undirected road every pair cities roads total take exactly y second traverse single road a span tree a set roads contain exactly n - 1 roads 's possible travel two cities use roads span tree initial network choose every road tree time one need traverse road change y x second note 's guarantee x smaller y. would like travel cities use shortest path possible give n x y a description span tree choose find cost shortest path start city end city visit cities exactly first line input contain three integers n x y ( 2 ≤ n ≤ 200 000 1 ≤ x y ≤ 109 ) next n - 1 line contain a description a road span tree i - th line contain two integers ui vi ( 1 ≤ ui vi ≤ n ) — indices cities connect i - th road guarantee roads form a span tree print a single integer — minimum number second one need spend order visit cities exactly first sample roads span tree cost 2 roads cost 3 . one example optimal path second sample span tree roads span tree cost 3 roads cost 2 . one example optimal path,"['dfs and similar', 'dp', 'greedy']",2200.0
613/D,"meanwhile kingdom k get ready marriage king 's daughter however order lose face front relatives king first finish reform kingdom king wait daughter 's marriage reform must finish soon possible kingdom currently consist n cities cities connect n - 1 bidirectional road one get city city king save a lot one path two cities point reform ? key <unknown> state relocate distinct cities ( call cities important ) however due fact a high risk attack barbarians must do carefully king make several plan describe a set important cities wonder best plan barbarians capture cities important ( important ones enough protection sure ) capture city become impassable particular interest feature plan minimum number cities barbarians need capture order make important cities isolate , important cities would impossible reach important city help king calculate characteristic plan first line input contain integer n ( 1 ≤ n ≤ 100 000 ) — number cities kingdom next n - 1 line contain two distinct integers ui vi ( 1 ≤ ui vi ≤ n ) — indices cities connect i - th road guarantee get city one move along exist roads next line contain a single integer q ( 1 ≤ q ≤ 100 000 ) — number king 's plan next q line look follow : first go number ki — number important cities king 's plan ( 1 ≤ ki ≤ n ) follow exactly ki space - separated pairwise distinct number 1 n — number important cities plan sum ki 's does't exceed 100 000 . plan print a single integer — minimum number cities barbarians need capture print - 1 barbarians ' attempt isolate important cities effective first sample first third king 's plan barbarians capture city 3 enough second fourth plan attempt effective second sample cities capture 3 5","['dfs and similar', 'dp']",2800.0
601/D,give a tree t n vertices ( number 1 n ) a letter vertex tree root vertex 1 . let 's look subtree tv vertex v. possible read a string along simple path start v end vertex tv ( possibly v ) let 's denote number distinct string read way also 's a number cv assign vertex v. interest vertices maximum value compute two statistics : maximum value number vertices v maximum first line input contain one integer n ( 1 ≤ n ≤ 300 000 ) — number vertices tree second line contain n space - separated integers ci ( 0 ≤ ci ≤ 109 ) third line contain a string s consist n lowercase english letter — i - th character string letter vertex i. follow n - 1 line describe tree t. contain two space - separated integers u v ( 1 ≤ u v ≤ n ) indicate edge vertices u v. 's guarantee input describe a tree print two line first line print 1 ≤ i ≤ n. second line print number vertices v first sample tree look like : set string read individual vertices : finally value : second sample value ( 5 4 2 1 1 1 ) distinct string read t2 ; note read vertices 3 4,"['data structures', 'dfs and similar', 'strings']",2400.0
575/G,people bubbleland like drink beer little know beer good strong every time drink speed go 10 time slower drink <unknown> live city beergrade want go city beerburg give a road map bubbleland need find fastest way start journey beergrade speed 1 . come a new city always try a glass local beer divide speed 10 . question minimal time reach beerburg several paths minimal time pick one least roads still one path pick guarantee least one path beergrade beerburg first line input contain integer n — number cities bubbleland integer m — number roads country cities enumerate 0 n - 1 city 0 beergrade city n - 1 beerburg follow m line contain three integers a b ( a ≠ b ) len number indicate a bidirectional road cities a b length len first line output contain minimal time need go beergrade beerburg second line output contain number cities path beergrade beerburg take minimal time third line output contain number cities path order visit separate space,['dfs and similar'],2200.0
555/E,andrewid android a galaxy - known detective prepare a defense a possible attack <unknown> a major computer network network n vertices pair vertices connect m undirected channel plan transfer q important message via network i - th must send vertex si vertex di via one channel perhaps intermediate vertices protect attack a special algorithm develop unfortunately apply network contain direct channel therefore new channel ca n't create decide exist undirected channel enable transmit data one two directions task determine whether possible choose direction channel q message could successfully transmit first line contain three integers n m q ( 1 ≤ n m q ≤ 2·105 ) — number nod channel important message next m line contain two integers vi ui ( 1 ≤ vi ui ≤ n vi ≠ ui ) mean nod vi ui a channel a pair nod exist one channel next q line contain two integers si di ( 1 ≤ si di ≤ n si ≠ di ) — number nod source destination correspond message guarantee initially possible transmit message a solution exist print a single line ` ` yes '' ( without quote ) otherwise print ` ` '' ( without quote ) first sample test assign directions example follow : 1 → 2 1 → 3 3 → 2 4 → 3 . path first message 1 → 3 second one — 4 → 3 → 2 . third sample test assign directions example follow : 1 → 2 2 → 1 2 → 3 . path first message 1 → 2 → 3 second one — 2 → 1,['dfs and similar'],2800.0
549/B,"looksery company consist n staff members plan another big party every employee phone number phone number friends phone book everyone come party send message contact cool time everyone try spend much time fun possible send message everyone without special think moreover person even send a message igor max looksery developers start a dispute many message person get igor indicate n number i - th indicate many message view i - th employee go take igor guess correctly least one number win otherwise max win support max debate need give contact list employees determine whether a situation igor lose specifically need determine employees come party , visitors send message contact employee receive a number message different igor state first line contain a single integer n ( 1 ≤ n ≤ 100 ) — number employees company looksery next n line contain description contact list employees i - th line contain a string length n consist digits zero one specify contact list i - th employee j - th character i - th string equal 1 j - th employee i - th employee 's contact list otherwise n't guarantee i - th character i - th line always equal 1 . last line contain n space - separated integers : a1 a2 ... ( 0 ≤ ai ≤ n ) ai represent number message i - th employee get accord igor first line print a single integer m — number employees come party igor lose dispute second line print m space - separated integers — number employees arbitrary order igor win dispute case print -1 . multiple possible solutions print first sample igor suppose first employee receive 0 message since n't contain contact list must come party order receive one message come party receive 1 message second employee receive 0 message third also receive 1 message <unknown> igor wo n't guess number second sample single employee come party receive 1 message igor win n't third sample first employee receive 2 message second — 3 third — 2 fourth — 3","['constructive algorithms', 'dfs and similar', 'greedy']",2300.0
533/B,one big software company n employees number 1 n. director assign number 1 . every employee company except director exactly one immediate superior director course n't a superior call person a a subordinate another person b either b immediate supervisor a immediate supervisor a a subordinate person b. particular subordinate head employees company solve achieve important goal need form a workgroup every person efficiency express a positive integer ai i person 's number efficiency workgroup define total efficiency people include employees big software company obsess modern ways work process organization today pair program peak popularity workgroup form follow condition person enter workgroup able sort subordinate also workgroup pair word members workgroup number subordinate within workgroup even task determine maximum possible efficiency workgroup form observe give condition person include director company enter workgroup first line contain integer n ( 1 ≤ n ≤ 2·105 ) — number workers big software company n line follow describe company employees i - th line contain two integers pi ai ( 1 ≤ ai ≤ 105 ) — number person i - th employee 's immediate superior i - th employee 's efficiency director p1 = - 1 people condition 1 ≤ pi < i fulfil print a single integer — maximum possible efficiency workgroup sample test effective way make a workgroup employees number 1 2 4 5 6,"['dfs and similar', 'dp', 'strings']",2000.0
510/C,"fox ciel go publish a paper <unknown> ( fox operate computer systems pronounce : ` ` fox '' ) hear a rumor : author list paper always sort lexicographical order check examples find sometimes n't true paper author ' name n't sort lexicographical order normal sense always true modification order letter alphabet order author become lexicographical ! want know exist order letter latin alphabet name paper submit follow lexicographical order , find order lexicographical order define follow way compare s t first find leftmost position differ character : si ≠ ti position ( i. e. s a prefix t vice versa ) shortest string less otherwise compare character si ti accord order alphabet first line contain integer n ( 1 ≤ n ≤ 100 ) : number name follow n line contain one string namei ( 1 ≤ <unknown> ≤ 100 ) i - th name name contain lowercase latin letter name different exist order letter give name sort lexicographically output order a permutation character ' a ' – ' z ' ( i. e. first output first letter modify alphabet second ) otherwise output a single word ` ` impossible '' ( without quote )",['dfs and similar'],1600.0
505/C,shuseki islands archipelago <unknown> small islands <unknown> sea islands evenly space along a line number 0 30000 west east islands know contain many treasure n gems shuseki islands total i - th gem locate island pi mr . kitayuta arrive island 0 . great jump ability repeatedly perform jump islands east accord follow process : mr . kitayuta collect gems islands visit process find maximum number gems collect first line input contain two space - separated integers n d ( 1 ≤ n d ≤ 30000 ) denote number gems shuseki islands length mr . kitayuta 's first jump respectively next n line describe location gems i - th ( 1 ≤ i ≤ n ) contain a integer pi ( d ≤ p1 ≤ p2 ≤ ... ≤ pn ≤ 30000 ) denote number island contain i - th gem print maximum number gems mr . kitayuta collect first sample optimal route 0 → 10 ( +1 gem ) → 19 → 27 ( +2 gems ) → ... <unknown> second sample optimal route 0 → 8 → 15 → 21 → 28 ( +1 gem ) → 36 ( +1 gem ) → 45 ( +1 gem ) → 55 ( +1 gem ) → 66 ( +1 gem ) → 78 ( +1 gem ) → ... third sample optimal route 0 → 7 → 13 → 18 ( +1 gem ) → 24 ( +2 gems ) → 30 ( +1 gem ) → .,"['dfs and similar', 'dp']",1900.0
500/D,"new year come tree world ! world name imply n cities connect n - 1 roads two distinct cities always exist a path cities number integers 1 n roads number integers 1 n - 1 . let 's define d ( u v ) total length roads path city u city v. annual event people tree world repair exactly one road per year a result length one road decrease already know i - th year length ri - th road go become wi shorter length assume current year year 1 . three santas plan give present annually children tree world order need preparation go choose three distinct cities c1 c2 c3 make exactly one warehouse city k - th ( 1 ≤ k ≤ 3 ) santa take charge warehouse city ck really bore three santas keep a warehouse alone , decide build <unknown> - <unknown> - santa network ! cost need build network equal d ( c1 c2 ) + d ( c2 c3 ) + d ( c3 c1 ) dollars santas busy find best place decide choose c1 c2 c3 randomly uniformly triple distinct number 1 n. santas would like know expect value cost need build network however mention year length exactly one road decrease , santas want calculate expect length change help calculate value first line contain integer n ( 3 ≤ n ≤ 105 ) — number cities tree world next n - 1 line describe roads i - th line ( 1 ≤ i ≤ n - 1 ) contain three space - separated integers ai bi li ( 1 ≤ ai bi ≤ n ai ≠ bi 1 ≤ li ≤ 103 ) denote i - th road connect cities ai bi length i - th road li next line contain integer q ( 1 ≤ q ≤ 105 ) — number road length change next q line describe length change j - th line ( 1 ≤ j ≤ q ) contain two space - separated integers rj wj ( 1 ≤ rj ≤ n - 1 1 ≤ wj ≤ 103 ) mean j - th repair length rj - th road become wj guarantee wj smaller current length rj - th road road repair several time output q number give change print a line contain expect cost need build network tree world answer consider correct absolute relative error n't exceed 10 - 6 . consider first sample 6 triple : ( 1 2 3 ) ( 1 3 2 ) ( 2 1 3 ) ( 2 3 1 ) ( 3 1 2 ) ( 3 2 1 ) n = 3 cost need build network always d ( 1 2 ) + d ( 2 3 ) + d ( 3 1 ) triple , expect cost equal d ( 1 2 ) + d ( 2 3 ) + d ( 3 1 )",['dfs and similar'],1900.0
490/F,` ` road accident '' band plan unprecedented tour around treeland <unknown> fan look forward event make bet many concert favorite group treeland consist n cities pair cities connect bidirectional roads overall country n - 1 roads know possible get city one cities number integers 1 n. every city know value ri — number people know band travel along path concert cities along path band 's path pass one city twice time move city n't previously visit thus <unknown> travel along path ( without visit city twice ) ( necessarily ) cities along way concert band plan gather big <unknown> concert halls tour every time perform a city population larger population previously visit concert city word sequence population cities concert hold strictly increase a recent interview leader ` ` road accident '' band promise fan band give concert largest possible number cities ! thus band travel along chain cities treeland concert cities population number increase number concert largest possible fan treeland frantically try figure many concert group treeland look like ca n't manage without help a real programmer ! help fan find seek number concert first line input contain integer n ( 2 ≤ n ≤ 6000 ) — number cities treeland next line contain n integers r1 r2 ... rn ( 1 ≤ ri ≤ 106 ) ri population i - th city next n - 1 line contain descriptions roads one road per line road define a pair integers aj bj ( 1 ≤ aj bj ≤ n ) — pair number cities connect j - th road number line separate space print number cities ` ` road accident '' band concert,"['data structures', 'dfs and similar', 'dp']",2200.0
466/E,"n employees work company ` ` x '' ( let 's number 1 n convenience ) initially employees n't relationships among m next days one follow events take place : task write a program give events answer query describe type , guarantee throughout whole work time company n't cyclic dependencies first line contain two integers n m ( 1 ≤ n m ≤ 105 ) — number employees number events next m line contain description one event ( events give chronological order ) first number line determine type event t ( 1 ≤ t ≤ 3 ) guarantee input least one query third type query third type print ` ` yes '' employee sign document package ` ` '' otherwise print word without quote",['dfs and similar'],2100.0
461/B,appleman a tree n vertices vertices ( least one ) color black vertices color white consider a set consist k ( 0 ≤ k < n ) edge appleman 's tree appleman delete edge tree split ( k + 1 ) part note part a tree color vertices appleman wonder number set split tree a way result part exactly one black vertex ? find number modulo 1000000007 ( 109 + 7 ) first line contain integer n ( 2 ≤ n ≤ 105 ) — number tree vertices second line contain description tree : n - 1 integers p0 p1 ... pn - 2 ( 0 ≤ pi ≤ i ) pi mean edge connect vertex ( i + 1 ) tree vertex pi consider tree vertices number 0 n - 1 . third line contain description color vertices : n integers x0 x1 ... xn - 1 ( xi either 0 1 ) xi equal 1 vertex i color black otherwise vertex i color white output a single integer — number ways split tree modulo 1000000007 ( 109 + 7 ),"['dfs and similar', 'dp']",2000.0
445/B,dzy love chemistry enjoy mix chemicals dzy n chemicals m pair react want pour chemicals a test tube need pour one one order let 's consider danger a test tube danger empty test tube 1 . every time dzy pour a chemical already one chemicals test tube react danger test tube multiply 2 . otherwise danger remain find maximum possible danger pour chemicals one one optimal order first line contain two space - separated integers n m next m line contain two space - separated integers xi yi ( 1 ≤ xi < yi ≤ n ) integers mean chemical xi react chemical yi pair chemicals appear input consider chemicals number 1 n order print a single integer — maximum possible danger first sample 's one way pour danger wo n't increase second sample matter pour 1st chemical first pour 2nd chemical first answer always 2 . third sample four ways achieve maximum possible danger : 2 - 1 - 3 2 - 3 - 1 1 - 2 - 3 3 - 2 - 1 ( number chemicals order pour ),"['dfs and similar', 'greedy']",1400.0
424/E,cold winter even tomsk bore — nobody want streets a time residents tomsk away time sit warm apartments invent a lot different game one game ' colored <unknown> ' game require wooden block three color : red green blue a tower n level make level consist three wooden block block level arbitrary color always locate close parallel example a tower show figure game play exactly one person every minute a player throw a special dice six side two side dice green two blue one red one black dice show side equiprobably dice show red green blue player must take block color tower minute tower n't fall possible player wait end minute without touch tower also wait end minute without touch tower dice show black side allow take block top level tower ( whether complete ) a player get a block must put top tower form a new level finish upper level consist previously place block newly construct level properties initial level upper level complete start new level prohibit tower fall level except top least one block moreover level exactly one block leave block middle block tower fall game end moment block tower take tower n't fall a wonderful game invent residents city tomsk i wonder many minutes game last player act optimally well ? a player act optimally well moment try choose block take minimize expect number game duration task write a program determine expect number desire amount minutes first line input contain integer n ( 2 ≤ n ≤ 6 ) — number level tower n line follow describe level tower bottom top ( first line top tower ) level describe three character first third set border block level second one middle block character describe block one follow value ' r ' ( a red block ) ' g ' ( a green block ) ' b ' ( a blue block ) line output print seek mathematical expectation value answer consider correct relative absolute error n't exceed 10 - 6,"['dfs and similar', 'dp']",2500.0
406/D,"problem nothing little chris hill climbers instead ( chris definitely n't one ) n hill arrange a line form a vertical line segment one endpoint grind hill number number 1 n leave right i - th hill stand position xi top height yi every two hill a b top hill a see top hill b top connect a rope formally top two hill connect segment connect top point intersect touch hill segment use rope hill climbers move hill hill m team climbers compose exactly two members first second climbers i - th team locate top ai - th bi - th hill respectively want meet together top hill , two climbers move accord follow process : team climbers determine number meet hill pair ! first line input contain a single integer n ( 1 ≤ n ≤ 105 ) number hill next n line describe hill i - th contain two space - separated integers xi yi ( 1 ≤ xi ≤ 107 ; 1 ≤ yi ≤ 1011 ) position height i - th hill hill give ascend order xi i.e. xi < xj i < j. next line input contain a single integer m ( 1 ≤ m ≤ 105 ) number team next m line describe team i - th contain two space - separated integers ai bi ( 1 ≤ ai bi ≤ n ) number hill climbers i - th team locate possible ai = bi a single line output m space - separated integers i - th integer number meet hill members i - th team","['dfs and similar', 'geometry']",2200.0
405/E,little chris participate a graph cut contest 's a pro time come test skills <unknown> chris give a simple undirected connect graph n vertices ( number 1 n ) m edge problem cut edge - distinct paths length 2 . formally chris partition edge graph pair a way edge a single pair adjacent edge must contain exactly one pair example figure show a way chris cut a graph first sample test contain description graph give a chance compete chris find a way cut give graph determine impossible ! first line input contain two space - separated integers n m ( 1 ≤ n m ≤ 105 ) number vertices number edge graph next m line contain description graph 's edge i - th line contain two space - separated integers ai bi ( 1 ≤ ai bi ≤ n ; ai ≠ bi ) number vertices connect i - th edge guarantee give graph simple ( without self - loops multi - edges ) connect note : since size input output could large n't use slow output techniques language example use input output stream ( cin cout ) c++ possible cut give graph edge - distinct paths length 2 output line i - th line print three space - separated integers xi yi zi description i - th path graph contain path i.e. graph contain edge ( xi yi ) ( yi zi ) edge appear exactly one path length 2 . multiple solutions output impossible cut give graph print ` ` solution '' ( without quote ),['dfs and similar'],2300.0
375/D,a root tree consist n vertices vertex tree color assume tree vertices number integers 1 n. represent color vertex v cv tree root a vertex number 1 . problem need answer m query query describe two integers vj kj answer query vj kj number color vertices x subtree vertex vj contain least kj vertices color x. find definition a root tree follow link : http : //en.wikipedia.org / wiki / tree _ ( graph_theory ) first line contain two integers n m ( 2 ≤ n ≤ 105 ; 1 ≤ m ≤ 105 ) next line contain a sequence integers c1 c2 ... cn ( 1 ≤ ci ≤ 105 ) next n - 1 line contain edge tree i - th line contain number ai bi ( 1 ≤ ai bi ≤ n ; ai ≠ bi ) — vertices connect edge tree next m line contain query j - th line contain two integers vj kj ( 1 ≤ vj ≤ n ; 1 ≤ kj ≤ 105 ) print m integers — answer query order query appear input a subtree vertex v a root tree root r a set vertices { u : dist ( r v ) + dist ( v u ) = dist ( r u ) } dist ( x y ) length ( edge ) shortest path vertices x y,"['data structures', 'dfs and similar']",2400.0
369/D,"one fine morning n fool line a row , number number 1 n inclusive fool get a unique number fool decide change number end fun every fool exactly k bullets a pistol addition fool number i probability pi ( percent ) kill fool shoot fool decide several round fun round fun look like : currently live fool shoot another live fool smallest number ( a fool stupid enough shoot ) shots round perfomed one time ( simultaneously ) exactly one live fool shoot let 's define a situation set number live fool time say a situation possible integer number j ( 0 ≤ j ≤ k ) a nonzero probability j round fun situation occur valera know number p1 p2 ... pn k. help valera determine number distinct possible situations first line contain two integers n k ( 1 ≤ n k ≤ 3000 ) — initial number fool number bullets fool second line contain n integers p1 p2 ... pn ( 0 ≤ pi ≤ 100 ) — give probabilities ( percent ) print a single number — answer problem first sample situation possible except situation { 1 2 } second sample exactly one fool make shots third sample possible situations { 1 2 } ( zero round ) ` ` empty '' situation { } ( one round ) fourth sample possible situation { 1 2 3 }","['dfs and similar', 'dp']",2200.0
176/E,"time help a team researchers island pacific ocean research culture ancient tribes use inhabit island many years ago overall ' ve dig n villages pair villages connect roads people could go roads directions overall exactly n - 1 roads village one could get one tribes peaceful many war a result war villages destroy completely peaceful years villages restore moment time people use roads belong shortest way two villages exist give moment word people use minimum subset roads a way possible get exist village exist one note throughout island 's whole history exist exactly n - 1 roads find researchers never roads researchers think observe total sum use roads ’ lengths different moments time help better understand tribes ' culture answer several historical question give full history tribes ' existence task determine total length use roads moments time first line contain integer n ( 1 ≤ n ≤ 105 ) — number villages next n - 1 line describe roads i - th line contain three integers ai bi ci ( 1 ≤ ai bi ≤ n ai ≠ bi 1 ≤ ci ≤ 109 1 ≤ i < n ) — number villages connect i - th road road 's length number line separate a space next line contain integer q ( 1 ≤ q ≤ 105 ) — number query follow q query one per line order time query belong one three type : guarantee query contradict , wo n't query destroy non - existing villages restore already exist ones guarantee least one query type ` ` ? ` ` also guarantee one get village one give roads initial moment time village consider exist query type ` ` ? '' print total length use roads a single line print answer query order give input please use % lld specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d specifier","['data structures', 'dfs and similar']",3100.0
161/D,a tree a connect graph n't contain cycle distance two vertices a tree length ( edge ) shortest path vertices give a tree n vertices a positive number k. find number distinct pair vertices a distance exactly k note pair ( v u ) ( u v ) consider pair first line contain two integers n k ( 1 ≤ n ≤ 50000 1 ≤ k ≤ 500 ) — number vertices require distance vertices next n - 1 line describe edge ` ` ai bi '' ( without quote ) ( 1 ≤ ai bi ≤ n ai ≠ bi ) ai bi vertices connect i - th edge give edge different print a single integer — number distinct pair tree 's vertices a distance exactly k please use % lld specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d specifier first sample pair vertexes distance 2 ( 1 3 ) ( 1 5 ) ( 3 5 ) ( 2 4 ),"['dfs and similar', 'dp']",1800.0
103/B,... upon a time a man come sea sea <unknown> dark man start call little <unknown> appear alas wake cthulhu ... whereas end world pentagon actively collect information try predict monster 's behavior prepare secret super weapon due high <unknown> activity poor weather condition <unknown> n't yet able make clear shots monster analysis first shoot result undirected graph n vertices m edge world 's best mind determine whether graph regard cthulhu add simplicity let 's suppose cthulhu look space like <unknown> body tentacles attach formally shall regard cthulhu undirected graph represent a set three root tree whose root connect a simple cycle guarantee graph contain multiple edge self - loops first line contain two integers — number vertices n number edge m graph ( 1 ≤ n ≤ 100 0 ≤ m ≤ ) follow m line contain a pair integers x y show edge exist vertices x y ( 1 ≤ x y ≤ n x ≠ y ) pair vertices one edge edge connect a vertex print ` ` '' graph cthulhu ` ` <unknown> ! ''   let us denote a simple cycle a set v vertices number edge exist vertices number 1 2 2 3 ... v - 1 v v 1 . a tree a connect undirected graph consist n vertices n - 1 edge ( n > 0 ) a root tree a tree one vertex select root,['dfs and similar'],1500.0
65/D,know hogwarts four house : gryffindor hufflepuff ravenclaw slytherin sort first - years house do sort hat pupils call one one alphabetical order put a hat head think hat solemnly announce name house student enter hat believe base considerations student 's personal qualities : send brave noble ones gryffindor smart <unknown> ones — ravenclaw persistent honest ones — hufflepuff clever cunning ones — slytherin however a first year student hermione granger get concern <unknown> sort study literature sort hat come conclusion much simpler relatives student already study hogwarts hat put student house family use study controversial situations relatives study different house <unknown> like hermione 's parent hat sort student house least number first years send moment several house choice give student student choose house least number first years send far hermione already ask students list relatives new friends harry potter ron weasley want find house hat put hermione first input line contain integer n ( 1 ≤ n ≤ 10000 ) number students list hermione next line contain n symbols relatives a student use study house i - th character string coincide first letter name house otherwise i - th symbol equal ` ` ? ` ` print possible house hermione send name house print alphabetical order one per line consider second example two students hermione first student send hufflepuff second disciple give choice house least number students send i.e gryffindor slytherin ravenclaw choose gryffindor hermione force choose ravenclaw slytherin choose ravenclaw hermione choose gryffindor slytherin choose slytherin hermione choose gryffindor ravenclaw end follow situation possible ( depend choice second student hermione ) hermione end 1 ) gryffindor 2 ) ravenclaw 3 ) slytherin note despite fact neither case hermione give a choice three options possible print answer hermione circumstances end hufflepuff,"['brute force', 'dfs and similar']",2200.0
61/D,valerian capture shapur victory a great one shapur decide carve a scene valerian 's defeat a mountain find best place make victory eternal ! decide visit n cities persia find best available mountain recent war tire n't want traverse a lot want visit n cities least smallest possible traverse persian cities connect bidirectional roads go city one use roads a unique path two cities cities number 1 n. shapur currently city 1 want visit cities minimum possible traverse finish travel city help shapur find much travel first line contain a single natural number n ( 1 ≤ n ≤ 105 ) — amount cities next n - 1 line contain 3 integer number xi yi wi ( 1 ≤ xi yi ≤ n 0 ≤ wi ≤ 2 × 104 ) xi yi two end a road wi length road a single integer number minimal length shapur 's travel please use % lld specificator read write 64 - bit integers c++ preffered use cout ( also may use % i64d ),"['dfs and similar', 'greedy']",1800.0
51/F,undirected graph call a caterpillar a connect graph without cycle a path p vertex locate a distance 1 path p. caterpillar contain loop ( edge a vertex ) contain multiple ( parallel ) edge picture contain example a caterpillar : give undirected graph g. allow a merge operations operation merge two vertices one vertex two vertices a b ( a ≠ b ) choose <unknown> delete together edge ( incident least one vertices a b ) a new vertex w add together edge ( x w ) edge ( a w ) and/or ( b w ) edge ( a b ) transform loop ( w w ) result graph ( merge operation ) may contain multiple ( parallel ) edge pair vertices loop let us note operation decrease number vertices graph 1 leave number edge graph unchanged merge operation <unknown> describe a unity two vertices graph one natural transformation graph edge may apply operation consecutively make give graph a caterpillar write a program print minimal number merge operations require make give graph a caterpillar first line contain a pair integers n m ( 1 ≤ n ≤ 2000 ; 0 ≤ m ≤ 105 ) n represent number vertices graph m number edge follow m line contain edge descriptions one edge description per line every line contain a pair integers ai bi ( 1 ≤ ai bi ≤ n ; ai ≠ bi ) ai bi represent indices vertices connect edge vertices number 1 n. give graph one edge pair vertices give graph necessarily connect print minimal require number operations,"['dfs and similar', 'dp']",2800.0
896/B,"interactive problem refer interaction section better understand ithea chtholly want play a game order determine use kitchen tonight initially ithea put n clear sheet paper a line number 1 n leave right game go m round round ithea give chtholly integer 1 c chtholly need choose one sheet write number ( already a number erase original one replace new one ) chtholly win time sheet fill a number n number non - decreasing order look leave right sheet 1 sheet n m round still n't win lose game chtholly really want win game want cook something willem n't know win game chtholly find task write a program receive number ithea give chtholly help make decision sheet paper write number first line contain 3 integers n m c ( mean round ) — number sheet number round largest possible number ithea give chtholly respectively remain part input give throughout interaction process round program need read one line contain a single integer pi ( 1 ≤ pi ≤ c ) indicate number give chtholly program output a line contain integer 1 n indicate number sheet write number output line n't forget flush output example : chtholly win end a round input become available program terminate normally show constraints 's always possible chtholly win game example chtholly initially know 2 sheet 4 round number 1 4 . receive a 2 decide write 1st sheet receive a 1 write 2nd sheet last receive a 3 replace 1 3 2nd sheet time sheet fill a number non - decreasing game note require program terminate immediately chtholly win read number input remain round , undefined behaviour may arise wo n't sure whether program accept reject also please careful hack others ' cod sample chtholly game 3rd round require program n't read number remain 4th round input format hack :","['constructive algorithms', 'greedy']",2000.0
1119/E,"pavel several stick lengths equal power two $$$ a_0 $$$ stick length $$$ 2 ^ 0 = 1 $$$ $$$ a_1 $$$ stick length $$$ 2 ^ 1 = 2 $$$ ... $$$ a _ { n-1 } $$$ stick length $$$ 2^ { n-1 } $$$ pavel want make maximum possible number triangles use stick triangles strictly positive area stick use one triangle forbid break stick triangle consist exactly three stick find maximum possible number triangles first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 300\,000 $$$ ) — number different lengths stick second line contain $$$ n $$$ integers $$$ a_0 $$$ $$$ a_1 $$$ ... $$$ a _ { n-1 } $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) $$$ a_i $$$ number stick length equal $$$ 2^i $$$ print a single integer — maximum possible number non - degenerate triangles pavel make first example pavel example make set triangles ( lengths side triangles list ) : $$$ ( 2 ^ 0 2 ^ 4 2 ^ 4 ) $$$ $$$ ( 2 ^ 1 2 ^ 3 2 ^ 3 ) $$$ $$$ ( 2 ^ 1 2 ^ 2 2 ^ 2 ) $$$ second example pavel make a single triangle third example pavel example create set triangles ( lengths side triangles list ) : $$$ ( 2 ^ 0 2 ^ 0 2 ^ 0 ) $$$ $$$ ( 2 ^ 1 2 ^ 1 2 ^ 1 ) $$$ $$$ ( 2 ^ 2 2 ^ 2 2 ^ 2 ) $$$","['brute force', 'dp', 'greedy']",1900.0
300/D,vasily bear get a large square white table n row n columns table get a black border around table vasily bear want paint square table exactly k move move sequence action : bear already know number n k. help — find number ways paint square exactly k move two ways paint call distinct result table differ least one cell answer rather large print remainder divide 7340033 . first line contain integer q ( 1 ≤ q ≤ 105 ) — number test data follow q line contain two integers n k ( 1 ≤ n ≤ 109 0 ≤ k ≤ 1000 ) — size initial table number move correspond test test input print answer problem modulo 7340033 . print answer test order test give input possible paint ways test n = 7 k = 2 :,['dp'],2300.0
1743/D,give a string $$$ s $$$ consist $$$ n $$$ character character $$$ s $$$ either 0 1 . a substring $$$ s $$$ a contiguous subsequence character choose two substrings $$$ s $$$ ( possibly intersect possibly possibly non - intersecting — two substrings ) choose calculate value choose pair substrings follow : calculate maximum possible value get print binary representation without lead zero first line contain one integer $$$ n $$$ — number character $$$ s $$$ second line contain $$$ s $$$ consist exactly $$$ n $$$ character 0 and/or 1 . non - example test problem generate randomly : every character $$$ s $$$ choose independently character ; character probability 1 exactly $$$ \frac { 1 } { 2 } $$$ problem exactly $$$ 40 $$$ test test $$$ 1 $$$ $$$ 3 $$$ examples ; test $$$ 4 $$$ $$$ 40 $$$ generate randomly test $$$ 4 $$$ $$$ 10 $$$ $$$ n = 5 $$$ ; test $$$ 11 $$$ $$$ 20 $$$ $$$ n = 1000 $$$ ; test $$$ 21 $$$ $$$ 40 $$$ $$$ n = 1000000 $$$ hack forbid problem print maximum possible value get binary representation without lead zero first example choose substrings 11010 101 $$$ f ( s_1 ) = 26 $$$ $$$ f ( s_2 ) = 5 $$$ bitwise $$$ 31 $$$ binary representation $$$ 31 $$$ 11111 . second example choose substrings <unknown> 11100,"['brute force', 'dp', 'greedy']",1700.0
626/D,"andrew jerry play a game harry <unknown> game consist three round round andrew jerry draw randomly without replacement a jar contain n ball label a distinct positive integer without look hand ball harry award point player larger number return ball jar winner game one win least two three round andrew win round 1 2 jerry win round 3 andrew win game however jerry unhappy system claim often lose match despite higher overall total probability sum three ball jerry draw strictly higher sum three ball andrew draw ? first line input contain a single integer n ( 2 ≤ n ≤ 2000 ) — number ball jar second line contain n integers ai ( 1 ≤ ai ≤ 5000 ) — number write ith ball guarantee two ball number print a single real value — probability jerry a higher total give andrew win first two round jerry win third answer consider correct absolute relative error exceed 10 - 6 . namely : let 's assume answer a answer jury b. checker program consider answer correct , first case two ball first two round andrew must draw 2 jerry must draw 1 vice versa final round thus andrew 's sum 5 jerry 's sum 4 jerry never a higher total second case game could ' ve three outcomes — 10 - 2 10 - 1 2 - 1 . jerry a higher total andrew 2 - 1 first two round jerry draw 10 last round probability","['brute force', 'dp']",1800.0
540/D,bad luck island inhabit three kinds species : r rock s scissor p paper moments time two random individuals meet ( pair individuals meet equiprobably ) belong different species one individual kill one : a rock kill scissor scissor kill paper paper kill a rock task determine species probability species one inhabit island a long enough period time single line contain three integers r s p ( 1 ≤ r s p ≤ 100 ) — original number individuals species rock scissor paper respectively print three space - separated real number : probabilities rock scissor paper survive species respectively answer consider correct relative absolute error number n't exceed 10 - 9,['dp'],1900.0
1817/E,'re give a multiset non - negative integers $$$ \ { a_1 a_2 \dots a_n\ } $$$ one step take two elements $$$ x $$$ $$$ y $$$ multiset remove insert mean value $$$ \frac { x + y } { 2 } $$$ back multiset repeat step describe leave two number $$$ a $$$ $$$ b $$$ maximum possible value absolute difference $$$ |a - b| $$$ ? since answer integer number output modulo $$$ 1000000000 + 7 $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 1000000 $$$ ) — size multiset second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) — elements multiset guarantee sum $$$ n $$$ test case exceed $$$ 1000000 $$$ test case output a single integer answer problem modulo $$$ 1000000000 + 7 $$$ formally let $$$ m = 1000000000 + 7 $$$ show answer express irreducible fraction $$$ \frac { p } { q } $$$ $$$ p $$$ $$$ q $$$ integers $$$ q \not \equiv 0 \pmod { m } $$$ output integer equal $$$ p \cdot q^ { -1 } \bmod m $$$ word output integer $$$ x $$$ $$$ 0 \le x < m $$$ $$$ x \cdot q \equiv p \pmod { m } $$$ first case ca n't operations answer $$$ |7 - <unknown> $$$ second case one optimal sequence operations : third case exact answer $$$ \frac { 3 } { 2 } $$$ $$$ <unknown> \cdot 2 \equiv 3 \pmod { 1000000000 + 7 } $$$,"['brute force', 'greedy']",3400.0
1696/D,"a permutation array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) give a permutation $$$ 1,2 \dots n $$$ $$$ [ a_1 a_2 \dots a_n ] $$$ integers $$$ i $$$ $$$ j $$$ $$$ 1\le i < j\le n $$$ define $$$ \operatorname { mn } ( i j ) $$$ $$$ \min\limits _ { k = i } ^j a_k $$$ define $$$ \operatorname { mx } ( i j ) $$$ $$$ \max\limits _ { k = i } ^j a_k $$$ let us build undirected graph $$$ n $$$ vertices number $$$ 1 $$$ $$$ n $$$ every pair integers $$$ 1\le i < j\le n $$$ $$$ \operatorname { mn } ( i j ) = a_i $$$ $$$ \operatorname { mx } ( i j ) = a_j $$$ hold $$$ \operatorname { mn } ( i j ) = a_j $$$ $$$ \operatorname { mx } ( i j ) = a_i $$$ hold add undirected edge length $$$ 1 $$$ vertices $$$ i $$$ $$$ j $$$ graph find length shortest path vertex $$$ 1 $$$ vertex $$$ n $$$ prove $$$ 1 $$$ $$$ n $$$ always connect via path a shortest path always exist test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 5\cdot 10000 $$$ ) description test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1\le n\le 2.5\cdot 100000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ $$$ \ldots $$$ $$$ a_n $$$ ( $$$ 1\le a_i\le n $$$ ) 's guarantee $$$ a $$$ a permutation $$$ 1 $$$ $$$ 2 $$$ $$$ \dots $$$ $$$ n $$$ guarantee sum $$$ n $$$ test case exceed $$$ 5\cdot 100000 $$$ test case print a single line contain one integer — length shortest path $$$ 1 $$$ $$$ n $$$ follow illustrations construct graph example test case","['constructive algorithms', 'data structures', 'greedy']",1900.0
1693/D,let 's call array $$$ a $$$ $$$ m $$$ integers $$$ a_1 a_2 \ldots a_m $$$ decinc $$$ a $$$ make increase remove a decrease subsequence ( possibly empty ) give a permutation $$$ p $$$ number $$$ 1 $$$ $$$ n $$$ find number pair integers $$$ ( l r ) $$$ $$$ 1 \le l \le r \le n $$$ $$$ p [ l \ldots r ] $$$ ( subarray $$$ p $$$ $$$ l $$$ $$$ r $$$ ) a decinc array first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — size $$$ p $$$ second line contain $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$ ( $$$ 1 \le p_i \le n $$$ $$$ p_i $$$ distinct ) — elements permutation output number pair integers $$$ ( l r ) $$$ $$$ p [ l \ldots r ] $$$ ( subarray $$$ p $$$ $$$ l $$$ $$$ r $$$ ) a decinc array $$$ ( 1 \le l \le r \le n ) $$$ first sample subarrays decinc second sample subarrays except $$$ p [ 1 \ldots 6 ] $$$ $$$ p [ 2 \ldots 6 ] $$$ decinc,"['brute force', 'data structures', 'dp', 'greedy']",2800.0
1603/D,"two positive integers $$$ l $$$ $$$ r $$$ ( $$$ l \le r $$$ ) let $$$ c ( l r ) $$$ denote number integer pair $$$ ( i j ) $$$ $$$ l \le i \le j \le r $$$ $$$ \operatorname { gcd } ( i j ) \ge l $$$ , $$$ \operatorname { gcd } ( i j ) $$$ greatest common divisor ( gcd ) integers $$$ i $$$ $$$ j $$$ youkn0wwho two integers $$$ n $$$ $$$ k $$$ $$$ 1 \le k \le n $$$ let $$$ f ( n k ) $$$ denote minimum $$$ \sum\limits _ { i=1 } ^ { k } { c ( x_i+1 x _ { i+1 } ) } $$$ integer sequence $$$ 0 = x_1 \lt x_2 \lt \ldots \lt x _ { k } \lt x _ { k+1 } = n $$$ help youkn0wwho find $$$ f ( n k ) $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 300000 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 100000 $$$ ) test case print a single integer — $$$ f ( n k ) $$$ first test case youkn0wwho select sequence $$$ [ 0 2 6 ] $$$ $$$ f ( 6 2 ) = c ( 1 2 ) + c ( 3 6 ) = 3 + 5 = 8 $$$ minimum possible",['dp'],3000.0
1601/C,give two array integers $$$ a_1 a_2 \ldots a_n $$$ $$$ b_1 b_2 \ldots b_m $$$ need insert elements $$$ b $$$ $$$ a $$$ arbitrary way a result get array $$$ c_1 c_2 \ldots c _ { n+m } $$$ size $$$ n + m $$$ note allow change order elements $$$ a $$$ insert elements $$$ b $$$ arbitrary position insert begin elements $$$ a $$$ end moreover elements $$$ b $$$ appear result array order minimum possible number inversions result array $$$ c $$$ ? recall inversion a pair indices $$$ ( i j ) $$$ $$$ i < j $$$ $$$ c_i > c_j $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 1000000 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) third line test case contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 1 \leq b_i \leq 1000000000 $$$ ) guarantee sum $$$ n $$$ test case one input n't exceed $$$ 1000000 $$$ sum $$$ m $$$ test case n't exceed $$$ 1000000 $$$ well test case print one integer — minimum possible number inversions result array $$$ c $$$ give solution get optimal answer example test case ( elements $$$ a $$$ underscore ),"['data structures', 'dp', 'greedy']",2300.0
1547/F,give array positive integers $$$ a = [ a_0 a_1 \dots a _ { n - 1 } ] $$$ ( $$$ n \ge 2 $$$ ) one step array $$$ a $$$ replace another array length $$$ n $$$ element greatest common divisor ( gcd ) two neighbor elements ( element right neighbor ; consider right neighbor $$$ ( n - 1 ) $$$ -th element $$$ 0 $$$ -th element ) formally speak a new array $$$ b = [ b_0 b_1 \dots b _ { n - 1 } ] $$$ build array $$$ a = [ a_0 a_1 \dots a _ { n - 1 } ] $$$ $$$ b_i $$$ $$$ = \gcd ( a_i a _ { ( i + 1 ) \mod n } ) $$$ $$$ \gcd ( x y ) $$$ greatest common divisor $$$ x $$$ $$$ y $$$ $$$ x \mod y $$$ remainder $$$ x $$$ divide $$$ y $$$ one step array $$$ b $$$ build array $$$ a $$$ replace $$$ b $$$ ( assignment $$$ a $$$ : = $$$ b $$$ take place ) example $$$ a = [ 16 24 10 5 ] $$$ $$$ b = [ \gcd ( 16 24 ) $$$ $$$ \gcd ( 24 10 ) $$$ $$$ \gcd ( 10 5 ) $$$ $$$ \gcd ( 5 16 ) ] $$$ $$$ = [ 8 2 5 1 ] $$$ thus one step array $$$ a = [ 16 24 10 5 ] $$$ equal $$$ [ 8 2 5 1 ] $$$ a give array $$$ a $$$ find minimum number step value $$$ a_i $$$ become equal ( $$$ a_0 = a_1 = \dots = a _ { n - 1 } $$$ ) original array $$$ a $$$ consist identical elements consider number step equal $$$ 0 $$$ first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) $$$ t $$$ test case follow test case contain two line first line contain integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — length sequence $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_0 a_1 \dots a _ { n - 1 } $$$ ( $$$ 1 \le a_i \le 1000000 $$$ ) guarantee sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ print $$$ t $$$ number — answer test case,"['brute force', 'data structures']",1900.0
1140/E,let 's denote array $$$ b $$$ bad contain a subarray $$$ b_l b _ { l+1 } \dots b _ { r } $$$ odd length $$$ 1 $$$ ( $$$ l < r $$$ $$$ r - l + 1 $$$ odd ) $$$ \forall i \in \ { 0 1 \dots r - <unknown> } $$$ $$$ b _ { l + i } = b _ { r - i } $$$ array bad good give array $$$ a_1 a_2 \dots a_n $$$ elements replace $$$ -1 $$$ calculate number good array obtain replace $$$ -1 $$$ integer $$$ 1 $$$ $$$ k $$$ since answer large print modulo $$$ 998244353 $$$ first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n k \le 200000 $$$ ) — length array $$$ a $$$ size ` ` alphabet '' i. e. upper bind number may use replace $$$ -1 $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ a_i = -1 $$$ $$$ 1 \le a_i \le k $$$ ) — array $$$ a $$$ print one integer — number good array get modulo $$$ 998244353 $$$,['dp'],2200.0
573/D,would want fight bear rid horse ? neither limak a grizzly bear general <unknown> army bearland important part army cavalry course cavalry bearland consist n warriors n horse i - th warrior strength wi i - th horse strength hi warrior together horse call a unit strength a unit equal multiply strengths warrior horse total strength cavalry equal sum strengths n units good assignment warriors horse make cavalry truly powerful initially i - th warrior i - th horse give q query query two warriors swap horse general limak must ready every possible situation warriors n't allow ride horse ? query find maximum possible strength cavalry consider assignments warriors horse warrior assign horse ( prove n ≥ 2 always least one correct assignment ) note ca n't leave a warrior without a horse first line contain two space - separated integers n q ( 2 ≤ n ≤ 30 000 1 ≤ q ≤ 10 000 ) second line contain n space - separated integers w1 w2 ... wn ( 1 ≤ wi ≤ 106 ) — strengths warriors third line contain n space - separated integers h1 h2 ... hn ( 1 ≤ hi ≤ 106 ) — strengths horse next q line describe query i - th contain two space - separated integers ai bi ( 1 ≤ ai bi ≤ n ai ≠ bi ) indices warriors swap horse print q line answer query i - th line print maximum possible strength cavalry first i query clarification first sample : horse : 3 7 2 5 first query situation look like follow : horse : 3 5 2 7 get 1·2 + 10·3 + <unknown> + <unknown> = <unknown> ( note <unknown> take horse assignment ) second query get back initial situation optimal assignment 1·2 + 10·3 + 100·5 + <unknown> = <unknown> . clarification second sample first query : horse : 2 3 1 optimal assignment 7·1 + 11·2 + <unknown> = 44 . second query 7·3 + 11·2 + 5·1 = 48 . finally 7·2 + <unknown> + 5·1 = 52,"['data structures', 'dp']",3000.0
372/B,n × m rectangular grid cell grid contain a single integer : zero one let 's call cell i - th row j - th column ( i j ) let 's define a ` ` rectangle '' four integers a b c d ( 1 ≤ a ≤ c ≤ n ; 1 ≤ b ≤ d ≤ m ) rectangle denote a set cells grid { ( x y ) : a ≤ x ≤ c b ≤ y ≤ d } let 's define a ` ` good rectangle '' a rectangle include cells zero answer follow q query : calculate number good rectangles cells give rectangle three integers first line : n m q ( 1 ≤ n m ≤ 40 1 ≤ q ≤ 3·105 ) next n line contain m character — grid consider grid row number top bottom grid columns number leave right columns row number start 1 . next q line contain a query — four integers describe current rectangle a b c d ( 1 ≤ a ≤ c ≤ n ; 1 ≤ b ≤ d ≤ m ) query output answer — a single integer a separate line first example a 5 × 5 rectangular grid first second third query represent follow image,"['brute force', 'dp']",1900.0
279/E,valera consider a number beautiful equal 2k <unknown> integer k ( k ≥ 0 ) recently math teacher ask valera represent number n sum beautiful number valera really greedy want complete task use beautiful number possible help valera find many number go need word look decompositions number n beautiful summands need find size decomposition fewest summands first line contain string s ( 1 ≤ |s| ≤ 106 ) binary representation number n without lead zero ( n > 0 ) print a single integer — minimum amount beautiful number give a total n. first sample n = 2 a beautiful number second sample n = 7 valera decompose sum 23 + ( - 20 ) third sample n = 109 decompose sum four summands follow : 27 + ( - 24 ) + ( - 22 ) + 20,"['dp', 'greedy']",1900.0
1525/D,$$$ n $$$ armchairs number $$$ 1 $$$ $$$ n $$$ leave right armchairs occupy people ( one person per armchair ) others number occupy armchairs greater $$$ \frac { n } { 2 } $$$ reason would like tell people move armchairs ones $$$ i $$$ -th armchair occupy someone $$$ j $$$ -th armchair tell person sit $$$ i $$$ -th armchair move $$$ j $$$ -th armchair time take a person move $$$ i $$$ -th armchair $$$ j $$$ -th one $$$ |i - j| $$$ minutes may perform operation number time operations must do sequentially i. e. tell a person move person ask move last operation finish move destination armchair want achieve follow situation : every seat initially occupy must free minimum time need ? first line contain one integer $$$ n $$$ ( $$$ 2 \le n \le 5000 $$$ ) — number armchairs second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 1 $$$ ) $$$ a_i = 1 $$$ mean $$$ i $$$ -th armchair initially occupy $$$ a_i = 0 $$$ mean initially free number occupy armchairs $$$ \frac { n } { 2 } $$$ print one integer — minimum number minutes spend achieve follow situation : every seat initially occupy must free first test perform follow sequence : second test perform follow sequence : third test seat occupy goal achieve instantly,"['dp', 'greedy']",1800.0
1472/F,every year santa claus give gift children however country traditions process take place different ways example berland need solve new year 's puzzle polycarp get follow problem : give a grid strip size $$$ 2 \times n $$$ cells block need check possible tile free cells use $$$ 2 \times 1 $$$ $$$ 1 \times 2 $$$ tile ( dominoes ) example $$$ n = 5 $$$ strip look like ( black cells block ) : tile example use two vertical two horizontal tile picture ( different tile mark different color ) $$$ n = 3 $$$ strip look like : impossible tile free cells polycarp easily solve task receive new year 's gift solve ? first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case $$$ t $$$ test case follow test case precede empty line first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 1000000000 $$$ $$$ 1 \le m \le 200000 $$$ ) — length strip number block cells next $$$ m $$$ line contain two integers $$$ r_i c_i $$$ ( $$$ 1 \le r_i \le 2 1 \le c_i \le n $$$ ) — number row columns block cells guarantee block cells different i.e $$$ ( r_i c_i ) \ne ( r_j c_j ) i \ne j $$$ guarantee sum $$$ m $$$ test case exceed $$$ 200000 $$$ test case print a separate line : output ` ` yes '' ` ` '' case ( example string yes yes yes yes recognize positive ) first two test case explain statement third test case strip look like :,"['brute force', 'dp', 'greedy']",2100.0
1034/B,"little c love number « 3 » much love things play a game a chessboard size $$$ n \times m $$$ cell $$$ x $$$ -th row $$$ y $$$ -th column call $$$ ( x y ) $$$ initially chessboard empty time place two chessmen two different empty cells manhattan distance exactly $$$ 3 $$$ manhattan distance two cells $$$ ( x_i y_i ) $$$ $$$ ( x_j y_j ) $$$ define $$$ |x_i - <unknown> - y_j| $$$ want place many chessmen possible chessboard please help find maximum number chessmen place a single line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 1000000000 $$$ ) — number row number columns chessboard print one integer — maximum number chessmen little c place first example manhattan distance two cells smaller $$$ 3 $$$ answer $$$ 0 $$$ second example a possible solution $$$ ( 1,1 ) ( 3,2 ) $$$ $$$ ( 1,2 ) ( 3,3 ) $$$ $$$ ( 2,1 ) ( 1,3 ) $$$ $$$ ( 3,1 ) ( 2,3 ) $$$","['brute force', 'constructive algorithms']",2200.0
1695/C,give a grid $$$ n $$$ row $$$ m $$$ columns denote square $$$ i $$$ -th ( $$$ 1\le i\le n $$$ ) row $$$ j $$$ -th ( $$$ 1\le j\le m $$$ ) column $$$ ( i j ) $$$ number $$$ a _ { ij } $$$ number equal $$$ 1 $$$ $$$ -1 $$$ start square $$$ ( 1 1 ) $$$ move one square one square right a time end want end square $$$ ( n m ) $$$ possible move a way sum value write visit cells ( include $$$ a _ { 11 } $$$ $$$ a _ { nm } $$$ ) $$$ 0 $$$ ? test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 1000 $$$ ) — size grid follow $$$ n $$$ line contain $$$ m $$$ integers $$$ j $$$ -th integer $$$ i $$$ -th line $$$ a _ { ij } $$$ ( $$$ a _ { ij } = 1 $$$ $$$ -1 $$$ ) — element cell $$$ ( i j ) $$$ guarantee sum $$$ n\cdot m $$$ test case exceed $$$ 1000000 $$$ test case print ` ` yes '' exist a path top leave bottom right add $$$ 0 $$$ ` ` '' otherwise output letter case one possible path fourth test case give picture statement,"['brute force', 'data structures', 'dp', 'greedy']",1700.0
1689/D,"lena a beautiful girl like logical puzzle a gift birthday lena get a matrix puzzle ! matrix consist $$$ n $$$ row $$$ m $$$ columns cell either black white coordinate $$$ ( i j ) $$$ denote cell belong $$$ i $$$ -th row $$$ j $$$ -th column every $$$ 1\leq i \leq n $$$ $$$ 1\leq j \leq m $$$ solve puzzle lena choose a cell minimize manhattan distance farthest black cell choose cell formally let $$$ k \ge 1 $$$ black cells matrix coordinate $$$ ( x_i y_i ) $$$ every $$$ 1\leq i \leq k $$$ lena choose a cell $$$ ( a b ) $$$ minimize $$$ $$$ \max _ { i=1 } ^ { k } ( |a - <unknown> - y_i| ) $$$ $$$ lena skill ask help tell optimal cell choose ? several test case input data first line contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 10\,000 $$$ ) — number test case follow test case description first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2\leq n m \leq 1000 $$$ ) — dimension matrix follow $$$ n $$$ line contain $$$ m $$$ character character either ' w ' ' b ' $$$ j $$$ -th character $$$ i $$$ -th line ' w ' cell $$$ ( i j ) $$$ white ' b ' cell $$$ ( i j ) $$$ black guarantee least one black cell exist guarantee sum $$$ n\cdot m $$$ exceed $$$ 1000000 $$$ test case output optimal cell $$$ ( a b ) $$$ choose multiple answer exist output first test case two black cells coordinate $$$ ( 1,1 ) $$$ $$$ ( 3,2 ) $$$ four optimal cells $$$ ( 1,2 ) $$$ $$$ ( 2,1 ) $$$ $$$ ( 2,2 ) $$$ $$$ ( 3,1 ) $$$ show cell minimize maximum manhattan distance every black cell second test case optimal choose black cell $$$ ( 2,2 ) $$$ maximum manhattan distance $$$ 2 $$$","['data structures', 'dp', 'geometry']",1900.0
1503/C,$$$ n $$$ cities number $$$ 1 $$$ $$$ n $$$ city $$$ i $$$ beauty $$$ a_i $$$ a salesman want start city $$$ 1 $$$ visit every city exactly return city $$$ 1 $$$ $$$ i\ne j $$$ a flight city $$$ i $$$ city $$$ j $$$ cost $$$ \max ( c_i a_j - a_i ) $$$ dollars $$$ c_i $$$ price floor enforce city $$$ i $$$ note absolute value find minimum total cost salesman complete trip first line contain a single integer $$$ n $$$ ( $$$ 2\le n\le 100000 $$$ ) — number cities $$$ i $$$ -th next $$$ n $$$ line contain two integers $$$ a_i $$$ $$$ c_i $$$ ( $$$ 0\le a_i c_i\le 1000000000 $$$ ) — beauty price floor $$$ i $$$ -th city output a single integer — minimum total cost first test case travel order $$$ 1\to <unknown> <unknown> 1 $$$ total cost $$$ 11 $$$ better,"['data structures', 'dp', 'greedy']",2200.0
827/F,"arkady like walk around kitchen <unknown> kitchen consist several important place connect passages unfortunately happen passages flood milk 's impossible pass namely 's possible pass passage direction time interval lengths passages equal arkady make one second security reason arkady never stop also ca n't change direction go a passage word start walk passage reach end immediately leave end today arkady need quickly reach important place n place 1 . plan exit place 1 time moment 0 reach place n early please find minimum time spend way first line contain two integers n m ( 1 ≤ n ≤ 5·105 0 ≤ m ≤ 5·105 ) — number important place number passages respectively , m line follow describe one passage line contain four integers a b l r ( 1 ≤ a b ≤ n a ≠ b 0 ≤ l < r ≤ 109 ) — place passage connect time segment 's possible use passage print one integer — minimum time arkady spend reach destination ca n't reach place n print -1 . first example arkady go important place 1 → 3 → 4 → 5 . second example arkady ca n't start walk time moment 0 's impossible use passage","['data structures', 'dp']",3200.0
311/C,"rainbow build h cells a row number 1 h leave right n cells treasure call n cells ` ` treasure cell '' i - th ` ` treasure cell '' ai - th cell value treasure ci dollars , freda go first cell , go k cells forward return first cell mean freda able reach 1st ( k + 1 ) -th ( 2·k + 1 ) -th ( <unknown> + 1 ) -th cells rainbow give freda m operations operation one follow three type : a programmer ask freda write a program answer query first line input contain four integers : h ( 1 ≤ h ≤ 1018 ) n m ( 1 ≤ n m ≤ 105 ) k ( 1 ≤ k ≤ 104 ) next n line contain two integers : ai ( 1 ≤ ai ≤ h ) ci ( 1 ≤ ci ≤ 109 ) mean i - th ` ` treasure cell '' ai - th cell cost treasure cell ci dollars ai distinct next m line one three follow format : 20 operations type 1 . 's guarantee moment treasure cell positive value 's guarantee operations correct ( operation decrease value take tresure ) please use % lld specifier read 64 - bit integers с++ prefer use cin cout stream % i64d specifier operation type 3 output integer indicate value ( dollars ) valuable treasure among ` ` treasure cells '' freda reach treasure output 0 . sample 10 cells 3 ` ` treasure cells '' first ` ` treasure cell '' cell 5 50 dollars tresure second ` ` treasure cell '' cell 7 60 dollars tresure third ` ` treasure cell '' cell 8 100 dollars tresure first freda reach cell 1 3 5 7 9 . first operation reduce value second ` ` treasure cell '' 60 55 . valuable treasure among ` ` treasure cells '' reach max ( 50 55 ) = 55 . third operation also go 3 cells forward step able reach cell 1 3 4 5 6 7 8 9 10 . valuable tresure 100 . notice take 55 dollars 100 dollars treasure away last answer 50","['brute force', 'data structures']",2500.0
1830/D,"give a tree $$$ n $$$ nod node either color $$$ 0 $$$ $$$ 1 $$$ value a path $$$ ( u v ) $$$ equal mex $$$ ^\dagger $$$ color nod shortest path $$$ u $$$ $$$ v $$$ value a color equal sum value paths $$$ ( u v ) $$$ $$$ 1 \leq u \leq v \leq n $$$ maximum possible value color tree ? $$$ ^ { \dagger } $$$ mex ( minimum exclude ) array smallest non - negative integer belong array instance : test contain multiple test case first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number nod tree follow $$$ n-1 $$$ line test case contain $$$ 2 $$$ integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \leq a_i b_i \leq n a_i \neq b_i $$$ ) — indicate edge vertices $$$ a_i $$$ $$$ b_i $$$ guarantee give edge form a tree guarantee sum $$$ n $$$ across test case exceed $$$ 200000 $$$ test case print maximum possible value color tree first sample color vertex $$$ 2 $$$ $$$ 1 $$$ vertices $$$ 1,3 $$$ $$$ 0 $$$ , consider paths : notice sum value $$$ 8 $$$ maximum possible","['brute force', 'dp']",2800.0
1791/D,let 's denote $$$ f ( x ) $$$ function a string $$$ x $$$ number distinct character string contain example $$$ f ( \texttt { abc } ) = 3 $$$ $$$ f ( \texttt { bbbbb } ) = 1 $$$ $$$ f ( \texttt { <unknown> } ) = 3 $$$ give a string $$$ s $$$ split two non - empty string $$$ a $$$ $$$ b $$$ $$$ f ( a ) + f ( b ) $$$ maximum possible word find maximum possible value $$$ f ( a ) + f ( b ) $$$ $$$ a + b = s $$$ ( concatenation string $$$ a $$$ string $$$ b $$$ equal string $$$ s $$$ ) input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case description test case follow first line test case contain integer $$$ n $$$ ( $$$ 2 \leq n \leq 2\cdot100000 $$$ ) — length string $$$ s $$$ second line contain string $$$ s $$$ consist lowercase english letter guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case output a single integer — maximum possible value $$$ f ( a ) + f ( b ) $$$ $$$ a + b = s $$$ first test case one valid way split $$$ \texttt { aa } $$$ two non - empty string $$$ \texttt { a } $$$ $$$ \texttt { a } $$$ $$$ f ( \texttt { a } ) + f ( \texttt { a } ) = 1 + 1 = 2 $$$ second test case split $$$ \texttt { <unknown> } $$$ $$$ \texttt { abc } $$$ $$$ \texttt { abcd } $$$ get answer $$$ f ( \texttt { abc } ) + f ( \texttt { abcd } ) = 3 + 4 = 7 $$$ maximum possible third test case n't matter split string answer always $$$ 2 $$$,"['brute force', 'greedy', 'strings']",1000.0
1770/A,<unknown> $$$ n $$$ whiteboards number $$$ 1 $$$ $$$ n $$$ initially $$$ i $$$ -th whiteboard integer $$$ a_i $$$ write koxia perform $$$ m $$$ operations $$$ j $$$ -th operation choose one whiteboards change integer write $$$ b_j $$$ find maximum possible sum integers write whiteboards perform $$$ m $$$ operations test consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 100 $$$ ) second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) third line test case contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 1 \le b_i \le 1000000000 $$$ ) test case output a single integer — maximum possible sum integers write whiteboards perform $$$ m $$$ operations first test case koxia perform operations follow : perform operations number three whiteboards $$$ 4 $$$ $$$ 5 $$$ $$$ 3 $$$ respectively sum $$$ 12 $$$ prove maximum possible sum achievable second test case koxia perform operations follow : sum $$$ 4 + 5 = 9 $$$ prove maximum possible sum achievable,"['brute force', 'greedy']",1000.0
1763/C,"give array $$$ a $$$ $$$ n $$$ integers allow perform follow operation many time want ( 0 time ) : print maximum sum elements final array obtain a way first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) — length array $$$ a $$$ second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — elements array $$$ a $$$ 's guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print sum final array first test case possible achieve a sum $$$ > 3 $$$ use operations therefore maximum sum $$$ 3 $$$ second test case show maximum sum achievable $$$ 16 $$$ use operation $$$ ( 1,2 ) $$$ transform array $$$ [ 9,1 ] $$$ $$$ [ <unknown> ] $$$ thus sum final array $$$ 16 $$$ third test case show possible achieve a sum $$$ > 18 $$$ use operations therefore maximum sum $$$ 18 $$$","['brute force', 'constructive algorithms', 'greedy']",2000.0
1761/E,give a simple undirected graph consist $$$ n $$$ vertices graph n't contain self - loops one edge pair vertices task simple : make graph connect follow operation number time ( possibly zero ) : find minimum number operations require make graph connect also find sequence operations minimum length make graph connect test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 800 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2\leq n\leq 4000 $$$ ) — number vertices graph $$$ n $$$ line follow $$$ i $$$ -th row contain a binary string $$$ s_i $$$ length $$$ n $$$ $$$ s _ { i j } $$$ ' 1 ' edge vertex $$$ i $$$ $$$ j $$$ initially otherwise $$$ s _ { i j } $$$ ' 0 ' guarantee $$$ s _ { i i } $$$ always ' 0 ' $$$ s _ { i j } = s _ { j i } $$$ $$$ 1\leq i j\leq n $$$ guarantee sum $$$ n $$$ test case exceed $$$ 4000 $$$ test case first line output integer $$$ m $$$ — minimum number operations require $$$ m $$$ greater zero print extra line consist $$$ m $$$ integers — vertices choose operations solution multiple solutions minimum number operations print first test case graph connect begin answer $$$ 0 $$$ second test case operation vertex $$$ 1 $$$ get follow graph represent adjacency matrix : $$$ $$$ \begin { bmatrix } 0 & 1 & 1\\ 1 & 0 & 1\\ 1 & 1 & 0 \end { bmatrix } $$$ $$$ 's obvious graph connect third test case operation vertex $$$ 3 $$$ $$$ 4 $$$ get follow graph represent adjacency matrix : $$$ $$$ \begin { bmatrix } 0 & 1 & 1 & 1\\ 1 & 0 & 1 & 1\\ 1 & 1 & 0 & 1\\ 1 & 1 & 1 & 0 \end { bmatrix } $$$ $$$ 's obvious graph connect prove ca n't perform less $$$ 2 $$$ operations make graph connect,"['brute force', 'constructive algorithms', 'greedy']",2400.0
1734/A,give $$$ n $$$ stick positive integral length $$$ a_1 a_2 \ldots a_n $$$ perform follow operation number time ( possibly zero ) : minimum number operations perform possible select three $$$ n $$$ stick use without break form equilateral triangle ? equilateral triangle a triangle three side length first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 300 $$$ ) — number stick second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — lengths stick guarantee sum $$$ n $$$ test case exceed $$$ 300 $$$ test case print one integer a single line — minimum number operations make first test case increase length first stick $$$ 1 $$$ decrease length third stick $$$ 1 $$$ total perform $$$ 2 $$$ operations three stick form equilateral triangle side length $$$ 2 $$$ fourth test case decrease length seventh stick $$$ 1 $$$ equilateral triangle side length $$$ 1 $$$ select form second fourth seventh stick,"['brute force', 'greedy']",800.0
1732/D2,hard version problem difference version remove query initially a set contain one element — $$$ 0 $$$ need handle $$$ q $$$ query follow type : problem define $$$ k\text { -mex } $$$ a set integers smallest non - negative integer $$$ x $$$ divisible $$$ k $$$ contain set first line contain integer $$$ q $$$ ( $$$ 1 \leq q \leq 200000 $$$ ) — number query follow $$$ q $$$ line describe query addition query integer $$$ x $$$ give format + $$$ x $$$ ( $$$ 1 \leq x \leq 10^ { 18 } $$$ ) guarantee $$$ x $$$ contain set a remove query integer $$$ x $$$ give format - $$$ x $$$ ( $$$ 1 \leq x \leq 10^ { 18 } $$$ ) guarantee $$$ x $$$ contain set a search query $$$ k\text { -mex } $$$ give format ? $$$ k $$$ ( $$$ 1 \leq k \leq 10^ { 18 } $$$ ) guarantee least one query type ? query type ? output a single integer — $$$ k\text { -mex } $$$ set first example : first second query set contain elements $$$ \ { 0 1 2\ } $$$ smallest non - negative number divisible $$$ 1 $$$ set $$$ 3 $$$ fourth query set contain elements $$$ \ { 0 1 2 4\ } $$$ smallest non - negative number divisible $$$ 2 $$$ set $$$ 6 $$$ second example :,"['brute force', 'data structures']",2400.0
1687/C,"state a robot represent array integers length $$$ n $$$ initially robot state $$$ a $$$ wish turn state $$$ b $$$ a great programmer sanae know art copy - and - paste one operation choose segment give segment copy segment $$$ b $$$ paste place robot replace original state however ensure sum $$$ a $$$ change copy operation case robot go <unknown> formally sanae choose segment $$$ [ l r ] $$$ assign $$$ a_i = b_i $$$ ( $$$ l\le i\le r $$$ ) $$$ \sum\limits _ { i=1 } ^n a_i $$$ change operation determine whether possible sanae successfully turn robot initial state $$$ a $$$ desire state $$$ b $$$ ( possibly zero ) operations test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 2\cdot 10000 $$$ ) — number test case descriptions test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n\leq 2\cdot 100000 $$$ $$$ 1 \leq m\leq 2\cdot 100000 $$$ ) — length $$$ a $$$ $$$ b $$$ number segment second line contain $$$ n $$$ intergers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — initial state $$$ a $$$ third line contain $$$ n $$$ intergers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1 \leq b_i \leq 1000000000 $$$ ) — desire state $$$ b $$$ $$$ m $$$ line follow $$$ i $$$ -th line contain two intergers $$$ l_i r_i $$$ ( $$$ 1 \leq l_i < r_i \leq n $$$ ) — segment copy - <unknown> sanae guarantee sum $$$ n $$$ sum $$$ m $$$ test case exceed $$$ 20 ^ 5 $$$ test case print ` ` yes '' ( without quote ) $$$ a $$$ turn $$$ b $$$ ` ` '' ( without quote ) otherwise output ` ` yes '' ` ` '' case ( example string ` ` yes '' ` ` yes '' ` ` yes '' recognize a positive response ) test case 1 : one possible way turn $$$ a $$$ $$$ b $$$ : first select $$$ [ 1,3 ] $$$ operation $$$ a= [ <unknown> ] $$$ , select $$$ [ 2,5 ] $$$ operation $$$ a= [ <unknown> ] = b $$$ test case 2 : show impossible turn $$$ a $$$ $$$ b $$$","['brute force', 'data structures', 'greedy']",2500.0
1673/B,let 's call a string $$$ s $$$ perfectly balance possible triplets $$$ ( t u v ) $$$ $$$ t $$$ a non - empty substring $$$ s $$$ $$$ u $$$ $$$ v $$$ character present $$$ s $$$ difference frequencies $$$ u $$$ $$$ v $$$ $$$ t $$$ $$$ 1 $$$ example string ` ` aba '' ` ` abc '' perfectly balance ` ` abb '' triplet ( ` ` bb '' ' a ' ' b ' ) condition satisfy give a string $$$ s $$$ consist lowercase english letter task determine whether $$$ s $$$ perfectly balance a string $$$ b $$$ call a substring another string $$$ a $$$ $$$ b $$$ obtain delete character ( possibly $$$ 0 $$$ ) start character ( possibly $$$ 0 $$$ ) end $$$ a $$$ first line input contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 2\cdot 10000 $$$ ) denote number testcases next $$$ t $$$ line contain a single string $$$ s $$$ ( $$$ 1\leq |s|\leq 2\cdot 100000 $$$ ) consist lowercase english letter guarantee sum $$$ |s| $$$ testcases exceed $$$ 2\cdot 100000 $$$ test case print ` ` yes '' $$$ s $$$ a perfectly balance string ` ` '' otherwise may print letter case ( example ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize positive answer ) let $$$ f_t ( c ) $$$ represent frequency character $$$ c $$$ string $$$ t $$$ first testcase $$$ t $$$ $$$ f_t ( a ) $$$ $$$ f_t ( b ) $$$ $$$ a $$$ $$$ 1 $$$ $$$ 0 $$$ $$$ ab $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ aba $$$ $$$ 2 $$$ $$$ 1 $$$ $$$ b $$$ $$$ 0 $$$ $$$ 1 $$$ $$$ ba $$$ $$$ 1 $$$ $$$ 1 $$$ see substring $$$ t $$$ $$$ s $$$ difference $$$ f_t ( a ) $$$ $$$ f_t ( b ) $$$ $$$ 1 $$$ hence string $$$ s $$$ perfectly balance second testcase $$$ t $$$ $$$ f_t ( a ) $$$ $$$ f_t ( b ) $$$ $$$ a $$$ $$$ 1 $$$ $$$ 0 $$$ $$$ ab $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ abb $$$ $$$ 1 $$$ $$$ 2 $$$ $$$ b $$$ $$$ 0 $$$ $$$ 1 $$$ $$$ bb $$$ $$$ 0 $$$ $$$ 2 $$$ see substring $$$ t = bb $$$ difference $$$ f_t ( a ) $$$ $$$ f_t ( b ) $$$ $$$ 2 $$$ greater $$$ 1 $$$ hence string $$$ s $$$ perfectly balance third testcase $$$ t $$$ $$$ f_t ( a ) $$$ $$$ f_t ( b ) $$$ $$$ f_t ( c ) $$$ $$$ a $$$ $$$ 1 $$$ $$$ 0 $$$ $$$ 0 $$$ $$$ ab $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ 0 $$$ $$$ abc $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ b $$$ $$$ 0 $$$ $$$ 1 $$$ $$$ 0 $$$ $$$ bc $$$ $$$ 0 $$$ $$$ 1 $$$ $$$ 1 $$$ $$$ c $$$ $$$ 0 $$$ $$$ 0 $$$ $$$ 1 $$$ see substring $$$ t $$$ $$$ s $$$ two character $$$ u <unknown> { a b <unknown> } $$$ difference $$$ f_t ( u ) $$$ $$$ f_t ( v ) $$$ $$$ 1 $$$ hence string $$$ s $$$ perfectly balance,"['brute force', 'greedy', 'strings']",1100.0
1671/D,give a sequence $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ also give $$$ x $$$ integers $$$ 1 2 \dots x $$$ ask insert extra integers sequence $$$ a $$$ integer insert begin sequence end sequence elements sequence score result sequence $$$ a ' $$$ sum absolute differences adjacent elements $$$ \left ( \sum \limits _ { i=1 } ^ { <unknown> } <unknown> - a ' _ { i+1 } |\right ) $$$ smallest possible score result sequence $$$ a ' $$$ ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain two integers $$$ n $$$ $$$ x $$$ ( $$$ 1 \le n x \le 200000 $$$ ) — length sequence number extra integers second line testcase contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 200000 $$$ ) sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print a single integer — smallest sum absolute differences adjacent elements sequence insert extra integers sequence smallest score example underline elements extra integers note exist sequence smallest score,"['brute force', 'constructive algorithms', 'greedy']",1600.0
1629/A,know download ram ? a shop $$$ n $$$ different piece software increase ram $$$ i $$$ -th ram increase software take $$$ a_i $$$ gb memory run ( temporarily program do run get ram back ) give additional $$$ b_i $$$ gb ram ( permanently ) software use pc currently $$$ k $$$ gb ram note ca n't use a ram - increasing software take gb ram use currently since ram important thing world wonder maximum possible amount ram achievable ? first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case description test case follow first line test case contain integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 100 $$$ $$$ 1 \le k \le 1000 $$$ ) two line follow contain $$$ n $$$ integers describe array $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a_i b_i \le 1000 $$$ ) test case output a single line contain largest amount ram achieve first test case enough ram run third software initially increase ram $$$ 20 $$$ gb allow use first software increase ram $$$ 29 $$$ gb software leave need $$$ 30 $$$ gb ram stop second test case use first second fourth fifth software need $$$ 1 $$$ gb ram per software run increase ram $$$ 5 $$$ gb use last remain one increase ram $$$ 6 $$$ gb third test case software need $$$ 1 $$$ gb ram run amount ram stay $$$ 1 $$$ gb,"['brute force', 'greedy']",800.0
1622/C,"give integer array $$$ a_1 a_2 \dots a_n $$$ integer $$$ k $$$ one step minimum number step need make sum array $$$ \sum\limits _ { i=1 } ^ { n } { a_i } \le k $$$ ? ( allow make value array negative ) first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 1 \le k \le 10^ { 15 } $$$ ) — size array $$$ a $$$ upper bind sum second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — array 's guarantee sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case print one integer — minimum number step make $$$ \sum\limits _ { i=1 } ^ { n } { a_i } \le k $$$ first test case decrease $$$ a_1 $$$ $$$ 10 $$$ time get sum lower equal $$$ k = 10 $$$ second test case sum array $$$ a $$$ already less equal $$$ 69 $$$ n't need change third test case , example : fourth test case , example :","['brute force', 'greedy']",1600.0
1616/E,"give two string $$$ s $$$ $$$ t $$$ equal length $$$ n $$$ one move swap two adjacent character string $$$ s $$$ need find minimal number operations need make string $$$ s $$$ lexicographically smaller string $$$ t $$$ a string $$$ a $$$ lexicographically smaller a string $$$ b $$$ one follow hold : first line input contain one integer $$$ q $$$ ( $$$ 1 \le q \le 10\,000 $$$ ) : number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) second line test case contain string $$$ s $$$ consist $$$ n $$$ lowercase english letter third line test case contain string $$$ t $$$ consist $$$ n $$$ lowercase english letter guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print a separate line minimal number operations need make string $$$ s $$$ lexicographically smaller string $$$ t $$$ $$$ -1 $$$ 's impossible","['brute force', 'data structures', 'greedy', 'strings']",2200.0
1572/B,give a sequence $$$ a $$$ length $$$ n $$$ consist $$$ 0 $$$ s $$$ 1 $$$ s. perform follow operation sequence : prove exist a sequence operations length change elements $$$ a $$$ $$$ 0 $$$ s also a sequence length greater $$$ n $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 2\cdot100000 $$$ ) — length $$$ a $$$ second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ a_i = 0 $$$ $$$ a_i = 1 $$$ ) — elements $$$ a $$$ guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case follow : multiple solutions may print first example sequence contain $$$ 0 $$$ s n't need change anything second example transform $$$ [ 1 1 1 1 0 ] $$$ $$$ [ 1 1 0 0 0 ] $$$ $$$ [ 0 0 0 0 0 ] $$$ perform operation third element $$$ a $$$ first element $$$ a $$$ third example matter whether first perform operation first second element $$$ a $$$ get $$$ [ 1 1 1 1 ] $$$ transform $$$ [ 0 0 0 0 ] $$$,"['brute force', 'constructive algorithms', 'greedy']",2500.0
1536/A,"omkar receive a message anton say ` ` story problem a confuse make a formal statement . '' , omkar give array $$$ a = [ a_1 a_2 \ldots a_n ] $$$ $$$ n $$$ distinct integers array $$$ b = [ b_1 b_2 \ldots b_k ] $$$ call nice two distinct elements $$$ b_i b_j $$$ $$$ b $$$ $$$ |b_i - b_j| $$$ appear $$$ b $$$ least addition elements $$$ b $$$ must distinct add several ( maybe $$$ 0 $$$ ) integers $$$ a $$$ create a nice array $$$ b $$$ size $$$ 300 $$$ ? $$$ a $$$ already nice n't add elements example array $$$ [ 3 6 9 ] $$$ nice $$$ |6 - <unknown> - 6| = 3 $$$ appear array $$$ |9 - 3| = 6 $$$ appear array array $$$ [ 4 2 0 6 9 ] $$$ nice $$$ |9 - 4| = 5 $$$ present array integers $$$ x $$$ $$$ y $$$ $$$ |x - y| = x - y $$$ $$$ x > y $$$ $$$ |x - y| = y - x $$$ otherwise test contain multiple test case first line contain $$$ t $$$ ( $$$ 1 \leq t \leq 50 $$$ ) number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 100 $$$ ) — length array $$$ a $$$ second line test case contain $$$ n $$$ distinct integers $$$ a_1 a_2 \cdots a_n $$$ ( $$$ -100 \leq a_i \leq 100 $$$ ) — elements array $$$ a $$$ test case output one line contain yes omkar create a nice array $$$ b $$$ add elements $$$ a $$$ otherwise case letter matter yes also accept first line yes output a second line contain a single integer $$$ k $$$ ( $$$ n \leq k \leq 300 $$$ ) output one line contain $$$ k $$$ distinct integers $$$ b_1 b_2 \cdots b_k $$$ ( $$$ -1000000000 \leq b_i \leq 1000000000 $$$ ) elements nice array $$$ b $$$ $$$ b_1 b_2 \cdots b_k $$$ order $$$ a_i $$$ $$$ a $$$ $$$ a_i $$$ must appear least $$$ b $$$ prove omkar create array $$$ b $$$ also a way satisfy constraints multiple solutions exist print first case add integers $$$ a $$$ receive array $$$ b = [ 6 0 3 9 ] $$$ note $$$ |6 - 3| = |9 - 6| = |3 - 0| = 3 $$$ $$$ 3 $$$ $$$ b $$$ $$$ |6 - 0| = |9 - 3| = 6 $$$ $$$ 6 $$$ $$$ b $$$ $$$ |9 - 0| = 9 $$$ $$$ b $$$ $$$ b $$$ nice second case add integers $$$ a $$$ receive array $$$ b = [ 5 3 1 2 4 ] $$$ $$$ |2 - 1| = |3 - 2| = |4 - 3| = |5 - 4| = 1 $$$ $$$ b $$$ $$$ |3 - 1| = |4 - 2| = |5 - 3| = 2 $$$ $$$ b $$$ $$$ |4 - 1| = |5 - 2| = 3 $$$ $$$ b $$$ $$$ |5 - 1| = 4 $$$ $$$ b $$$ $$$ b $$$ nice fourth case add integers $$$ a $$$ receive array $$$ b = [ 8 12 6 2 4 10 ] $$$ $$$ |4 - 2| = |6 - 4| = |8 - 6| = |10 - 8| = |12 - 10| = 2 $$$ $$$ b $$$ $$$ |6 - 2| = |8 - 4| = |10 - 6| = |12 - 8| = 4 $$$ $$$ b $$$ $$$ |8 - 2| = |10 - 4| = |12 - 6| = 6 $$$ $$$ b $$$ $$$ |10 - 2| = |12 - 4| = 8 $$$ $$$ b $$$ $$$ |12 - 2| = 10 $$$ $$$ b $$$ $$$ b $$$ nice prove test case impossible create a nice array $$$ b $$$","['brute force', 'constructive algorithms']",800.0
1513/F,"give 2 array $$$ a $$$ $$$ b $$$ size $$$ n $$$ swap two elements $$$ b $$$ ( leave ) require minimize value $$$ $$$ \sum _ { i } |a _ { i } -b _ { i } | $$$ $$$ find minimum possible value sum first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le { 1000000000 } $$$ ) third line contain $$$ n $$$ integers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1 \le b_i \le { 1000000000 } $$$ ) output minimum value $$$ \sum _ { i } |a _ { i } -b _ { i } | $$$ first example swap first fifth element array $$$ b $$$ become $$$ [ 5 2 3 4 1 ] $$$ therefore minimum possible value sum would $$$ |5 - 5| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 1| = 4 $$$ second example swap first second elements , answer would $$$ 2 $$$","['brute force', 'constructive algorithms', 'data structures']",2500.0
1511/D,let 's define cost a string $$$ s $$$ number index pair $$$ i $$$ $$$ j $$$ ( $$$ 1 \le i < j < |s| $$$ ) $$$ s_i = s_j $$$ $$$ s _ { i+1 } = s _ { j+1 } $$$ give two positive integers $$$ n $$$ $$$ k $$$ among string length $$$ n $$$ contain first $$$ k $$$ character latin alphabet find a string minimum possible cost multiple string minimum cost — find line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 2 \cdot 100000 ; 1 \le k \le 26 $$$ ) print string $$$ s $$$ consist $$$ n $$$ character character one $$$ k $$$ first latin letter minimum possible cost among string multiple string — print,"['brute force', 'constructive algorithms', 'greedy', 'strings']",1600.0
1497/A,give integer $$$ n $$$ array $$$ a_1 a_2 \ldots a_n $$$ reorder elements array $$$ a $$$ way sum $$$ \textbf { mex } $$$ prefix ( $$$ i $$$ -th prefix $$$ a_1 a_2 \ldots a_i $$$ ) maximize formally find array $$$ b_1 b_2 \ldots b_n $$$ set elements array $$$ a $$$ $$$ b $$$ equal ( equivalent array $$$ b $$$ find array $$$ a $$$ reorder elements ) $$$ \sum\limits _ { i=1 } ^ { n } \textbf { mex } ( b_1 b_2 \ldots b_i ) $$$ maximize $$$ \textbf { mex } $$$ a set nonnegative integers minimal nonnegative integer set example $$$ \textbf { mex } ( \ { 1 2 3\ } ) = 0 $$$ $$$ \textbf { mex } ( \ { 0 1 2 4 5\ } ) = 3 $$$ first line contain a single integer $$$ t $$$ $$$ ( 1 \le t \le 100 ) $$$ — number test case first line test case contain a single integer $$$ n $$$ $$$ ( 1 \le n \le 100 ) $$$ second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ $$$ ( 0 \le a_i \le 100 ) $$$ test case print array $$$ b_1 b_2 \ldots b_n $$$ — optimal reorder $$$ a_1 a_2 \ldots a_n $$$ sum $$$ \textbf { mex } $$$ prefix maximize exist multiple optimal answer find first test case answer $$$ \textbf { mex } $$$ prefix :,"['brute force', 'data structures', 'greedy']",800.0
1428/C,"zookeeper play a game game zookeeper must use bomb bomb a string consist letter ' a ' ' b ' use bomb bomb a substring either ` ` ab '' ` ` bb '' bomb a substring substring get delete string remain part string get concatenate example zookeeper use two operations : <unknown> $$$ \to $$$ aabba $$$ \to $$$ aaa zookeeper wonder shortest string make help find length shortest string ? test contain multiple test case first line contain a single integer $$$ t $$$ $$$ ( 1 \leq t \leq 20000 ) $$$ — number test case description test case follow next $$$ t $$$ line contain a single test case consist a non - empty string $$$ s $$$ : string zookeeper need bomb guarantee symbols $$$ s $$$ either ' a ' ' b ' guarantee sum $$$ |s| $$$ ( length $$$ s $$$ ) among test case exceed $$$ 200000 $$$ test case print a single integer : length shortest string zookeeper make first test case ca n't make move answer $$$ 3 $$$ second test case one optimal sequence move baba $$$ \to $$$ ba , answer $$$ 2 $$$ third test case one optimal sequence move <unknown> $$$ \to $$$ <unknown> $$$ \to $$$ aabbbb $$$ \to $$$ abbb $$$ \to $$$ ab $$$ \to $$$ ( empty string ) , answer $$$ 0 $$$","['brute force', 'data structures', 'greedy', 'strings']",1100.0
1399/C,"$$$ n $$$ people want participate a boat competition weight $$$ i $$$ -th participant $$$ w_i $$$ team consist two people participate competition organizer think 's fair allow team total weight , $$$ k $$$ team $$$ ( a_1 b_1 ) $$$ $$$ ( a_2 b_2 ) $$$ $$$ \dots $$$ $$$ ( a_k b_k ) $$$ $$$ a_i $$$ weight first participant $$$ i $$$ -th team $$$ b_i $$$ weight second participant $$$ i $$$ -th team condition $$$ a_1 + b_1 = a_2 + b_2 = \dots = a_k + b_k = s $$$ $$$ s $$$ total weight team satisfy task choose $$$ s $$$ number team people create maximum possible note participant one team answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — number participants second line test case contain $$$ n $$$ integers $$$ w_1 w_2 \dots w_n $$$ ( $$$ 1 \le w_i \le n $$$ ) $$$ w_i $$$ weight $$$ i $$$ -th participant test case print one integer $$$ k $$$ : maximum number team people compose total weight $$$ s $$$ choose $$$ s $$$ optimally first test case example reach optimal answer $$$ s=6 $$$ first boat use participants $$$ 1 $$$ $$$ 5 $$$ second boat use participants $$$ 2 $$$ $$$ 4 $$$ ( indices weight ) second test case example reach optimal answer $$$ s=12 $$$ first $$$ 6 $$$ participants form $$$ 3 $$$ pair third test case example reach optimal answer $$$ s=3 $$$ answer $$$ 4 $$$ $$$ 4 $$$ participants weight $$$ 1 $$$ $$$ 4 $$$ participants weight $$$ 2 $$$ fourth test case example reach optimal answer $$$ s=4 $$$ $$$ s=6 $$$ fifth test case example reach optimal answer $$$ s=3 $$$ note participant weight $$$ 3 $$$ ca n't use boat suitable pair list","['brute force', 'greedy']",1200.0
1375/D,'re give array $$$ n $$$ integers $$$ 0 $$$ $$$ n $$$ inclusive one operation choose element array replace mex elements array ( may change operation ) example current array $$$ [ 0 2 2 1 4 ] $$$ choose second element replace mex present elements — $$$ 3 $$$ array become $$$ [ 0 3 2 1 4 ] $$$ must make array non - decreasing use $$$ 2n $$$ operations prove always possible please note minimize number operations many solutions print – an array $$$ b [ 1 \ldots n ] $$$ non - decreasing $$$ b_1 \le b_2 \le \ldots \le b_n $$$ mex ( minimum exclude ) array smallest non - negative integer belong array instance : 's worth mention mex array length $$$ n $$$ always $$$ 0 $$$ $$$ n $$$ inclusive first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 200 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 1000 $$$ ) — length array second line test case contain $$$ n $$$ integers $$$ a_1 \ldots a_n $$$ ( $$$ 0 \le a_i \le n $$$ ) — elements array note n't distinct guarantee sum $$$ n $$$ test case n't exceed $$$ 1000 $$$ test case must output two line : first line must contain a single integer $$$ k $$$ ( $$$ 0 \le k \le 2n $$$ ) — number operations perform second line must contain $$$ k $$$ integers $$$ x_1 \ldots x_k $$$ ( $$$ 1 \le x_i \le n $$$ ) $$$ x_i $$$ index choose $$$ i $$$ -th operation many solutions find please remember require minimize $$$ k $$$ first test case array already non - decreasing ( $$$ 2 \le 2 \le 3 $$$ ) explanation second test case ( element modify operation color red ) : explanation third test case :,"['brute force', 'constructive algorithms']",1900.0
1364/C,give array $$$ a $$$ length $$$ n $$$ find another array $$$ b $$$ length $$$ n $$$ : $$$ mex $$$ a set integers smallest non - negative integer n't belong set array n't exist determine first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — length array $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 $$$ $$$ a_2 $$$ $$$ \ldots $$$ $$$ a_n $$$ ( $$$ 0 \le a_i \le i $$$ ) — elements array $$$ a $$$ 's guarantee $$$ a_i \le a _ { i+1 } $$$ $$$ 1\le i < n $$$ 's array print a single line contain $$$ -1 $$$ otherwise print a single line contain $$$ n $$$ integers $$$ b_1 $$$ $$$ b_2 $$$ $$$ \ldots $$$ $$$ b_n $$$ ( $$$ 0 \le b_i \le 1000000 $$$ ) multiple answer print second test case answer like $$$ [ <unknown> ] $$$ example valid,"['brute force', 'constructive algorithms', 'greedy']",1600.0
1364/A,"ehab love number theory reason hat number $$$ x $$$ give array $$$ a $$$ find length longest subarray sum elements n't divisible $$$ x $$$ determine subarray n't exist array $$$ a $$$ a subarray array $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) elements begin several ( possibly zero ) elements end first line contain integer $$$ t $$$ $$$ ( 1 \le t \le 5 ) $$$ — number test case need solve description test case follow first line test case contain 2 integers $$$ n $$$ $$$ x $$$ ( $$$ 1 \le n \le 100000 $$$ $$$ 1 \le x \le 10000 $$$ ) — number elements array $$$ a $$$ number ehab hat second line contain $$$ n $$$ space - separated integers $$$ a_1 $$$ $$$ a_2 $$$ $$$ \ldots $$$ $$$ a _ { n } $$$ ( $$$ 0 \le a_i \le 10000 $$$ ) — elements array $$$ a $$$ testcase print length longest subarray whose sum n't divisible $$$ x $$$ 's subarray print $$$ -1 $$$ first test case subarray $$$ [ 2,3 ] $$$ sum elements $$$ 5 $$$ n't divisible $$$ 3 $$$ second test case sum elements whole array $$$ 6 $$$ n't divisible $$$ 4 $$$ third test case subarrays even sum answer $$$ -1 $$$","['brute force', 'data structures']",1200.0
1327/B,king berland polycarp lxxxiv $$$ n $$$ daughters establish power neighbour kingdoms want marry daughters princes kingdoms a lucky coincidence $$$ n $$$ kingdoms well polycarp lxxxiv enumerate daughters $$$ 1 $$$ $$$ n $$$ kingdoms $$$ 1 $$$ $$$ n $$$ daughter compile a list kingdoms princes want marry polycarp lxxxiv busy find a couple daughters greedily one another first daughter take kingdom lowest number list marry daughter prince second daughter take kingdom lowest number list prince n't take already free princes list daughter marry nobody polycarp lxxxiv proceed next daughter process end $$$ n $$$ -th daughter example let $$$ 4 $$$ daughters kingdoms list daughters $$$ [ 2 3 ] $$$ $$$ [ 1 2 ] $$$ $$$ [ 3 4 ] $$$ $$$ [ 3 ] $$$ respectively case daughter $$$ 1 $$$ marry prince kingdom $$$ 2 $$$ daughter $$$ 2 $$$ marry prince kingdom $$$ 1 $$$ daughter $$$ 3 $$$ marry prince kingdom $$$ 3 $$$ leave daughter $$$ 4 $$$ nobody marry actually start marriage process polycarp lxxxiv time convince one daughters prince also worth marry effectively mean add exactly one kingdom exactly one daughter 's list note kingdom present daughter 's list polycarp lxxxiv want increase number marry couple unfortunately n't time determine entry add way increase total number marry couple output marriages already optimal otherwise find entry total number marry couple increase polycarp lxxxiv add multiple ways add entry total number marry couple increase print convenience ask answer $$$ t $$$ independent test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number daughters number kingdoms next $$$ n $$$ line contain description daughter 's list first integer $$$ k $$$ ( $$$ 0 \le k \le n $$$ ) number entries $$$ i $$$ -th daughter 's list $$$ k $$$ distinct integers follow $$$ g_i [ 1 ] g_i [ 2 ] \dots g_i [ k ] $$$ ( $$$ 1 \le g_i [ j ] \le n $$$ ) — indices kingdoms list increase order ( $$$ g_i [ 1 ] < g_i [ 2 ] < \dots < g_i [ k ] $$$ ) 's guarantee total number daughters test case exceed $$$ 100000 $$$ 's also guarantee total number kingdoms list test case exceed $$$ 100000 $$$ test case print answer print ` ` improve '' first line polycarp lxxxiv add kingdom daughter 's list total number marry couple increase second line contain two integers — index daughter index kingdom polycarp lxxxiv add daughter 's list multiple ways add entry total number marry couple increase print otherwise line contain one word ` ` optimal '' first test case depict statement add fourth kingdom list fourth daughter make marry prince fourth kingdom second test case new entry increase number marriages $$$ 0 $$$ $$$ 1 $$$ third fourth test case way add entry fifth test case way change marriages add entry,"['brute force', 'greedy']",1200.0
1311/E,give two integers $$$ n $$$ $$$ d $$$ need construct a root binary tree consist $$$ n $$$ vertices a root vertex $$$ 1 $$$ sum depths vertices equal $$$ d $$$ a tree a connect graph without cycle a root tree a special vertex call root a parent a vertex $$$ v $$$ last different $$$ v $$$ vertex path root vertex $$$ v $$$ depth vertex $$$ v $$$ length path root vertex $$$ v $$$ children vertex $$$ v $$$ vertices $$$ v $$$ parent binary tree a tree vertex $$$ 2 $$$ children answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case line test case contain two integers $$$ n $$$ $$$ d $$$ ( $$$ 2 \le n d \le 5000 $$$ ) — number vertices tree require sum depths vertices guarantee sum $$$ n $$$ sum $$$ d $$$ exceed $$$ 5000 $$$ ( $$$ \sum n \le 5000 \sum d \le 5000 $$$ ) test case print answer impossible construct a tree print ` ` '' ( without quote ) first line otherwise print ` ` { yes } '' first line print $$$ n-1 $$$ integers $$$ p_2 p_3 \dots p_n $$$ second line $$$ p_i $$$ parent vertex $$$ i $$$ note sequence parent print describe binary tree picture correspond first second test case example :,"['brute force', 'constructive algorithms']",2200.0
1204/D1,difference easy hard versions length string hack problem solve problems kirk a binary string $$$ s $$$ ( a string consist zero ones ) length $$$ n $$$ ask find a binary string $$$ t $$$ length satisfy follow condition : a non - decreasing subsequence a string $$$ p $$$ a sequence indices $$$ i_1 i_2 \ldots i_k $$$ $$$ i_1 < i_2 < \ldots < i_k $$$ $$$ p _ { i_1 } \leq p _ { i_2 } \leq \ldots \leq p _ { i_k } $$$ length subsequence $$$ k $$$ multiple substrings satisfy condition output first line contain a binary string length $$$ 2\ : 000 $$$ output a binary string satisfy condition many string output first example : second example similar first one,"['brute force', 'greedy', 'strings']",2000.0
1167/G,"get bore decide take guess would ` ` inception '' production go budget film terribly low first scene remember one feature whole city bend onto : feel like require high <unknown> expense n't ? luckily come a similar - looking scene a tiny bite cheaper make firstly forget 3d 's hard expensive ! city represent a number line ( infinite make easier course ) secondly city n't look natural $$$ n $$$ build line build a square $$$ 1 \times 1 $$$ build number $$$ 1 $$$ $$$ n $$$ ascend order position lower corner build $$$ i $$$ integer point $$$ a_i $$$ $$$ a_i + 1 $$$ number line also distance two neighbour build $$$ i $$$ $$$ i + 1 $$$ n't exceed $$$ d $$$ ( really condition make city look <unknown> ) distance neighbour build $$$ i $$$ $$$ i + 1 $$$ calculate lower right corner build $$$ i $$$ lower leave corner build $$$ i + 1 $$$ finally <unknown> bend also really hard simulate ! let bend integer coordinate $$$ x $$$ perform follow algorithm take ray $$$ x $$$ $$$ + \infty $$$ build ray start turn ray build counter - clockwise around point $$$ x $$$ angle build touch either another build a part line stop bend ( implement build crush also worth money ) let 's call angle two ray final state terminal angle $$$ \alpha_x $$$ thing leave decide integer point $$$ x $$$ best start bend around fortunately ' ve already choose $$$ m $$$ candidates perform bend , please help us calculate terminal angle $$$ \alpha_x $$$ bend $$$ x $$$ list candidates ? first line contain two integer number $$$ n $$$ $$$ d $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 0 \le d \le 7000 $$$ ) — number build maximum distance pair neighbour build respectively second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ a_1 = 0 $$$ $$$ 0 < a _ { i + 1 } - a_i \le d + 1 $$$ ) — coordinate leave corner correspond build ascend order third line contain single integer $$$ m $$$ ( $$$ 1 \le m \le 200000 $$$ ) — number candidates fourth line contain $$$ m $$$ integers $$$ x_1 x_2 \dots x_m $$$ ( $$$ 0 \le x_i \le a_n + 1 $$$ $$$ x_i < x _ { i + 1 } $$$ ) — coordinate bend need calculate terminal angle ascend order print $$$ m $$$ number bend $$$ x_i $$$ print terminal angle $$$ \alpha _ { x_i } $$$ ( radians ) answer consider correct absolute error exceed $$$ 10^ { -9 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ answer accept $$$ |a - b| \le 10^ { -9 } $$$ see picture city first example bend position $$$ 2 $$$ angle need measure mark blue see 's equal $$$ \frac \pi 4 $$$ see pair neighbour build distance $$$ 4 $$$ $$$ d = 4 $$$ would also suffice test","['brute force', 'geometry']",3100.0
1155/F,whole delivery market berland control two rival company : berex berps provide fast reliable delivery service across cities berland map berland represent undirected graph cities vertices roads edge pair cities one road road connect different cities berex berps competitive pair cities $$$ ( v u ) $$$ set paths $$$ v $$$ $$$ u $$$ a way two paths n't share a single road guarantee possible berland government decide cut road maintenance cost abandon roads obviously want maintain little roads possible however n't want break entire delivery system berex berps still able paths every pair cities non - intersecting minimal number roads berland government maintain ? formally give a 2 - edge connect undirected graph minimum number edge leave result graph also 2 - edge connect ? first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 3 \le n \le 14 $$$ $$$ n \le m \le \frac { n ( n - 1 ) } { 2 } $$$ ) — number cities number roads next $$$ m $$$ line contain two integers $$$ v $$$ $$$ u $$$ ( $$$ 1 \le v u \le n $$$ $$$ v \ne u $$$ ) — cities connect next road guarantee pair cities one road guarantee pair cities least two paths n't share a single road first line contain a single integer $$$ k $$$ — minimum number roads berland government maintain berex berps still able paths every pair cities non - intersecting next $$$ k $$$ line contain list roads maintain line form ` ` $$$ v ~ u $$$ ` ` $$$ v $$$ $$$ u $$$ cities connect next road multiple list minimum size print order roads list n't matter graph examples red edge maintain ones,"['brute force', 'dp']",2800.0
1118/D1,difference easy hard versions constraints polycarp write a coursework coursework consist $$$ m $$$ page polycarp also $$$ n $$$ cup coffee coffee $$$ i $$$ -th cup $$$ a_i $$$ caffeine polycarp drink cup coffee ( one ) drink cup order polycarp drink cup instantly completely ( i.e split cup several days ) surely courseworks usually write a single day ( a perfect world berland least ) require multiple days hard work let 's consider day polycarp 's work consider polycarp drink $$$ k $$$ cup coffee day caffeine dosages cup polycarp drink day $$$ a _ { i_1 } a _ { i_2 } \dots a _ { i_k } $$$ first cup drink give energy write $$$ a _ { i_1 } $$$ page coursework second cup give energy write $$$ max ( 0 a _ { i_2 } - 1 ) $$$ page third cup give energy write $$$ max ( 0 a _ { i_3 } - 2 ) $$$ page ... $$$ k $$$ -th cup give energy write $$$ max ( 0 a _ { i_k } - k + 1 ) $$$ page polycarp n't drink coffee day write coursework day polycarp finish coursework soon possible ( spend minimum number days ) task find number days say impossible first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 100 $$$ $$$ 1 \le m \le 10000 $$$ ) — number cup coffee number page coursework second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 100 $$$ ) $$$ a_i $$$ caffeine dosage coffee $$$ i $$$ -th cup impossible write coursework print -1 . otherwise print minimum number days polycarp need first example polycarp drink fourth cup first day ( write $$$ 1 $$$ page ) first second cup second day ( write $$$ 2 + ( 3 - 1 ) = 4 $$$ page ) fifth cup third day ( write $$$ 2 $$$ page ) third cup fourth day ( write $$$ 1 $$$ page ) answer $$$ 4 $$$ obvious way write coursework three less days test second example polycarp drink third fourth second cup first day ( write $$$ 4 + ( 2 - 1 ) + ( 3 - 2 ) = 6 $$$ page ) sixth cup second day ( write $$$ 4 $$$ page ) answer $$$ 2 $$$ obvious polycarp write whole coursework one day test third example polycarp drink cup coffee first day write $$$ 5 + ( 5 - 1 ) + ( 5 - 2 ) + ( 5 - 3 ) + ( 5 - 4 ) = 15 $$$ page coursework fourth example polycarp drink cup first day drink one second day first day write $$$ 5 + ( 5 - 1 ) + ( 5 - 2 ) + ( 5 - 3 ) = 14 $$$ page coursework second day write $$$ 5 $$$ page coursework enough complete fifth example polycarp write whole coursework even drink one cup coffee day answer -1,"['brute force', 'greedy']",1700.0
1088/A,give integer $$$ x $$$ find 2 integers $$$ a $$$ $$$ b $$$ : line contain integer $$$ x $$$ $$$ ( 1 \le x \le 100 ) $$$ output two integers $$$ a $$$ $$$ b $$$ satisfy give condition separate a space pair integers satisfy condition print ` ` -1 '' ( without quote ),"['brute force', 'constructive algorithms']",800.0
982/D,long time scientists study behavior shark shark many species alternate short movements a certain location long movements locations max a young <unknown> $$$ n $$$ days watch a specific shark know distance shark travel days distance distinct max want know many locations shark visit assume integer $$$ k $$$ shark day travel distance strictly less $$$ k $$$ n't change location ; otherwise one day shark travel distance greater equal $$$ k $$$ ; change a location day note possible shark change a location several consecutive days shark travel distance least $$$ k $$$ shark never return location move thus sequence $$$ n $$$ days find consecutive nonempty segment shark travel distance less $$$ k $$$ days : segment correspond one location max want choose $$$ k $$$ lengths segment equal find integer $$$ k $$$ number locations large possible several $$$ k $$$ print smallest one first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100000 $$$ ) — number days second line contain $$$ n $$$ distinct positive integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — distance travel day print a single integer $$$ k $$$ first example shark travel inside a location days $$$ 1 $$$ $$$ 2 $$$ ( first location ) $$$ 4 $$$ -th $$$ 5 $$$ -th days ( second location ) $$$ 7 $$$ -th $$$ 8 $$$ -th days ( third location ) three locations total second example shark move inside a location $$$ 2 $$$ -nd day one location,"['brute force', 'data structures']",1900.0
940/F,come home fell unpleasant smell come ? give array a. answer follow query : mex a multiset number smallest non - negative integer set note problem elements a positive mean c0 = 0 0 never answer query second type first line input contain two integers n q ( 1 ≤ n q ≤ 100 000 ) — length array number query respectively second line input contain n integers — a1 a2 ... ( 1 ≤ ai ≤ 109 ) next q line describe a single query first type query describe three integers ti = 1 li ri 1 ≤ li ≤ ri ≤ n — bound subarray second type query describe three integers ti = 2 pi xi 1 ≤ pi ≤ n index element must change 1 ≤ xi ≤ 109 new value query first type output a single integer — mex { c0 c1 ... <unknown> } subarray first query consist single element — 1 . subarray second query consist four 2s one 3 two 1s subarray fourth query consist three 1s three 2s one 3,"['brute force', 'data structures']",2600.0
940/A,' ve get test case a big olympiad come problemsetters ' number one priority add another problem round diameter a multiset point line largest distance two point set example diameter multiset { 1 3 2 1 } 2 . diameter multiset consist one point 0 . give n point line minimum number point remove diameter multiset remain point exceed d ? first line contain two integers n d ( 1 ≤ n ≤ 100 0 ≤ d ≤ 100 ) — amount point maximum allow diameter respectively second line contain n space separate integers ( 1 ≤ xi ≤ 100 ) — coordinate point output a single integer — minimum number point remove first test case optimal strategy remove point coordinate 4 . remain point coordinate 1 2 diameter equal 2 - 1 = 1 . second test case diameter equal 0 unnecessary remove point third test case optimal strategy remove point coordinate 1 9 10 . remain point coordinate 3 4 6 diameter equal 6 - 3 = 3,"['brute force', 'greedy']",1200.0
914/C,travel salesman spend a lot time travel tend get bore pass time like perform operations number one operation take a positive integer x reduce number bits set 1 binary representation x. example number 13 's true <unknown> = <unknown> 3 bits set 13 reduce 3 one operation call a number special minimum number operations reduce 1 k. want find many special number exist greater n. please help travel salesman reach destination ! since answer large output modulo 109 + 7 . first line contain integer n ( 1 ≤ n < <unknown> ) second line contain integer k ( 0 ≤ k ≤ 1000 ) note n give binary representation without lead zero output a single integer — number special number greater n modulo 109 + 7 . first sample three special number 3 5 6 . get reduce 2 one operation ( since two set bits 3 5 6 ) 1 one operation ( since one set bite 2 ),"['brute force', 'dp']",1800.0
913/D,"prepare exam schedule theory exam last exactly t milliseconds consist n problems either solve problem i exactly ti milliseconds ignore spend time n't need time rest solve a problem either unfortunately teacher consider problems easy thus assign integer ai every problem i mean problem i bring a point final score case solve ai problems overall ( include problem i ) formally suppose solve problems p1 p2 ... pk exam , final score s equal number value j 1 k k ≤ <unknown> guess real first problem exam already front therefore want choose a set problems solve exam maximize final score advance n't forget exam limit time must enough time solve choose problems exist different set problems lead maximum final score , first line contain two integers n t ( 1 ≤ n ≤ 2·105 ; 1 ≤ t ≤ 109 ) — number problems exam length exam milliseconds respectively next n line contain two integers ai ti ( 1 ≤ ai ≤ n ; 1 ≤ ti ≤ 104 ) problems number 1 n. first line output a single integer s — maximum possible final score second line output a single integer k ( 0 ≤ k ≤ n ) — number problems solve third line output k distinct integers p1 p2 ... pk ( 1 ≤ pi ≤ n ) — index problems solve order several optimal set problems may output first example solve problems 3 1 4 . case 'll spend 80 + 100 + 90 = 270 milliseconds fall within length exam 300 milliseconds ( even leave 30 milliseconds a rest ) problems 3 1 bring a point problem 4 wo n't 'll score two point second example length exam <unknown> enough solve even a single problem third example enough time solve problems 42 + 58 = 100 milliseconds hand solutions teacher a smile","['brute force', 'data structures', 'greedy']",1800.0
909/A,prefer way generate user login polygon concatenate a prefix user 's first name a prefix last name order prefix must non - empty prefix full name typically multiple possible <unknown> person give first last name a user return alphabetically earliest login get ( regardless potential polygon users ) a reminder a prefix a string s substring occur begin s : ` ` a '' ` ` ab '' ` ` abc '' etc prefix string ` ` { abcdef } '' ` ` b '' ' bc '' a string a alphabetically earlier a string b a a prefix b a b coincide position a a letter alphabetically earlier correspond letter b : ` ` a '' ` ` ab '' alphabetically earlier ` ` ac '' ` ` b '' ` ` ba '' alphabetically later ` ` ac '' input consist a single line contain two space - separated string : first last name character string a lowercase english letter length string 1 10 inclusive output a single string — alphabetically earliest possible login form name output give lowercase well,"['brute force', 'greedy']",1000.0
863/B,"vadim really keen travel recently hear kayak activity near town become excite join a party <unknown> party ready start journey firstly choose kayak 2·n people group ( include vadim ) exactly n - 1 tandem kayak ( obviously carry two people ) 2 single kayak i - th person 's weight wi weight important matter kayak — difference weight two people sit tandem kayak large crash , course people want distribute seat kayak order minimize chance kayak crash formally instability a single kayak always 0 instability a tandem kayak absolute difference weight people kayak instability whole journey total instability kayak help party determine minimum possible total instability ! first line contain one number n ( 2 ≤ n ≤ 50 ) second line contain 2·n integer number w1 w2 ... <unknown> wi weight person i ( 1 ≤ wi ≤ 1000 ) print minimum possible total instability","['brute force', 'greedy']",1500.0
835/D,palindromic characteristics string s length |s| a sequence |s| integers k - th number total number non - empty substrings s k - palindromes a string 1 - palindrome read backward forward a string k - palindrome ( k > 1 ) : leave half string t prefix length ⌊|t| / 2⌋ right half — suffix length ⌊|t| / 2⌋ denote length string t divide 2 round note substring count many time appear string example string ` ` aaa '' substring ` ` a '' appear 3 time first line contain string s ( 1 ≤ |s| ≤ 5000 ) consist lowercase english letter print |s| integers — palindromic characteristics string s. first example 1 - palindromes substring « a » « b » « b » « a » « bb » « abba » substring « bb » 2 - palindrome 3- 4 - palindromes,"['brute force', 'dp', 'strings']",1900.0
757/E,bash get tire journey become greatest pokemon master decide take a break play function bash define a function f0 ( n ) denote number ways factor n two factor p q gcd ( p q ) = 1 . word f0 ( n ) number order pair positive integers ( p q ) p·q = n gcd ( p q ) = 1 . bash felt easy calculate function define a series function fr + 1 define : ( u v ) order pair positive integers need co - prime bash want know value fr ( n ) different r n. since value could huge would like know value modulo 109 + 7 . help ! first line contain integer q ( 1 ≤ q ≤ 106 ) — number value bash want know next q line contain two integers r n ( 0 ≤ r ≤ 106 1 ≤ n ≤ 106 ) denote bash want know value fr ( n ) print q integers pair r n give print fr ( n ) modulo 109 + 7 a separate line,"['brute force', 'dp']",2500.0
749/B,long time ago alex create interest problem parallelogram input data problem contain four integer point cartesian plane define set vertices non - degenerate ( positive area ) parallelogram point necessary give order clockwise counterclockwise traversal alex nice test problem somehow happen last line input lose three four point original parallelogram remember test good ask restore give three point input consist three line contain a pair integer coordinate xi yi ( - 1000 ≤ xi yi ≤ 1000 ) 's guarantee three point lie line two coincide first print integer k — number ways add one new integer point obtain set define parallelogram positive area requirement point arrange special order ( like traversal ) define set vertices print k line contain a pair integer — possible coordinate fourth point need clarification parallelogram please check wikipedia page : https : //en.wikipedia.org / wiki / parallelogram,"['brute force', 'constructive algorithms', 'geometry']",1200.0
725/E,alfred want buy a toy moose cost c dollars store ’ t give change must give store exactly c dollars less n coin make c dollars coin follow follow algorithm : let s set coin use s initially empty alfred repeatedly add s highest - valued coin total value coin s add coin ’ t exceed c. coin value coin s still less c give go home note alfred never remove a coin s add a programmer might aware alfred ’ s algorithm fail even a set coin value exactly c. example alfred one coin worth $ 3 one coin worth $ 4 two coin worth $ 5 moose cost $ 12 alfred add $ 5 coin s give since add coin would cause value coin s exceed $ 12 course alfred could instead combine one $ 3 coin one $ 4 coin one $ 5 coin reach total bob try convince alfred algorithm flaw alfred ’ t believe bob want give alfred coin ( addition alfred already ) alfred ’ s algorithm fail bob give alfred number coin denomination ( subject constraint coin must worth a positive integer number dollars ) multiple coin a single denomination would like minimize total value coin give alfred please find minimum value solution print ` ` greed good '' assume answer exist positive word alfred 's algorithm work bob n't give coin first line contain c ( 1 ≤ c ≤ 200 000 ) — price alfred want pay second line contain n ( 1 ≤ n ≤ 200 000 ) — number coin alfred initially n line follow contain a single integer x ( 1 ≤ x ≤ c ) represent value one alfred 's coin a solution print minimum possible total value coin a solution otherwise print ` ` greed good '' ( without quote ) first sample bob give alfred a single coin worth $ 5 create situation describe problem statement second sample set coin cause alfred 's algorithm fail,"['brute force', 'greedy']",2600.0
691/F,"couple cover a wildly popular luck - based game begin ! two players must work together construct a rectangle a bag n ball integer write place table first player reach grab a ball randomly ( ball equal probability choose ) — number write ball rectangle 's width meter ball return bag second player reach bag grab another ball — number write ball rectangle 's height meter area rectangle greater equal threshold p square meter players win otherwise lose organizers game try select appropriate value p probability a couple win high low slow count hire answer question give a list number write ball organizers would like know many win pair ball exist different value p. note two pair different either first second ball different two pair two different ball number consider different input begin a single positive integer n line ( 1 ≤ n ≤ 106 ) second line contain n positive integers — i - th number line equal ai ( 1 ≤ ai ≤ 3·106 ) number write i - th ball next line contain integer m ( 1 ≤ m ≤ 106 ) number question ask , follow line contain m positive integers — j - th number line equal value p ( 1 ≤ p ≤ 3·106 ) j - th question ask question print number win pair ball exist give value p separate line","['brute force', 'dp']",2200.0
670/F,vasya decide pass a large integer n kate first write number a string append right integer k — number digits n. magically number shuffle arbitrary order note pass kate thing vasya remember a non - empty substring n ( a substring n a sequence consecutive digits number n ) vasya know may one way restore number n. task find smallest possible initial integer n. note decimal representation number n contain lead zero except case integer n equal zero ( case a single digit 0 use ) first line input contain string receive kate number digits string exceed 1 000 000 . second line contain substring n vasya remember string contain lead zero guarantee input data correct answer always exist print <unknown> integer n vasya could pass kate,"['brute force', 'constructive algorithms', 'strings']",2300.0
632/B,alice bob play a game game involve split game piece two team n piece i - th piece a strength pi way split game piece split several step : strength a player sum strengths piece group give alice 's initial split two team help bob determine optimal strategy return maximum strength achieve first line contain integer n ( 1 ≤ n ≤ 5·105 ) — number game piece second line contain n integers pi ( 1 ≤ pi ≤ 109 ) — strength i - th piece third line contain n character a b — assignment team first step ( alice 's step ) print integer a — maximum strength bob achieve first sample bob flip suffix length one second sample bob flip prefix suffix ( ) length 5 . third sample bob nothing,"['brute force', 'constructive algorithms']",1400.0
578/B,"give n number a1 a2 ... , perform k operations operation multiply one number x. want make large possible denote bitwise find maximum possible value perform k operations optimally first line contain three integers n k x ( 1 ≤ n ≤ 200 000 1 ≤ k ≤ 10 2 ≤ x ≤ 8 ) second line contain n integers a1 a2 ... ( 0 ≤ ai ≤ 109 ) output maximum value a bitwise sequence elements perform operations first sample possible choice one operation result three number 1 1 2 result second sample multiply 8 3 two time 'll get 72 . case number become 1 2 4 72 value 79 largest possible result","['brute force', 'greedy']",1700.0
436/F,modern mobile applications divide free pay even a single application developers often release two versions : a pay version without ads a free version ads suppose a pay version app cost p ( p integer ) rubles free version application contain c ad banners user describe two integers : ai — number rubles user will pay pay version application bi — number banners will <unknown> free version behavior member shall consider strictly deterministic : user free version bring profit c × w rubles user pay version bring profit p rubles task help application developers select optimal parameters p c. namely know characteristics users value c 0 ( max bi ) + 1 need determine maximum profit application correspond parameter p. first line contain two integers n w ( 1 ≤ n ≤ 105 ; 1 ≤ w ≤ 105 ) — number users profit a single banner next n line contain two integers ai bi ( 0 ≤ ai bi ≤ 105 ) — characteristics i - th user print ( max bi ) + 2 line i - th line print two integers : pay — maximum gain profit c = i - 1 p ( 0 ≤ p ≤ 109 ) — correspond optimal app cost multiple optimal solutions print,"['brute force', 'data structures', 'dp']",3000.0
402/C,"let 's call undirected graph n vertices p - interesting follow condition fulfill : a subgraph a graph set graph vertices set graph edge , set edge must meet condition : end edge set must belong choose set vertices task find a p - interesting graph consist n vertices first line contain a single integer t ( 1 ≤ t ≤ 5 ) — number test input next t line contain two space - separated integers : n p ( 5 ≤ n ≤ 24 ; p ≥ 0 ; ) — number vertices graph interest value appropriate test guarantee require graph exist t test print 2n + p line contain description edge a p - interesting graph : i - th line must contain two space - separated integers ai bi ( 1 ≤ ai bi ≤ n ; ai ≠ bi ) — two vertices connect edge result graph consider graph vertices number integers 1 n. print answer test order test occur input multiple solutions print","['brute force', 'constructive algorithms']",1500.0
335/D,"give n rectangles label 1 n. corner rectangles integer coordinate edge parallel ox oy ax rectangles may touch overlap ( point belong interior one rectangle ) task determine 's a non - empty subset rectangles form a square , determine exist a subset rectangles square every point belong interior border square belong interior border least one rectangles subset every point belong interior border least one rectangle subset belong interior border square first line contain a single integer n ( 1 ≤ n ≤ 105 ) — number rectangles next n line contain a description a rectangle i - th line describe rectangle label i. rectangle description consist four integers : x1 y1 x2 y2 — coordinate bottom leave top right corner ( 0 ≤ x1 < x2 ≤ 3000 0 ≤ y1 < y2 ≤ 3000 ) two rectangles overlap ( point belong interior one rectangle ) a subset exist print ` ` yes '' ( without quote ) first line output file follow k number rectangles subset second line print k number — label rectangles subset order one subset exist print one subset exist print ` ` '' ( without quote ) first test case look follow : note rectangles 6 8 9 form a square well would acceptable answer second test case look follow :","['brute force', 'dp']",2400.0
260/E,"a country call flatland infinite two - dimensional plane flatland n cities a point plane flatland rule king circle iv circle iv 9 sons want give sons part flatland rule , want draw four distinct straight line two parallel ox axis two others parallel oy axis , straight line go city thus flatland divide 9 part son give exactly one part circle iv think a little evaluate sons ' <unknown> decide i - th son get part flatland exactly ai cities help circle find four straight line divide flatland 9 part line result part give sons son number i get part flatland contain ai cities first line contain integer n ( 9 ≤ n ≤ 105 ) — number cities flatland next n line contain two space - separated integers : xi yi ( - 109 ≤ xi yi ≤ 109 ) — coordinate i - th city two cities locate point last line contain nine space - separated integers : solution print a single integer -1 . otherwise print first line two distinct real space - separated number : x1 x2 — <unknown> straight line parallel oy axis second line print two distinct real space - separated number : y1 y2 — <unknown> straight line parallel ox multiple solutions print answer check a city consider lie a straight line distance city line n't exceed 10 - 6 . two straight line consider distance n't exceed 10 - 6 . solution first sample test show : solution second sample test show : solution third sample test","['brute force', 'data structures']",2500.0
255/C,gena love sequence number recently discover a new type sequence call almost arithmetical progression a sequence almost arithmetical progression elements represent : right gena a piece paper sequence b consist n integers help gena find longest subsequence integers almost arithmetical progression sequence s1 s2 ... sk a subsequence sequence b1 b2 ... bn increase sequence index i1 i2 ... ik ( 1 ≤ i1 < i2 < ... < ik ≤ n ) bij = sj word sequence s obtain b cross elements first line contain integer n ( 1 ≤ n ≤ 4000 ) next line contain n integers b1 b2 ... bn ( 1 ≤ bi ≤ 106 ) print a single integer — length require longest subsequence first test sequence actually suitable subsequence second test follow subsequence fit : 10 20 10,"['brute force', 'dp']",1500.0
189/A,polycarpus a ribbon length n. want cut ribbon a way fulfil follow two condition : help polycarpus find number ribbon piece require cut first line contain four space - separated integers n a b c ( 1 ≤ n a b c ≤ 4000 ) — length original ribbon acceptable lengths ribbon piece cut correspondingly number a b c coincide print a single number — maximum possible number ribbon piece guarantee least one correct ribbon cut exist first example polycarpus cut ribbon way : first piece length 2 second piece length 3 . second example polycarpus cut ribbon way : first piece length 5 second piece length 2,"['brute force', 'dp']",1300.0
161/E,"polycarpus t safes password safe a square matrix consist decimal digits ' 0 ' ... ' 9 ' ( size passwords safes may vary ) alas polycarpus forget passwords restore polycarpus enjoy prime number choose matrix passwords write a prime number row matrix surprise find matrices turn symmetrical ( remain <unknown> ) , years later polycarp <unknown> find remember prime number pi write first line password matrices safe find number matrices passwords number digits pi determine number row columns i - th matrix one prime number occur several row password matrix several matrices prime number write first row matrix may lead zero first line input contain integer t ( 1 ≤ t ≤ 30 ) — number safes next t line contain integers pi ( 10 ≤ pi ≤ 99999 ) pi a prime number write first row password matrix i - th safe pi 's write without lead zero print t number i - th number matrices a password i - th safe print number separate line a possible password matrix second safe : a possible password matrix fourth safe :","['brute force', 'dp']",2500.0
161/A,two - dimensional kingdom go hard time ... morning three - dimensional kingdom declare war two - dimensional one ( possibly arm ) conflict determine ultimate owner straight line two - dimensional kingdom a regular army n people soldier register indicate desire size bulletproof vest : i - th soldier indicate size ai soldier know <unknown> command staff assume soldier comfortable vest size ai - x ai + y inclusive ( number x y ≥ 0 specify ) two - dimensional kingdom m vest disposal j - th vest 's size equal bj help <unknown> two - dimensional kingdom 's army : equip vest many soldier possible vest use i - th soldier put j - th vest ai - x ≤ bj ≤ ai + y. first input line contain four integers n m x y ( 1 ≤ n m ≤ 105 0 ≤ x y ≤ 109 ) — number soldier number vest two number specify soldier ' <unknown> correspondingly second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) non - decreasing order separate single space — desire size vest third line contain m integers b1 b2 ... bm ( 1 ≤ bj ≤ 109 ) non - decreasing order separate single space — size available vest first line print a single integer k — maximum number soldier equip bulletproof vest next k line print k pair one pair per line ` ` ui vi '' ( without quote ) pair ( ui vi ) mean soldier number ui must wear vest number vi soldier vest number start one order specify input number soldier pair pairwise different number vest pair also pairwise different print pair order multiple optimal answer allow print first sample need vest ' size match perfectly : first soldier get first vest ( size 1 ) third soldier get second vest ( size 3 ) sample allow another answer give second vest fourth soldier instead third one second sample vest size differ desire size 2 size soldier equip,"['brute force', 'greedy']",1300.0
159/D,give a non - empty string s consist lowercase letter find number pair non - overlapping palindromic substrings string a formal way find quantity tuples ( a b x y ) 1 ≤ a ≤ b < x ≤ y ≤ |s| substrings s [ a ... b ] s [ x ... y ] palindromes a palindrome a string read way leave right right leave example ` ` abacaba '' ` ` z '' ` ` abba '' palindromes a substring s [ i ... j ] ( 1 ≤ i ≤ j ≤ |s| ) string s = s1s2 ... s|s| a string sisi + 1 ... sj example substring s [ 2 ... 4 ] string s = ` ` abacaba '' equal ` ` bac '' first line input contain a non - empty string s consist lowercase letter ( ' a ' ... ' z ' ) s contain 2000 character output a single number — quantity pair non - overlapping palindromic substrings s. please use % lld format specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d format specifier,"['brute force', 'dp', 'strings']",1500.0
158/D,"berland university prepare celebrate 256 - th anniversary found ! a specially appoint vice rector celebration prepare decorate campus center campus n ice sculpture <unknown> sculpture arrange a circle equal distance form a regular n - gon number clockwise order number 1 n. site university already conduct a vote estimate sculpture 's characteristic ti — degree sculpture 's attractiveness value ti positive negative zero university rector come evaluate work say might perfect arrangement suggest melt sculpture : help vice rector analyze <unknown> — find maximum value ti sum obtain way allow melt sculpture sculpture move first input line contain integer n ( 3 ≤ n ≤ 20000 ) — initial number sculpture second line contain a sequence integers t1 t2 ... tn ti — degree i - th sculpture 's attractiveness ( - 1000 ≤ ti ≤ 1000 ) number line separate space print require maximum sum sculpture ' attractiveness first sample best leave every second sculpture , leave sculpture <unknown> : 2 4 5 и 3",['brute force'],1300.0
156/E,mrs . hudson n't make famous pancakes quite a finally decide make learn m new recipes recently ca n't wait try recipes base n special spice mrs . hudson spice kitchen lie jar number integers 0 n - 1 ( spice lie individual jar ) jar also price correspond spice inscribe — integer ai know three value i - th pancake recipe : di si ci di ci integers si pattern integer write numeral system radix di pattern contain digits latin letter ( denote digits larger nine ) question mark number x di - base numeral system match pattern si replace question mark pattern digits letter obtain number x ( lead zero n't take consideration perform comparison ) formally : question mark replace exactly one digit exactly one letter replace question mark get a number lead zero delete zero example number <unknown> 11 - base numeral system match pattern ` ` ? ? 4 ? ? 987 ? ` ` number <unknown> make pancakes i - th recipe mrs . hudson take jar number whose representation di - base numeral system match pattern si control number recipe ( zi ) define sum number ci product price take jar formally : ( j number whose representation di - base numeral system match pattern si ) mrs . hudson n't interest control number minimum prime divisors task : recipe i find minimum prime divisor number zi divisor exceed 100 find print -1 . first line contain single integer n ( 1 ≤ n ≤ 104 ) second line contain space - separated price spice a0 a1 ... - 1 ai integer ( 1 ≤ ai ≤ 1018 ) third line contain single integer m ( 1 ≤ m ≤ 3·104 ) — number recipes mrs . hudson learn next m line describe recipes one per line first give integer di write decimal numeral system ( 2 ≤ di ≤ 16 ) a space follow si pattern — a string 1 30 length inclusive consist digits ` ` 0 '' ` ` 9 '' letter ` ` a '' ` ` f '' sign ` ` ? ` ` letter ` ` a '' ` ` f '' consider digits 10 15 correspondingly guarantee digits pattern ( include digits represent letter ) strictly less di a space follow integer ci write decimal numeral system ( 1 ≤ ci ≤ 1018 ) please use % lld specificator read write 64 - bit integers с++ prefer use cin cout string % i64d specificator instead recipe count minimum prime number control number divide print prime number single line number turn larger 100 print -1 . first test one - digit number binary system match jar one price equal 1 number c also equal 1 control number equal 2 . minimal prime divisor 2 2 . second test 4 jar number 0 3 price equal 2 3 5 7 correspondingly — first four prime number recipes number two - digit first recipe second digit always 0 second recipe second digit always 1 third recipe first digit must 0 fourth recipe first digit always 1 . consequently control number <unknown> follow : first recipe 2 × 5 + 11 = 21 ( minimum prime divisor 3 ) second recipe 3 × 7 + 13 = 44 ( minimum prime divisor 2 ) third recipe 2 × 3 + 17 = 23 ( minimum prime divisor 23 ) finally fourth recipe 5 × 7 + 19 = 54 ( minimum prime divisor 2 ) third test number consist <unknown> digits record a <unknown> - base numeral system number 0 ( number single bottle ) match control number equal 1018 + 1 . minimum prime divisor number equal 101 print -1,"['brute force', 'dp']",3000.0
72/E,ali <unknown> go buy new clothe since 're reach noruz ancient persian festival begin new persian year ali enter a shop saw shopkeeper a programmer since money program change career shopkeeper tell ali buy anything free could answer a simple question 10 second see question ali pay 3 <unknown> ali agree instantly shopkeeper hand a piece paper contain task task indeed simple say : let string a <unknown> non - empty substring a repeat time ? ali answer fast say answer a. shopkeeper say ali wrong ask read rest statement : several substrings maximal repeat time substring maximal length would answer case a tie alphabetically latest substring choose answer ab ali want us solve problem different string n't a great advantage ali a computer a weird language single line consist a string a. non - empty make lower - case latin letter contain 30 character single line contain answer,"['brute force', 'strings']",1800.0
54/D,one hedgehog friend 's favorite entertainments take sentence a song replace half word ( sometimes even ) 's name friend 's birthday approach hedgehog decide make a special present friend : a long song name repeat many time try might ca n't write a decent song ! problem hedgehog already decide long result sentence ( i.e many letter contain ) position sentence friend 's name occur must occur position sentence besides hedgehog decide limit use first k letter english alphabet sentence ( even a sentence one long word ) result problem indeed quite complicate 's hedgehog ask help write a program make desire word give name p length n require word give position occurrences name p desire word alphabet 's size k. note occurrences name overlap first line contain number n k length require string alphabet size accordingly limitations : 1 ≤ n ≤ 100 2 ≤ k ≤ 26 . second line contain name p a non - empty string whose length exceed n character string consist first k lowercase symbols english alphabet third line contain string length n - length ( p ) + 1 consist number zero one a number one i - th position mean occurrence name p start i - th position desire word a zero mean occurrence start print desire word s. several answer print solution print ` ` solution '',"['brute force', 'dp', 'strings']",2100.0
41/B,one day vasya get hold information martian dollar course bourles next n days buy price sell price one dollar day i equal ai vasya b bourles buy a certain number dollars sell n days accord martian laws one buy integer number dollars maximal sum money bourles vasya get end day n ? first line contain two integers n b ( 1 ≤ n b ≤ 2000 ) — number days initial number money bourles next line contain n integers ai ( 1 ≤ ai ≤ 2000 ) — price martian dollars print single number — maximal sum money bourles vasya get end day n,['brute force'],1400.0
38/C,"blind know consist opaque horizontal strip rotate thus <unknown> amount light flow room n blind strip width 1 factory warehouse blind production problem spare detail different order , may length ( even possible different lengths ) every stripe cut two part cuttings make perpendicularly side along length measure thus cuttings change width a stripe result piece a lesser length ( sum equal length initial stripe ) cuttings blind construct consecutive join several part similar length along side along length measure also apart result piece initial stripe use a blind n't cut forbid construct blind way thus blind consist k piece d length form a rectangle k × d bourlemeters task find window possess largest possible area blind make give strip technical <unknown> forbid use piece shorter l <unknown> window form a rectangle side lengths positive integers first output line contain two space - separated integers n l ( 1 ≤ n l ≤ 100 ) number strip warehouse minimal acceptable length a blind stripe bourlemeters second line contain space - separated n integers ai lengths initial strip bourlemeters ( 1 ≤ ai ≤ 100 ) print single number — maximal area window square bourlemeters completely cover window a positive area cover completely without break give rule exist print single number 0 . first sample test require window 2 × 4 size blind consist 4 part 2 bourlemeters long one part initial stripe length 2 one a part a cut stripe length 3 two remain strip part a stripe length 4 cut halve",['brute force'],1400.0
1842/D,"tenzing $$$ n $$$ animal friends number $$$ 1 $$$ $$$ n $$$ one day tenzing want play animal friends , tenzing host several game one game choose a set $$$ s $$$ a subset $$$ \ { 1,2,3 ... n\ } $$$ choose integer $$$ t $$$ , play game animals $$$ s $$$ $$$ t $$$ minutes restrictions : tenzing want know maximum total time play animal friends please find maximum total time tenzing play animal friends a way organize game achieve maximum total time report play animal friends infinite amount time also tenzing want host many game host $$$ n^2 $$$ game first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n \leq 100 $$$ $$$ 0 \leq m \leq \frac { n ( n-1 ) } { 2 } $$$ ) — number animal friends number special restrictions $$$ i $$$ -th follow $$$ m $$$ line input contain three integers $$$ u_i $$$ $$$ v_i $$$ $$$ y_i $$$ ( $$$ 1\leq u_i < v_i\leq n $$$ $$$ 0\leq y_i\leq 1000000000 $$$ ) — describe $$$ i $$$ -th special restriction guarantee $$$ 1 \leq i < j \leq m $$$ $$$ ( u_i v_i ) \neq ( u_j v_j ) $$$ tenzing play animal friends infinite amount time output ` ` inf '' ( output without quote ) otherwise first line output total time $$$ t $$$ ( $$$ 0 \leq t \leq 10^ { 18 } $$$ ) number game $$$ k $$$ ( $$$ 0 \leq k \leq n^2 $$$ ) follow $$$ k $$$ line output output a binary string $$$ s $$$ length $$$ n $$$ integer $$$ t $$$ ( $$$ 0 \leq t \leq 10^ { 18 } $$$ ) — represent set $$$ s $$$ number minutes game play $$$ s_i=\texttt { 1 } $$$ $$$ i \in s $$$ otherwise $$$ s_i=\texttt { 0 } $$$ $$$ i \notin s $$$ constraints problem prove tenzing play friends a finite amount time play $$$ 10^ { 18 } $$$ minutes first test case : tenzing host another game friends $$$ \ { 1,2\ } $$$ $$$ 1 $$$ minute time exactly one friends $$$ 2 $$$ $$$ 3 $$$ tenzing become $$$ 2 $$$ minutes satisfy $$$ 3 $$$ -rd special restriction second test case special restrictions tenzing host a game friend $$$ \ { 1\ } $$$ infinite amount time","['constructive algorithms', 'greedy']",1900.0
1458/D,give a string $$$ s $$$ 0 's 1 's allow perform follow operation : example consider $$$ s $$$ = <unknown> follow operation : find lexicographically smallest string obtain $$$ s $$$ zero operations first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 500000 $$$ ) — number test case follow $$$ t $$$ line contain a single non - empty string — input string $$$ s $$$ respective test case string consist character 0 1 total length exceed $$$ 500000 $$$ test case a separate line print lexicographically smallest string obtain $$$ s $$$ zero operations first test case a single operation apply entire string second test case two operations need : <unknown> 0110110 . third test case string stay operation,"['data structures', 'greedy']",3100.0
1296/E1,easy version problem actual problems different easy version almost a subtask hard version note constraints output format different give a string $$$ s $$$ consist $$$ n $$$ lowercase latin letter color character one two color ( character exactly one color letter color different color i.e choose exactly one color index $$$ s $$$ ) color swap two neighbor character string color different color perform operation arbitrary ( possibly zero ) number time goal make string sort i.e character alphabetical order task say possible color give string color become sort sequence swap note restore color sequence swap first line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200 $$$ ) — length $$$ s $$$ second line input contain string $$$ s $$$ consist exactly $$$ n $$$ lowercase latin letter impossible color give string color become sort sequence swap print ` ` '' ( without quote ) first line otherwise print ` ` yes '' first line correct color second line ( color string consist $$$ n $$$ character $$$ i $$$ -th character ' 0 ' $$$ i $$$ -th character color first color ' 1 ' otherwise ),"['constructive algorithms', 'dp', 'greedy']",1800.0
1198/C,give a graph $$$ 3 \cdot n $$$ vertices $$$ m $$$ edge find a match $$$ n $$$ edge independent set $$$ n $$$ vertices a set edge call a match two edge share endpoint a set vertices call independent set two vertices connect edge first line contain a single integer $$$ t \ge 1 $$$ — number graph need process description $$$ t $$$ graph follow first line description a single graph contain two integers $$$ n $$$ $$$ m $$$ $$$ 3 \cdot n $$$ number vertices $$$ m $$$ number edge graph ( $$$ 1 \leq n \leq 10^ { 5 } $$$ $$$ 0 \leq m \leq 5 \cdot 10^ { 5 } $$$ ) next $$$ m $$$ line contain two integers $$$ v_i $$$ $$$ u_i $$$ ( $$$ 1 \leq v_i u_i \leq 3 \cdot n $$$ ) mean edge vertices $$$ v_i $$$ $$$ u_i $$$ guarantee self - loops multiple edge graph guarantee sum $$$ n $$$ graph a single test exceed $$$ 10^ { 5 } $$$ sum $$$ m $$$ graph a single test exceed $$$ 5 \cdot 10^ { 5 } $$$ print answer $$$ t $$$ graph output answer a single graph follow format find a match size $$$ n $$$ first line print ` ` match '' ( without quote ) second line print $$$ n $$$ integers — indices edge match edge number $$$ 1 $$$ $$$ m $$$ input order find independent set size $$$ n $$$ first line print ` ` <unknown> '' ( without quote ) second line print $$$ n $$$ integers — indices vertices independent set match independent set specify size print ` ` impossible '' ( without quote ) print edge vertices order several solutions print particular a match size $$$ n $$$ independent set size $$$ n $$$ print exactly one match exactly one independent set first two graph a match size 1 independent set size 1 . match independent set a correct answer third graph a match size 2 however independent set size 2 . moreover independent set size 5 : 2 3 4 5 6 . however answer correct ask find independent set ( match ) size exactly $$$ n $$$ fourth graph independent set size 2 a match size 2,"['constructive algorithms', 'greedy']",2000.0
1166/F,a magical land $$$ n $$$ cities conveniently number $$$ 1 2 \dots n $$$ pair cities connect magical color roads magic unstable time new roads may appear two cities vicky witch task perform deliveries pair cities however vicky a beginner complete a delivery move start city destination city a double rainbow a double rainbow a sequence cities $$$ c_1 c_2 \dots c_k $$$ satisfy follow properties : example $$$ k = 5 $$$ road $$$ c_1 $$$ $$$ c_2 $$$ must color road $$$ c_2 $$$ $$$ c_3 $$$ road $$$ c_3 $$$ $$$ c_4 $$$ must color road $$$ c_4 $$$ $$$ c_5 $$$ vicky a list events chronological order event either a delivery must perform appearance a new road help determine deliveries able complete first line contain four integers $$$ n $$$ $$$ m $$$ $$$ c $$$ $$$ q $$$ ( $$$ 2 \le n \le 100000 $$$ $$$ 1 \le m c q \le 100000 $$$ ) denote respectively number cities number roads initially present number different color roads take number events follow $$$ m $$$ line contain three integers $$$ x $$$ $$$ y $$$ $$$ z $$$ ( $$$ 1 \le x y \le n $$$ $$$ 1 \le z \le c $$$ ) describe initially exist a bidirectional road color $$$ z $$$ cities $$$ x $$$ $$$ y $$$ $$$ q $$$ line follow describe events event one follow two type : guarantee moment one road connect pair cities road connect a city guarantee input contain least one event second type event second type print a single line contain ` ` yes '' ( without quote ) delivery make a single line contain ` ` '' ( without quote ) otherwise follow picture correspond sample first delivery vicky use sequence 1 2 3 4 a double rainbow however complete second delivery reach city $$$ 3 $$$ add road cities $$$ 1 $$$ $$$ 3 $$$ complete a delivery city $$$ 4 $$$ city $$$ 1 $$$ use double rainbow 4 3 1,['data structures'],2400.0
883/B,n military men berland army give order military men give m pair ( xi yi ) mean military man xi give i - th order another military man yi time reform ! berland ministry defence plan introduce rank berland army military man assign a rank — integer number 1 k inclusive already assign a rank rest get a rank soon help ministry assign rank rest army : first line contain three integers n m k ( 1 ≤ n ≤ 2·105 0 ≤ m ≤ 2·105 1 ≤ k ≤ 2·105 ) — number military men berland army number order number rank second line contain n integers r1 r2 ... rn ri > 0 ( case 1 ≤ ri ≤ k ) mean i - th military man already assign rank ri ; ri = 0 mean i - th military man n't a rank yet follow m line contain order one per line order describe a line contain two integers xi yi ( 1 ≤ xi yi ≤ n xi ≠ yi ) line mean i - th order give military man xi military man yi pair ( x y ) military men could several order x y. print n integers i - th number rank i - th military man many solutions print solution print number -1,"['constructive algorithms', 'greedy']",2600.0
811/E,spare time vladik estimate beauty flag every flag could represent matrix n × m consist positive integers let 's define beauty flag number components matrix call component a set cells number pair cells set exist a path adjacent cells component example partition flag matrix components : time decide change something process want estimate entire flag segment segment flag describe a submatrix flag matrix opposite corner ( 1 l ) ( n r ) condition 1 ≤ l ≤ r ≤ m satisfy help vladik calculate beauty segment give flag first line contain three space - separated integers n m q ( 1 ≤ n ≤ 10 1 ≤ m q ≤ 105 ) — dimension flag matrix number segment respectively next n line contain m space - separated integers — description flag matrix elements flag matrix positive integers exceed 106 . next q line contain two space - separated integers l r ( 1 ≤ l ≤ r ≤ m ) — border segment beauty vladik want know segment print result correspond line partition components every segment first test case :,['data structures'],2600.0
798/E,mike discover a new way encode permutations a permutation p = [ p1 p2 ... pn ] encode follow way : denote a = [ a1 a2 ... ] a sequence length n represent code permutation i 1 n sequentially choose smallest unmarked j ( 1 ≤ j ≤ n ) pi < pj assign ai number j ( word perform ai = j ) mark j. j 'll assign ai number - 1 ( perform ai = - 1 ) mike forget original permutation remember code task simple : find permutation code code mike 's original permutation may assume always least one valid permutation first line contain single integer n ( 1 ≤ n ≤ 500 000 ) — length permutation second line contain n space - separated integers a1 a2 ... ( 1 ≤ ai ≤ n ai = - 1 ) — code mike 's permutation may assume positive value a different first line print n number p1 p2 ... pn ( 1 ≤ pi ≤ n ) — a permutation p code give one note number permutation distinct permutation first example : i = 1 smallest j 2 p2 = 6 > p1 = <unknown> = 2 j p2 = 6 greatest element <unknown> = 3 smallest j 1 p1 = 2 > p3 = <unknown> = 4 smallest j 5 ( 2 already mark ) p5 = 5 > p4 = <unknown> = 5 j 2 already <unknown> = 6 smallest j 4 p4 = 4 > <unknown> = 3,"['constructive algorithms', 'data structures']",3000.0
733/F,one kingdom n cities m two - way roads road connect a pair cities road know level drivers dissatisfaction — value wi road know value ci — many lamziks spend reduce level dissatisfaction road one thus reduce dissatisfaction i - th road k spend k·ci lamziks allow dissatisfaction become zero even negative accordance king 's order need choose n - 1 roads make main roads important condition must hold : possible travel city main roads road ministry a budget s lamziks reform ministry go spend budget repair roads ( reduce dissatisfaction ) choose n - 1 main roads help spend budget a way choose main roads total dissatisfaction main roads small possible dissatisfaction roads become negative necessary spend whole budget s. guarantee possible travel city use exist roads road kingdom a two - way road first line contain two integers n m ( 2 ≤ n ≤ 2·105 n - 1 ≤ m ≤ 2·105 ) — number cities number roads kingdom respectively second line contain m integers w1 w2 ... wm ( 1 ≤ wi ≤ 109 ) wi drivers dissatisfaction i - th road third line contain m integers c1 c2 ... cm ( 1 ≤ ci ≤ 109 ) ci cost ( lamziks ) reduce dissatisfaction i - th road one next m line contain description roads i - th line contain a pair integers ai bi ( 1 ≤ ai bi ≤ n ai ≠ bi ) mean i - th road connect cities ai bi roads two - way orient possible move i - th road ai bi vice versa allow a pair cities connect one road last line contain one integer s ( 0 ≤ s ≤ 109 ) — number lamziks spend reform first line print k — minimum possible total dissatisfaction main roads next n - 1 line print two integers x vx mean road x among main roads road x reform level dissatisfaction vx consider roads number 1 m order give input data edge print arbitrary order several answer print,['data structures'],2200.0
611/H,"a tree a connect undirected graph n - 1 edge n denote number vertices vertices number 1 n. limak a little polar bear bear family prepare a new year tree every year one year ago tree awesome usually thus decide prepare tree next year limak responsible remember tree would hard remember a whole tree limak decide describe notebook instead take a pen write n - 1 line two integers — indices two vertices connect edge , new year around corner limak ask reconstruct tree course a problem a little bear a year ago n't know digits alphabet replace digit a question mark — character know mean vertex index note know number digits least know lead zero limak n't want disappoint everyone please take note reconstruct a new year tree find tree match limak 's record print edge order 's also possible limak make a mistake suitable tree – case print ` ` -1 '' ( without quote ) first line contain a single integer n ( 2 ≤ n ≤ 200 000 ) — number vertices next n - 1 line contain two space - separated non - empty string consist question mark string character number digits n. tree match limak 's record print line ` ` -1 '' ( without quote ) otherwise describe tree match limak 's note print n - 1 line two space - separated integers – indices vertices connect edge print edge order",['constructive algorithms'],3200.0
605/B,student vladislav come program exam completely <unknown> usual get a question strange algorithm a graph — something definitely never useful real life ask a girl sit next lend cheat paper question find follow definition : minimum span tree t graph g a tree contain vertices original graph g sum weight edge minimum possible among tree vladislav draw a graph n vertices m edge contain loop multiple edge find one minimum span tree write edge weight whether include find tree unfortunately piece paper graph paint go teacher get angry demand see original graph help vladislav come a graph information minimum span tree remain correct first line input contain two integers n m ( ) — number vertices number edge graph next m line describe edge graph consist two integers aj bj ( 1 ≤ aj ≤ 109 bj = { 0 1 } ) first number weight edge second number equal 1 edge include minimum span tree find vladislav 0 guarantee exactly n - 1 number { bj } equal one exactly m - n + 1 equal zero vladislav make a mistake graph n't exist print - 1 . otherwise print m line j - th line print a pair vertices ( uj vj ) ( 1 ≤ uj vj ≤ n uj ≠ vj ) connect j - th edge edge number order input graph determine edge must connect contain loop multiple edge edge bj = 1 must define minimum span tree case multiple possible solutions print,"['constructive algorithms', 'data structures']",1700.0
232/A,john doe start think graph think decide want paint undirected graph contain exactly k cycle length 3 . a cycle length 3 unordered group three distinct graph vertices a b c pair connect a graph edge john paint long a success help find graph note number vertices n't exceed 100 else john problems paint a single line contain integer k ( 1 ≤ k ≤ 105 ) — number cycle length 3 require graph first line print integer n ( 3 ≤ n ≤ 100 ) — number vertices find graph next n line print n character ` ` 0 '' ` ` 1 '' : i - th character j - th line equal ` ` 0 '' vertices i j edge otherwise equal ` ` 1 '' note require graph undirected i - th character j - th line must equal j - th character i - th line graph n't contain self - loops i - th character i - th line must equal ` ` 0 '' i,"['constructive algorithms', 'greedy']",1600.0
41/E,"a recent research berland scientists find n cities ancient berland join two - way paths two cities join one path path join a city accord a well - known tradition road network build would impossible choose three cities one get one directly , cycle exactly long 3 . unfortunately road map preserve till nowadays scientists interest much develop a country ancient berland help - find maximal number roads could country also restore possible road map first line contain integer n ( 1 ≤ n ≤ 100 ) — number cities berland first line must print number m — maximal number roads berland print m line contain two number — number cities give road join cities number integers 1 n. several variants solve problem print","['constructive algorithms', 'greedy']",1900.0
1137/B,"new camp widely - known country spring program camp go start soon hence team friendly <unknown> teachers start compose camp 's schedule continuous discussion come a schedule $$$ s $$$ represent a binary string $$$ i $$$ -th symbol ' 1 ' students write contest $$$ i $$$ -th day ' 0 ' a day last moment gleb say camp productive run schedule $$$ t $$$ ( describe format schedule $$$ s $$$ ) since number days current may different number days schedule $$$ t $$$ gleb require camp 's schedule must alter number occurrences $$$ t $$$ a substring maximum possible time number contest days days n't change order may change could rearrange schedule best possible way ? first line contain string $$$ s $$$ ( $$$ 1 \leqslant |s| \leqslant 500\,000 $$$ ) denote current project camp 's schedule second line contain string $$$ t $$$ ( $$$ 1 \leqslant |t| \leqslant 500\,000 $$$ ) denote optimal schedule accord gleb string $$$ s $$$ $$$ t $$$ contain character ' 0 ' ' 1 ' line print schedule largest number substrings equal $$$ t $$$ print schedule consist character ' 0 ' ' 1 ' number zero equal number zero $$$ s $$$ number ones equal number ones $$$ s $$$ case multiple optimal schedule print first example two occurrences one start first position one start fourth position second example one occurrence start third position note answer unique example move first day ( a day ) last position number occurrences $$$ t $$$ would n't change third example 's impossible make even a single occurrence","['greedy', 'strings']",1600.0
1003/F,give a text consist $$$ n $$$ space - separated word exactly one space character pair adjacent word space first word space last word length text number letter space $$$ w_i $$$ $$$ i $$$ -th word text word consist lowercase latin letter let 's denote a segment word $$$ w [ i .. j ] $$$ a sequence word $$$ w_i w _ { i + 1 } \dots w_j $$$ two segment word $$$ w [ i_1 .. j_1 ] $$$ $$$ w [ i_2 .. j_2 ] $$$ consider equal $$$ j_1 - i_1 = j_2 - i_2 $$$ $$$ j_1 \ge i_1 $$$ $$$ j_2 \ge i_2 $$$ every $$$ t \in [ 0 j_1 - i_1 ] $$$ $$$ w _ { i_1 + t } = w _ { i_2 + t } $$$ example text ` ` '' segment $$$ w [ 1 .. 2 ] $$$ $$$ w [ 5 .. 6 ] $$$ equal correspond word ` ` '' abbreviation a replacement segment word first uppercase letter order perform abbreviation choose least two non - intersecting equal segment word replace choose segment string consist first letter word segment ( write uppercase ) example text ` ` a ab a a b ab a a b c '' replace segment word $$$ w [ 2 .. 4 ] $$$ $$$ w [ 6 .. 8 ] $$$ abbreviation ` ` aaa '' obtain text ` ` a aaa b aaa b c '' replace segment word $$$ w [ 2 .. 5 ] $$$ $$$ w [ 6 .. 9 ] $$$ abbreviation ` ` aaab '' obtain text ` ` a aaab aaab c '' minimum length text one abbreviation ? first line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 300 $$$ ) — number word text next line contain $$$ n $$$ space - separated word text $$$ w_1 w_2 \dots w_n $$$ word consist lowercase latin letter guarantee length text exceed $$$ 100000 $$$ print one integer — minimum length text one abbreviation first example obtain text ` ` tb tb '' second example obtain text ` ` a aaab aaab c '' third example obtain text ` ` ab aa ab bb '',"['dp', 'strings']",2200.0
580/E,one day kefa parrot walk street way home restaurant saw something <unknown> road come <unknown> understand a watch decide take pawnbroker earn money pawnbroker say watch contain a serial number represent a string digits 0 9 quality check number pass higher value watch check define three positive integers l r d. watch pass a check a substring serial number l r period d. sometimes pawnbroker get distract kefa change substring serial number digits c order increase profit watch seller a lot things begin kefa mess give a task : write a program determine value watch let us remind number x call a period string s ( 1 ≤ x ≤ |s| ) si = si + x i 1 |s| - x. first line input contain three positive integers n m k ( 1 ≤ n ≤ 105 1 ≤ m + k ≤ 105 ) — length serial number number change make kefa number quality check second line contain a serial number consist n digits m + k line follow contain either check change change give 1 l r c ( 1 ≤ l ≤ r ≤ n 0 ≤ c ≤ 9 ) mean kefa change digits l - th r - th c. check give 2 l r d ( 1 ≤ l ≤ r ≤ n 1 ≤ d ≤ r - l + 1 ) check a single line print ` ` yes '' watch pass otherwise print ` ` '' first sample test two check make first one substring ` ` 12 '' check whether period 1 answer ` ` '' second one substring ` ` 88 '' check whether period 1 period answer ` ` yes '' second statement test three check make first check process substring ` ` <unknown> '' n't period 2 . second check string look ` ` <unknown> '' answer ` ` yes '' finally third check process substring ` ` <unknown> '' period 1,"['data structures', 'strings']",2500.0
525/A,a hard day vitaly get hungry want eat favorite potato pie 's simple vitaly first room house n room locate a line number start one leave right go first room second room second room third room — go ( n - 1 ) -th room n - th room thus go room x room x - 1 . potato pie locate n - th room vitaly need go pair consecutive room a door order go room x room x - 1 need open door room correspond key total house several type doors ( represent uppercase latin letter ) several type key ( represent lowercase latin letter ) key type t open door type t t t letter write different case example key f open door f. first n - 1 room contain exactly one key type vitaly use get next room door open key vitaly wo n't get key <unknown> immediately run next room word key open one door vitaly realize may end room without key open door next room start run potato pie vitaly buy number key type guarantee get room n. give plan house vitaly want know minimum number key need buy surely get room n a delicious potato pie write a program help vitaly find number first line input contain a positive integer n ( 2 ≤ n ≤ 105 ) — number room house second line input contain string s length 2·n - 2 . let 's number elements string leave right start one odd position give string s contain lowercase latin letter — type key lie correspond room thus odd position i give string s contain a lowercase latin letter — type key lie room number ( i + 1 ) / 2 . even position give string contain uppercase latin letter — type doors room thus even position i give string s contain uppercase letter — type door lead room i / 2 room i / 2 + 1 . print integer — minimum number key vitaly need buy surely get room one room n,"['greedy', 'strings']",1100.0
350/D,emperor palpatine love owls much emperor blueprint new death star blueprint contain n distinct segment m distinct circle consider segment index 1 n way circle — index 1 m way palpatine define owl a set a pair distinct circle ( i j ) ( i < j ) one segment k : help palpatine count number distinct owls picture first line contain two integers — n m ( 1 ≤ n ≤ 3·105 2 ≤ m ≤ 1500 ) next n line contain four integers x1 y1 x2 y2 — coordinate two endpoints segment 's guarantee segment positive length next m line contain three integers xi yi ri — coordinate center radius i - th circle coordinate integers 104 absolute value radius a positive integer 104 . guarantee segment circle <unknown> print a single number — answer problem please use % lld specifier output 64 - bit integers с++ prefer use cout stream % i64d specifier 's owl first sample owl sit wait count,"['data structures', 'geometry']",2400.0
245/H,' ve get a string s = s1s2 ... s|s| length |s| consist lowercase english letter also q query query describe two integers li ri ( 1 ≤ li ≤ ri ≤ |s| ) answer query number substrings string s [ li ... ri ] palindromes string s [ l ... r ] = slsl + 1 ... sr ( 1 ≤ l ≤ r ≤ |s| ) a substring string s = s1s2 ... s|s| string t call a palindrome read leave right right leave formally t = t1t2 ... t|t| = <unknown> - 1 ... t1 first line contain string s ( 1 ≤ |s| ≤ 5000 ) second line contain a single integer q ( 1 ≤ q ≤ 106 ) — number query next q line contain query i - th line contain two space - separated integers li ri ( 1 ≤ li ≤ ri ≤ |s| ) — description i - th query guarantee give string consist lowercase english letter print q integers — answer query print answer order query give input separate print number whitespaces consider fourth query first test case string s [ 4 ... 6 ] = « aba » palindrome substrings : « a » « b » « a » « aba »,"['dp', 'strings']",1800.0
30/E,young years hero story king copa decide private data hide enough <unknown> unacceptable king 's invent tricky clever password ( later learn password a palindrome odd length ) cod data use copa afraid forget password decide write a piece paper aware insecure keep password way decide cipher follow way : cut x character start password end ( x 0 2x strictly less password length ) obtain 3 part password let 's call prefix middle suffix correspondingly prefix suffix equal length middle always odd length part make a string a + prefix + b + middle + c + suffix a b c ( possibly empty ) string invent copa « + » mean concatenation many years pass yesterday king copa find piece paper cipher password write password well string a b c completely forget copa ask find a password maximum possible length could invent cipher write copa input contain single string small latin letter length 1 105 character first line contain integer k — amount nonempty part password answer ( ) follow k line output two integers xi li — start length correspond part password output pair order increase xi separate number pair a single space start position xi integer 1 length input string li must positive output non - empty part middle part must odd length several solutions output note goal maximize sum li maximize k,"['constructive algorithms', 'data structures', 'greedy', 'strings']",2800.0
28/D,"a motorcade n truck drive city « z » city « <unknown> » approach a tunnel know tunnel horror among truck drivers <unknown> monster dravde hunt drivers tunnel drivers fear go first others - last let 's consider general case truck describe four number : since road narrow 's impossible escape dravde appear one side moreover motorcade ca n't rearrange order truck ca n't change 's possible take truck motorcade leave near tunnel indefinite period , head motorcade remove truck rest motorcade move tunnel total amount leave truck ' value maximal first input line contain integer number n ( 1 ≤ n ≤ 105 ) — amount truck motorcade follow n line contain four integers number i - th line : vi ci li ri ( 1 ≤ vi ≤ 104 1 ≤ ci ≤ 105 0 ≤ li ri ≤ 105 ) — describe i - th truck truck number 1 count front motorcade first line output number k — amount truck drive tunnel second line output k number — index truck ascend order n't forget please allow change order truck answer unique output","['data structures', 'dp']",2400.0
1833/B,"give array $$$ a $$$ contain weather forecast <unknown> last $$$ n $$$ days , $$$ a_i $$$ — estimate air temperature day $$$ i $$$ ( $$$ 1 \le i \le n $$$ ) also give array $$$ b $$$ — air temperature actually present days however value array $$$ b $$$ mix determine day temperature know weather never differ forecast $$$ k $$$ degrees word day $$$ i $$$ real air temperature $$$ c $$$ equality $$$ |a_i - c| \le k $$$ always true example let array $$$ a $$$ = [ $$$ 1 3 5 3 9 $$$ ] length $$$ n = 5 $$$ $$$ k = 2 $$$ give array $$$ b $$$ = [ $$$ 2 5 11 2 4 $$$ ] , value $$$ b_i $$$ correspond air temperature day $$$ i $$$ rearrange elements array $$$ b $$$ : [ $$$ 2 2 5 4 11 $$$ ] indeed : first line input data contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) $$$ k $$$ ( $$$ 0 \le k <unknown> $$$ ) — number days maximum difference expect actual air temperature day second line test case contain exactly $$$ n $$$ integers — elements array $$$ a $$$ ( $$$ -1000000000 \le a_i \le 1000000000 $$$ ) third line test case contain exactly $$$ n $$$ integers — elements array $$$ b $$$ ( $$$ -1000000000 \le b_i \le 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ elements array $$$ b $$$ always rearrange equality $$$ |a_i - b_i| \le k $$$ true $$$ i $$$ a separate line test case output exactly $$$ n $$$ number — value air temperature days correct order one answer — output",['greedy'],900.0
1814/C,"suppose $$$ n $$$ box $$$ i $$$ -th box contain infinitely many ball color $$$ i $$$ sometimes need get a ball specific color ; 're lazy buy two robots retrieve ball program order program robots construct two list $$$ [ a_1 a_2 \dots a_k ] $$$ $$$ [ b_1 b_2 \dots b _ { n - k } ] $$$ list $$$ a $$$ represent box assign first robot list $$$ b $$$ represent box assign second robot every integer $$$ 1 $$$ $$$ n $$$ must present exactly one list request a ball color $$$ x $$$ robots work follow robot look box assign robot order appear list first robot spend $$$ s_1 $$$ second analyze content a box ; second robot spend $$$ s_2 $$$ soon one robots find box ball color $$$ x $$$ ( analyze content ) search end search time number second begin search one robots finish analyze content $$$ x $$$ -th box a robot analyze content box assign stop search example suppose $$$ s_1 = 2 $$$ $$$ s_2 = 3 $$$ $$$ a = [ 4 1 5 3 7 ] $$$ $$$ b = [ 2 6 ] $$$ request a ball color $$$ 3 $$$ follow happen : know go request a ball color $$$ 1 $$$ $$$ r_1 $$$ time a ball color $$$ 2 $$$ $$$ r_2 $$$ time , want construct list $$$ a $$$ $$$ b $$$ robots a way total search time request minimum possible first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case test case consist two line : additional constraint input : sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print two line first line contain list $$$ a $$$ second line — list $$$ b $$$ list print follow : first print number elements elements multiple answer may print","['constructive algorithms', 'greedy']",1500.0
1791/G1,difference easy hard versions locations teleport consider point $$$ 0 1 \dots n $$$ number line a teleporter locate point $$$ 1 2 \dots n $$$ point $$$ i $$$ follow : $$$ c $$$ coin start point $$$ 0 $$$ 's number teleporters use ? input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case descriptions test case follow first line test case contain two integers $$$ n $$$ $$$ c $$$ ( $$$ 1 \leq n \leq 2\cdot100000 $$$ ; $$$ 1 \leq c \leq 1000000000 $$$ ) — length array number coin respectively follow line contain $$$ n $$$ space - separated integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — cost use teleporters guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case output maximum number teleporters use first test case move one unit right use teleporter index $$$ 1 $$$ teleport point $$$ 0 $$$ move two units right use teleporter index $$$ 2 $$$ leave $$$ 6 - 1 - 1 - 2 - 1 = 1 $$$ coin n't enough coin use another teleporter use two teleporters answer two second test case go four units right use teleporter go $$$ 0 $$$ go six units right use teleporter index $$$ 6 $$$ go $$$ 0 $$$ total cost $$$ 4 + 6 + 6 + 4 = 20 $$$ leave $$$ 12 $$$ coin enough reach teleporter use answer $$$ 2 $$$ third test case n't enough coin use teleporter answer zero,['greedy'],1100.0
1791/E,"give array $$$ a $$$ consist $$$ n $$$ elements find maximum possible sum array perform follow operation number time : input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case descriptions test case follow first line test case contain integer $$$ n $$$ ( $$$ 2 \leq n \leq 2\cdot100000 $$$ ) — length array follow line contain $$$ n $$$ space - separated integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ -1000000000 \leq a_i \leq 1000000000 $$$ ) guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case output maximum possible sum array perform describe operation number time first test case perform operation first two elements change array $$$ [ -1 -1 -1 ] $$$ $$$ [ 1 1 -1 ] $$$ prove array obtain maximum possible sum $$$ 1 + 1 + ( -1 ) = 1 $$$ second test case perform operation $$$ -5 $$$ $$$ 0 $$$ change array $$$ [ 1 5 -5 0 2 ] $$$ $$$ [ 1 5 - ( -5 ) <unknown> 2 ] = [ 1 5 5 0 2 ] $$$ maximum sum since elements non - negative , answer $$$ 1 + 5 + 5 + 0 + 2 = 13 $$$ third test case array already contain positive number perform operations unnecessary answer sum whole array $$$ 1 + 2 + 3 = 6 $$$","['dp', 'greedy']",1100.0
1790/D,matryoshka a wooden toy form a paint doll inside put a similar doll a smaller size a set nest dolls contain one nest dolls size consecutive positive integers thus a set nest dolls describe two number : $$$ s $$$ — size a smallest nest doll a set $$$ m $$$ — number dolls a set word set contain size $$$ s s + 1 \dots s + m - 1 $$$ integer $$$ s $$$ $$$ m $$$ ( $$$ s m > 0 $$$ ) one set nest dolls recently find someone mix set one record a sequence doll size — integers $$$ a_1 a_2 \dots a_n $$$ remember many set want find minimum number set could initially example a give sequence $$$ a= [ 2 2 3 4 3 1 ] $$$ initially could $$$ 2 $$$ set : accord a give sequence size nest dolls $$$ a_1 a_2 \dots a_n $$$ determine minimum number nest dolls make sequence set completely use nest dolls use element a give sequence must correspond exactly one doll set first line input data contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case description test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — total number matryoshkas set second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — size matryoshkas guarantee sum value $$$ n $$$ test case exceed $$$ 2\cdot100000 $$$ test case print one integer $$$ k $$$ — minimum possible number matryoshkas set first test case describe problem statement second test case matryoshkas could part set minimum size $$$ <unknown> $$$ third test case matryoshka represent a separate set,"['data structures', 'greedy']",1200.0
1779/D,"boris think chess a tedious game leave tournament early go a barber shop hair a bite messy current hair describe array $$$ a_1 a_2 \ldots a_n $$$ $$$ a_i $$$ height hair stand position $$$ i $$$ desire haircut describe array $$$ b_1 b_2 \ldots b_n $$$ a similar fashion barber $$$ m $$$ razor size use one operation choose a razor cut a segment boris 's hair formally operation : notice razor might equal size — barber choose size $$$ x $$$ many time number razor size $$$ x $$$ may perform many operations want long razor use $$$ a_i = b_i $$$ $$$ 1 \leq i \leq n $$$ end use razor determine whether barber give boris desire haircut ? test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 20\,000 $$$ ) description test case follow first line test case contain a positive integer $$$ n $$$ ( $$$ 3\leq n\leq 2\cdot 100000 $$$ ) — length array $$$ a $$$ $$$ b $$$ second line test case contain $$$ n $$$ positive integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — boris 's current hair third line test case contain $$$ n $$$ positive integers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1 \leq b_i \leq 1000000000 $$$ ) — boris 's desire hair fourth line test case contain a positive integer $$$ m $$$ ( $$$ 1 \leq m \leq 2\cdot 100000 $$$ ) — number razor fifth line test case contain $$$ m $$$ positive integers $$$ x_1 x_2 \ldots x_m $$$ ( $$$ 1 \leq x_i \leq 1000000000 $$$ ) — size razor guarantee sum $$$ n $$$ sum $$$ m $$$ test case exceed $$$ 2\cdot 100000 $$$ test case print ` ` yes '' barber cut boris 's hair desire otherwise print ` ` '' output answer case ( upper lower ) example string ` ` yes '' ` ` yes '' ` ` yes '' ` ` yes '' recognize positive responses first test case boris 's hair initially $$$ [ 3,3,3 ] $$$ let us describe a sequence $$$ 2 $$$ operations barber perform : third test case operation do since boris 's hair already desire fourth test case cut able increase third element $$$ [ 1,1,1 ] $$$ a way array become $$$ [ 1,1,2 ] $$$","['constructive algorithms', 'data structures', 'dp', 'greedy']",1700.0
1773/E,"emma love play block several cubic block size number distinct integers write assemble tower block stack vertically a configuration game a set tower assemble block emma perform two kinds operations a configuration tower : emma want stack block a single tower block come order sort number — block minimal number top block maximal number bottom emma want little split combine operations possible task find minimal number operations make output many split combine need first line input file contain integer $$$ n $$$ ( $$$ 1 \le n \le 10\,000 $$$ ) — number tower initial configuration next $$$ n $$$ line describe tower tower $$$ i $$$ describe a line start number $$$ k_i $$$ ( $$$ k_i \ge 1 $$$ ; $$$ <unknown> { k_i } \le 10\,000 $$$ ) — number block tower follow $$$ k_i $$$ number $$$ b _ { i j } $$$ ( $$$ 1 \le b _ { i j } \le 1000000000 $$$ ) — number write block $$$ i $$$ -th tower list top bottom block number list input different output a line two integers $$$ s $$$ $$$ c $$$ — number split combine operations emma make get a single tower block sort number total number operations minimize example need follow operations ( 1 split 2 combine ) <unknown> <unknown> 2nd onto <unknown> 1st onto 2nd",['greedy'],1400.0
1733/A,give array $$$ a $$$ $$$ n $$$ integers perform follow operation $$$ k $$$ time : perform operations select $$$ k $$$ consecutive elements sum $$$ k $$$ elements become score find maximum score get $$$ x \bmod y $$$ denote remainder divide $$$ x $$$ $$$ y $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 600 $$$ ) — number test case test case consist two line first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 100 $$$ ) — length array number statement second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) — array test case print maximum score get one per line first test case get a score $$$ 11 $$$ select $$$ a_1 a_2 $$$ without perform operations third test case get a score $$$ 15 $$$ first swap $$$ a_1 $$$ $$$ a_4 $$$ select $$$ a_3 a_4 a_5 $$$,['greedy'],800.0
1728/C,let 's define $$$ f ( x ) $$$ a positive integer $$$ x $$$ length <unknown> representation $$$ x $$$ without lead zero i like call a digital logarithm similar a digital root familiar give two array $$$ a $$$ $$$ b $$$ contain $$$ n $$$ positive integers one operation follow : two array consider similar rearrange elements equal ( e. g. $$$ a_i = b_i $$$ $$$ i $$$ $$$ 1 $$$ $$$ n $$$ ) 's smallest number operations require make $$$ a $$$ $$$ b $$$ similar ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number elements array second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i < 1000000000 $$$ ) third line contain $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ ( $$$ 1 \le b_j < 1000000000 $$$ ) sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print smallest number operations require make $$$ a $$$ $$$ b $$$ similar first testcase apply digital logarithm $$$ b_1 $$$ twice second testcase array already similar third testcase first apply digital logarithm $$$ a_1 $$$ $$$ b_2 $$$,"['data structures', 'greedy']",1400.0
1685/A,give $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ possible arrange a circle number strictly greater neighbor strictly smaller neighbor ? word check exist a rearrangement $$$ b_1 b_2 \ldots b_n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ $$$ i $$$ $$$ 1 $$$ $$$ n $$$ least one follow condition hold : make sense previous formulas $$$ i=1 $$$ $$$ i = n $$$ one shall define $$$ b_0 = b_n $$$ $$$ b _ { n+1 } = b_1 $$$ first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 3\cdot 10000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 100000 $$$ ) — number integers second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) sum $$$ n $$$ test case n't exceed $$$ 2\cdot 100000 $$$ test case possible arrange number circle satisfy condition statement output $$$ \texttt { } $$$ output letter case otherwise output $$$ \texttt { yes } $$$ second line output $$$ n $$$ integers $$$ b_1 b_2 \ldots b_n $$$ a rearrangement $$$ a_1 a_2 \ldots a_n $$$ satisfy condition statement multiple valid ways arrange number output show valid arrangements first third test case second test case arrangement $$$ [ 1 8 4 9 ] $$$ work arrangement $$$ 1 $$$ $$$ 4 $$$ smaller neighbor $$$ 8 9 $$$ larger fourth test case arrangement $$$ [ 1 11 1 111 1 1111 ] $$$ work arrangement three elements equal $$$ 1 $$$ smaller neighbor elements larger neighbor,"['constructive algorithms', 'greedy']",1100.0
1628/F,<unknown> ( <unknown> astronaut stuff association ) develop a new steer system spaceships current state would n't safe spaceship would end a bunch space junk make steer system safe need answer follow : give target position $$$ t = ( 0 0 ) $$$ a set $$$ n $$$ piece space junk $$$ l $$$ describe line segment $$$ l_i = ( ( a _ { ix } a _ { iy } ) ( b _ { ix } b _ { iy } ) ) $$$ a start position $$$ s = ( s_x s_y ) $$$ a direction float direction start position would lead target position ? spaceship hit a piece space junk happen depend absolute difference angle float direction line segment $$$ \theta $$$ : give set piece space junk target position always $$$ ( 0 0 ) $$$ $$$ q $$$ query a start position $$$ s_j = ( s _ { jx } s _ { jy } ) $$$ answer question query first line contain integer $$$ n $$$ ( $$$ 1 \le n \le 1500 $$$ ) follow $$$ n $$$ line $$$ i $$$ -th contain $$$ 4 $$$ integers $$$ a _ { ix } $$$ $$$ a _ { iy } $$$ $$$ b _ { ix } $$$ $$$ b _ { iy } $$$ ( $$$ |a _ { ix } | |a _ { iy } | |b _ { ix } | |b _ { iy } | \le 1000 $$$ ) follow a line contain integer $$$ q $$$ ( $$$ 1 \le q \le 1000 $$$ ) follow $$$ q $$$ line $$$ j $$$ -th contain $$$ 2 $$$ integers $$$ s _ { jx } $$$ $$$ s _ { jy } $$$ ( $$$ |s _ { jx } | |s _ { jy } | \le 1000 $$$ ) guarantee none segment $$$ l $$$ cross touch $$$ t $$$ segment $$$ l $$$ $$$ s_j $$$ segment $$$ l $$$ $$$ s \neq t $$$ query $$$ s_j $$$ print answer exist a direction float $$$ s_j $$$ direction possibly slide along piece space junk lead $$$ t $$$ print ` ` yes '' otherwise print ` ` '' ( case insensitive ) blue cross represent target location blue line segment represent space junk green dot represent start locations answer yes red dot represent start locations answer yellow line possible paths target location $$$ 3 $$$ rd $$$ 14 $$$ th query black line a possible path start location $$$ 6 $$$ th query barely miss target location,"['data structures', 'geometry']",3500.0
1624/D,"a string $$$ s $$$ consist lowercase latin alphabet letter color letter color $$$ 1 $$$ $$$ k $$$ necessary paint letter color must a letter paint color swap two symbols paint color many time want , $$$ k $$$ string create $$$ i $$$ -th contain character color color $$$ i $$$ write order sequence string $$$ s $$$ task color character string result $$$ k $$$ string palindromes length shortest $$$ k $$$ string large possible read note first test case example need a clarification recall a string a palindrome read way leave right right leave example string abacaba cccc z <unknown> palindromes string abab aaabaa — first line input data contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number input data set test descriptions input data set follow first line description input data set contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 200000 $$$ ) — length string number color letter paint second line description input data set contain a string $$$ s $$$ length $$$ n $$$ consist lowercase letter latin alphabet guarantee sum n test case exceed $$$ 200000 $$$ set input data output a single integer — maximum length shortest palindrome string obtain , two color write correspond character leave right get two string $$$ \mathtt { \mathbf { \color { red } { aba } } } $$$ $$$ \mathtt { \mathbf { \color { blue } { <unknown> } } } $$$ palindromes length shortest $$$ 3 $$$ show greatest length shortest palindrome achieve","['greedy', 'strings']",1400.0
1575/A,andi budi give assignment tidy bookshelf $$$ n $$$ book book represent book title — a string $$$ s_i $$$ number $$$ 1 $$$ $$$ n $$$ length $$$ m $$$ andi really want sort book lexicographically ascend budi want sort lexicographically descend settle fight decide combine idea sort asc - desc - endingly odd - indexed character compare <unknown> even - indexed character compare <unknown> a string $$$ a $$$ occur a string $$$ b $$$ asc - desc - ending order first position $$$ a $$$ $$$ b $$$ differ follow hold : first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n \cdot m \leq 1000000 $$$ ) $$$ i $$$ -th next $$$ n $$$ line contain a string $$$ s_i $$$ consist $$$ m $$$ uppercase latin letter — book title string pairwise distinct output $$$ n $$$ integers — indices string sort asc - desc - endingly follow illustrate first example,"['data structures', 'strings']",1100.0
1566/D1,easy version problem difference version $$$ n = 1 $$$ cinema seat represent table $$$ n $$$ row $$$ m $$$ columns row number integers $$$ 1 $$$ $$$ n $$$ seat row number consecutive integers leave right : $$$ k $$$ -th row $$$ m ( k - 1 ) + 1 $$$ $$$ m k $$$ row $$$ 1 \le k \le n $$$ $$$ nm $$$ people want go cinema watch a new film number integers $$$ 1 $$$ $$$ nm $$$ give exactly one seat person know cinema lower seat index better see everything happen screen $$$ i $$$ -th person level sight $$$ a_i $$$ let 's define $$$ s_i $$$ seat index give $$$ i $$$ -th person want give better place people lower sight level two people $$$ i $$$ $$$ j $$$ $$$ a_i < a_j $$$ satisfy $$$ s_i < s_j $$$ give seat people start come seat order $$$ 1 $$$ $$$ nm $$$ person enter hall sit seat get place person go seat 's row start move first seat row leave right move place free occupy people already seat inconvenience person equal number occupy seat go let 's consider example : $$$ m = 5 $$$ person seat $$$ 4 $$$ first row seat $$$ 1 $$$ $$$ 3 $$$ $$$ 5 $$$ first row already occupy seat $$$ 2 $$$ $$$ 4 $$$ free inconvenience person $$$ 2 $$$ go occupy seat $$$ 1 $$$ $$$ 3 $$$ find minimal total inconvenience ( sum inconvenience people ) possible give place people ( condition satisfy ) input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ n = 1 $$$ $$$ 1 \le m \le 300 $$$ ) — number row place row respectively second line test case contain $$$ n \cdot m $$$ integers $$$ a_1 a_2 \ldots a _ { n \cdot m } $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) $$$ a_i $$$ sight level $$$ i $$$ -th person 's guarantee sum $$$ n \cdot m $$$ test case exceed $$$ 100000 $$$ test case print a single integer — minimal total inconvenience achieve first test case a single way arrange people sight level distinct first person sit first seat second person sit second place third person sit third place inconvenience first person $$$ 0 $$$ inconvenience second person $$$ 1 $$$ inconvenience third person $$$ 2 $$$ total inconvenience $$$ 0 + 1 + 2 = 3 $$$ second test case people sit follow : $$$ s_1 = 2 $$$ $$$ s_2 = 1 $$$ $$$ s_3 = 5 $$$ $$$ s_4 = 4 $$$ $$$ s_5 = 3 $$$ total inconvenience $$$ 6 $$$,"['data structures', 'greedy']",1100.0
1551/C,stephen queen want write a story a unusual writer use letter ' a ' ' b ' ' c ' 'd ' ' e ' ! compose a story stephen write $$$ n $$$ word consist first $$$ 5 $$$ lowercase letter latin alphabet want select maximum number word make interest story let a story a sequence word necessarily different a story call interest exist a letter occur among word story time letter together example story consist three word ` ` bac '' ` ` aaada '' ` ` e '' interest ( letter ' a ' occur $$$ 5 $$$ time letter occur $$$ 4 $$$ time total ) story consist two word ` ` aba '' ` ` abcde '' ( letter occur letter total ) give a sequence $$$ n $$$ word consist letter ' a ' ' b ' ' c ' 'd ' ' e ' task choose maximum number make interest story 's way make a non - empty story output $$$ 0 $$$ first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 5000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number word sequence $$$ n $$$ line follow contain a word — a non - empty string consist lowercase letter latin alphabet word sequence may non - distinct ( i. e. duplicate allow ) letter ' a ' ' b ' ' c ' 'd ' ' e ' may occur word guarantee sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ ; sum lengths word test case n't exceed $$$ 400000 $$$ test case output maximum number word compose interest story print 0 's way make a non - empty interest story first test case example $$$ 3 $$$ word use make interest story interest story ` ` bac aaada e '' second test case example $$$ 1 $$$ -st $$$ 3 $$$ -rd word use make interest story interest story ` ` aba aba '' stephen ca n't use three word time third test case example stephen ca n't make a non - empty interest story answer $$$ 0 $$$ fourth test case example stephen use $$$ 3 $$$ -rd $$$ 4 $$$ -th word make interest story interest story ` ` c bc '',"['greedy', 'strings']",1500.0
1517/B,"2050 volunteer organize ` ` run ! chase rise sun '' activity start <unknown> 25 <unknown> runners complete 6 km trail around yunqi town $$$ n+1 $$$ checkpoints trail number $$$ 0 $$$ $$$ 1 $$$ ... $$$ n $$$ a runner must start checkpoint $$$ 0 $$$ finish checkpoint $$$ n $$$ checkpoint <unknown> — must run checkpoint $$$ 0 $$$ checkpoint $$$ 1 $$$ checkpoint $$$ 1 $$$ checkpoint $$$ 2 $$$ look picture note section clarification two adjacent checkpoints $$$ m $$$ different paths choose $$$ 1\le i\le n $$$ run checkpoint $$$ i-1 $$$ checkpoint $$$ i $$$ a runner choose exactly one $$$ m $$$ possible paths length $$$ j $$$ -th path checkpoint $$$ i-1 $$$ $$$ i $$$ $$$ b _ { i j } $$$ $$$ 1\le j\le m $$$ $$$ 1\le i\le n $$$ test trail $$$ m $$$ runners runner must run checkpoint $$$ 0 $$$ checkpoint $$$ n $$$ visit checkpoints every path every pair adjacent checkpoints need run exactly one runner a runner choose path length $$$ l_i $$$ checkpoint $$$ i-1 $$$ $$$ i $$$ ( $$$ 1\le i\le n $$$ ) tiredness $$$ $$$ \min _ { i=1 } ^n l_i $$$ $$$ i. e. minimum length paths take please arrange paths $$$ m $$$ runners minimize sum tiredness test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10\,000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 100 $$$ ) $$$ i $$$ -th next $$$ n $$$ line contain $$$ m $$$ integers $$$ b _ { i,1 } $$$ $$$ b _ { i,2 } $$$ ... $$$ b _ { i m } $$$ ( $$$ 1 \le b _ { i j } \le 1000000000 $$$ ) guarantee sum $$$ n\cdot m $$$ test case exceed $$$ 10000 $$$ test case output $$$ n $$$ line $$$ j $$$ -th number $$$ i $$$ -th line contain length path runner $$$ j $$$ choose run checkpoint $$$ i-1 $$$ checkpoint $$$ i $$$ exactly $$$ m $$$ integers $$$ i $$$ -th line integers form a <unknown> $$$ b _ { i 1 } $$$ ... $$$ b _ { i m } $$$ $$$ 1\le i\le n $$$ multiple answer print first case sum tiredness $$$ \min ( 2,5 ) + \min ( 3,3 ) + \min ( 4,1 ) = 6 $$$ second case sum tiredness $$$ \min ( 2,4,3 ) + \min ( <unknown> ) = 3 $$$","['constructive algorithms', 'greedy']",1200.0
1515/I,phoenix wonder like rob diamonds a jewelry store ! $$$ n $$$ type diamonds $$$ i $$$ -th type weight $$$ w_i $$$ value $$$ v_i $$$ store initially $$$ a_i $$$ diamonds $$$ i $$$ -th type day $$$ q $$$ days one follow happen : course since phoenix a law - abiding citizen a think experiment never actually rob diamonds store mean query type $$$ 3 $$$ affect diamonds store first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ 1 \le q \le 100000 $$$ ) — number type diamonds number days respectively next $$$ n $$$ line describe type diamond $$$ i $$$ -th line contain three integers $$$ a_i $$$ $$$ w_i $$$ $$$ v_i $$$ ( $$$ 0 \le a_i \le 100000 $$$ ; $$$ 1 \le w_i v_i \le 100000 $$$ ) — initial number diamonds $$$ i $$$ -th type weight diamonds $$$ i $$$ -th type value diamonds $$$ i $$$ -th type respectively next $$$ q $$$ line contain query query first integer line $$$ t $$$ ( $$$ 1 \le t \le 3 $$$ ) — type query $$$ t=1 $$$ two integers $$$ k_i $$$ $$$ d_i $$$ follow ( $$$ 1 \le k_i \le 100000 $$$ ; $$$ 1 \le d_i \le n $$$ ) mean a new <unknown> $$$ k_i $$$ diamonds arrive type $$$ d_i $$$ $$$ t=2 $$$ two integers $$$ k_i $$$ $$$ d_i $$$ follow ( $$$ 1 \le k_i \le 100000 $$$ ; $$$ 1 \le d_i \le n $$$ ) mean store sell $$$ k_i $$$ diamonds type $$$ d_i $$$ guarantee store diamonds sell $$$ t=3 $$$ integer $$$ c_i $$$ follow ( $$$ 1 \le c_i \le 10^ { 18 } $$$ ) — weight capacity phoenix 's bag guarantee least one query $$$ t=3 $$$ print answer query third type ( $$$ t=3 $$$ ) first query $$$ t=3 $$$ phoenix fit $$$ 2 $$$ diamonds type $$$ 1 $$$ total weight $$$ 6 $$$ value $$$ 8 $$$ second query $$$ t=3 $$$ phoenix first fit $$$ 3 $$$ diamonds type $$$ 3 $$$ one diamond type $$$ 1 $$$ a total weight $$$ 9 $$$ a value $$$ 16 $$$ note diamonds type $$$ 3 $$$ <unknown> type $$$ 1 $$$ type $$$ 3 $$$ equal value less weight final query $$$ t=3 $$$ phoenix fit every diamond a total value $$$ 13 $$$,['data structures'],3400.0
1508/D,base a peculiar incident basketball practice akari come follow competitive program problem ! give $$$ n $$$ point plane three collinear $$$ i $$$ -th point initially a label $$$ a_i $$$ a way label $$$ a_1 a_2 \dots a_n $$$ form a permutation $$$ 1 2 \dots n $$$ allow modify label follow operation : a sequence operations valid apply operations sequence order $$$ k $$$ -th point end label $$$ k $$$ $$$ k $$$ $$$ 1 $$$ $$$ n $$$ inclusive draw segment n't intersect internally formally two segment intersect must a common endpoint segment particular draw segment must distinct find valid sequence operations say none exist first line contain integer $$$ n $$$ ( $$$ 3 \le n \le 2000 $$$ ) — number point $$$ i $$$ -th follow $$$ n $$$ line contain three integers $$$ x_i $$$ $$$ y_i $$$ $$$ a_i $$$ ( $$$ -1000000 \le x_i y_i \le 1000000 $$$ $$$ 1 \le a_i \le n $$$ ) represent $$$ i $$$ -th point coordinate $$$ ( x_i y_i ) $$$ initially label $$$ a_i $$$ guarantee point distinct three point collinear label $$$ a_1 a_2 \dots a_n $$$ form a permutation $$$ 1 2 \dots n $$$ impossible perform a valid sequence operations print $$$ -1 $$$ otherwise print integer $$$ k $$$ ( $$$ 0 \le k \le \frac { n ( n - 1 ) } { 2 } $$$ ) — number operations perform follow $$$ k $$$ line contain two integers $$$ i $$$ $$$ j $$$ ( $$$ 1 \le i j \le n $$$ $$$ i\neq j $$$ ) — indices point choose operation note require minimize maximize value $$$ k $$$ multiple possible answer may print follow animation showcases first sample test case black number represent indices point box orange number represent label second test case label already correct position operations necessary,"['constructive algorithms', 'geometry']",3000.0
1500/D,kostya extremely busy : renovate house ! need hand wallpaper assemble furniture throw away trash kostya buy tile bathroom today stand front a large square stand tile a shop stand a square $$$ n \times n $$$ cells cell contain a small tile color $$$ c _ { i \ j } $$$ shop sell tile pack : specifically buy a subsquare initial square a subsquare square part stand i. e. set $$$ s ( i_0 j_0 k ) = \ { c _ { i \ j } \ |\ i_0 \le i < i_0 + k j_0 \le j < j_0 + k\ } $$$ $$$ 1 \le i_0 j_0 \le n - k + 1 $$$ kostya still know many tile need consider subsquares possible size n't want bathroom colorful help kostya count $$$ k \le n $$$ number subsquares size $$$ k \times k $$$ $$$ q $$$ different color tile two subsquares consider different location stand different first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \le n \le 1500 $$$ $$$ 1 \le q \le 10 $$$ ) — size stand limit number distinct color a subsquare next $$$ n $$$ line contain $$$ n $$$ integers $$$ c _ { i \ j } $$$ ( $$$ 1 \le c _ { i \ j } \le n^2 $$$ ) : $$$ j $$$ -th integer $$$ i $$$ -th line color tile cell $$$ ( i \ j ) $$$ $$$ k $$$ $$$ 1 $$$ $$$ n $$$ print a single integer — number subsquares size $$$ k \times k $$$ $$$ q $$$ different color first example color distinct kostya n't want subsquare $$$ 4 $$$ color buy subsquare size $$$ 1 \times 1 $$$ $$$ 2 \times 2 $$$ ca n't buy a subsquare size $$$ 3 \times 3 $$$ second example color appear multiple time $$$ q = 8 $$$ kostya buy subsquare size $$$ 1 \times 1 $$$ $$$ 2 \times 2 $$$ subsquare $$$ 3 \times 3 $$$ subsquare $$$ 7 $$$ different color ca n't buy whole stand $$$ 4 \times 4 $$$ $$$ 9 $$$ color,['data structures'],2900.0
1475/D,polycarp often use smartphone already instal $$$ n $$$ applications application number $$$ i $$$ take $$$ a_i $$$ units memory polycarp want free least $$$ m $$$ units memory ( remove applications ) course applications important polycarp others come follow score system — assign integer $$$ b_i $$$ application : accord rat system phone $$$ b_1 + b_2 + \ldots + b_n $$$ convenience point polycarp believe remove applications number $$$ i_1 i_2 \ldots i_k $$$ free $$$ a _ { i_1 } + a _ { i_2 } + \ldots + a _ { i_k } $$$ units memory lose $$$ b _ { i_1 } + b _ { i_2 } + \ldots + b _ { i_k } $$$ convenience point example $$$ n=5 $$$ $$$ <unknown> $$$ $$$ a= [ 5 3 2 1 4 ] $$$ $$$ b= [ 2 1 1 2 1 ] $$$ polycarp <unknown> follow application set ( options list ) : help polycarp choose a set applications remove free least $$$ m $$$ units memory lose minimum number convenience point indicate a set exist first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 1 \le m \le 1000000000 $$$ ) — number applications polycarp 's phone number memory units free second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — number memory units use applications third line test case contain $$$ n $$$ integers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1 \le b_i \le 2 $$$ ) — convenience point application guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output a separate line : first test case optimal remove applications number $$$ 2 $$$ $$$ 5 $$$ free $$$ 7 $$$ units memory $$$ <unknown> $$$ second test case remove application polycarp able clear $$$ 2 $$$ memory units $$$ 3 $$$ need third test case optimal remove applications number $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ free $$$ 10 $$$ units memory $$$ <unknown> $$$ fourth test case optimal remove applications number $$$ 1 $$$ $$$ 3 $$$ $$$ 4 $$$ free $$$ 12 $$$ units memory $$$ <unknown> $$$ fifth test case optimal remove applications number $$$ 1 $$$ $$$ 2 $$$ free $$$ 5 $$$ units memory $$$ <unknown> $$$,['dp'],1800.0
1466/D,"' ve probably hear twelve labor <unknown> idea <unknown> ? commonly assume take a <unknown> years complete twelve <unknown> average a year accomplish every one time flow faster days minutes rather months solve task manage ? problem give a tree $$$ n $$$ weight vertices a tree a connect graph $$$ n - 1 $$$ edge let us define $$$ k $$$ -coloring assignment $$$ k $$$ color edge edge exactly one color assign note n't use $$$ k $$$ color a subgraph color $$$ x $$$ consist edge original tree assign color $$$ x $$$ vertices adjacent least one edge vertices degree $$$ 0 $$$ a subgraph value a connect component sum weight vertices let us define value a subgraph a maximum value connect components assume value empty subgraph equal $$$ 0 $$$ also a value a $$$ k $$$ -coloring equal sum value subgraphs $$$ k $$$ color give a tree $$$ k $$$ $$$ 1 $$$ $$$ n - 1 $$$ calculate maximal value a $$$ k $$$ -coloring first line input a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) denote number test case $$$ t $$$ test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 100000 $$$ ) second line consist $$$ n $$$ integers $$$ w_1 w_2 \dots w_n $$$ ( $$$ 0 \leq w_i \leq 1000000000 $$$ ) $$$ w_i $$$ equal weight $$$ i $$$ -th vertex follow $$$ n - 1 $$$ line two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \leq u v \leq n $$$ ) describe edge vertices $$$ u $$$ $$$ v $$$ guarantee edge form a tree sum $$$ n $$$ test case exceed $$$ 200000 $$$ every test case program print one line contain $$$ n - 1 $$$ integers separate a single space $$$ i $$$ -th number a line maximal value a $$$ i $$$ -coloring tree optimal $$$ k $$$ <unknown> first test case follow : $$$ 1 $$$ -coloring edge give color subgraph color $$$ 1 $$$ contain edge vertices original graph hence value equal $$$ 3 + 5 + 4 + 6 = 18 $$$ optimal $$$ 2 $$$ -coloring edge $$$ ( 2 1 ) $$$ $$$ ( 3,1 ) $$$ assign color $$$ 1 $$$ edge $$$ ( 4 3 ) $$$ color $$$ 2 $$$ hence subgraph color $$$ 1 $$$ consist a single connect component ( vertices $$$ 1 2 3 $$$ ) value equal $$$ 3 + 5 + 4 = 12 $$$ subgraph color $$$ 2 $$$ contain two vertices one edge value equal $$$ 4 + 6 = 10 $$$ optimal $$$ 3 $$$ -coloring edge assign distinct color hence subgraphs color consist a single edge value follow : $$$ 3 + 4 = 7 $$$ $$$ 4 + 6 = 10 $$$ $$$ 3 + 5 = 8 $$$","['data structures', 'greedy']",1500.0
1394/A,ever use chat application qq ? well a chat group qq administrators muzzle a user days boboniu 's chat group 's a person call du yi like make fun boboniu every day du chat group $$$ n $$$ days $$$ i $$$ -th day : boboniu 's mood a constant $$$ m $$$ $$$ i $$$ -th day : total fun factor sum fun factor days du speak du ask find maximum total fun factor among possible permutations $$$ a $$$ first line contain three integers $$$ n $$$ $$$ d $$$ $$$ m $$$ ( $$$ 1\le d\le n\le <unknown> m\le 1000000000 $$$ ) next line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0\le a_i\le 1000000000 $$$ ) print one integer : maximum total fun factor among permutations $$$ a $$$ first example set $$$ a'= [ 15 5 8 10 23 ] $$$ du 's chat record : thus total fun factor $$$ 48 $$$,"['dp', 'greedy']",1800.0
1374/E1,easy hard versions actually different problems read statements problems completely carefully summer vacation start alice bob want play joy ... mom n't think say read amount book entertainments alice bob read book together end exercise faster $$$ n $$$ book family library $$$ i $$$ -th book describe three integers : $$$ t_i $$$ — amount time alice bob need spend read $$$ a_i $$$ ( equal $$$ 1 $$$ alice like $$$ i $$$ -th book $$$ 0 $$$ ) $$$ b_i $$$ ( equal $$$ 1 $$$ bob like $$$ i $$$ -th book $$$ 0 $$$ ) need choose book give $$$ n $$$ book a way : set choose alice bob ( 's share ) read book together total read time sum $$$ t_i $$$ book choose set task help find suitable set book determine impossible find a set first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 200000 $$$ ) next $$$ n $$$ line contain descriptions book one description per line : $$$ i $$$ -th line contain three integers $$$ t_i $$$ $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le t_i \le 10000 $$$ $$$ 0 \le a_i b_i \le 1 $$$ ) : solution print one integer -1 . otherwise print one integer $$$ t $$$ — minimum total read time suitable set book,"['data structures', 'greedy']",1600.0
1358/B,"maria active old lady house tire sit home decide organize a ceremony coronavirus $$$ n $$$ friends also grannies ( maria include number ) $$$ i $$$ -th granny ready attend ceremony provide time appearance courtyard least $$$ a_i $$$ grannies note grannies come courtyard time formally granny $$$ i $$$ agree come number grannies come earlier time greater equal $$$ a_i $$$ grannies gather courtyard like task find maximum number grannies ( include ) maria collect courtyard ceremony , people one place quarantine effective ceremony ! consider example : $$$ n=6 $$$ $$$ a= [ <unknown> ] $$$ : first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case input test case follow first line a test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number grannies ( maria include number ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 2\cdot100000 $$$ ) guarantee sum value $$$ n $$$ test case input exceed $$$ 100000 $$$ test case print a single integer $$$ k $$$ ( $$$ 1 \le k \le n + 1 $$$ ) — maximum possible number grannies courtyard first test case example first step maria call grannies see five grannies come therefore maria five grannies yard second test case example one yard maria remain alone third test case example describe detail fourth test case example first step maria call grannies number $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ second step maria call $$$ 4 $$$ $$$ 5 $$$ ( one ) a granny appear yard see four grannies ( forbid ) mean maria ca n't call $$$ 4 $$$ -th granny $$$ 5 $$$ -th granny separately ( one ) call : $$$ 4 $$$ $$$ 5 $$$ appear see $$$ 4 + <unknown> $$$ grannies despite fact enough $$$ 4 $$$ -th granny $$$ 5 $$$ -th granny satisfy , maria call $$$ 4 $$$ -th granny $$$ 5 $$$ -th granny time , maria three grannies first step yard total",['greedy'],1000.0
1282/B2,hard version problem difference constraint $$$ k $$$ — number gift offer version : $$$ 2 \le k \le n $$$ vasya come store buy goods friends new year turn lucky — today offer ` ` $$$ k $$$ goods price one '' hold store use offer vasya buy exactly $$$ k $$$ goods pay expensive vasya decide take opportunity buy many goods possible friends money formally good price determine $$$ a_i $$$ — number coin cost initially vasya $$$ p $$$ coin want buy maximum number goods vasya perform one follow operations many time necessary : please note good buy example store $$$ n=5 $$$ goods worth $$$ a_1=2 a_2=4 a_3=3 a_4=5 a_5=7 $$$ respectively $$$ k=2 $$$ vasya $$$ 6 $$$ coin buy $$$ 3 $$$ goods a good index $$$ 1 $$$ buy vasya without use offer pay $$$ 2 $$$ coin goods indices $$$ 2 $$$ $$$ 3 $$$ vasya buy use offer pay $$$ 4 $$$ coin prove vasya buy goods six coin help vasya find maximum number goods buy first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case test next line contain a description $$$ t $$$ test case first line test case contain three integers $$$ n p k $$$ ( $$$ 2 \le n \le 200000 $$$ $$$ 1 \le p \le 2\cdot1000000000 $$$ $$$ 2 \le k \le n $$$ ) — number goods store number coin vasya number goods buy price expensive second line test case contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le 10000 $$$ ) — price goods guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case a separate line print one integer $$$ m $$$ — maximum number goods vasya buy,"['dp', 'greedy']",1600.0
1251/D,head a large <unknown> $$$ n $$$ people work $$$ n $$$ odd ( i. e. $$$ n $$$ divisible $$$ 2 $$$ ) distribute salaries employees initially $$$ s $$$ dollars $$$ i $$$ -th employee get a salary $$$ l_i $$$ $$$ r_i $$$ dollars distribute salaries a way median salary maximum possible find median a sequence odd length sort take element middle position sort example : guarantee enough money pay minimum salary i.e $$$ l_1 + l_2 + \dots + l_n \le s $$$ note n't spend $$$ s $$$ dollars salaries answer $$$ t $$$ test case first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 200000 $$$ ) — number test case first line query contain two integers $$$ n $$$ $$$ s $$$ ( $$$ 1 \le n < 200000 $$$ $$$ 1 \le s \le 2 \cdot 10^ { 14 } $$$ ) — number employees amount money value $$$ n $$$ divisible $$$ 2 $$$ follow $$$ n $$$ line query contain information employees $$$ i $$$ -th line contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le 1000000000 $$$ ) guarantee sum $$$ n $$$ query exceed $$$ 200000 $$$ also guarantee enough money pay minimum salary employee i. e. $$$ \sum\limits _ { i=1 } ^ { n } l_i \le s $$$ test case print one integer — maximum median salary obtain first test case distribute salaries follow : $$$ sal_1 = 12 sal_2 = 2 sal_3 = 11 $$$ ( $$$ <unknown> $$$ salary $$$ i $$$ -th employee ) median salary $$$ 11 $$$ second test case pay $$$ 1337 $$$ dollars employee third test case distribute salaries follow : $$$ sal_1 = 4 sal_2 = 3 sal_3 = 6 <unknown> = 6 <unknown> = 7 $$$ median salary $$$ 6 $$$,['greedy'],1900.0
1249/D2,difference easy hard versions constraints give $$$ n $$$ segment coordinate axis $$$ ox $$$ segment intersect lie inside even coincide $$$ i $$$ -th segment $$$ [ l_i ; r_i ] $$$ ( $$$ l_i \le r_i $$$ ) cover integer point $$$ j $$$ $$$ l_i \le j \le r_i $$$ integer point call bad cover strictly $$$ k $$$ segment task remove minimum number segment bad point first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 200000 $$$ ) — number segment maximum number segment integer point cover next $$$ n $$$ line contain segment $$$ i $$$ -th line contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le 200000 $$$ ) — endpoints $$$ i $$$ -th segment first line print one integer $$$ m $$$ ( $$$ 0 \le m \le n $$$ ) — minimum number segment need remove bad point second line print $$$ m $$$ distinct integers $$$ p_1 p_2 \dots p_m $$$ ( $$$ 1 \le p_i \le n $$$ ) — indices segment remove order multiple answer print,"['data structures', 'greedy']",1800.0
1238/G,adilbek water garden go help a complex water system : deliver water mechanisms remain job water system consume one liter water per minute ( water work ) hold $$$ c $$$ liters adilbek already pour $$$ c_0 $$$ liters water system go start water garden right water $$$ m $$$ minutes water system contain least one liter water begin $$$ i $$$ -th minute ( every $$$ i $$$ $$$ 0 $$$ $$$ m - 1 $$$ ) adilbek wonder water system run water call $$$ n $$$ friends ask go bring water $$$ i $$$ -th friend answer bring $$$ a_i $$$ liters water ; arrive begin $$$ t_i $$$ -th minute pour water system ( system hold amount water excess water pour ) ; ask adilbek pay $$$ b_i $$$ dollars liter water bring may assume a friend arrive begin $$$ t_i $$$ -th minute system run water begin minute friend pour water fast enough system stop work course adilbek want pay friends water garden tell friends much water bring formally adilbek want choose $$$ n $$$ integers $$$ k_1 $$$ $$$ k_2 $$$ ... $$$ k_n $$$ a way : help adilbek determine minimum amount pay friends determine adilbek able water garden $$$ m $$$ minutes answer $$$ q $$$ independent query first line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 500000 $$$ ) – number query first line query contain four integers $$$ n m c $$$ $$$ c_0 $$$ ( $$$ 0 \le n \le 5 \cdot 100000 2 \le m \le 1000000000 1 \le c_0 \le c \le 1000000000 $$$ ) — number friends number minutes water capacity water system number liters pour adilbek next $$$ n $$$ line contain three integers $$$ t_i a_i b_i $$$ ( $$$ 0 < t_i < m 1 \le a_i \le c 1 \le b_i \le 1000000000 $$$ ) — $$$ i $$$ -th friend 's arrival time maximum amount water $$$ i $$$ -th friend bring cost $$$ 1 $$$ liter $$$ i $$$ -th friend guarantee sum $$$ n $$$ query exceed $$$ 500000 $$$ query print one integer — minimum amount adilbek pay friends $$$ -1 $$$ adilbek able water garden $$$ m $$$ minutes,"['data structures', 'greedy']",2700.0
1238/B,"ivan play old action game call <unknown> 's stick one final level game need help kill monsters main part level a large corridor ( large narrow represent infinite coordinate line ) corridor divide two part ; let 's assume point $$$ x = 0 $$$ part meet right part corridor fill $$$ n $$$ monsters — monster initial coordinate $$$ x_i $$$ give ( since monsters right part every $$$ x_i $$$ positive ) leave part corridor fill crusher trap monster enter leave part corridor origin ( current coordinate become less equal $$$ 0 $$$ ) get instantly kill a trap main weapon ivan use kill monsters phoenix rod launch a missile explode upon impact <unknown> every monster catch explosion throw monsters away epicenter formally suppose ivan launch a missile explode point $$$ c $$$ every monster either kill explosion push away let monster 's current coordinate $$$ y $$$ : ivan go kill monsters follow : choose integer point $$$ d $$$ launch a missile point wait explode monsters push leave part corridor kill crusher trap , least one monster still alive choose another integer point ( probably one already use ) launch a missile , minimum number missiles ivan launch order kill monsters ? may assume every time ivan fire phoenix rod choose impact point optimally answer $$$ q $$$ independent query first line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) — number query first line query contain two integers $$$ n $$$ $$$ r $$$ ( $$$ 1 \le n r \le 100000 $$$ ) — number enemies distance enemies throw away epicenter explosion second line query contain $$$ n $$$ integers $$$ x_i $$$ ( $$$ 1 \le x_i \le 100000 $$$ ) — initial position monsters guarantee sum $$$ n $$$ query exceed $$$ 100000 $$$ query print one integer — minimum number shots phoenix rod require kill monsters first test case ivan act follow : second test case ivan act follow :",['greedy'],1300.0
1197/C,give a sort array $$$ a_1 a_2 \dots a_n $$$ ( index $$$ i > 1 $$$ condition $$$ a_i \ge a _ { i-1 } $$$ hold ) integer $$$ k $$$ ask divide array $$$ k $$$ non - empty consecutive subarrays every element array include exactly one subarray let $$$ max ( i ) $$$ equal maximum $$$ i $$$ -th subarray $$$ min ( i ) $$$ equal minimum $$$ i $$$ -th subarray cost division equal $$$ \sum\limits _ { i=1 } ^ { k } ( max ( i ) - min ( i ) ) $$$ example $$$ a = [ 2 4 5 5 8 11 19 ] $$$ divide $$$ 3 $$$ subarrays follow way : $$$ [ 2 4 ] [ 5 5 ] [ 8 11 19 ] $$$ cost division equal $$$ ( 4 - 2 ) + ( 5 - 5 ) + ( 19 - 8 ) = 13 $$$ calculate minimum cost obtain divide array $$$ a $$$ $$$ k $$$ non - empty consecutive subarrays first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 300000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ $$$ a_i \ge a _ { i-1 } $$$ ) print minimum cost obtain divide array $$$ a $$$ $$$ k $$$ nonempty consecutive subarrays first test divide array $$$ a $$$ follow way : $$$ [ 4 8 15 16 ] [ 23 ] [ 42 ] $$$,['greedy'],1400.0
1165/B,"polycarp want train another program competition first day train solve exactly $$$ 1 $$$ problem second day — exactly $$$ 2 $$$ problems third day — exactly $$$ 3 $$$ problems , $$$ k $$$ -th day solve $$$ k $$$ problems polycarp a list $$$ n $$$ contest $$$ i $$$ -th contest consist $$$ a_i $$$ problems day polycarp choose exactly one contest n't solve yet solve solve exactly $$$ k $$$ problems contest problems discard contest consist least $$$ k $$$ problems polycarp n't solve yet $$$ k $$$ -th day polycarp stop train many days polycarp train choose contest optimally ? first line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number contest second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 200000 $$$ ) — number problems $$$ i $$$ -th contest print one integer — maximum number days polycarp train choose contest optimally","['data structures', 'greedy']",1000.0
1148/D,"give $$$ n $$$ pair integers $$$ ( a_1 b_1 ) ( a_2 b_2 ) \ldots ( a_n b_n ) $$$ integers pair distinct range $$$ 1 $$$ $$$ 2 \cdot n $$$ inclusive let 's call a sequence integers $$$ x_1 x_2 \ldots x _ { 2k } $$$ good either need choose a subset distinct indices $$$ i_1 i_2 \ldots i_t $$$ order a way write number pair a single sequence ( sequence would $$$ a _ { i_1 } b _ { i_1 } a _ { i_2 } b _ { i_2 } \ldots a _ { i_t } b _ { i_t } $$$ ) sequence good largest subset indices choose ? also need construct correspond index sequence $$$ i_1 i_2 \ldots i_t $$$ first line contain single integer $$$ n $$$ ( $$$ 2 \leq n \leq 300000 $$$ ) — number pair next $$$ n $$$ line contain two number — $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i b_i \le 2 \cdot n $$$ ) — elements pair guarantee integers pair distinct , every integer $$$ 1 $$$ $$$ 2 \cdot n $$$ mention exactly first line print a single integer $$$ t $$$ — number pair answer print $$$ t $$$ distinct integers $$$ i_1 i_2 \ldots i_t $$$ — index pair correspond order final sequence first example $$$ 1 < 7 > 3 < 5 > 2 < 10 $$$ final sequence second example $$$ 6 > 1 < 3 > 2 < 5 > 4 $$$",['greedy'],1800.0
1102/B,give array $$$ a $$$ consist $$$ n $$$ integer number color array $$$ k $$$ color a way : obviously color might impossible case print ` ` '' otherwise print ` ` yes '' color ( i.e number $$$ c_1 c_2 \dots c_n $$$ $$$ 1 \le c_i \le k $$$ $$$ c_i $$$ color $$$ i $$$ -th element give array ) satisfy condition multiple answer print first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 5000 $$$ ) — length array $$$ a $$$ number color respectively second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 5000 $$$ ) — elements array $$$ a $$$ answer print ` ` '' otherwise print ` ` yes '' color ( i.e number $$$ c_1 c_2 \dots c_n $$$ $$$ 1 \le c_i \le k $$$ $$$ c_i $$$ color $$$ i $$$ -th element give array ) satisfy condition describe problem statement multiple answer print first example answer $$$ 2~ 1~ 2~ 1 $$$ also acceptable second example answer $$$ 1~ 1~ 1~ 2~ 2 $$$ also acceptable exist acceptable answer examples,['greedy'],1400.0
1093/B,give a string $$$ s $$$ consist lowercase latin letter rearrange letter string wish task obtain a good string rearrange letter give string report impossible let 's call a string good a palindrome palindrome a string read leave right right leave example string ` ` abacaba '' ` ` aa '' ` ` z '' palindromes string ` ` bba '' ` ` <unknown> '' answer $$$ t $$$ independent query first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number query next $$$ t $$$ line contain one string $$$ i $$$ -th line contain a string $$$ s_i $$$ consist lowercase latin letter guarantee length $$$ s_i $$$ $$$ 1 $$$ $$$ 1000 $$$ ( inclusive ) print $$$ t $$$ line $$$ i $$$ -th line print answer $$$ i $$$ -th query : -1 impossible obtain a good string rearrange letter $$$ s_i $$$ good string obtain give one ( rearrange letter ) otherwise first query rearrange letter obtain a good string examples ( ) correct answer second query : ` ` <unknown> '' ` ` <unknown> '' ` ` <unknown> '' third query nothing obtain a good string,"['constructive algorithms', 'greedy', 'strings']",900.0
1082/C,a multi - subject competition come ! competition $$$ m $$$ different subject participants choose 's alex ( coach ) form a competition delegation among students $$$ n $$$ candidates $$$ i $$$ -th person know subject $$$ s_i $$$ candidate specialize $$$ r_i $$$ — a skill level specialization ( level negative ! ) rule competition require delegation choose subset subject participate restriction number students team participate choose subject alex decide candidate would participate subject specialize alex wonder choose maximize total sum skill level delegate skip competition year every valid non - empty delegation negative sum ( course alex n't spare money delegate choose must participate competition ) first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n \le 100000 $$$ $$$ 1 \le m \le 100000 $$$ ) — number candidates number subject next $$$ n $$$ line contain two integers per line : $$$ s_i $$$ $$$ r_i $$$ ( $$$ 1 \le s_i \le m $$$ $$$ -10000 \le r_i \le 10000 $$$ ) — subject specialization skill level $$$ i $$$ -th candidate print single integer — maximum total sum skills delegate form a valid delegation ( accord rule ) $$$ 0 $$$ every valid non - empty delegation negative sum first example 's optimal choose candidates $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ two specialize $$$ 2 $$$ -nd subject two $$$ 3 $$$ -rd total sum $$$ 6 + 6 + 5 + 5 = 22 $$$ second example 's optimal choose candidates $$$ 1 $$$ $$$ 2 $$$ $$$ 5 $$$ one person subject total sum $$$ 6 + 6 + 11 = 23 $$$ third example 's impossible obtain a non - negative sum,['greedy'],1600.0
998/B,a lot things could cut — tree paper ` ` rope '' problem go cut a sequence integers a sequence integers contain equal number even odd number give a limit budget need make maximum possible number cut result segment number odd even integers cut separate a sequence continuous ( contiguous ) segment may think cut a break two adjacent elements a sequence cut element belong exactly one segment say $$$ [ 4 1 2 3 4 5 4 4 5 5 ] $$$ $$$ \to $$$ two cut $$$ \to $$$ $$$ [ 4 1 | 2 3 4 5 | 4 4 5 5 ] $$$ segment number even elements equal number odd elements cost cut $$$ x $$$ $$$ y $$$ number $$$ |x - y| $$$ bitcoins find maximum possible number cut make spend $$$ b $$$ bitcoins first line input contain integer $$$ n $$$ ( $$$ 2 \le n \le 100 $$$ ) integer $$$ b $$$ ( $$$ 1 \le b \le 100 $$$ ) — number elements sequence number bitcoins second line contain $$$ n $$$ integers : $$$ a_1 $$$ $$$ a_2 $$$ ... $$$ a_n $$$ ( $$$ 1 \le a_i \le 100 $$$ ) — elements sequence contain equal number even odd <unknown> maximum possible number cut make spend $$$ b $$$ bitcoins first sample optimal answer split sequence $$$ 2 $$$ $$$ 5 $$$ price cut equal $$$ 3 $$$ bitcoins second sample possible make even one cut even unlimited number bitcoins third sample sequence cut $$$ 2 $$$ $$$ 3 $$$ $$$ 4 $$$ $$$ 5 $$$ total price cut $$$ 1 + 1 = 2 $$$ bitcoins,"['dp', 'greedy']",1200.0
990/B,"a petri dish bacteria prepare dive harsh <unknown> - world , unfortunately n't microscope nearby ca n't watch know $$$ n $$$ bacteria petri dish size $$$ i $$$ -th bacteria $$$ a_i $$$ also know intergalactic positive integer constant $$$ k $$$ $$$ i $$$ -th bacteria swallow $$$ j $$$ -th bacteria $$$ a_i > a_j $$$ $$$ a_i \le a_j + k $$$ $$$ j $$$ -th bacteria disappear $$$ i $$$ -th bacteria n't change size bacteria perform multiple swallow swallow operation bacteria $$$ i $$$ swallow bacteria $$$ j $$$ $$$ a_i > a_j $$$ $$$ a_i \le a_j + k $$$ swallow operations go one another example sequence bacteria size $$$ a= [ 101 53 42 102 101 55 54 ] $$$ $$$ k=1 $$$ one possible sequence swallow : $$$ [ 101 53 42 102 \underline { 101 } 55 54 ] $$$ $$$ \to $$$ $$$ [ 101 \underline { 53 } 42 102 55 54 ] $$$ $$$ \to $$$ $$$ [ \underline { 101 } 42 102 55 54 ] $$$ $$$ \to $$$ $$$ [ 42 102 55 \underline { 54 } ] $$$ $$$ \to $$$ $$$ [ 42 102 55 ] $$$ total $$$ 3 $$$ bacteria remain petri dish since n't a microscope guess minimal possible number bacteria remain petri dish finally find microscope first line contain two space separate positive integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 1 \le k \le 1000000 $$$ ) — number bacteria intergalactic constant $$$ k $$$ second line contain $$$ n $$$ space separate integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000 $$$ ) — size bacteria print integer — minimal possible number bacteria remain first example clarify problem statement second example optimal possible sequence swallow : $$$ [ 20 15 10 15 \underline { 20 } 25 ] $$$ $$$ \to $$$ $$$ [ 20 15 10 \underline { 15 } 25 ] $$$ $$$ \to $$$ $$$ [ 20 15 \underline { 10 } 25 ] $$$ $$$ \to $$$ $$$ [ 20 \underline { 15 } 25 ] $$$ $$$ \to $$$ $$$ [ \underline { 20 } 25 ] $$$ $$$ \to $$$ $$$ [ 25 ] $$$ third example bacteria swallow bacteria",['greedy'],1200.0
976/E,recently max get popular <unknown> ` ` brainstone '' ` ` brainstone '' a pretty intellectual game max solve numerous hard problems gameplay one : max own n creatures i - th describe two number — health hpi damage dmgi max also two type spell stock : spell first type use a time total second type — b time total spell use a certain creature multiple time spell use arbitrary order n't necessary use spell max really busy prepare final exams ask determine maximal total damage creatures achieve use spell optimal way first line contain three integers n a b ( 1 ≤ n ≤ 2·105 0 ≤ a ≤ 20 0 ≤ b ≤ 2·105 ) — number creatures spell first type spell second type respectively i - th next n line contain two number hpi dmgi ( 1 ≤ hpi dmgi ≤ 109 ) — description i - th creature print single integer — maximum total damage creatures deal first example max use spell first type second creature spell second type creature total damage equal 15 + 6·2 = 27 . second example max use spell second type first creature spell second type third creature total damage equal 10 + 11 + 5 = 26,['greedy'],2100.0
954/F,run a rectangular field field represent a matrix 3 row m columns ( i j ) denote a cell belong i - th row j - th column start ( 2 1 ) end path ( 2 m ) cell ( i j ) may advance : however n obstacles block path k - th obstacle denote three integers ak lk rk forbid enter cell ( ak j ) lk ≤ j ≤ rk calculate number different paths ( 2 1 ) ( 2 m ) print modulo 109 + 7 . first line contain two integers n m ( 1 ≤ n ≤ 104 3 ≤ m ≤ 1018 ) — number obstacles number columns matrix respectively n line follow contain three integers ak lk rk ( 1 ≤ ak ≤ 3 2 ≤ lk ≤ rk ≤ m - 1 ) denote obstacle block every cell ( ak j ) lk ≤ j ≤ rk cells may block multiple obstacles print number different paths ( 2 1 ) ( 2 m ) take modulo 109 + 7 . impossible get ( 2 1 ) ( 2 m ) number paths 0,['dp'],2100.0
883/J,mayor berland city s see beauty differently city - dwellers particular understand antique house nice - looking mayor want demolish ancient build city city s go host football championship soon order make city beautiful every month berland government provide mayor a money tranche money spend ancient build renovation n months championship i - th month tranche equal ai burl city s m antique build renovation cost j - th build bj burl mayor plan spend money n't like antique build want demolish much possible j - th build calculate demolish cost pj mayor decide act accord follow plan month choose several ( possibly zero ) m build demolish a way renovation cost separately greater money tranche ai month ( bj ≤ ai ) — allow deceive city - dwellers exactly build renovate mayor demolish select build current month otherwise dwellers realize deception plan fail definitely total demolish cost exceed amount money mayor currently mayor oblige spend money demolish money leave mayor put bank account use subsequent month moreover month may choose demolish build ( case tranche remain untouched save bank ) task calculate maximal number build mayor demolish first line input contain two integers n m ( 1 ≤ n m ≤ 100 000 ) — number months championship number ancient build city s. second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) ai tranche i - th month third line contain m integers b1 b2 ... bm ( 1 ≤ bj ≤ 109 ) bj renovation cost j - th build fourth line contain m integers p1 p2 ... pm ( 1 ≤ pj ≤ 109 ) pj demolish cost j - th build output single integer — maximal number build mayor demolish third example mayor act follow first month obtain 6 burl tranche demolish build # 2 ( renovation cost 6 demolish cost 4 ) # 4 ( renovation cost 5 demolish cost 2 ) spend money get second month tranche 3 burl mayor select build # 1 ( renovation cost 3 demolish cost 1 ) demolish a result save 2 burl next months third month get 2 burle tranche decide demolish build a result 2 + 2 = 4 burl bank reserve spend fourth month together 4 - th tranche demolish house # 3 # 5 ( renovation cost 4 demolish cost 3 5 correspondingly ) month budget empty finally get last tranche 3 burl mayor demolish build # 6 ( renovation cost 2 demolish cost 3 ) see demolish 6 build,"['constructive algorithms', 'greedy']",2400.0
845/C,polycarp a great fan <unknown> write tv program interest today list contain n show i - th start moment li end moment ri polycarp own two tvs watch two different show simultaneously two tvs watch one show give moment a single tv one show end moment show start ca n't watch a single tv polycarp want check n show two tvs enough ? first line contain one integer n ( 1 ≤ n ≤ 2·105 ) — number show next n line contain two integers li ri ( 0 ≤ li < ri ≤ 109 ) — start end time i - th show polycarp able check show use two tvs print ` ` yes '' ( without quote ) otherwise print ` ` '' ( without quote ),"['data structures', 'greedy']",1500.0
827/A,ivan string s consist small english letter however friend julia decide make fun hide string s. ivan prefer make a new string find old one ivan know information string s. namely remember string ti occur string s least ki time also remember exactly ki position string ti occur string s : position xi 1 xi 2 ... xi ki remember n string ti reconstruct lexicographically minimal string s fit information ivan remember string ti string s consist small english letter first line contain single integer n ( 1 ≤ n ≤ 105 ) — number string ivan remember next n line contain information string i - th line contain non - empty string ti positive integer ki equal number time string ti occur string s ki distinct positive integers xi 1 xi 2 ... xi ki increase order — position occurrences string ti string s start guarantee sum lengths string ti n't exceed 106 1 ≤ xi j ≤ 106 1 ≤ ki ≤ 106 sum ki n't exceed 106 . string ti coincide guarantee input data self - contradictory thus least one answer always exist print lexicographically minimal string fit information ivan remember,"['data structures', 'greedy', 'strings']",1700.0
767/D,olya like milk much drink k cartons milk day least k drink n't 's issue — expiration date carton a date ca n't drink ( still drink exactly date write carton ) due olya 's fridge contain a carton past expiry date throw away olya hat throw cartons drink a carton choose one expire fastest 's easy understand strategy minimize amount cartons throw let avoid 's even possible main issue olya one buy new cartons currently n cartons milk olya 's fridge one expiration date know ( soon expire measure days ) shop olya visit m cartons expiration date know cartons well find maximum number cartons olya buy would n't throw away cartons assume olya drink cartons today first line three integers n m k ( 1 ≤ n m ≤ 106 1 ≤ k ≤ n + m ) — amount cartons olya 's fridge amount cartons shop number cartons olya drink day second line n integers f1 f2 ... fn ( 0 ≤ fi ≤ 107 ) — expiration date cartons olya 's fridge expiration date express number days drink carton delay example a 0 expiration date mean must drink today 1 — later tomorrow etc third line m integers s1 s2 ... sm ( 0 ≤ si ≤ 107 ) — expiration date cartons shop a similar format 's way olya drink cartons already fridge print -1 . otherwise first line print maximum number x cartons olya buy would n't throw a carton away next line contain exactly x integers — number cartons buy ( cartons number order write input start 1 ) number repeat arbitrary order multiple correct answer print first example k = 2 olya three cartons expiry date 0 1 1 ( expire today tomorrow tomorrow ) shop 3 cartons expiry date 0 3 cartons expiry date 2 . olya buy three cartons example one expiry date 0 two expiry date 2 . second example three cartons olya own expire today mean would throw packets away regardless whether buy extra one third example olya would drink k = 2 cartons today ( one <unknown> fridge one shop ) remain one tomorrow,"['data structures', 'greedy']",2100.0
631/C,month blake get report contain main economic indicators company ` ` blake technologies '' n commodities produce company exactly one integer final report denote correspond revenue report get blake pass hand m managers may reorder elements order namely i - th manager either sort first ri number non - descending non - ascending order pass report manager i + 1 directly blake ( manager number i = m ) employees ` ` blake technologies '' prepare report right know initial sequence ai length n description manager value ri favourite order ask speed process determine final report look like first line input contain two integers n m ( 1 ≤ n m ≤ 200 000 ) — number commodities report number managers respectively second line contain n integers ai ( |ai| ≤ 109 ) — initial report get first manager follow m line descriptions operations managers go perform i - th line contain two integers ti ri ( 1 ≤ ri ≤ n ) mean i - th manager sort first ri number either non - descending ( ti = 1 ) non - ascending ( ti = 2 ) order print n integers — final report pass blake manager number m. first sample initial report look like : 1 2 3 . first manager first two number transpose : 2 1 3 . report get blake form second sample original report like : 1 2 4 3 . first manager report change : 4 2 1 3 . second manager report change : 2 4 1 3 . report hand blake,['data structures'],1700.0
624/B,give alphabet consist n letter task make a string maximum possible length follow condition satisfy : first line input contain a single integer n ( 2 ≤ n ≤ 26 ) — number letter alphabet next line contain n integers ai ( 1 ≤ ai ≤ 109 ) — i - th integers give limitation number occurrences i - th character string print a single integer — maximum length string meet requirements convenience let 's consider alphabet consist three letter : ` ` a '' ` ` b '' ` ` c '' first sample optimal string : ` ` <unknown> '' ` ` <unknown> '' second sample optimal string : ` ` acc '' ` ` <unknown> '',['greedy'],1100.0
612/D,give n segment coordinate axis ox number k. point satisfy belong least k segment find smallest ( number segment ) set segment coordinate axis ox contain satisfy point others first line contain two integers n k ( 1 ≤ k ≤ n ≤ 106 ) — number segment value k. next n line contain two integers li ri ( - 109 ≤ li ≤ ri ≤ 109 ) — endpoints i - th segment segment degenerate intersect segment give arbitrary order first line contain integer m — smallest number segment next m line contain two integers aj bj ( aj ≤ bj ) — end j - th segment answer segment list order leave right,['greedy'],1800.0
571/B,' ve get array a consist n integers a positive integer k. array a index integers 1 n. need permute array elements value first line contain two integers n k ( 2 ≤ n ≤ 3·105 1 ≤ k ≤ min ( 5000 n - 1 ) ) second line contain n integers a [ 1 ] a [ 2 ] ... a [ n ] ( - 109 ≤ a [ i ] ≤ 109 ) separate space — elements array a. print minimum possible value sum describe statement first test one optimal permutations 1 4 2 . second test initial order optimal third test one optimal permutations 2 3 4 4 3 5,"['dp', 'greedy']",2000.0
501/C,let 's define a forest a non - directed acyclic graph ( also without loop parallel edge ) one day misha play forest consist n vertices vertex v 0 n - 1 write two integers degreev sv first integer number vertices adjacent vertex v second integer xor sum number vertices adjacent v ( adjacent vertices write 0 ) next day misha could n't remember graph initially misha value degreev sv leave though help find number edge edge initial graph guarantee exist a forest correspond number write misha first line contain integer n ( 1 ≤ n ≤ 216 ) number vertices graph i - th next line contain number degreei si ( 0 ≤ degreei ≤ n - 1 0 ≤ si < 216 ) separate a space first line print number m number edge graph next print m line contain two distinct number a b ( 0 ≤ a ≤ n - 1 0 ≤ b ≤ n - 1 ) correspond edge ( a b ) edge print order ; vertices edge also print order xor sum number result bitwise add number modulo 2 . operation exist many modern program languages example languages c++ java python represent ` ` ^ '' pascal — ` ` xor '',"['constructive algorithms', 'data structures', 'greedy']",1500.0
461/A,appleman toastman play a game initially appleman give one group n number toastman start complete follow task : guy complete task look score value maximum possible value score get ? first line contain a single integer n ( 1 ≤ n ≤ 3·105 ) second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 106 ) — initial group give toastman print a single integer — largest possible score consider follow situation first example initially toastman get group [ 3 1 5 ] add 9 score give group appleman appleman split group [ 3 1 5 ] two group : [ 3 5 ] [ 1 ] give toastman toastman receive group [ 1 ] add 1 score give group appleman ( throw ) toastman receive group [ 3 5 ] add 8 score give group appleman appleman split [ 3 5 ] possible way : [ 5 ] [ 3 ] give group toastman toastman receive [ 5 ] add 5 score give group appleman ( throw ) toastman receive [ 3 ] add 3 score give group appleman ( throw ) finally toastman add 9 + 1 + 8 + 5 + 3 = 26 score optimal sequence action,['greedy'],1200.0
432/C,array a [ 1 ] a [ 2 ] ... a [ n ] contain distinct integers 1 n. task sort array increase order follow operation ( may need apply multiple time ) : need minimize number use operations however need make sure 5n operations first line contain integer n ( 1 ≤ n ≤ 105 ) next line contain n distinct integers a [ 1 ] a [ 2 ] ... a [ n ] ( 1 ≤ a [ i ] ≤ n ) first line print integer k ( 0 ≤ k ≤ 5n ) — number use operations next print operations operation must print ` ` i j '' ( 1 ≤ i < j ≤ n ; ( j - i + 1 ) a prime ) multiple answer print,['greedy'],1800.0
370/C,a christmas party city s. n children children come mittens mittens different color child leave right mitten color let 's say color mittens number integers 1 m children number 1 n. i - th child mittens color ci party santa claus ( ' father frost ' russian ) <unknown> snow girl children dance around richly decorate christmas tree fact everything bright diverse children want wear mittens distinct color children decide swap mittens get one leave one right mitten end two mittens distinct color mittens size fit children children start exchange mittens <unknown> could n't reach situation child a pair mittens distinct color vasily petrov dad one children note general case children 's idea may turn impossible besides a mathematician come scheme distribute mittens number children distinct - colored mittens maximum task repeat discovery note leave right mittens different : child must end one leave one right mitten first line contain two integers n m — number children number possible mitten color ( 1 ≤ n ≤ 5000 1 ≤ m ≤ 100 ) second line contain n integers c1 c2 ... cn ci color mittens i - th child ( 1 ≤ ci ≤ m ) first line print maximum number children end a distinct - colored pair mittens next n line print way mittens distribute case i - th line print two space - separated integers : color leave color right mitten i - th child get multiple solutions print,"['constructive algorithms', 'greedy']",1800.0
274/A,a k - multiple free set a set integers pair integers one equal another integer multiply k. two integers x y ( x < y ) set y = <unknown> 're give a set n distinct positive integers task find size 's largest k - multiple free subset first line input contain two integers n k ( 1 ≤ n ≤ 105 1 ≤ k ≤ 109 ) next line contain a list n distinct positive integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) number line separate single space line output print size largest k - multiple free subset { a1 a2 ... } sample input one possible maximum 2 - multiple free subsets { 4 5 6 },['greedy'],1500.0
261/A,maxim always go supermarket sundays today supermarket a special offer discount systems m type discount assume discount index 1 m. use discount number i customer take a special basket put exactly qi items buy term discount system addition items cart customer receive two items supermarket free number ` ` free items '' ( 0 1 2 ) give select customer condition impose select ` ` free items '' follow : must n't expensive cheapest item qi items cart maxim need buy n items shop count minimum sum money maxim need buy use discount system optimally well please assume supermarket enough cart action maxim use discount multiple time course maxim buy items without discount first line contain integer m ( 1 ≤ m ≤ 105 ) — number discount type second line contain m integers : q1 q2 ... qm ( 1 ≤ qi ≤ 105 ) third line contain integer n ( 1 ≤ n ≤ 105 ) — number items maxim need fourth line contain n integers : a1 a2 ... ( 1 ≤ ai ≤ 104 ) — items ' price number line separate single space a single line print a single integer — answer problem first sample maxim need buy two items cost 100 get a discount two free items cost 50 . case maxim go pay 200 . second sample best strategy maxim buy 3 items get 2 items free use discount case maxim go pay 150,['greedy'],1400.0
173/E,a club want take members camp order organize event better club directors decide partition members several group club member i a responsibility value ri age value ai a group a non - empty subset club members one member know group leader a group leader one responsible members group ( responsibility value less responsibility group member ) age absolute difference group member exceed k. club members friends want group also like group large possible write a program answer a series question like ` ` 's largest size a group contain club member x club member y ? ` ` 's possible x y group leader first line contain two integers n k ( 2 ≤ n ≤ 105 0 ≤ k ≤ 109 ) — number club members age restriction one group next line contain integer number r1 r2 ... rn ( 1 ≤ ri ≤ 109 ) separate space : ri denote i - th club member 's responsibility way integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) third line : ai denote i - th club member 's age next line contain integer q denote number question answer ( 1 ≤ q ≤ 105 ) next q line describe question line contain two space - separated integers xi yi ( 1 ≤ xi yi ≤ n xi ≠ yi ) — indices club members end group question print maximum size group a line make a group impossible print -1 instead first query largest group members 3 5 { 1 3 4 5 } member 3 leader second query member 2 leader group { 1 2 3 } third query leader group age 3 leader member 3 less responsible member 2 . make a group impossible group fourth query first query,['data structures'],2600.0
160/E,main bertown street represent a straight line 109 bus stop locate line stop number integers 1 109 order follow road city n bus every day i - th bus drive stop number si stop number fi ( si < fi ) stop intermediate stop return night bus start drive time ti drive fast finish drive also time ti time ti different bus bus infinite capacity bertown m citizens today i - th person get stop number li stop number ri ( li < ri ) ; i - th citizen come initial stop ( li ) time bi person one hand want get destination point quickly possible hand definitely want change bus rid formally : i - th person choose bus j minimum time tj sj ≤ li ri ≤ fj bi ≤ tj task determine citizen whether ride destination point today find number bus citizen ride first line contain two integers n m ( 1 ≤ n m ≤ 105 ) — number bus number people n line follow contain three integers : si fi ti ( 1 ≤ si fi ti ≤ 109 si < fi ) — description bus guarantee ti - s different m line follow contain three integers : li ri bi ( 1 ≤ li ri bi ≤ 109 li < ri ) — bertown citizens ' description bi - s could coincide first line print m space - separated integers : i - th number equal either -1 person number i ca n't get destination point number bus ride person number i. bus number integers 1 n input order,['data structures'],2400.0
159/E,little janet like play cub actually like play anything whatsoever cub <unknown> long multicolored cube describe two parameters — color ci size si a zebra tower a tower consist cub exactly two color besides color cub tower must alternate ( color adjacent cub must differ ) zebra tower least two cub limitations figure show example a zebra tower a zebra tower 's height sum size cub form tower help little janet build zebra tower maximum possible height use available cub first line contain integer n ( 2 ≤ n ≤ 105 ) — number cub next n line contain descriptions cub one description per line a cube description consist two space - separated integers ci si ( 1 ≤ ci si ≤ 109 ) — i - th cube 's color size correspondingly guarantee least two cub different color print description zebra tower maximum height follow form first line print tower 's height second line print number cub form tower third line print space - separated indices cub order follow tower bottom top assume cub number 1 n order give input several exist zebra tower maximum heights allow print please use % lld specificator read write 64 - bit integers с++ prefer use cin cout stream % i64d specificator,"['data structures', 'greedy']",1700.0
48/F,"new year celebrations berland last n days year winter <unknown> ’ s winter celebrations ’ organizers buy artificial snow m snow sell company berland every day i - th company produce wi cubic meter snow next day snow <unknown> company produce wi cubic meter snow celebration new year discount ’ s snow cost decrease every day know first day total cost snow produce i - th company equal ci bourles every day total cost decrease ai bourles i.e second day equal ci - ai third day — ci - 2ai , know one company cost snow produce get negative equal zero organize snow purchase buy every day exactly w snow cubic meter necessary buy company snow produce buy ni cubic meter snow ( 0 ≤ ni ≤ wi number ni necessarily integer ! ) i - th company one days cost snow equal si price total bourles one day one buy snow several company different days one buy snow different company require make purchase spend little money possible guarantee snow produce company enough first line contain integers n m w ( 1 ≤ n ≤ 100 1 ≤ m ≤ 500000 1 ≤ w ≤ 109 ) represent number days number company amount snow need purchase every one n days second line contain m integers wi third line contain m integers ci fourth line contain m integers ai number strictly positive exceed 109 . i inequation ci - ( n - 1 ) ai > 0 hold true print a single number — answer give problem print answer format decimal point ( even answer integer must contain decimal point ) without ` ` e '' without lead zero answer differ right one 10 - 9",['greedy'],2800.0
21/C,bob take a paper stripe n square ( height stripe 1 square ) square write integer number possibly negative become interest many ways exist cut stripe three piece sum number piece equal sum number piece piece contain positive integer amount square would help bob solve problem ? first input line contain integer n ( 1 ≤ n ≤ 105 ) — amount square stripe second line contain n space - separated number — number write square stripe number integer exceed 10000 absolute value output amount ways cut stripe three non - empty piece sum number piece equal sum number piece n't forget 's allow cut stripe along square ' border,['dp'],2000.0
1831/A,"give a permutation $$$ ^\dagger $$$ $$$ a $$$ length $$$ n $$$ find permutation $$$ b $$$ length $$$ n $$$ $$$ a_1+b_1 \le a_2+b_2 \le <unknown> \le \ldots \le <unknown> $$$ prove a permutation $$$ b $$$ satisfy condition always exist $$$ ^\dagger $$$ a permutation length $$$ n $$$ array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) test contain multiple test case first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 2000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100 $$$ ) — length permutations $$$ a $$$ $$$ b $$$ second line test case contain $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — elements permutation $$$ a $$$ elements $$$ a $$$ distinct note bind sum $$$ n $$$ test case test case output permutation $$$ b $$$ satisfy constraints mention statement prove a permutation $$$ b $$$ satisfy condition always exist first test case $$$ a= [ 1 2 4 5 3 ] $$$ permutation $$$ b= [ 1 2 4 3 5 ] $$$ satisfy condition $$$ 1 + 1 \le 2 + 2 \le 4 + 4 \le 5 + 3 \le 3 + 5 $$$",['constructive algorithms'],800.0
1816/B,"consider a $$$ 2 \times n $$$ grid $$$ n $$$ even integer may place integers $$$ 1 2 \ldots 2n $$$ grid use integer exactly a path a sequence cells achieve start $$$ ( 1 1 ) $$$ repeatedly walk either downwards right stop $$$ ( 2 n ) $$$ reach path extend beyond grid cost a path alternate sum number write cells a path , let number write cells $$$ a_1 a_2 \ldots a_k $$$ ( order visit ) cost path $$$ a_1 - a_2 + a_3 - a_4 + \ldots = \sum _ { i=1 } ^k a_i \cdot ( -1 ) ^ { i+1 } $$$ construct a way place integers $$$ 1 2 \ldots 2n $$$ grid minimum cost paths $$$ ( 1 1 ) $$$ $$$ ( 2 n ) $$$ maximize multiple grids result maximum value output first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 100000 $$$ $$$ n $$$ even ) — number columns grid guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case output $$$ 2 $$$ line contain $$$ n $$$ integers — desire grid multiple solutions output first test case two paths cell $$$ ( 1 1 ) $$$ cell $$$ ( 2 2 ) $$$ cost $$$ 3 - 1 + <unknown> $$$ $$$ 3 - 2 + 4=5 $$$ minimum cost $$$ 5 $$$ maximum possible value second test case four paths cell $$$ ( 1 1 ) $$$ cell $$$ ( 2 4 ) $$$ cost $$$ 8 - 1 + 5 - 3 + 7=16 $$$ $$$ 8 - 2 + 5 - 3 + 7=15 $$$ $$$ 8 - 2 + 6 - 3 + 7=16 $$$ $$$ 8 - 2 + 6 - 4 + 7=15 $$$ minimum value $$$ 15 $$$ maximum possible value","['constructive algorithms', 'greedy']",1000.0
1771/B,hossam make a big party invite friends party $$$ n $$$ friends number $$$ 1 $$$ $$$ n $$$ arrange a queue follow : $$$ 1 2 3 \ldots n $$$ hossam a list $$$ m $$$ pair friends n't know pair present list friends a subsegment queue start friend $$$ a $$$ end friend $$$ b $$$ $$$ [ a a + 1 a + 2 \ldots b ] $$$ a subsegment queue call good pair segment friends hossam want know many pair $$$ ( a b ) $$$ ( $$$ 1 \le a \le b \le n $$$ ) subsegment start friend $$$ a $$$ end friend $$$ b $$$ good input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 20000 $$$ ) number test case description test case follow first line test case contain two integer number $$$ n $$$ $$$ m $$$ ( $$$ 2 \le n \le 100000 $$$ $$$ 0 \le m \le 100000 $$$ ) represent number friends number pair respectively $$$ i $$$ -th next $$$ m $$$ line contain two integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1 \le x_i y_i\le n $$$ $$$ x_i \neq y_i $$$ ) represent a pair hossam 's friends n't know note pair repeat guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ sum $$$ m $$$ test case exceed $$$ 100000 $$$ test case print integer — number good subsegments first example answer $$$ 4 $$$ good subsegments : [ 1 ] [ 2 ] [ 3 ] [ 1 2 ] second example answer $$$ 5 $$$ good subsegments : [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 3 4 ],"['constructive algorithms', 'dp']",1400.0
1747/B,"give integer $$$ n $$$ let 's define $$$ s ( n ) $$$ string ` ` ban '' concatenate $$$ n $$$ time example $$$ s ( 1 ) $$$ = ` ` ban '' $$$ s ( 3 ) $$$ = ` ` <unknown> '' note length string $$$ s ( n ) $$$ equal $$$ 3n $$$ consider $$$ s ( n ) $$$ perform follow operation $$$ s ( n ) $$$ number time ( possibly zero ) : want string ` ` ban '' appear $$$ s ( n ) $$$ a subsequence 's smallest number operations achieve ? also find one shortest sequence operations a string $$$ a $$$ a subsequence a string $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) character input consist multiple test case first line contain a single integer $$$ t $$$ $$$ ( 1 \leq t \leq 100 ) $$$ — number test case description test case follow line test case contain a single integer $$$ n $$$ $$$ ( 1 \leq n \leq 100 ) $$$ test case first line output $$$ m $$$ ( $$$ 0 \le m \le 100000 $$$ ) — minimum number operations require 's guarantee objective always achievable $$$ 100000 $$$ operations constraints problem , output $$$ m $$$ line $$$ k $$$ -th line contain two integers $$$ i_k $$$ $$$ j_k $$$ $$$ ( 1\leq i_k j_k \leq 3n i_k \ne j_k ) $$$ denote want swap character indices $$$ i_k $$$ $$$ j_k $$$ $$$ k $$$ -th operation $$$ m $$$ operations ` ` ban '' must appear $$$ s ( n ) $$$ a subsequence multiple possible answer output first testcase $$$ s ( 1 ) = $$$ ` ` ban '' swap $$$ s ( 1 ) _ 1 $$$ $$$ s ( 1 ) _ 2 $$$ convert $$$ s ( 1 ) $$$ ` ` <unknown> '' contain ` ` ban '' a subsequence second testcase $$$ s ( 2 ) = $$$ ` ` banban '' swap $$$ s ( 2 ) _ 2 $$$ $$$ s ( 2 ) _ 6 $$$ convert $$$ s ( 2 ) $$$ ` ` <unknown> '' contain ` ` ban '' a subsequence",['constructive algorithms'],900.0
1743/C,"monocarp collect rare magazines quite a decide sell distribute magazines $$$ n $$$ box arrange a row $$$ i $$$ -th box contain $$$ a_i $$$ magazines box cover lids others suddenly start rain monocarp save many magazines rain possible , move lids box follow : $$$ i $$$ -th box cover a lid initially either move lid $$$ i $$$ -th box box $$$ ( i-1 ) $$$ ( exist ) keep lid $$$ i $$$ -th box may assume monocarp move lids instantly moment lid move a box cover a lid monocarp move lids magazines safe rain ; otherwise <unknown> calculate maximum number magazines monocarp save rain first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number box second line contain a string $$$ n $$$ character 0 and/or 1 . $$$ i $$$ -th character 1 $$$ i $$$ -th box initially cover a lid $$$ i $$$ -th character 0 $$$ i $$$ -th box initially cover third line contain a sequence integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 10000 $$$ ) $$$ a_i $$$ number magazines $$$ i $$$ -th box sum $$$ n $$$ testcases n't exceed $$$ 200000 $$$ testcase print one integer — maximum number magazines monocarp save rain first testcase example monocarp move lid second box first box box $$$ 1 $$$ $$$ 3 $$$ $$$ 4 $$$ cover $$$ 10 + 8 + 9 = 27 $$$ magazines save second testcase monocarp move lid second box first box third box second box fifth box fourth box sixth box fifth box box $$$ 1 $$$ $$$ 2 $$$ $$$ 4 $$$ $$$ 5 $$$ cover $$$ 20 + 10 + 30 + 20 = 80 $$$ magazines save lids third testcase 's impossible save even a single magazine","['constructive algorithms', 'dp', 'greedy']",1100.0
1740/A,pak chanek a prime number $$$ ^\dagger $$$ $$$ n $$$ find a prime number $$$ m $$$ $$$ n + m $$$ prime $$$ ^\dagger $$$ a prime number a number exactly $$$ 2 $$$ factor first prime number $$$ <unknown> \ldots $$$ particular $$$ 1 $$$ a prime number test contain multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) — number test case follow line contain description test case line test case contain a prime number $$$ n $$$ ( $$$ 2 \leq n \leq 100000 $$$ ) test case output a line contain a prime number $$$ m $$$ ( $$$ 2 \leq m \leq 100000 $$$ ) $$$ n + m $$$ prime prove constraints problem $$$ m $$$ always exist multiple solutions output first test case $$$ m = 2 $$$ prime $$$ n + m = 7 + 2 = 9 $$$ prime second test case $$$ m = 7 $$$ prime $$$ n + m = 2 + 7 = 9 $$$ prime third test case $$$ m = 47837 $$$ prime $$$ n + m = <unknown> + 47837 = 123456 $$$ prime,['constructive algorithms'],800.0
1688/C,keine ability manipulate history history gensokyo a string $$$ s $$$ length $$$ 1 $$$ initially fix <unknown> cause yukari need follow operations $$$ n $$$ time $$$ i $$$ -th time : note $$$ t _ { 2i-1 } $$$ occur $$$ s $$$ exactly one replace example let $$$ s= $$$ ` ` marisa '' $$$ t _ { 2i-1 } = $$$ ` ` a '' $$$ t _ { 2i } = $$$ ` ` z '' operation $$$ s $$$ become ` ` <unknown> '' ` ` <unknown> '' $$$ n $$$ operations keine get final string operation sequence $$$ t $$$ length $$$ 2n $$$ keine think finish yukari appear shuffle order $$$ t $$$ worse still keine forget initial history help keine find initial history gensokyo ! recall a substring a sequence consecutive character string example string ` ` abc '' substrings : ` ` ab '' ` ` c '' ` ` bc '' others follow string substring : ` ` ac '' ` ` cba '' ` ` acb '' hacksyou make hack problem test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 1000 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n < 10 ^ 5 $$$ ) — number operations next $$$ 2n $$$ line contain one non - empty string $$$ t _ { i } $$$ — $$$ i $$$ -th string shuffle sequence $$$ t $$$ next line contain one non - empty string $$$ s $$$ — final string guarantee total length give string ( include $$$ t_i $$$ $$$ s $$$ ) test case exceed $$$ 20 ^ 5 $$$ give string consist lowercase english letter guarantee initial string exist show initial string unique test case print initial string one line test case 1 : initially $$$ s $$$ ` ` a '' final string ` ` acd '' $$$ t= [ $$$ ` ` a '' ` ` ab '' ` ` b '' ` ` cd '' $$$ ] $$$ shuffle test case 2 : initially $$$ s $$$ ` ` z '' final string ` ` <unknown> '' $$$ t= [ $$$ ` ` z '' ` ` aa '' ` ` a '' ` ` run '' ` ` a '' ` ` yakumo '' $$$ ] $$$ shuffle,"['constructive algorithms', 'greedy', 'strings']",1700.0
1685/D2,a hard version problem difference easy hard versions version output lexicographically smallest permutation smallest weight give a permutation $$$ p_1 p_2 \ldots p_n $$$ integers $$$ 1 $$$ $$$ n $$$ let 's define weight permutation $$$ q_1 q_2 \ldots q_n $$$ integers $$$ 1 $$$ $$$ n $$$ $$$ $$$ |q_1 - p _ { q _ { 2 } } | + |q_2 - p _ { q _ { 3 } } | + \ldots + |q _ { n-1 } - p _ { q _ { n } } | + |q_n - p _ { q _ { 1 } } | $$$ $$$ want permutation lightweight possible among permutations $$$ q $$$ smallest possible weight find lexicographically smallest permutation $$$ a_1 a_2 \ldots a_n $$$ lexicographically smaller permutation $$$ b_1 b_2 \ldots b_n $$$ exist $$$ 1 \le i \le n $$$ $$$ a_j = b_j $$$ $$$ 1 \le j < i $$$ $$$ a_i < b_i $$$ first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 200 $$$ ) — size permutation second line test case contain $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$ ( $$$ 1 \le p_i \le n $$$ $$$ p_i $$$ distinct ) — elements permutation sum $$$ n $$$ test case n't exceed $$$ 400 $$$ test case output $$$ n $$$ integers $$$ q_1 q_2 \ldots q_n $$$ ( $$$ 1 \le q_i \le n $$$ $$$ q_i $$$ distinct ) — lexicographically smallest permutation smallest weight first test case two permutations length $$$ 2 $$$ : $$$ ( 1 2 ) $$$ $$$ ( 2 1 ) $$$ permutation $$$ ( 1 2 ) $$$ weight $$$ |1 - p_2| + |2 - p_1| = 0 $$$ permutation $$$ ( 2 1 ) $$$ weight : $$$ |2 - p_1| + |1 - p_2| = 0 $$$ version output lexicographically smaller — $$$ ( 1 2 ) $$$ second test case weight permutation $$$ ( 1 3 4 2 ) $$$ $$$ |1 - p_3| + |3 - p_4| + |4 - p_2| + |2 - p_1| = |1 - 1| + |3 - 4| + |4 - 3| + |2 - 2| = 2 $$$ permutations smaller weight third test case weight permutation $$$ ( 1 3 4 2 5 ) $$$ $$$ |1 - p_3| + |3 - p_4| + |4 - p_2| + |2 - p_5| + |5 - p_1| = |1 - 3| + |3 - 2| + |4 - 4| + |2 - 1| + |5 - 5| = 4 $$$ permutations smaller weight,"['constructive algorithms', 'greedy']",3500.0
1651/B,recently friend discover one special operation integer array $$$ a $$$ : play operation a come next conclusion : statement sound fishy want find a counterexample a give integer $$$ n $$$ find counterexample prove wrong ? word find array $$$ a $$$ consist $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) pair indices $$$ ( i j ) $$$ perform operation wo n't decrease total sum ( increase change sum ) first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 1000 $$$ ) — length array $$$ a $$$ test case counterexample array $$$ a $$$ size $$$ n $$$ print otherwise print yes follow array $$$ a $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) multiple <unknown> print first test case possible pair indices $$$ ( 1 2 ) $$$ $$$ ( 2 1 ) $$$ perform operation indices $$$ ( 1 2 ) $$$ ( $$$ ( 2 1 ) $$$ ) 'll get $$$ a_1 = a_2 = |1 - <unknown> = 336 $$$ array $$$ [ 336 336 ] $$$ case total sum increase array $$$ a $$$ a counterexample,"['constructive algorithms', 'greedy']",800.0
1621/A,"$$$ n \times n $$$ chessboard $$$ k $$$ rook row chessboard number integers $$$ 1 $$$ $$$ n $$$ top bottom columns chessboard number integers $$$ 1 $$$ $$$ n $$$ leave right cell $$$ ( x y ) $$$ cell intersection row $$$ x $$$ collumn $$$ y $$$ $$$ 1 \leq x \leq n $$$ $$$ 1 \leq y \leq n $$$ arrangement rook board call good rook beat another rook a rook beat rook share row collumn good arrangement rook board call stable possible move one rook adjacent cell arrangement become good otherwise good arrangement stable , adjacent cells cells share a side please find stable arrangement $$$ k $$$ rook $$$ n \times n $$$ chessboard report arrangement first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100 $$$ ) — number test case first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq k \leq n \leq 40 $$$ ) — size chessboard number rook a stable arrangement $$$ k $$$ rook $$$ n \times n $$$ chessboard output $$$ n $$$ line symbols r. $$$ j $$$ -th symbol $$$ i $$$ -th line equal r a rook cell $$$ ( i j ) $$$ arrangement multiple solutions may output stable arrangement output $$$ -1 $$$ first test case find stable arrangement $$$ 2 $$$ rook $$$ 3 \times 3 $$$ chessboard place cells $$$ ( 3 1 ) $$$ $$$ ( 1 3 ) $$$ give stable arrangement second test case show <unknown> place $$$ 3 $$$ rook $$$ 3 \times 3 $$$ chessboard get stable arrangement",['constructive algorithms'],800.0
1583/B,lord omkar would like a tree $$$ n $$$ nod ( $$$ 3 \le n \le 100000 $$$ ) ask disciples construct tree however lord omkar create $$$ m $$$ ( $$$ \mathbf { 1 \le m < n } $$$ ) restrictions ensure tree heavenly possible a tree $$$ n $$$ nod connect undirected graph $$$ n $$$ nod $$$ n-1 $$$ edge note two nod exactly one simple path a simple path a path two nod contain node example a tree : a restriction consist $$$ 3 $$$ pairwise distinct integers $$$ a $$$ $$$ b $$$ $$$ c $$$ ( $$$ 1 \le a b c \le n $$$ ) signify node $$$ b $$$ lie simple path node $$$ a $$$ node $$$ c $$$ help lord omkar become trust disciple ? need find heavenly tree multiple set restrictions show a heavenly tree always exist set restrictions give constraints test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \leq t \leq 10000 $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 3 \leq n \leq 100000 $$$ $$$ \mathbf { 1 \leq m < n } $$$ ) represent size tree number restrictions $$$ i $$$ -th next $$$ m $$$ line contain three integers $$$ a_i $$$ $$$ b_i $$$ $$$ c_i $$$ ( $$$ 1 \le a_i b_i c_i \le n $$$ $$$ a $$$ $$$ b $$$ $$$ c $$$ distinct ) signify node $$$ b_i $$$ lie simple path nod $$$ a_i $$$ $$$ c_i $$$ guarantee sum $$$ n $$$ across test case exceed $$$ 100000 $$$ test case output $$$ n-1 $$$ line represent $$$ n-1 $$$ edge tree line output two integers $$$ u $$$ $$$ v $$$ ( $$$ 1 \le u v \le n $$$ $$$ u \neq v $$$ ) signify edge nod $$$ u $$$ $$$ v $$$ give edge form a tree satisfy omkar 's restrictions output first sample case correspond follow tree : output second sample case correspond follow tree :,['constructive algorithms'],1200.0
1571/F,kotlinforces a web <unknown> host program competitions staff kotlinforces ask schedule $$$ n $$$ program competitions next $$$ m $$$ days competition hold multiple stag ; regulations $$$ i $$$ -th competition state competition consist exactly $$$ k_i $$$ stag stage start second one schedule exactly $$$ t_i $$$ days previous stage word first stage $$$ i $$$ -th competition schedule day $$$ x $$$ second stage schedule day $$$ <unknown> $$$ third stage — day $$$ <unknown> $$$ ... $$$ k_i $$$ -th stage ( last one ) — day $$$ <unknown> ( <unknown> ) t_i $$$ $$$ n $$$ competitions schedule a way start finish next $$$ m $$$ days $$$ m $$$ days one stage one competition hold ( two stag different competitions schedule day ) possible schedule $$$ n $$$ competitions meet constraints ? first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \le n m \le 5000 $$$ ) — number competitions number days respectively $$$ n $$$ line follow describe a competition schedule $$$ i $$$ -th line contain two integers $$$ k_i $$$ $$$ t_i $$$ ( $$$ 2 \le k_i \le 5000 $$$ ; $$$ 1 \le t_i \le 2 $$$ ) — parameters $$$ i $$$ -th competition impossible schedule $$$ n $$$ competitions next $$$ m $$$ days one stage day print -1 . otherwise print $$$ n $$$ integers $$$ i $$$ -th integer represent day first stage $$$ i $$$ -th competition schedule ; days number $$$ 1 $$$ $$$ m $$$ multiple answer print,"['constructive algorithms', 'dp']",2000.0
1530/G,two string $$$ a $$$ $$$ b $$$ equal length $$$ n $$$ consist character 0 1 integer $$$ k $$$ need make string $$$ a $$$ $$$ b $$$ equal one step choose substring $$$ a $$$ contain exactly $$$ k $$$ character 1 ( arbitrary number character 0 ) reverse formally $$$ a = a_1 a_2 \ldots a_n $$$ choose integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le n $$$ ) exactly $$$ k $$$ ones among character $$$ a_l a _ { l+1 } \ldots a_r $$$ set $$$ a $$$ $$$ a_1 a_2 \ldots a _ { l-1 } a_r a _ { r-1 } \ldots a_l a _ { r+1 } a _ { r+2 } \ldots a_n $$$ find a way make $$$ a $$$ equal $$$ b $$$ use $$$ 4n $$$ reversals kind determine a way n't exist number reversals n't minimize test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 2000 $$$ ) description test case follow test case consist three line first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 2000 $$$ ; $$$ 0 \le k \le n $$$ ) second line contain string $$$ a $$$ length $$$ n $$$ third line contain string $$$ b $$$ length string consist character 0 1 . guarantee sum $$$ n $$$ test case exceed $$$ 2000 $$$ test case 's impossible make $$$ a $$$ equal $$$ b $$$ $$$ 4n $$$ reversals print a single integer $$$ -1 $$$ otherwise print integer $$$ m $$$ ( $$$ 0 \le m \le 4n $$$ ) denote number reversals sequence step follow $$$ m $$$ pair integers $$$ l_i r_i $$$ ( $$$ 1 \le l_i \le r_i \le n $$$ ) denote boundaries substrings $$$ a $$$ reverse chronological order substring must contain exactly $$$ k $$$ ones moment reversal note $$$ m $$$ n't minimize multiple answer print first test case first reversal $$$ a = $$$ <unknown> second reversal $$$ a = $$$ <unknown> third reversal $$$ a = $$$ 010101,['constructive algorithms'],3300.0
1525/B,give a permutation $$$ a $$$ consist $$$ n $$$ number $$$ 1 $$$ $$$ 2 $$$ ... $$$ n $$$ ( a permutation array element $$$ 1 $$$ $$$ n $$$ occur exactly ) perform follow operation : choose subarray ( contiguous subsegment ) $$$ a $$$ rearrange elements way want operation apply whole array example $$$ a = [ 2 1 4 5 3 ] $$$ want apply operation subarray $$$ a [ 2 4 ] $$$ ( subarray contain elements $$$ 2 $$$ -nd $$$ 4 $$$ -th ) operation array become $$$ a = [ 2 5 1 4 3 ] $$$ example $$$ a = [ 2 1 5 4 3 ] $$$ task calculate minimum number operations describe sort permutation $$$ a $$$ ascend order first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 2000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 50 $$$ ) — number elements permutation second line test case contain $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ — give permutation $$$ a $$$ test case output a single integer — minimum number operations describe sort array $$$ a $$$ ascend order explanations $$$ a [ i j ] $$$ define subarray $$$ a $$$ start $$$ i $$$ -th element end $$$ j $$$ -th element first test case example select subarray $$$ a [ 2 3 ] $$$ swap elements second test case example permutation already sort n't need apply operations third test case example select subarray $$$ a [ 3 5 ] $$$ reorder elements $$$ a $$$ become $$$ [ 2 1 3 4 5 ] $$$ select subarray $$$ a [ 1 2 ] $$$ swap elements $$$ a $$$ become $$$ [ 1 2 3 4 5 ] $$$,"['constructive algorithms', 'greedy']",900.0
1515/C,phoenix $$$ n $$$ block height $$$ h_1 h_2 \dots h_n $$$ $$$ h_i $$$ n't exceed value $$$ x $$$ plan stack $$$ n $$$ block $$$ m $$$ separate tower height a tower simply sum heights block tower look beautiful two tower may a height difference strictly $$$ x $$$ please help phoenix build $$$ m $$$ tower look beautiful tower must least one block block must use input consist multiple test case first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case first line test case contain three integers $$$ n $$$ $$$ m $$$ $$$ x $$$ ( $$$ 1 \le m \le n \le 100000 $$$ ; $$$ 1 \le x \le 10000 $$$ ) — number block number tower build maximum acceptable height difference two tower respectively second line test case contain $$$ n $$$ space - separated integers ( $$$ 1 \le h_i \le x $$$ ) — heights block guarantee sum $$$ n $$$ test case exceed $$$ 100000 $$$ test case phoenix build $$$ m $$$ tower look beautiful print otherwise print yes follow $$$ n $$$ integers $$$ y_1 y_2 \dots y_n $$$ $$$ y_i $$$ ( $$$ 1 \le y_i \le m $$$ ) index tower $$$ i $$$ -th block place multiple solutions print first test case first tower height $$$ 1 + 2 + 3=6 $$$ second tower height $$$ 1 + 2=3 $$$ difference $$$ 6 - 3=3 $$$ n't exceed $$$ x=3 $$$ tower beautiful second test case first tower height $$$ 1 $$$ second tower height $$$ 1 + 2=3 $$$ third tower height $$$ 3 $$$ maximum height difference two tower $$$ 3 - 1=2 $$$ n't exceed $$$ x=3 $$$ tower beautiful,"['constructive algorithms', 'data structures', 'greedy']",1400.0
1461/A,"one fall day joe get bore could n't find something interest <unknown> suggest joe generate a string length $$$ n $$$ entertain somehow n't seem particularly difficult joe 's generate string follow rule : a string $$$ a $$$ a substring a string $$$ b $$$ $$$ a $$$ obtain $$$ b $$$ deletion several ( possibly zero ) character begin several ( possibly zero ) character end example string ` ` a '' ` ` bc '' ` ` abc '' substrings a string ` ` abc '' string ` ` ac '' ` ` ba '' ` ` cba '' a string a palindrome read leave right right leave example string ` ` abccba '' ` ` <unknown> '' ` ` aba '' ` ` abacaba '' ` ` a '' ` ` bacab '' palindromes string ` ` <unknown> '' ` ` abb '' ` ` ab '' joe want find correct string help ! prove answer always exist give constraints test contain one test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10 $$$ ) line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 1\,000 $$$ ) — require string length maximum length a palindrome substring respectively test case print string satisfy condition problem statement multiple correct answer print one prove answer always exist give constraints first test case example palindrome substring maximum length ` ` aa '' length exceed $$$ 2 $$$ fit second test case palindrome substrings length one","['constructive algorithms', 'greedy']",800.0
1442/A,give array $$$ a $$$ $$$ n $$$ positive integers use follow operation many time like : select integer $$$ 1 \le k \le n $$$ one two things : example $$$ n=5 $$$ $$$ a= [ <unknown> ] $$$ apply one follow operations ( possible options list ) : determine possible make elements array equal zero apply a certain number operations first line contain one positive integer $$$ t $$$ ( $$$ 1 \le t \le 30000 $$$ ) — number test case $$$ t $$$ test case follow test case begin a line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 30000 $$$ ) — number elements array second line test case contain $$$ n $$$ integers $$$ a_1 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000 $$$ ) sum $$$ n $$$ test case exceed $$$ 30000 $$$ test case output a separate line : letter word yes output case,"['constructive algorithms', 'dp', 'greedy']",1800.0
1437/B,"give a string $$$ s $$$ even length $$$ n $$$ string $$$ s $$$ binary word consist 0 's 1 's string $$$ s $$$ exactly $$$ \frac { n } { 2 } $$$ zero $$$ \frac { n } { 2 } $$$ ones ( $$$ n $$$ even ) one operation reverse substring $$$ s $$$ a substring a string a contiguous subsequence string minimum number operations need make string $$$ s $$$ alternate ? a string alternate $$$ s_i \neq s _ { i + 1 } $$$ $$$ i $$$ two type alternate string general : 01010101 ... <unknown> ... first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 100000 $$$ ; $$$ n $$$ even ) — length string $$$ s $$$ second line test case contain a binary string $$$ s $$$ length $$$ n $$$ ( $$$ s_i \in $$$ { 0 1 } ) string $$$ s $$$ exactly $$$ \frac { n } { 2 } $$$ zero $$$ \frac { n } { 2 } $$$ ones 's guarantee total sum $$$ n $$$ test case n't exceed $$$ 100000 $$$ test case print minimum number operations make $$$ s $$$ alternate first test case string 10 already alternate second test case , example reverse last two elements $$$ s $$$ get : 0110 $$$ \rightarrow $$$ 0101 . third test case , example make follow two operations :","['constructive algorithms', 'greedy']",1200.0
1421/C,ringo find a string $$$ s $$$ length $$$ n $$$ yellow <unknown> string contain lowercase letter english alphabet ringo friends love palindromes would like turn string $$$ s $$$ a palindrome apply two type operations string first operation allow choose $$$ i $$$ ( $$$ 2 \le i \le n-1 $$$ ) append substring $$$ s_2s_3 \ldots s_i $$$ ( $$$ i - 1 $$$ character ) reverse front $$$ s $$$ second operation allow choose $$$ i $$$ ( $$$ 2 \le i \le n-1 $$$ ) append substring $$$ s_i s _ { i + 1 } \ldots s _ { n - 1 } $$$ ( $$$ n - i $$$ character ) reverse end $$$ s $$$ note character string problem index $$$ 1 $$$ example suppose $$$ s= $$$ abcdef perform first operation $$$ i=3 $$$ append cb front $$$ s $$$ result <unknown> perform second operation result string $$$ <unknown> $$$ yield <unknown> task help ringo make entire string a palindrome apply two operations ( total ) $$$ 30 $$$ time length result palindrome must exceed $$$ 1000000 $$$ guarantee constraints always a solution also note minimize neither number operations apply length result string fit constraints line contain string $$$ s $$$ ( $$$ 3 \le |s| \le 100000 $$$ ) lowercase letter english alphabet first line contain $$$ k $$$ ( $$$ 0\le k \le 30 $$$ ) — number operations perform follow $$$ k $$$ line describe operation form l i r i $$$ l $$$ represent first operation $$$ r $$$ represent second operation $$$ i $$$ represent index choose length result palindrome must exceed $$$ 1000000 $$$ first example follow operations perform : abac $$$ \to $$$ <unknown> $$$ \to $$$ <unknown> second sample perform follow operations : <unknown> $$$ \to $$$ <unknown> $$$ \to $$$ <unknown> third example already a palindrome operations require,"['constructive algorithms', 'strings']",1400.0
1405/A,"a permutation length $$$ n $$$ array consist $$$ n $$$ distinct integers $$$ 1 $$$ $$$ n $$$ arbitrary order example $$$ [ 2,3,1,5,4 ] $$$ a permutation $$$ [ 1,2,2 ] $$$ a permutation ( $$$ 2 $$$ appear twice array ) $$$ [ 1,3,4 ] $$$ also a permutation ( $$$ n=3 $$$ $$$ 4 $$$ array ) let $$$ p $$$ permutation length $$$ n $$$ define fingerprint $$$ f ( p ) $$$ $$$ p $$$ sort array sum adjacent elements $$$ p $$$ formally $$$ $$$ f ( p ) = \mathrm { sort } ( [ <unknown> <unknown> \ldots p _ { n-1 } + p_n ] ) $$$ $$$ example $$$ n=4 $$$ $$$ p= [ 1,4,2,3 ] $$$ fingerprint give $$$ f ( p ) = \mathrm { sort } ( [ 1 + 4,4 + 2,2 + 3 ] ) = \mathrm { sort } ( [ <unknown> ] ) = [ <unknown> ] $$$ give a permutation $$$ p $$$ length $$$ n $$$ task find a different permutation $$$ p ' $$$ fingerprint two permutations $$$ p $$$ $$$ p ' $$$ consider different index $$$ i $$$ $$$ p_i \ne <unknown> $$$ test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le <unknown> $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 2\le n\le 100 $$$ ) — length permutation second line test case contain $$$ n $$$ integers $$$ p_1 \ldots p_n $$$ ( $$$ 1\le p_i\le n $$$ ) guarantee $$$ p $$$ a permutation test case output $$$ n $$$ integers $$$ <unknown> \ldots <unknown> $$$ — a permutation $$$ <unknown> p $$$ $$$ f ( p ' ) = f ( p ) $$$ prove every permutation satisfy input constraints a solution exist multiple solutions may output first test case $$$ f ( p ) = \mathrm { sort } ( [ 1 + 2 ] ) = [ 3 ] $$$ $$$ f ( p ' ) = \mathrm { sort } ( [ 2 + 1 ] ) = [ 3 ] $$$ second test case $$$ f ( p ) = \mathrm { sort } ( [ 2 + 1,1 + 6,6 + 5,5 + 4,4 + 3 ] ) = \mathrm { sort } ( [ 3,7,11,9,7 ] ) = [ 3,7,7,9,11 ] $$$ $$$ f ( p ' ) = \mathrm { sort } ( [ 1 + 2,2 + 5,5 + 6,6 + 3,3 + 4 ] ) = \mathrm { sort } ( [ 3,7,11,9,7 ] ) = [ 3,7,7,9,11 ] $$$ third test case $$$ f ( p ) = \mathrm { sort } ( [ 2 + 4,4 + 3,3 + 1,1 + 5 ] ) = \mathrm { sort } ( [ <unknown> ] ) = [ 4,6,6,7 ] $$$ $$$ f ( p ' ) = \mathrm { sort } ( [ 3 + 1,1 + 5,5 + 2,2 + 4 ] ) = \mathrm { sort } ( [ <unknown> ] ) = [ 4,6,6,7 ] $$$",['constructive algorithms'],800.0
1264/F,well - known fibonacci sequence $$$ f_0 f_1 f_2 \ldots $$$ define follow : give increase arithmetic sequence positive integers $$$ n $$$ elements : $$$ ( a a + d a + 2\cdot d \ldots a + ( n - 1 ) \cdot d ) $$$ need find another increase arithmetic sequence positive integers $$$ n $$$ elements $$$ ( b b + e b + 2\cdot e \ldots b + ( n - 1 ) \cdot e ) $$$ : first line contain three positive integers $$$ n $$$ $$$ a $$$ $$$ d $$$ ( $$$ 1 \leq n a d a + ( n - 1 ) \cdot d < 1000000 $$$ ) arithmetic sequence exist print $$$ -1 $$$ otherwise print two integers $$$ b $$$ $$$ e $$$ separate space a single line ( $$$ 0 < b e < 2^ { 64 } $$$ ) many answer output first test case choose $$$ ( b e ) = ( 2 1 ) $$$ $$$ f_2 = 1 f_3 = 2 f_4 = 3 $$$ second test case choose $$$ ( b e ) = ( 19 5 ) $$$ :,['constructive algorithms'],3500.0
1237/H,two string $$$ a $$$ $$$ b $$$ equal even length $$$ n $$$ consist character 0 1 . 're <unknown> finally make universe perfectly balance need make string $$$ a $$$ $$$ b $$$ equal one step choose prefix $$$ a $$$ even length reverse formally $$$ a = a_1 a_2 \ldots a_n $$$ choose a positive even integer $$$ p \le n $$$ set $$$ a $$$ $$$ a_p a _ { p-1 } \ldots a_1 a _ { p+1 } a _ { p+2 } \ldots a_n $$$ find a way make $$$ a $$$ equal $$$ b $$$ use $$$ n + 1 $$$ reversals kind determine a way n't exist number reversals n't minimize first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 2000 $$$ ) denote number test case test case consist two line first line contain a string $$$ a $$$ length $$$ n $$$ second line contain a string $$$ b $$$ length ( $$$ 2 \le n \le 4000 $$$ ; $$$ n \bmod 2 = 0 $$$ ) string consist character 0 1 . sum $$$ n $$$ $$$ t $$$ test case n't exceed $$$ 4000 $$$ test case 's impossible make $$$ a $$$ equal $$$ b $$$ $$$ n + 1 $$$ reversals output a single integer $$$ -1 $$$ otherwise output integer $$$ k $$$ ( $$$ 0 \le k \le n + 1 $$$ ) denote number reversals sequence step follow $$$ k $$$ even integers $$$ p_1 p_2 \ldots p_k $$$ ( $$$ 2 \le p_i \le n $$$ ; $$$ p_i \bmod 2 = 0 $$$ ) denote lengths prefix $$$ a $$$ reverse chronological order note $$$ k $$$ n't minimize many solutions output first test case string $$$ a $$$ change follow :,['constructive algorithms'],3300.0
1237/C1,easier version problem version $$$ n \le 2000 $$$ $$$ n $$$ distinct point three - dimensional space number $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th point coordinate $$$ ( x_i y_i z_i ) $$$ number point $$$ n $$$ even 'd like remove $$$ n $$$ point use a sequence $$$ \frac { n } { 2 } $$$ snap one snap remove two point $$$ a $$$ $$$ b $$$ remove yet form a perfectly balance pair a pair point $$$ a $$$ $$$ b $$$ perfectly balance point $$$ c $$$ ( remove yet ) lie within axis - aligned minimum bound box point $$$ a $$$ $$$ b $$$ formally point $$$ c $$$ lie within axis - aligned minimum bound box point $$$ a $$$ $$$ b $$$ $$$ \min ( x_a x_b ) \le x_c \le \max ( x_a x_b ) $$$ $$$ \min ( y_a y_b ) \le y_c \le \max ( y_a y_b ) $$$ $$$ \min ( z_a z_b ) \le z_c \le \max ( z_a z_b ) $$$ note bound box might degenerate find a way remove point $$$ \frac { n } { 2 } $$$ snap first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 2000 $$$ ; $$$ n $$$ even ) denote number point next $$$ n $$$ line contain three integers $$$ x_i $$$ $$$ y_i $$$ $$$ z_i $$$ ( $$$ -100000000 \le x_i y_i z_i \le 100000000 $$$ ) denote coordinate $$$ i $$$ -th point two point coincide output $$$ \frac { n } { 2 } $$$ pair integers $$$ a_i b_i $$$ ( $$$ 1 \le a_i b_i \le n $$$ ) denote indices point remove snap $$$ i $$$ every integer $$$ 1 $$$ $$$ n $$$ inclusive must appear output exactly show always possible remove point many solutions output first example point correspond bound box look like ( draw two dimension simplicity point lie $$$ z = 0 $$$ plane ) note order remove matter : example point $$$ 5 $$$ $$$ 1 $$$ n't form a perfectly balance pair initially point $$$ 3 $$$ remove,"['constructive algorithms', 'geometry', 'greedy']",1700.0
1227/G,"give integer array $$$ a_1 a_2 \dots a_n $$$ $$$ a_i $$$ represent number block $$$ i $$$ -th position guarantee $$$ 1 \le a_i \le n $$$ one operation choose a subset indices give array remove one block indices ca n't remove a block a position without block subsets choose different ( unique ) need remove block array use $$$ n+1 $$$ operations prove answer always exist first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000 $$$ ) — length give array second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — number block position $$$ 1 2 \dots n $$$ first line print integer $$$ op $$$ ( $$$ 0 \le op \le n+1 $$$ ) follow $$$ op $$$ line print a binary string $$$ s $$$ length $$$ n $$$ $$$ s_i= $$$ ' 0 ' mean position $$$ i $$$ choose subset otherwise $$$ s_i $$$ equal ' 1 ' position $$$ i $$$ choose subset binary string distinct ( unique ) $$$ a_i $$$ equal sum $$$ s_i $$$ among choose binary string multiple possible answer print prove answer always exist first example number block decrease like : $$$ \lbrace 5,5,5,5,5 \rbrace \to \lbrace <unknown> \rbrace \to \lbrace <unknown> \rbrace \to \lbrace <unknown> \rbrace \to \lbrace <unknown> \rbrace \to \lbrace <unknown> \rbrace \to \lbrace 0,0,0,0,0 \rbrace $$$ note operation differ others",['constructive algorithms'],2600.0
1157/F,$$$ n $$$ people a row height $$$ i $$$ -th person $$$ a_i $$$ choose subset people try arrange a balance circle a balance circle order people difference heights adjacent people $$$ 1 $$$ example let heights choose people $$$ [ a _ { i_1 } a _ { i_2 } \dots a _ { i_k } ] $$$ $$$ k $$$ number people choose condition $$$ |a _ { i_j } - a _ { i _ { j + 1 } } | \le 1 $$$ satisfy $$$ j $$$ $$$ 1 $$$ $$$ k-1 $$$ condition $$$ |a _ { i_1 } - a _ { i_k } | \le 1 $$$ also satisfy $$$ |x| $$$ mean absolute value $$$ x $$$ obvious circle consist one person balance task choose maximum number people construct a balance circle consist choose people obvious circle consist one person balance answer always exist first line input contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number people second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 200000 $$$ ) $$$ a_i $$$ height $$$ i $$$ -th person first line output print $$$ k $$$ — number people maximum balance circle second line print $$$ k $$$ integers $$$ res_1 res_2 \dots <unknown> $$$ $$$ <unknown> $$$ height $$$ j $$$ -th person maximum balance circle condition $$$ |res _ { j } - res _ { j + 1 } | \le 1 $$$ satisfy $$$ j $$$ $$$ 1 $$$ $$$ k-1 $$$ condition $$$ |res _ { 1 } - res _ { k } | \le 1 $$$ also satisfy,"['constructive algorithms', 'dp', 'greedy']",2000.0
1131/F,"asya love animals much recently purchase $$$ n $$$ kitten enumerate $$$ 1 $$$ $$$ n $$$ put cage cage consist one row $$$ n $$$ cells enumerate integers $$$ 1 $$$ $$$ n $$$ leave right adjacent cells a partially transparent partition wall hence $$$ n - 1 $$$ partition originally initially cell contain exactly one kitten number observe kitten asya notice friendly often a pair kitten neighbor cells want play together asya start remove partition neighbor cells particular day $$$ i $$$ asya : since asya never <unknown> partition back $$$ n - 1 $$$ days cage contain a single cell kitten every day asya remember number kitten $$$ x_i $$$ $$$ y_i $$$ want play together however n't remember place kitten cage begin please help find possible initial arrangement kitten $$$ n $$$ cells first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 150\,000 $$$ ) — number kitten follow $$$ n - 1 $$$ line contain integers $$$ x_i $$$ $$$ y_i $$$ ( $$$ 1 \le x_i y_i \le n $$$ $$$ x_i \ne y_i $$$ ) — indices kitten get together due border removal correspond day 's guarantee kitten $$$ x_i $$$ $$$ y_i $$$ different cells day every cell $$$ 1 $$$ $$$ n $$$ print a single integer — index kitten $$$ 1 $$$ $$$ n $$$ originally print integers must distinct 's guarantee least one answer possible case multiple possible answer print answer example contain one several possible initial arrangements kitten picture show cells unite initial arrangement note kitten want play together day indeed adjacent cells",['constructive algorithms'],1700.0
1129/B,"consider follow problem : give array $$$ a $$$ contain $$$ n $$$ integers ( index $$$ 0 $$$ $$$ n-1 $$$ ) find $$$ \max\limits _ { 0 \leq l \leq r \leq n-1 } \sum\limits _ { l \leq i \leq r } ( r - l+1 ) \cdot a_i $$$ problem $$$ 1 \leq n \leq 2\,000 $$$ $$$ |a_i| \leq 1000000 $$$ attempt solve problem describe alice quickly come a <unknown> - fast greedy algorithm cod implementation pseudocode follow : also see alice 's idea entirely correct example suppose $$$ n = 4 $$$ $$$ a = [ 6 -8 7 <unknown> ] $$$ , find_answer ( n a ) would return $$$ 7 $$$ correct answer $$$ 3 \cdot ( 6 - 8 + 7 ) = 15 $$$ tell alice solution incorrect believe say give integer $$$ k $$$ find sequence $$$ a $$$ $$$ n $$$ integers correct answer answer produce alice 's algorithm differ exactly $$$ k $$$ note although choice $$$ n $$$ content sequence must still follow constraints earlier give : $$$ 1 \leq n \leq 2\,000 $$$ absolute value element exceed $$$ 1000000 $$$ sequence determine first line contain one integer $$$ k $$$ ( $$$ 1 \leq k \leq 1000000000 $$$ ) seek sequence print ` ` -1 '' otherwise first line print one integer $$$ n $$$ ( $$$ 1 \leq n \leq 2\,000 $$$ ) denote number elements sequence , second line print $$$ n $$$ space - separated integers : $$$ a_0 a_1 \ldots a _ { n-1 } $$$ ( $$$ |a_i| \leq 1000000 $$$ ) first sample correspond example give problem statement second sample one answer $$$ n = 7 $$$ $$$ a = [ 30 -12 -99 123 -2 245 -300 ] $$$ case find_answer ( n a ) return $$$ 1098 $$$ correct answer $$$ <unknown> $$$",['constructive algorithms'],2000.0
1090/C,"santa prepare box present $$$ n $$$ kid one box kid $$$ m $$$ kinds present : balloon sweets chocolate bar toy cars ... a child would disappoint receive two present kind kinds present one box distinct pack present santa realize different box contain different number present would unfair children decide move present box make size similar movements difference maximal minimal number present a box must small possible present box still distinct santa want finish job fast possible want minimize number movements require complete task give set present box find shortest sequence movements present box minimize difference size smallest largest box keep present box distinct first line input contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 100\ 000 $$$ ) number box number kinds present denote present integers $$$ 1 $$$ $$$ m $$$ follow $$$ n $$$ line contain description one box begin integer $$$ s_i $$$ ( $$$ s_i \geq 0 $$$ ) number present box $$$ s_i $$$ distinct integers $$$ 1 $$$ $$$ m $$$ follow denote kinds present box total number present box exceed $$$ 500\,000 $$$ print one integer $$$ k $$$ first line output number movements shortest sequence make size box differ one print $$$ k $$$ line describe movements order perform movement describe three integers $$$ from_i $$$ $$$ to_i $$$ $$$ kind_i $$$ mean present kind $$$ kind_i $$$ move box number $$$ from_i $$$ box number $$$ to_i $$$ box number one order give input moment movement perform present kind $$$ kind_i $$$ must present box number $$$ from_i $$$ perform move box must contain two present kind several optimal solutions output","['constructive algorithms', 'data structures']",2400.0
1078/E,everyone know computers become faster faster recently berland scientists build a machine move back time ! specifically work follow infinite grid a robot stand one cells cell grid either empty contain 0 1 . machine also a program consist instructions handle one one instruction represent exactly one symbol ( letter digit ) take exactly one unit time ( say second ) perform except last type operation ( 's describe ) : example let board completely empty program <unknown> let robot initially $$$ ( 0 0 ) $$$ berland scientists want use machine practice example want able add two integers assume initial state machine follow : ask write a program whichnote restrictions cells particular may a digit leave robot instructions test give $$$ 1000 $$$ pair $$$ ( a b ) $$$ program must work pair also since machine 's memory big program must consist $$$ 100000 $$$ instructions first line contain integer $$$ t $$$ ( $$$ 1\le t\le 1000 $$$ ) stand number testcases next $$$ t $$$ line consist two positive integers $$$ a $$$ $$$ b $$$ ( $$$ 1\le a b < 2^ { 30 } $$$ ) decimal output line consist $$$ 100000 $$$ symbols <unknown> stand program note formally may output different program different test,['constructive algorithms'],3400.0
1031/E,give array $$$ a $$$ length $$$ n $$$ consist zero ones perform follow operation multiple time operation consist two step : determine possible make elements array equal zero yes print operations lead all - zero state solution contain $$$ ( \lfloor \frac { n } { 3 } \rfloor + 12 ) $$$ operations $$$ \lfloor q \rfloor $$$ denote number $$$ q $$$ round show possible make elements equal zero number operations whenever possible first line contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 100000 $$$ ) — length array second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1 $$$ ) — elements array print ` ` yes '' ( without quote ) answer exist otherwise print ` ` '' ( without quote ) print letter case ( upper lower ) answer second line print integer $$$ m $$$ ( $$$ 0 \le m \le ( \lfloor \frac { n } { 3 } \rfloor + 12 ) $$$ ) — number operations answer ( $$$ i + 2 $$$ ) -th line print $$$ i $$$ -th operations — integers $$$ x_i y_i z_i $$$ print arbitrary order first sample show output correspond follow solution : answer also possible test number operations exceed $$$ \lfloor \frac { 5 } { 3 } \rfloor + 12 = 1 + 12 = 13 $$$ second sample available operation flip elements way possible obtain array 0 1 0 1 0 1 impossible make elements equal zero,['constructive algorithms'],2600.0
952/G,problem write a simple code generator a 2d program language derive brainfuck code language a rectangular grid character ' . ' ' x ' code convert a brainfuck program follow : character read usual order ( top bottom leave right ) ' x ' character convert a brainfuck instruction execute instruction define leave top right neighbor ' x ' character use follow conversion table : give a string output a program describe language print string download language interpreter use judge : https : //assets.codeforces.com / <unknown> / <unknown> - <unknown> ( use <unknown> compile code ) note several implementation detail : input consist a single string character ascii cod 33 ( ' ! ' ) 122 ( ' z ' ) inclusive length string 1 10 character inclusive output a program describe language execute print give message example correspond follow brainfuck program : triangular block <unknown> first memory cell set value second memory cell 36 - ascii code ' $ ' character next line triangular block move memory pointer second memory cell next three line print ' $ ' character three time,['constructive algorithms'],2200.0
933/E,east west home best 's family reunion <unknown> necessity lunar new year celebration put a position reunion dinner little tommy play a game family a concise <unknown> game : obviously every game end n - 1 descensions please share solution game lowest cost first line contain one integer n ( 1 ≤ n ≤ 3·105 ) second line contain n space - separated integers p1 p2 ... pn ( 0 ≤ pi ≤ 109 i = 1 2 ... n ) first line print one integer number descensions m ( 0 ≤ m ≤ n - 1 ) next m line print descensions chronologically precisely line next m line print one integer i ( 1 ≤ i < n ) represent a <unknown> would operate pi pi + 1 descensions could utilize top bottom many possible solutions reach minimal cost print first sample one possible best solution cost 1 + 1 = 2 . second sample one possible best solution cost 1 + 1 + 1 = 3,"['constructive algorithms', 'dp']",3200.0
898/E,ann borya n pile candy n even number ai candy pile number i. ann like number square integer borya n't like number square integer one move guy select pile candy add one candy ( candy new n't belong pile ) remove one candy ( least one candy pile ) find minimal number move require make exactly n / 2 pile contain number candy a square integer exactly n / 2 pile contain number candy a square integer first line contain one even integer n ( 2 ≤ n ≤ 200 000 ) — number pile candy second line contain sequence integers a1 a2 ... ( 0 ≤ ai ≤ 109 ) — amount candy pile output minimal number step require make exactly n / 2 pile contain number candy a square integer exactly n / 2 pile contain number candy a square integer condition already satisfy output 0 . first example satisfy condition two move move add one candy second pile size second pile become 16 . borya ann two pile number candy a square integer ( second fourth pile ) two pile number candy a square integer ( first third pile ) second example add two candy three pile,"['constructive algorithms', 'greedy']",1600.0
865/D,"perfectly predict price a certain stock next n days would like profit knowledge want <unknown> one share stock per day , day either buy one share sell one share nothing initially zero share sell share n't end n days would like zero share want much money possible input begin integer n ( 2 ≤ n ≤ 3·105 ) number days follow a line exactly n integers p1 p2 ... pn ( 1 ≤ pi ≤ 106 ) price one share stock i - th day give pi print maximum amount money end end n days first example buy a share 5 buy another 4 sell one 9 another 12 . buy 2 sell 10 . total profit - 5 - 4 + 9 + 12 - 2 + 10 = 20","['constructive algorithms', 'data structures', 'greedy']",2400.0
862/C,mahmoud ehab third stage adventure know dr . evil like set time wo n't show set large collection ask create a new set replenish beautiful collection set dr . evil favorite evil integer x. ask mahmoud ehab find a set n distinct non - negative integers bitwise - xor sum integers exactly x. dr . evil n't like big number number set n't greater 106 . line contain two integers n x ( 1 ≤ n ≤ 105 0 ≤ x ≤ 105 ) — number elements set desire bitwise - xor respectively set print ` ` '' ( without quote ) otherwise first line print ` ` yes '' ( without quote ) second line print n distinct integers denote elements set order multiple solutions print read bitwise - xor operation : https : //en.wikipedia.org / wiki / bitwise_operation # <unknown> first sample second sample,['constructive algorithms'],1900.0
740/B,"little alyona celebrate happy birthday ! mother array n flower flower mood mood i - th flower ai mood positive zero negative let 's define a subarray a segment consecutive flower mother suggest set subarrays alyona want choose several subarrays suggest mother , flower add girl 's happiness mood multiply number choose subarrays flower example consider case mother 5 flower moods equal 1 - 2 1 3 - 4 . suppose mother suggest subarrays ( 1 - 2 ) ( 3 - 4 ) ( 1 3 ) ( 1 - 2 1 3 ) girl choose third fourth subarrays : thus total 1 + ( - 2 ) + 2 + 6 + 0 = 7 add girl 's happiness alyona want choose subarrays suggest mother value add happiness would large possible help ! alyona choose number subarrays even 0 suggest mother first line contain two integers n m ( 1 ≤ n m ≤ 100 ) — number flower number subarrays suggest mother second line contain flower moods — n integers a1 a2 ... ( - 100 ≤ ai ≤ 100 ) next m line contain description subarrays suggest mother i - th line contain two integers li ri ( 1 ≤ li ≤ ri ≤ n ) denote subarray a [ li ] a [ li + 1 ] ... a [ ri ] subarray encounter print single integer — maximum possible value add alyona 's happiness first example situation describe statements second example alyona choose subarrays third example answer 0 alyona choose none subarrays",['constructive algorithms'],1200.0
727/D,"organizers a program contest decide present t - shirts participants six different t - shirts size problem : s m l xl xxl xxxl ( size list increase order ) t - shirts already prepare size s xxxl give number t - shirts size registration organizers ask n participants t - shirt size want a participant hesitate two size could specify two neighbor size — mean two size suit write a program determine whether possible present a t - shirt participant competition , course participant get a t - shirt proper size : possible program find valid distribution t - shirts first line input contain six non - negative integers — number t - shirts size number give size s m l xl xxl xxxl respectively total number t - shirts n't exceed 100 000 . second line contain positive integer n ( 1 ≤ n ≤ 100 000 ) — number participants follow n line contain size specify participants one line per participant i - th line contain information provide i - th participant : single size two size separate comma ( without space ) two size size write increase order guarantee two size separate comma neighbor possible present a t - shirt participant print « » ( without quote ) otherwise print n + 1 line first line print « yes » ( without quote ) follow n line print t - shirt size orginizers give participants one per line order participants input multiple solutions print","['constructive algorithms', 'greedy']",1800.0
605/A,infinitely long railway a train consist n cars number 1 n ( number cars distinct ) position arbitrary order david blaine want sort railway cars order increase number one move make one cars disappear place teleport either begin train end train desire minimum number action david blaine need perform order sort train ? first line input contain integer n ( 1 ≤ n ≤ 100 000 ) — number cars train second line contain n integers pi ( 1 ≤ pi ≤ n pi ≠ pj i ≠ j ) — sequence number cars train print a single integer — minimum number action need sort railway cars first sample need first teleport 4 - th car 5 - th car end train,"['constructive algorithms', 'greedy']",1600.0
584/C,marina love string length vasya love a third string different exactly t character help vasya find least one string formally give two string s1 s2 length n number t. let 's denote f ( a b ) number character string a b different task find string s3 length n f ( s1 s3 ) = f ( s2 s3 ) = t. string print - 1 . first line contain two integers n t ( 1 ≤ n ≤ 105 0 ≤ t ≤ n ) second line contain string s1 length n consist lowercase english letter third line contain string s2 length n consist lowercase english letter print a string length n differ string s1 s2 exactly t character string consist lowercase english letter string n't exist print -1,"['constructive algorithms', 'greedy', 'strings']",1700.0
534/D,february <unknown> n students come center train olympiad programmers ( ctop ) berland state university come one one one another go sit desk greet present room shake hand students come stay ctop end day never leave time three students could join together start participate a team contest last end day team distract contest a minute another student come greet present shake hand members contest write team team consist exactly three students student could become a member one team different team could start write contest different time give many present people shake hand student get a possible order students could come ctop order exist print impossible please note students could work independently end day without participate a team contest first line contain integer n ( 1 ≤ n ≤ 2·105 ) — number students come ctop next line contain n integers a1 a2 ... ( 0 ≤ ai < n ) ai number students i - th student shake hand seek order students exist print first line ` ` possible '' second line print permutation students ' number define order students enter center number i stand leave number j permutation mean i - th student come earlier j - th student multiple answer print seek order students n't exist a single line print ` ` impossible '' first sample statement order events could follow : second sample statement order events could follow : third sample statement order events restore unambiguously :,"['constructive algorithms', 'data structures', 'greedy']",1900.0
484/E,bizon champion recently finish paint wood fence fence consist a sequence n panel 1 meter width arbitrary height i - th panel 's height hi meter adjacent plank follow without a gap bizon paint fence decide put a ` ` sale '' sign sign draw a rectangular piece paper place fence side sign parallel fence panel also align edge panel bizon champion introduce follow constraints sign position : sign really pretty bizon champion want sign 's height large possible give description fence several query place sign query print maximum possible height sign place correspond segment fence give fix width sign first line input contain integer n — number panel fence ( 1 ≤ n ≤ 105 ) second line contain n space - separated integers hi — heights panel ( 1 ≤ hi ≤ 109 ) third line contain integer m — number query ( 1 ≤ m ≤ 105 ) next m line contain descriptions query query represent three integers l r w ( 1 ≤ l ≤ r ≤ n 1 ≤ w ≤ r - l + 1 ) — segment fence width sign respectively query print answer a separate line — maximum height sign put correspond segment fence condition satisfy fence describe sample look follow : possible position sign query give,"['constructive algorithms', 'data structures']",2500.0
482/B,'ll call array n non - negative integers a [ 1 ] a [ 2 ] ... a [ n ] interest meet m constraints i - th m constraints consist three integers li ri qi ( 1 ≤ li ≤ ri ≤ n ) mean value equal qi task find interest array n elements state array n't exist expression x & y mean bitwise number x y. program languages c++ java python operation represent ` ` & '' pascal — ` ` '' first line contain two integers n m ( 1 ≤ n ≤ 105 1 ≤ m ≤ 105 ) — number elements array number limit next m line contain three integers li ri qi ( 1 ≤ li ≤ ri ≤ n 0 ≤ qi < 230 ) describe i - th limit interest array exist first line print ` ` yes '' ( without quote ) second line print n integers a [ 1 ] a [ 2 ] ... a [ n ] ( 0 ≤ a [ i ] < 230 ) <unknown> interest array multiple answer print interest array n't exist print ` ` '' ( without quote ) single line,"['constructive algorithms', 'data structures']",1800.0
341/E,"iahub play uncommon game initially n box number 1 2 3 ... n. box number candy describe a sequence a1 a2 ... , number ak represent number candy box k. goal game move candy exactly two box rest n - 2 box must contain zero candy iahub allow several ( possible zero ) move move choose two different box i j ai ≤ aj , iahub move box j box i exactly ai candy obviously two box equal number candy box number j become empty task give a set move iahub archive goal game iahub ca n't win game give configuration box output -1 . please note case exist a solution n't need print solution use minimal number move first line input contain integer n ( 3 ≤ n ≤ 1000 ) next line contain n non - negative integers : a1 a2 ... — sequence elements guarantee sum number sequence a 106 . case exist solution output -1 . otherwise first line output integer c ( 0 ≤ c ≤ 106 ) represent number move solution next c line contain two integers i j ( 1 ≤ i j ≤ n i ≠ j ) : integers i j kth line mean k - th move move candy j - th box i - th one first sample first move box contain 3 12 3 candy second move box contain 6 12 0 candy candy exactly 2 box second sample observe give configuration valid candy a single box two box also move wo n't change configuration exist solution third sample candy already 2 box hence move need","['constructive algorithms', 'greedy']",3000.0
323/A,give a cube size k × k × k consist unit cub two unit cub consider neighbour common face task paint k3 unit cub one two colour ( black white ) follow condition must satisfy : first line contain integer k ( 1 ≤ k ≤ 100 ) size cube print -1 solution otherwise print require paint cube consequently layer print a k × k matrix first k line show first layer cube paint follow k line print a k × k matrix — way second layer paint last k - th layer note orientation cube space matter mark a white unit cube symbol ` ` w '' a black one ` ` b '' use format output data give test sample may print extra empty line ignore,['constructive algorithms'],1600.0
297/A,fish polar bear alice bob wait fish bite polar bear get bore come a game first alice bob write a 01 - string ( string contain character ` ` 0 '' ` ` 1 '' ) a b. try turn a b use two type operations : use many operations want problem possible turn a b ? parity a 01 - string 1 odd number ` ` 1 '' s string 0 otherwise first line contain string a second line contain string b ( 1 ≤ |a| |b| ≤ 1000 ) string contain character ` ` 0 '' ` ` 1 '' |x| denote length string x. print ` ` yes '' ( without quote ) possible turn a b ` ` '' ( without quote ) otherwise first sample step follow : 01011 → 1011 → 011 → 0110,['constructive algorithms'],1700.0
290/E,famous joke program language hq9 + 4 command problem explore subset — a language call hq ... line input a string 1 106 character long output ` ` yes '' ` ` '' rest problem statement destroy a <unknown> <unknown> terribly sorry inconvenience,['constructive algorithms'],2500.0
220/B,little elephant love play array array a consist n positive integers index 1 n. let 's denote number index i ai additionally little elephant m query array query characterise a pair integers lj rj ( 1 ≤ lj ≤ rj ≤ n ) query lj rj little elephant count many number x exist number x occur exactly x time among number alj alj + 1 ... <unknown> help little elephant count answer query first line contain two space - separated integers n m ( 1 ≤ n m ≤ 105 ) — size array a number query next line contain n space - separated positive integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) next m line contain descriptions query one per line j - th line contain description j - th query two space - separated integers lj rj ( 1 ≤ lj ≤ rj ≤ n ) m line print m integers — answer query j - th line contain answer j - th query,"['constructive algorithms', 'data structures']",1800.0
198/D,' ve get n × n × n cube split unit cub task number unit cub cube positive integers 1 n3 : find print require numeration unit cub cube first line contain a single integer n ( 1 ≤ n ≤ 50 ) — size cube whose unit cub need number print layer cube n n × n matrices separate new line print layer order follow cube see sample clarifications guarantee always a solution meet condition give problem statement sample cub size 2 × 2 × 2 number integers 1 ... 8 5 ... 12,['constructive algorithms'],2700.0
176/C,"two players play a game game play a rectangular board n × m square begin game two different square board two chip first player 's goal shift chip square second player aim stop first one a tube superglue 'll describe rule game detail players move turn first player begin every move first player choose one <unknown> chip shift one square leave right , allow move a chip beyond board edge begin a turn square board may cover a glue first player move chip square case chip get tightly glue move longer move second player select one free square ( contain a chip a glue ) cover superglue glue dry long square cover remain <unknown> end game , move first player chip square first player win first player make a move ( chip glue ) second player win note situation second player make a move impossible — always spread glue square first player move chip clarify case chip glue square case first player win game end soon chip square condition loss ( inability move ) arise know board size position two chip begin game board square glue - free find win players play optimally first line contain six integers n m x1 y1 x2 y2 — board size coordinate first second chip correspondingly ( 1 ≤ n m ≤ 100 ; 2 ≤ n × m ; 1 ≤ x1 x2 ≤ n ; 1 ≤ y1 y2 ≤ m ) number line separate single space guarantee chip locate different square first player win print ` ` first '' without quote otherwise print ` ` second '' without quote",['constructive algorithms'],2000.0
81/D,polycarp love take picture also show photos friends personal website recently instal a widget display n photos scroll option moment time widget display exactly one photograph option show previous / next one first photo switch second one n - th one second photo switch third one first one etc thus navigation perform a cycle polycarp 's collection consist m photo albums i - th album contain ai photos polycarp want choose n photos put a new widget make watch photos interest visitors go post picture two photos one album neighbor ( photo exactly two neighbor first photo 's neighbor second n - th one ) help polycarp compile a photo gallery select n photos collection put order two photos one album go one first line contain two integers n m ( 3 ≤ n ≤ 1000 1 ≤ m ≤ 40 ) n number photos widget m number albums second line contain m integers a1 a2 ... ( 1 ≤ ai ≤ 1000 ) ai number photos i - th album print single number -1 solution otherwise print n number t1 t2 ... tn ti represent number album i - th picture widget albums number 1 order appearance input several solutions print,"['constructive algorithms', 'greedy']",2100.0
74/E,a square box 6 × 6 size contain 36 chip 1 × 1 size chip contain 36 different character — ` ` 0 '' - '' 9 '' ` ` a '' - '' z '' exactly one chip character allow make follow operations : may choose one 6 row one 6 columns cyclically shift chip one position leave right ( row ) upwards downwards ( column ) operations allow perform several time solve puzzle shift chip use describe operations write increase order ( exactly equal right picture ) example solve puzzle show a picture write a program find sequence operations solve puzzle sequence necessarily shortest exceed limit 10000 operations guarantee solution always exist input data represent 6 line contain 6 character puzzle 's initial position line contain character string ` ` <unknown> '' exactly first line print number n number operations next n line print sequence operations one per line operation describe a word consist two character first character show direction row column shift possible directions ` ` l '' ` ` r '' ( leave right correspondingly shift a row ) ` ` u '' ` ` d '' ( upwards downwards correspondingly shift a column ) second character number row ( column ) integer ` ` 1 '' ` ` 6 '' row number top bottom columns number leave right number operations exceed 104 . several solutions print,['constructive algorithms'],2800.0
10/E,billy investigate question apply greedy algorithm different spheres life moment study application greedy algorithm problem change amount n coin different face value coin value limit number task collect sum x minimum amount coin greedy algorithm step take coin highest face value exceed x. obviously among coin ' face value exist face value 1 sum x collect help greedy algorithm however greedy algorithm always give optimal representation sum i.e representation minimum amount coin example face value { 1 3 4 } ask collect sum 6 greedy algorithm represent sum 4 + 1 + 1 optimal representation 3 + 3 contain one coin less give set face value find exist a sum x greedy algorithm collect a non - optimal way a sum exist find smallest sum first line contain integer n ( 1 ≤ n ≤ 400 ) — amount coin ' face value second line contain n integers ai ( 1 ≤ ai ≤ 109 ) describe face value guarantee a1 > a2 > ... > = 1 . greedy algorithm collect sum optimal way output -1 . otherwise output smallest sum greedy algorithm collect a non - optimal way,['constructive algorithms'],2600.0
1582/G,kuzya start go school give math homework give array $$$ a $$$ length $$$ n $$$ array symbols $$$ b $$$ length $$$ n $$$ consist symbols ' * ' ' / ' let 's denote a path calculations a segment $$$ [ l ; r ] $$$ ( $$$ 1 \le l \le r \le n $$$ ) follow way : example let $$$ a= [ 7 $$$ $$$ 12 $$$ $$$ 3 $$$ $$$ 5 $$$ $$$ 4 $$$ $$$ 10 $$$ $$$ 9 ] $$$ $$$ b= [ / $$$ $$$ * $$$ $$$ / $$$ $$$ / $$$ $$$ / $$$ $$$ * $$$ $$$ * ] $$$ $$$ l=2 $$$ $$$ r=6 $$$ path calculations segment $$$ [ 12 $$$ $$$ 4 $$$ $$$ 0.8 $$$ $$$ 0.2 $$$ $$$ 2 ] $$$ let 's call a segment $$$ [ l ; r ] $$$ simple path calculations contain integer number kuzya need find number simple segment $$$ [ l ; r ] $$$ ( $$$ 1 \le l \le r \le n $$$ ) since obviously time interest calculations option ask write a program get find number ! first line contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 1000000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 1000000 $$$ ) third line contain $$$ n $$$ symbols without space — array $$$ b_1 b_2 \ldots b_n $$$ ( $$$ b_i= $$$ ' / ' $$$ b_i= $$$ ' * ' every $$$ 1 \le i \le n $$$ ) print a single integer — number simple segment $$$ [ l ; r ] $$$,['data structures'],2600.0
1113/B,one day sasha visit farmer 2d famous magnetic farm farm crop grow due influence a special magnetic field maintain magnetic field provide $$$ n $$$ machine power $$$ i $$$ -th machine $$$ a_i $$$ year 2d decide cultivate a new culture exactly n't say successful growth new culture necessary slightly change power machine 2d choose arbitrary integer $$$ x $$$ choose one machine reduce power machine $$$ x $$$ time time increase power one another machine $$$ x $$$ time ( power machine must stay positive integers ) note may want formally 2d choose two indices $$$ i $$$ $$$ j $$$ one integer $$$ x $$$ $$$ x $$$ a divisor $$$ a_i $$$ change power follow : $$$ a_i = \frac { a_i } { x } $$$ $$$ a_j = a_j \cdot x $$$ sasha curious 's want calculate minimum total power farmer reach many machine sasha ca n't cope computations help ! first line contain one integer $$$ n $$$ ( $$$ 2 \le n \le 50000 $$$ ) — number machine second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 100 $$$ ) — power machine print one integer — minimum total power first example farmer reduce power $$$ 4 $$$ -th machine $$$ 2 $$$ time increase power $$$ 1 $$$ -st machine $$$ 2 $$$ time power : $$$ [ 2 2 3 2 5 ] $$$ second example farmer reduce power $$$ 3 $$$ -rd machine $$$ 2 $$$ time increase power $$$ 2 $$$ -nd machine $$$ 2 $$$ time time farmer leave total power wo n't change third example optimal leave,['greedy'],1300.0
1109/E,egor like math long ago get highest degree recognition math community — egor become a red mathematician regard sasha decide congratulate egor give a math test a present test contain array $$$ a $$$ integers length $$$ n $$$ exactly $$$ q $$$ query query three type : sum big sasha ask egor calculate sum modulo integer $$$ mod $$$ since egor a red mathematician n't enough time solve easy task time n't want anger sasha 's ask help find answer query $$$ 3 $$$ -rd type first line contain two integers $$$ n $$$ $$$ mod $$$ ( $$$ 1 \le n \le 100000 $$$ $$$ 2 \le mod \le 1000000000 + 9 $$$ ) — size array number $$$ mod $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 100000 $$$ ) — array third line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 100000 $$$ ) — number query next $$$ q $$$ line satisfy one follow format : guarantee least one query $$$ 3 $$$ -rd type query $$$ 3 $$$ -rd type print answer a new line modulo $$$ mod $$$ first example : inital array $$$ [ 4 1 2 3 5 ] $$$ second example : inital array $$$ [ 4 1 2 3 5 ] $$$,['data structures'],2700.0
914/D,bash like play array array a1 a2 ... n integers like guess greatest common divisor ( gcd ) different segment array course sometimes guess correct however bash satisfy guess almost correct suppose guess gcd elements range [ l r ] a x. consider guess almost correct change one element segment gcd segment x make change note guess n't actually change array — wonder gcd segment make x. apart also sometimes make change array since ca n't figure bash want tell guess almost correct formally process q query one follow form : note : array 1 - indexed first line contain integer n ( 1 ≤ n ≤ 5·105 ) — size array second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) — elements array third line contain integer q ( 1 ≤ q ≤ 4·105 ) — number query next q line describe query may one follow form : guarantee least one query first type query first type output ` ` yes '' ( without quote ) bash 's guess almost correct ` ` '' ( without quote ) otherwise first sample array initially { 2 6 3 } query 1 first two number already gcd 2 . query 2 achieve a gcd 3 change first element array 3 . note change make query type 1 temporary get reflect array query 3 array { 9 6 3 } query 4 matter element change get gcd range 2,['data structures'],1900.0
594/D,today a math lesson teacher tell vovochka euler function a positive integer φ ( n ) arithmetic function count positive integers less equal n relatively prime n. number 1 coprime positive integers φ ( 1 ) = 1 . teacher give vovochka array n positive integers a1 a2 ... a task process q query li ri — calculate print modulo 109 + 7 . hard a second grade school student ' ve decide help vovochka first line input contain number n ( 1 ≤ n ≤ 200 000 ) — length array give vovochka second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 106 ) third line contain integer q ( 1 ≤ q ≤ 200 000 ) — number query next q line contain query one per line query define boundaries segment li ri ( 1 ≤ li ≤ ri ≤ n ) print q number — value euler function query calculate modulo 109 + 7 . second sample value calculate like :,['data structures'],2500.0
1827/B1,difference problem hard version constraints $$$ t $$$ $$$ n $$$ give array $$$ a $$$ consist $$$ n $$$ distinct integers $$$ a_1 a_2 \ldots a_n $$$ define beauty array $$$ p_1 p_2 \ldots p_k $$$ minimum amount time need sort array use arbitrary number range - sort operations range - sort operation follow : please calculate sum beauty subarrays array $$$ a $$$ a subarray array define a sequence consecutive elements array test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 5000 $$$ ) description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 5000 $$$ ) — length array $$$ a $$$ second line test case consist $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1\le a_i\le 1000000000 $$$ ) guarantee elements $$$ a $$$ pairwise distinct guarantee sum $$$ n $$$ test case exceed $$$ 5000 $$$ test case output sum beauty subarrays array $$$ a $$$ first test case : second test case :,"['dp', 'greedy']",2000.0
1736/C2,"hard version problem version query note multiple test case version make hack versions problem solve array $$$ b $$$ length $$$ m $$$ good $$$ i $$$ $$$ i $$$ -th element greater equal $$$ i $$$ word $$$ b $$$ good $$$ b_i \geq i $$$ $$$ i $$$ ( $$$ 1 \leq i \leq m $$$ ) give array $$$ a $$$ consist $$$ n $$$ positive integers ask $$$ q $$$ query query give two integers $$$ p $$$ $$$ x $$$ ( $$$ 1 \leq p x \leq n $$$ ) $$$ a_p : = x $$$ ( assign $$$ x $$$ $$$ a_p $$$ ) update array find number pair indices $$$ ( l r ) $$$ $$$ 1 \le l \le r \le n $$$ array $$$ [ a_l a _ { l+1 } \ldots a_r ] $$$ good note query independent mean query initial array $$$ a $$$ restore first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) third line contain integer $$$ q $$$ ( $$$ 1 \leq q \leq 200000 $$$ ) — number query next $$$ q $$$ line contain two integers $$$ p_j $$$ $$$ x_j $$$ ( $$$ 1 \leq p_j x_j \leq n $$$ ) – description $$$ j $$$ -th query query print number suitable pair indices make change note first example first query update $$$ a= [ <unknown> ] $$$ $$$ ( 1,1 ) $$$ $$$ ( 2,2 ) $$$ $$$ ( 3,3 ) $$$ $$$ ( 4,4 ) $$$ $$$ ( 1,2 ) $$$ $$$ ( 3,4 ) $$$ suitable pair second query update $$$ a= [ <unknown> ] $$$ subarrays $$$ a $$$ good third query update $$$ a= [ <unknown> ] $$$ $$$ ( 1,1 ) $$$ $$$ ( 2,2 ) $$$ $$$ ( 3,3 ) $$$ $$$ ( 4,4 ) $$$ $$$ ( 3,4 ) $$$ suitable","['data structures', 'dp']",2400.0
1721/C,"give array $$$ a_1 a_2 \dots a_n $$$ sort non - descending order decide perform follow step create array $$$ b_1 b_2 \dots b_n $$$ : give result array $$$ b $$$ index $$$ i $$$ calculate minimum maximum possible value $$$ d_i $$$ choose order get give array $$$ b $$$ note minimum ( maximum ) $$$ d_i $$$ -s independent i. e. obtain different possible array $$$ d $$$ first line contain single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — length array $$$ a $$$ $$$ b $$$ $$$ d $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ; $$$ a_i \le a _ { i+1 } $$$ ) — array $$$ a $$$ non - descending order third line contain $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ ( $$$ 1 \le b_i \le 1000000000 $$$ ; $$$ b_i \le b _ { i+1 } $$$ ) — array $$$ b $$$ non - descending order additional constraints input : test case print two line first line print $$$ n $$$ integers $$$ d_1^ { min } d_2^ { min } \dots d_n^ { min } $$$ $$$ d_i^ { min } $$$ minimum possible value add $$$ a_i $$$ secondly print $$$ n $$$ integers $$$ d_1^ { max } d_2^ { max } \dots d_n^ { max } $$$ $$$ d_i^ { max } $$$ maximum possible value add $$$ a_i $$$ $$$ d_i^ { min } $$$ $$$ d_i^ { max } $$$ value independent word $$$ i $$$ $$$ d_i^ { min } $$$ minimum value among possible value $$$ d_i $$$ first test case order get $$$ d_1^ { min } = 5 $$$ choose example $$$ d = [ 5 10 6 ] $$$ $$$ b $$$ $$$ = $$$ $$$ [ 2 + 5,3 + 10,5 + 6 ] $$$ $$$ = $$$ $$$ [ <unknown> ] $$$ $$$ = $$$ $$$ [ 7,11,13 ] $$$ $$$ d_2^ { min } = 4 $$$ choose $$$ d $$$ $$$ = $$$ $$$ [ 9 4 8 ] $$$ $$$ b $$$ $$$ = $$$ $$$ [ 2 + <unknown> + 4,5 + 8 ] $$$ $$$ = $$$ $$$ [ <unknown> ] $$$ $$$ = $$$ $$$ [ 7,11,13 ] $$$",['greedy'],1400.0
1430/D,"a string $$$ s $$$ consist $$$ n $$$ character character either 0 1 . perform operations string operation consist two step : note step mandatory operation order change example a string $$$ s = $$$ 111010 first operation one follow : finish perform operations string $$$ s $$$ become empty maximum number operations perform ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — length string $$$ s $$$ second line contain string $$$ s $$$ $$$ n $$$ character character either 0 1 . 's guarantee total sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case print a single integer — maximum number operations perform first test case , example select $$$ i = 2 $$$ get string 010 first operation , select $$$ i = 3 $$$ get string 1 . finally select $$$ i = 1 $$$ get empty string","['data structures', 'greedy']",1700.0
1408/H,"give a sequence $$$ a_1 a_2 \ldots a_n $$$ non - negative integers need find largest number $$$ m $$$ triple $$$ ( i_1 j_1 k_1 ) $$$ $$$ ( i_2 j_2 k_2 ) $$$ ... $$$ ( i_m j_m k_m ) $$$ : first line input contain one integer $$$ t $$$ ( $$$ 1 \leq t \leq 500\,000 $$$ ) : number test case first line test case contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 500\,000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a_i \leq n $$$ ) total sum $$$ n $$$ $$$ 500\,000 $$$ test case print one integer $$$ m $$$ : largest number proper triple find first two test case enough elements even a single triple answer $$$ 0 $$$ third test case select one triple $$$ ( 1 2 3 ) $$$ fourth test case select two triple $$$ ( 1 3 5 ) $$$ $$$ ( 2 4 6 ) $$$ fifth test case select one triple $$$ ( 1 2 3 ) $$$ ca n't select two triple $$$ ( 1 2 3 ) $$$ $$$ ( 4 5 6 ) $$$ $$$ a_2 = a_5 $$$","['data structures', 'greedy']",3300.0
1268/C,"give a permutation $$$ p_1 p_2 \ldots p_n $$$ one move swap two adjacent value want perform a minimum number move end exist a subsegment $$$ 1,2 \ldots k $$$ word end integer $$$ i $$$ $$$ 1 \leq i \leq n - k+1 $$$ $$$ p_i = 1 p _ { i+1 } = 2 \ldots p _ { i+k-1 } = k $$$ let $$$ f ( k ) $$$ minimum number move need make a subsegment value $$$ 1,2 \ldots k $$$ appear permutation need find $$$ f ( 1 ) f ( 2 ) \ldots f ( n ) $$$ first line input contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 200\,000 $$$ ) : number elements permutation next line input contain $$$ n $$$ integers $$$ p_1 p_2 \ldots p_n $$$ : give permutation ( $$$ 1 \leq p_i \leq n $$$ ) print $$$ n $$$ integers minimum number move need make a subsegment value $$$ 1,2 \ldots k $$$ appear permutation $$$ k=1 2 \ldots n $$$",['data structures'],2300.0
1238/D,string $$$ t_1t_2 \dots t_k $$$ good letter string belong least one palindrome length greater 1 . a palindrome a string read backward forward example string a bab abba <unknown> palindromes string ab abbbaa bbba examples good string : give a string $$$ s $$$ length $$$ n $$$ consist letter a b. calculate number good substrings string $$$ s $$$ first line contain one integer $$$ n $$$ ( $$$ 1 \le n \le 300000 $$$ ) — length string $$$ s $$$ second line contain string $$$ s $$$ consist letter a b. print one integer — number good substrings string $$$ s $$$ first test case six good substrings : $$$ s_1 \dots s_2 $$$ $$$ s_1 \dots s_4 $$$ $$$ s_1 \dots s_5 $$$ $$$ s_3 \dots s_4 $$$ $$$ s_3 \dots s_5 $$$ $$$ s_4 \dots s_5 $$$ second test case three good substrings : $$$ s_1 \dots s_2 $$$ $$$ s_1 \dots s_3 $$$ $$$ s_2 \dots s_3 $$$,"['dp', 'strings']",1900.0
1168/A,"toad zitz array integers integer $$$ 0 $$$ $$$ m-1 $$$ inclusive integers $$$ a_1 a_2 \ldots a_n $$$ one operation zitz choose integer $$$ k $$$ $$$ k $$$ indices $$$ i_1 i_2 \ldots i_k $$$ $$$ 1 \leq i_1 < i_2 < \ldots < i_k \leq n $$$ change $$$ a _ { i_j } $$$ $$$ ( ( a _ { i_j } +1 ) \bmod m ) $$$ choose integer $$$ i_j $$$ integer $$$ m $$$ fix operations indices $$$ x \bmod y $$$ denote remainder division $$$ x $$$ $$$ y $$$ zitz want make array non - decreasing minimum number operations find minimum number operations first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 300\,000 $$$ ) — number integers array parameter $$$ m $$$ next line contain $$$ n $$$ space - separated integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \leq a_i < m $$$ ) — give array output one integer : minimum number describe operations zitz need make array non - decreasing operations require print $$$ 0 $$$ easy see enough operations zitz always make array non - decreasing first example array already non - decreasing answer $$$ 0 $$$ second example choose $$$ k=2 $$$ $$$ i_1 = 2 $$$ $$$ i_2 = 5 $$$ array become $$$ [ <unknown> ] $$$ non - decreasing answer $$$ 1 $$$",['greedy'],1700.0
1132/D,berland su hold yet another train contest students today $$$ n $$$ students come bring laptop however turn everyone forget <unknown> ! let students number $$$ 1 $$$ $$$ n $$$ laptop $$$ i $$$ -th student charge $$$ a_i $$$ begin contest use $$$ b_i $$$ charge per minute ( i.e laptop $$$ c $$$ charge begin minute become $$$ c - b_i $$$ charge begin next minute ) whole contest last $$$ k $$$ minutes polycarp ( coach berland su ) decide buy a single charger students would able successfully finish contest buy charger moment contest start polycarp choose buy charger non - negative ( zero positive ) integer power output power output choose purchase ca n't change afterwards let choose power output $$$ x $$$ begin minute ( minute contest start last minute contest ) plug charger student 's laptops use integer number minutes laptop use $$$ b_i $$$ charge per minute become $$$ b_i - x $$$ per minute charger plug negative power usage rate mean laptop 's charge increase charge laptop n't limit become infinitely large charger plug one laptop time student successfully finish contest charge laptop never zero begin minute ( minute contest start last minute contest zero charge allow ) charge laptop minute contest end n't matter help polycarp determine minimal possible power output charger students able successfully finish contest also report charger exist first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 200000 $$$ $$$ 1 \le k \le 200000 $$$ ) — number students ( laptops <unknown> ) duration contest minutes second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 10^ { 12 } $$$ ) — initial charge student 's laptop third line contain $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ ( $$$ 1 \le b_i \le 10000000 $$$ ) — power usage student 's laptop print a single non - negative integer — minimal possible power output charger students able successfully finish contest charger exist print -1 . let 's take a look state laptops begin minute first example charger power $$$ 5 $$$ : contest end fourth minute however let 's consider charger power $$$ 4 $$$ : fourth example matter powerful charger one students wo n't finish contest,['greedy'],2300.0
1055/E,a give a list integers $$$ a_1 a_2 \ldots a_n $$$ $$$ s $$$ segment $$$ [ l_j ; r_j ] $$$ ( $$$ 1 \le l_j \le r_j \le n $$$ ) need select exactly $$$ m $$$ segment a way $$$ k $$$ -th order statistic multiset $$$ a_i $$$ $$$ i $$$ contain least one segment smallest possible 's impossible select a set $$$ m $$$ segment a way multiset contain least $$$ k $$$ elements print -1 . $$$ k $$$ -th order statistic a multiset value $$$ k $$$ -th element sort multiset non - descending order first line contain four integers $$$ n $$$ $$$ s $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \le m \le s \le 1500 $$$ $$$ 1 \le k \le n \le 1500 $$$ ) — size list number segment number segment choose statistic number second line contain $$$ n $$$ integers $$$ a_i $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — value number list next $$$ s $$$ line contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le n $$$ ) — endpoints segment possible segment coincide print exactly one integer — smallest possible $$$ k $$$ -th order statistic -1 's impossible choose segment a way multiset contain least $$$ k $$$ elements first example one possible solution choose first third segment together cover three elements list ( except third one ) way $$$ 2 $$$ -nd order statistic cover elements $$$ 2 $$$,['dp'],2500.0
985/E,mishka receive a gift multicolored pencil birthday ! unfortunately live a monochrome world everything color saturation differ pack represent a sequence a1 a2 ... n integer number — saturation color pencil mishka want put mess pack order infinite number empty box would like fill box a way : help mishka determine 's possible distribute pencil box print ` ` yes '' exist a distribution otherwise print ` ` '' first line contain three integer number n k d ( 1 ≤ k ≤ n ≤ 5·105 0 ≤ d ≤ 109 ) — number pencil minimal size non - empty box maximal difference saturation pair pencil box respectively second line contain n integer number a1 a2 ... ( 1 ≤ ai ≤ 109 ) — saturation color pencil print ` ` yes '' 's possible distribute pencil box satisfy condition otherwise print ` ` '' first example possible distribute pencil 2 box 3 pencil distribution also put pencil box difference pair wo n't exceed 10 . second example split pencil <unknown> [ 4 5 3 4 ] 2 box size 2 put remain ones another box,"['data structures', 'dp', 'greedy']",2100.0
923/B,alice like snow a lot ! unfortunately year 's winter already ca n't expect bob thus buy a gift — a large snow maker plan make amount snow every day day i make a pile snow volume vi put garden day every pile shrink a little due melt precisely temperature a give day ti pile reduce volume ti would reduce volume a pile zero disappear forever snow pile independent note pile make day i already lose part volume day extreme case may mean pile leave end a particular day give initial pile size temperature day determine total volume snow melt day first line contain a single integer n ( 1 ≤ n ≤ 105 ) — number days second line contain n integers v1 v2 ... vn ( 0 ≤ vi ≤ 109 ) vi initial size a snow pile make day i. third line contain n integers t1 t2 ... tn ( 0 ≤ ti ≤ 109 ) ti temperature day i. output a single line n integers i - th integer represent total volume snow melt day i. first sample bob first make a snow pile volume 10 melt size 5 day second day make another pile size 10 . since a bite warmer day first pile disappear completely second pile shrink 3 . end second day a single pile size 3 . third day make a smaller pile usual temperature drop pile survive till end day,['data structures'],1600.0
853/D,michael buy a new electric car move across city michael like overwork day drive one two job michael 's day start charge electric car get work back spend 1000 burl charge go first job 2000 burl go second job a charge station use a loyalty program involve bonus card bonus card may non - negative amount bonus burl time customer go buy something price x burl allow pay amount y ( 0 ≤ y ≤ x ) burl exceed bonus card balance bonus burl case pay x - y burl cash balance bonus card decrease y bonus burl customer pay whole price cash ( i.e. y = 0 ) 10 % price return back bonus card mean bonus card balance increase bonus burl initially bonus card balance equal 0 bonus burl michael plan next n days know much charge cost days help michael determine minimum amount burl cash spend optimal use bonus card assume michael able cover part price cash day necessary spend bonus burl end give period first line input contain a single integer n ( 1 ≤ n ≤ 300 000 ) number days michael plan next line contain n integers a1 a2 ... ( ai = 1000 ai = 2000 ) ai denote charge cost day i. output minimum amount burl michael spend first sample case optimal way michael pay first two days spend 3000 burl get 300 bonus burl return able pay 700 burl third days cover rest price bonus burl second sample case optimal way michael pay whole price first five days get 1000 bonus burl return able use last day without pay anything cash,"['dp', 'greedy']",2400.0
817/F,give a set integer number initially empty perform n query three different type query : query output mex set — smallest positive ( mex ≥ 1 ) integer number present set first line contain one integer number n ( 1 ≤ n ≤ 105 ) next n line contain three integer number t l r ( 1 ≤ t ≤ 3 1 ≤ l ≤ r ≤ 1018 ) — type query leave right bound print mex set query content set query first example :,['data structures'],2300.0
808/E,several latest reform many tourists plan visit berland berland people understand 's opportunity earn money change job attract tourists petya example leave corporation work start sell souvenirs market morning usual petya come market petya n different souvenirs sell ; ith souvenir characterise weight wi cost ci petya know might able carry souvenirs market petya want choose a subset souvenirs total weight greater m total cost maximum possible help petya determine maximum possible total cost first line contain two integers n m ( 1 ≤ n ≤ 100000 1 ≤ m ≤ 300000 ) — number petya 's souvenirs total weight carry market n line follow ith line contain two integers wi ci ( 1 ≤ wi ≤ 3 1 ≤ ci ≤ 109 ) — weight cost ith souvenir print one number — maximum possible total cost souvenirs petya carry market,"['dp', 'greedy']",2300.0
774/B,stepan a experience olympiad participant n cup physics olympiads m cup informatics olympiads cup characterize two parameters — significance ci width wi stepan decide expose cup a shelf width d a way : task determine maximum possible total significance stepan get expose cup shelf width d consider rule describe total significance sum <unknown> expose cup first line contain three integers n m d ( 1 ≤ n m ≤ 100 000 1 ≤ d ≤ 109 ) — number cup physics olympiads number cup informatics olympiads width shelf follow n line contain two integers ci wi ( 1 ≤ ci wi ≤ 109 ) — significance width i - th cup physics olympiads follow m line contain two integers cj wj ( 1 ≤ cj wj ≤ 109 ) — significance width j - th cup informatics olympiads print maximum possible total significance stepan get expose cup shelf width d consider rule describe statement way expose cup shelf print 0 . first example stepan one informatics cup must expose shelf significance equal 3 width equal 2 stepan expose width free space shelf become equal 6 . also stepan must expose second physics cup ( width 5 ) significant cup physics ( significance equal 5 ) stepan expose cup shelf enough free space thus maximum total significance expose cup equal 8,['data structures'],2100.0
768/G,give a root tree n nod night king remove exactly one node tree edge associate split tree form a forest node remove a part forest root a tree forest node tree a parent define strength forest size largest tree forest jon snow want minimize strength forest perform follow operation remove edge a node parent insert a new edge node node forest total number tree forest remain node v need find minimum value strength forest form node v remove first line input contain integer n ( 1 ≤ n ≤ 105 ) — number vertices tree next n line contain a pair vertex indices ui vi ( 1 ≤ ui vi ≤ n ) ui parent vi ui = 0 vi root print n line contain a single integer i - th equal minimum value strength forest form i - th node remove jon snow perform operation describe tree first test case depict remove first node tree split form follow forest strength forest 4 . jon snow change parent vertex 10 5 3 . strength forest become 3,['data structures'],3300.0
734/C,anton play a interest computer game stick one level pass next level prepare n potions anton a special <unknown> prepare one potions x second also know spell two type faster process prepare potions anton use one spell first type one spell second type total number manapoints spend exceed s. consider spell use instantly right anton start prepare potions anton want get next level fast possible interest minimum number time need spend order prepare least n potions first line input contain three integers n m k ( 1 ≤ n ≤ 2·109 1 ≤ m k ≤ 2·105 ) — number potions anton make number spell first type number spell second type second line input contain two integers x s ( 2 ≤ x ≤ 2·109 1 ≤ s ≤ 2·109 ) — initial number second require prepare one potion number manapoints anton use third line contain m integers ai ( 1 ≤ ai < x ) — number second take prepare one potion i - th spell first type use fourth line contain m integers bi ( 1 ≤ bi ≤ 2·109 ) — number manapoints use i - th spell first type k integers ci ( 1 ≤ ci ≤ n ) fifth line — number potions immediately create i - th spell second type use 's guarantee ci decrease i.e ci ≤ cj i < j. sixth line contain k integers di ( 1 ≤ di ≤ 2·109 ) — number manapoints require use i - th spell second type 's guarantee di decrease i.e di ≤ dj i < j. print one integer — minimum time one spend order prepare n potions first sample optimum answer use second spell first type cost 10 manapoints thus preparation time potion change 4 second also anton use second spell second type instantly prepare 15 potions spend 80 manapoints total number manapoints use 10 + 80 = 90 preparation time <unknown> = 20 second ( 15 potions prepare instantly remain 5 take 4 second ) second sample anton ca n't use spell prepare 20 potions spend 10 second answer <unknown> = 200,"['dp', 'greedy']",1600.0
727/F,polycarp experience participant codehorses program contest want become a problemsetter send coordinator a set n problems problem 's quality quality i - th problem ai ( ai positive negative equal zero ) problems order expect difficulty difficulty relate quality way easiest problem index 1 hardest problem index n. coordinator 's mood equal q read a problem mood change 's quality mean coordinator read a problem quality b value b add mood coordinator always read problems one one easiest hardest 's impossible change order problems read problem coordinator 's mood become negative immediately stop read reject problemset polycarp want remove minimum number problems problemset make coordinator 's mood non - negative moment time polycarp sure current coordinator 's mood m guess ` ` current coordinator 's mood q = bi '' m guess find minimum number problems polycarp need remove coordinator 's mood always greater equal 0 read problems easiest remain problems hardest first line input contain two integers n m ( 1 ≤ n ≤ <unknown> 1 ≤ m ≤ 200 000 ) — number problems problemset number guess current coordinator 's mood second line input contain n integers a1 a2 ... ( - 109 ≤ ai ≤ 109 ) — qualities problems order increase difficulty third line input contain m integers b1 b2 ... bm ( 0 ≤ bi ≤ 1015 ) — guess current coordinator 's mood q. print m line i - th line print single integer — answer problem q = bi,"['dp', 'greedy']",2300.0
713/D,owl sonya give a huge lake puzzle size n × m hedgehog filya a birthday present friends immediately start assemble puzzle part turn empty — picture part picture denote 1 empty part denote 0 . row puzzle number top bottom integers 1 n columns number leave right integers 1 m. animals decide complete picture play might even fun ! owl hedgehog ask query query provide four integers x1 y1 x2 y2 define rectangle ( x1 y1 ) stand coordinate leave cell rectangle ( x2 y2 ) stand coordinate bottom right cell answer query size maximum square consist picture part ( part denote 1 ) locate fully inside query rectangle help sonya filya answer t query first line input contain two integers n m ( 1 ≤ n m ≤ 1000 ) — size puzzle follow n line contain m integers aij equal 1 correspond cell contain a picture 0 's empty next line contain integer t ( 1 ≤ t ≤ 1 000 000 ) — number query follow t line query ' descriptions contain four integers x1 y1 x2 y2 ( 1 ≤ x1 ≤ x2 ≤ n 1 ≤ y1 ≤ y2 ≤ m ) — coordinate leave bottom right cells query rectangle print t line i - th contain maximum size square consist 1 - s lie fully inside query rectangle,['data structures'],2700.0
679/B,"limak a little polar bear play build tower block every block a cube positive integer length side limak infinitely many block side length a block side a volume a3 a tower consist block side a1 a2 ... ak total volume a13 + a23 + ... + <unknown> limak go build a tower first ask tell a positive integer x — require total volume tower , limak add new block greedily one one time add biggest block total volume n't exceed x. limak ask choose x greater m. also want maximize number block tower end ( however still behave greedily ) secondarily want maximize x. help limak ? find maximum number block tower maximum x ≤ m result number block line input contain one integer m ( 1 ≤ m ≤ 1015 ) mean limak want choose x 1 m inclusive print two integers — maximum number block tower maximum require total volume x result maximum number block first sample test 9 block choose x = 23 x = 42 . limak want maximize x secondarily choose 42 . detail choose x = 42 process build a tower : 9 block tower total volume 33 + 23 + <unknown> = 27 + 8 + 7 = 42","['dp', 'greedy']",2200.0
609/D,nura want buy k gadgets s burl buy gadget dollars pound gadget sell type currency type currency cost currency change nura buy gadgets n days day know exchange rat dollar pound know cost conversion burl dollars pound day ( 1 n ) nura buy gadgets current exchange rate day buy gadgets want gadget buy n days help nura find minimum day index k gadgets nura always pay burl convert accord exchange rate purchase day nura ca n't buy dollars pound always store burl gadgets number integers 1 m order appear input first line contain four integers n m k s ( 1 ≤ n ≤ 2·105 1 ≤ k ≤ m ≤ 2·105 1 ≤ s ≤ 109 ) — number days total number require number gadgets number burl nura second line contain n integers ai ( 1 ≤ ai ≤ 106 ) — cost one dollar burl i - th day third line contain n integers bi ( 1 ≤ bi ≤ 106 ) — cost one pound burl i - th day next m line contain two integers ti ci ( 1 ≤ ti ≤ 2 1 ≤ ci ≤ 106 ) — type gadget 's cost gadgets first type cost specify dollars gadgets second type cost specify pound nura ca n't buy k gadgets print line number -1 . otherwise first line contain integer d — minimum day index nura k gadgets next k line print two integers qi di — number gadget day gadget buy value qi different value di coincide ( nura buy several gadgets one day ) days number 1 n. case multiple possible solutions print,['greedy'],2000.0
604/B,kevin sun want move precious collection n cowbells <unknown> <unknown> actually grass instead corn move must pack cowbells k box a fix size order keep collection safe transportation wo n't place two cowbells a single box since kevin wish minimize expense curious smallest size box use pack entire collection kevin a meticulous cowbell collector know size i - th ( 1 ≤ i ≤ n ) cowbell integer si fact keep cowbells sort size si - 1 ≤ si i > 1 . also expert <unknown> kevin fit one two cowbells a box size s sum size exceed s. give information help kevin determine smallest s possible put cowbells k box size s. first line input contain two space - separated integers n k ( 1 ≤ n ≤ 2·k ≤ 100 000 ) denote number cowbells number box respectively next line contain n space - separated integers s1 s2 ... sn ( 1 ≤ s1 ≤ s2 ≤ ... ≤ sn ≤ 1 000 000 ) size kevin 's cowbells guarantee size si give non - decreasing order print a single integer smallest s possible kevin put cowbells k box size s. first sample kevin must pack two cowbells box second sample kevin pack together follow set cowbells : { 2 3 } { 5 } { 9 } third sample optimal solution { 3 5 } { 7 },['greedy'],1400.0
592/E,bcpc stand byteforces <unknown> program contest famous competition byteforces bcpc a team competition team compose a coach three contestants blenda coach bite state university ( bsu ) strict select members team bsu n students number 1 n. since bsu students infinitely smart important parameters blenda read write speed a careful measure blenda find i - th student a read speed equal ri ( word per minute ) a write speed wi ( symbols per minute ) since bsu students smart measure speed sometimes big blenda decide subtract constant value c value read speed value d value write speed therefore consider ri ' = ri - c wi ' = wi - d. student i say overwhelm student j <unknown> ' > <unknown> ' blenda ’ t like fight team think a team consist three distinct students i j k good i overwhelm j j overwhelm k k overwhelm i. yes relation overwhelm transitive often happen real life since blenda busy prepare a train camp codeforces give a task calculate number different good team bsu two team consider different least one student present one team present word two team different set students form team different first line input three integers n c d ( 3 ≤ n ≤ <unknown> 1 ≤ c d ≤ 109 ) write denote number students blenda use form team value subtract read speed value subtract write speed respectively next n line contain two integers ri wi ( 0 < ri wi ≤ 109 |ri - c| + |wi - d| > 0 ) two students read write speed coincide i.e every i ≠ j condition |ri - <unknown> + |wi - <unknown> > 0 hold print number different team bsu good accord blenda 's definition first sample follow team good : ( i = 1 j = 2 k = 3 ) ( i = 2 j = 5 k = 1 ) ( i = 1 j = 4 k = 3 ) ( i = 5 j = 1 k = 4 ) note example team ( i = 3 j = 1 k = 2 ) also good consider team ( i = 1 j = 2 k = 3 ),['geometry'],2700.0
363/D,a group n schoolboys decide ride bike nobody a bike boys need rent rent site offer m bike rent price different different bike rent j - th bike cost pj rubles total boys ' share budget a rubles besides personal money i - th boy bi personal rubles share budget spend schoolchildren arbitrarily boy 's personal money spend rent boy 's bike boy rent one bike one give bike somebody else maximum number schoolboys able ride bike ? minimum sum personal money spend total let many schoolchildren ride bike possible ? first line input contain three integers n m a ( 1 ≤ n m ≤ 105 ; 0 ≤ a ≤ 109 ) second line contain sequence integers b1 b2 ... bn ( 1 ≤ bi ≤ 104 ) bi amount i - th boy 's personal money third line contain sequence integers p1 p2 ... pm ( 1 ≤ pj ≤ 109 ) pj price rent j - th bike print two integers r s r maximum number schoolboys rent a bike s minimum total personal money need rent r bike schoolchildren rent bike r = s = 0 . first sample schoolchildren rent a bike instance split share budget half ( 5 rubles ) case one pay 1 ruble personal money one pay 2 rubles personal money total spend 3 rubles personal money way distribution money minimize amount spend personal money,['greedy'],1800.0
360/B,"levko array consist integers : a1 a2 ... , ’ t like array levko think beauty array a directly depend value c ( a ) calculate formula : ’ s time change world levko go change array better exact levko want change value k array elements ( allow replace value integers ) course change make array beautiful possible help levko calculate minimum number c ( a ) reach first line contain two integers n k ( 1 ≤ k ≤ n ≤ 2000 ) second line contain space - separated integers a1 a2 ... ( - 109 ≤ ai ≤ 109 ) a single number — minimum value c ( a ) levko get first sample levko change second fourth elements get array : 4 4 4 4 4 . third sample get array : 1 2 3 4 5 6",['dp'],2000.0
51/C,new <unknown> village stretch along motorway 's every house characterize shift relative fix point — xi coordinate village consist n house i - th house locate point coordinate xi <unknown> a cellular communication provider plan locate three base station provide every house village cellular communication base station power d locate point t provide communication house segment [ t - d t + d ] ( include boundaries ) simplify <unknown> ( simply mix anything ) three station plan possess equal power d. minimal value d enough provide house village cellular communication first line contain integer n ( 1 ≤ n ≤ 2·105 ) represent number house village second line contain coordinate house — sequence x1 x2 ... xn integer number ( 1 ≤ xi ≤ 109 ) possible two house locate one point coordinate give a arbitrary order print require minimal power d. second line print three number — possible coordinate base station ' location print coordinate 6 digits decimal point position station 0 2·109 inclusively accept base station match coordinate many solutions print,['greedy'],1800.0
1367/F1,easy version problem version number give array distinct constraints $$$ n $$$ less hard version problem give array $$$ a $$$ $$$ n $$$ integers ( equal elements array ) perform follow operations array elements : example $$$ n = 5 $$$ $$$ a = [ 4 7 2 3 9 ] $$$ follow sequence operations perform : perform operations type number time order find minimum total number operations first second type make $$$ a $$$ array sort non - decreasing order word minimum number operations must perform array satisfy inequalities $$$ a [ 1 ] \le a [ 2 ] \le \ldots \le a [ n ] $$$ first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case test $$$ t $$$ test case follow test case start a line contain integer $$$ n $$$ ( $$$ 1 \le n \le 3000 $$$ ) — length array $$$ a $$$ follow $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000000 $$$ ) — array need sort give operations number give array distinct sum $$$ n $$$ test case one test exceed $$$ 3000 $$$ test case output one integer — minimum total number operations first second type make array sort non - decreasing order first test case first need move 3 2 begin array therefore desire sequence operations : $$$ [ 4 7 2 3 9 ] \rightarrow [ 3 4 7 2 9 ] \rightarrow [ 2 3 4 7 9 ] $$$ second test case need move 1 begin array 8 — end therefore desire sequence operations : $$$ [ 3 5 8 1 7 ] \rightarrow [ 1 3 5 8 7 ] \rightarrow [ 1 3 5 7 8 ] $$$ third test case array already sort,"['dp', 'greedy']",2100.0
873/C,"ivan play a strange game a matrix a n row m columns element matrix equal either 0 1 . row columns 1 - indexed ivan replace number ones matrix zero , score game calculate follow : course ivan want maximize score strange game also n't want change many elements replace minimum possible number ones zero help determine maximum possible score get minimum possible number replacements require achieve score first line contain three integer number n m k ( 1 ≤ k ≤ n ≤ 100 1 ≤ m ≤ 100 ) n line follow i - th contain m integer number — elements i - th row matrix a. number either 0 1 . print two number : maximum possible score ivan get minimum number replacements require get score first example ivan replace element a1 2",['greedy'],1600.0
788/A,something happen uzhlyandia ... riot streets ... famous uzhlyandian superheroes <unknown> sheep stas giraffe call order save situation upon arrive find citizens worry maximum value main uzhlyandian function f define follow : formula 1 ≤ l < r ≤ n must hold n size main uzhlyandian array a |x| mean absolute value x. heroes skip math lessons school ask help help calculate maximum value f among possible value l r give array a. first line contain single integer n ( 2 ≤ n ≤ 105 ) — size array a. second line contain n integers a1 a2 ... ( -109 ≤ ai ≤ 109 ) — array elements print integer — maximum value f. first sample case optimal value f reach intervals [ 1 2 ] [ 2 5 ] second case maximal value f reachable whole array,['dp'],1600.0
769/B,polycarp study university group consist n students ( include ) <unknown> social net ` ` <unknown> ! ` ` students equally <unknown> student know value ai — maximum number message i - th student agree send per day student ca n't send message early morning polycarp know important news program credit tomorrow reason necessary urgently inform groupmates news use private message task make a plan use private message : let 's consider students numerate distinct number 1 n polycarp always number 1 . task n't minimize number message moment time know credit parameters find way use private message satisfy requirements first line contain positive integer n ( 2 ≤ n ≤ 100 ) — number students second line contain sequence a1 a2 ... ( 0 ≤ ai ≤ 100 ) ai equal maximum number message i - th student agree send consider polycarp always number 1 . print -1 first line impossible inform students credit otherwise first line print integer k — number message send next k line print two distinct integers f t mean student number f send message news student number t. message print chronological order mean student send message must already know news assume students receive repeat message news credit several answer acceptable print first test polycarp ( student number 1 ) send message student number 2 send message students number 3 4 . thus students know credit,['greedy'],1200.0
309/B,"advertise become part routine , <unknown> progressive technologies need ideas make advertise better ! problem 'll look a simplify version context advertise ' ve get a text consist exactly n word a standard advertise banner exactly r line line contain c character potential customer always like see lot advertise determine maximum number consecutive word text write banner single word one line banner separate space allow insert one space note allow break word , word text must occupy exactly one line banner besides change word order , read banner text consecutively top bottom leave right get consecutive part advertisement text formally statement write like let 's say word index 1 n order occur advertisement text choose word start i - th one end j - th one ( 1 ≤ i ≤ j ≤ n ) could write banner must many word possible see sample clarifications first input line contain three integers n r c ( 1 ≤ n r c ≤ 106 ; r × c ≤ 106 ) next line contain a text consist n word word consist lowercase english letter empty word line separate single space total number character word n't exceed 5·106 print r line line print c character — optimal advertisement banner multiple advertisement banners print note line banner empty allow print line",['dp'],2100.0
76/B,modern research show a flock hungry mice search a piece cheese act follow : several piece cheese mouse choose closest one mice start move towards choose piece cheese a mouse several mice achieve destination point still a piece cheese eat become well - <unknown> mice reach point remain hungry move speed mice equal several ways choose closest piece mice choose a way would minimize number hungry mice check theory scientists decide conduct experiment locate n mice m piece cheese a cartesian plane mice locate line y = y0 piece cheese — another line y = y1 check result experiment scientists need a program simulate behavior a flock hungry mice write a program compute minimal number mice remain hungry i.e without cheese first line input contain four integer number n ( 1 ≤ n ≤ 105 ) m ( 0 ≤ m ≤ 105 ) y0 ( 0 ≤ y0 ≤ 107 ) y1 ( 0 ≤ y1 ≤ 107 y0 ≠ y1 ) second line contain a strictly increase sequence n number — x coordinate mice third line contain a strictly increase sequence m number — x coordinate cheese coordinate integers exceed 107 absolute value line output contain one number — minimal number mice remain without cheese three mice choose first piece cheese second third mice eat piece first one remain hungry run towards piece late second piece cheese remain uneaten,['greedy'],2100.0
48/G,"a far away galaxy n inhabit planets number number 1 n. one day presidents n planets independently come idea create galaxy union need share wonderful idea <unknown> ’ s president busy work a project <unknown> presidents negotiations pair planets bidirectional communication channel characterize ` ` dial duration '' ti a rule take several hours exceed call duration greatly overall galaxy n communication channel unite planets a uniform network mean possible phone planet v planet u perhaps use <unknown> planets v1 v2 ... vm via exist channel u v1 v1 v2 ... vm - 1 vm vm v. dial duration u v equal sum dial durations use channel , every president talk one one presidents rest n - 1 planets negotiations take place strictly consecutively negotiations a planet stop dial another one begin matter urgent different ways call need planet every time quickest one choose little time need assure another president importance galaxy union ’ s duration negotiations planet consider equal dial duration time planets presidents know nothing ’ s plan take consideration possibility example seek president may call already know found galaxy union source governments n planets ask work <unknown> plan first find every president much time suppose negotiations take first line contain integer n ( 3 ≤ n ≤ 200000 ) represent number planets galaxy number communication channel equal next n line contain three integers ai bi ti ( 1 ≤ ai bi ≤ n ai ≠ bi 1 ≤ ti ≤ 103 ) represent number planet join a communication channel ` ` dial duration '' one communication channel a pair planets first line output n integers — durations suppose negotiations president separate number space",['dp'],2700.0
6/C,alice bob like game ready start a new game place n chocolate bar a line alice start eat chocolate bar one one leave right bob — right leave <unknown> bar time need player consume know ( alice bob eat equal speed ) player consume a chocolate bar immediately start another allow eat two chocolate bar time leave bar unfinished make pause players start eat bar simultaneously bob leave alice a true gentleman many bar players consume ? first line contain one integer n ( 1 ≤ n ≤ 105 ) — amount bar table second line contain a sequence t1 t2 ... tn ( 1 ≤ ti ≤ 1000 ) ti time ( second ) need consume i - th bar ( order leave right ) print two number a b a amount bar consume alice b amount bar consume bob,['greedy'],1200.0
1824/E,"luotianyi watch anime make aby find make a cartridge interest describe process make a cartridge clearly abstract original problem give follow problem give a tree $$$ t $$$ consist $$$ n $$$ vertices vertex value $$$ a_i $$$ $$$ b_i $$$ edge value $$$ c_j $$$ $$$ d_j $$$ aim build a tree $$$ t ' $$$ follow : let $$$ a $$$ minimum value $$$ a_i $$$ $$$ t ' $$$ $$$ c $$$ minimum value $$$ c_i $$$ $$$ t ' $$$ let $$$ b $$$ sum $$$ b_i $$$ $$$ t ' $$$ $$$ d $$$ sum value $$$ d_i $$$ $$$ t ' $$$ let $$$ \min ( a c ) \cdot ( b + d ) $$$ cost $$$ t ' $$$ need find maximum possible cost $$$ t ' $$$ first line contain one integer $$$ n $$$ ( $$$ 3\le n \le 2\cdot 100000 $$$ ) — number vertices tree $$$ t $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1\le a_i\le 2\cdot 100000 $$$ ) $$$ i $$$ -th integer represent $$$ a_i $$$ value $$$ i $$$ -th vertex third line contain $$$ n $$$ integers $$$ b_1 b_2 \ldots b_n $$$ ( $$$ 1\le b_i\le 2\cdot 100000 $$$ ) $$$ i $$$ -th integer represent $$$ b_i $$$ value $$$ i $$$ -th vertex $$$ n-1 $$$ line follow $$$ j $$$ -th contain four integers $$$ x_j y_j c_j d_j $$$ ( $$$ 1\le x_j <unknown> <unknown> c_j d_j\le 2\cdot 100000 $$$ ) represent edge $$$ ( x_j y_j ) $$$ value $$$ c_j $$$ $$$ d_j $$$ respectively 's guarantee edge form a tree print a single integer — maximum possible cost $$$ t ' $$$ tree first example show statement tree second example show : $$$ a = 1 b = 18 c = 1 d = 17 $$$ cost $$$ \min ( 1,1 ) \cdot ( 18 + 17 ) = 35 $$$",['data structures'],3500.0
1517/F,"report 2050 conference hold yunqi town <unknown> april 23 25 include theme forums morning jog camp relationship $$$ n $$$ volunteer 2050 conference represent a tree ( a connect undirected graph $$$ n $$$ vertices $$$ n-1 $$$ edge ) $$$ n $$$ vertices tree correspond $$$ n $$$ volunteer number $$$ 1,2 \ldots n $$$ define distance two volunteer $$$ i $$$ $$$ j $$$ dis $$$ ( i j ) $$$ number edge shortest path vertex $$$ i $$$ vertex $$$ j $$$ tree dis $$$ ( i j ) = 0 $$$ whenever $$$ i = j $$$ volunteer attend on - site reunion others volunteer $$$ x $$$ nonnegative integer $$$ r $$$ volunteer whose distance $$$ x $$$ $$$ r $$$ attend on - site reunion a forum radius $$$ r $$$ take place level on - site reunion define maximum possible radius forum take place assume volunteer attend on - site reunion probability $$$ \frac { 1 } { 2 } $$$ events independent output expect level on - site reunion volunteer attend level define $$$ -1 $$$ volunteer attend level define $$$ n $$$ first line contain a single integer $$$ n $$$ ( $$$ 2\le n\le 300 $$$ ) denote number volunteer next $$$ n-1 $$$ line contain two integers $$$ a $$$ $$$ b $$$ denote edge vertex $$$ a $$$ vertex $$$ b $$$ output expect level modulo $$$ 998\,244\,353 $$$ formally let $$$ m = 998\,244\,353 $$$ show answer express irreducible fraction $$$ \frac { p } { q } $$$ $$$ p $$$ $$$ q $$$ integers $$$ q \not \equiv 0 \pmod { m } $$$ output integer equal $$$ p \cdot q^ { -1 } \bmod m $$$ word output integer $$$ x $$$ $$$ 0 \le x < m $$$ $$$ x \cdot q \equiv p \pmod { m } $$$ first example follow table show possible outcomes $$$ yes $$$ mean volunteer attend on - site reunion $$$ $$$ mean attend $$$ $$$ \begin { array } { cccc } 1 & 2 & 3 & <unknown> yes & yes & yes & 3\\ yes & yes & & 1\\ yes & & yes & 0\\ yes & & & 0\\ & yes & yes & 1\\ & yes & & 0\\ & & yes & 0\\ & & & <unknown> \end { array } $$$ $$$ expect level $$$ \frac { 3 + 1 + 1 + ( -1 ) } { 2 ^ 3 } = \frac { 1 } { 2 } $$$",['dp'],3200.0
1427/F,bore federico giada often play follow card game a deck contain $$$ 6n $$$ card card contain one number $$$ 1 $$$ $$$ 6n $$$ number appear exactly one card initially deck sort first card contain number $$$ 1 $$$ second card contain number $$$ 2 $$$ $$$ \dots $$$ last one contain number $$$ 6n $$$ federico giada take turn alternate ; federico start turn player take $$$ 3 $$$ contiguous card deck put pocket order card remain deck change play deck empty ( exactly $$$ 2n $$$ turn ) end game federico giada $$$ 3n $$$ card pocket give card federico 's pocket end game describe a sequence move produce set card federico 's pocket first line input contain one integer $$$ n $$$ ( $$$ 1\le n \le 200 $$$ ) second line input contain $$$ 3n $$$ number $$$ x_1 x_2 \ldots x _ { 3n } $$$ ( $$$ 1 \le x_1 < x_2 < \ldots < x _ { 3n } \le 6n $$$ ) – card federico 's pocket end game guarantee test least one sequence move produce set card federico 's pocket print $$$ 2n $$$ line contain $$$ 3 $$$ integers $$$ i $$$ -th line contain increase order integers $$$ a_i < b_i < c_i $$$ write three card take player $$$ i $$$ -th turn ( take federico $$$ i $$$ odd giada $$$ i $$$ even ) one possible sequence move print explanation first testcase : initially deck $$$ 12 = 2\cdot 6 $$$ sort card deck $$$ [ 1\ 2\ 3\ 4\ 5\ 6\ 7\ 8\ 9\ 10\ 11\ 12 ] $$$,"['data structures', 'greedy']",3200.0
1387/B1,problem split two task task require find minimum possible answer task village ( maximum ) require find maximum possible answer task worth $$$ 50 $$$ point $$$ n $$$ house a certain village a single villager live house house connect roads road connect two house exactly $$$ 1 $$$ kilometer long house possible reach use one several consecutive roads total $$$ n-1 $$$ roads village one day villagers decide move different house — move house a single villager live villager live house would like know smallest possible total length kilometers shortest paths old new house villagers example village seven house example seven house connect roads show figure smallest total length $$$ 8 $$$ km ( achieve move $$$ 1 \to 6 $$$ $$$ 2 \to 4 $$$ $$$ 3 \to 1 $$$ $$$ 4 \to 2 $$$ $$$ 5 \to 7 $$$ $$$ 6 \to 3 $$$ $$$ 7 \to 5 $$$ ) write a program find smallest total length shortest paths kilometers example assignment new house villagers first line contain integer $$$ n $$$ ( $$$ 1 < n \le 100000 $$$ ) house number consecutive integers $$$ 1 2 \ldots n $$$ $$$ n-1 $$$ line follow describe roads line contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \le a b \le n $$$ $$$ a \neq b $$$ ) denote a road connect house $$$ a $$$ $$$ b $$$ first line output smallest total length shortest paths kilometers second line describe one valid assignment new house smallest total length : $$$ n $$$ space - separated distinct integers $$$ v_1 v_2 \ldots v_n $$$ $$$ i $$$ $$$ v_i $$$ house number villager house $$$ i $$$ move ( $$$ v_i \neq i $$$ ) several valid assignments output subtasks :,"['dp', 'greedy']",2100.0
1344/E,"'s right i ' m a <unknown> student i <unknown> write a problem train $$$ n $$$ station $$$ m $$$ train station connect $$$ n-1 $$$ one - directional railroad form a tree root station $$$ 1 $$$ railroad point direction root station $$$ 1 $$$ leave a railroad connect a station $$$ u $$$ a station $$$ v $$$ a distance $$$ d $$$ mean take $$$ d $$$ time travel $$$ u $$$ $$$ v $$$ station least one outgo railroad a switch determine child station incoming train direct toward example might look like : initially train station train $$$ i $$$ enter station $$$ 1 $$$ time $$$ t_i $$$ every unit time start time $$$ 1 $$$ follow two step happen : every train a destination station $$$ s_i $$$ enter $$$ s_i $$$ stop permanently point train go wrong direction never able reach $$$ s_i $$$ matter switch point immediately explode find latest possible time first explosion change switch optimally determine direct every train destination explosion occur also find minimum number time need change a switch achieve first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 1\le n m\le 100000 $$$ ) — number station train respectively next $$$ n-1 $$$ line describe railroad $$$ i $$$ -th line contain three integers $$$ u v d $$$ ( $$$ 1\le u v\le n $$$ $$$ 1\le d\le 1000000000 $$$ ) denote a railroad station $$$ u $$$ station $$$ v $$$ distance $$$ d $$$ guarantee railroad form a tree root station $$$ 1 $$$ switch a station $$$ u $$$ initially direct towards last outgo railroad $$$ u $$$ appear input next $$$ m $$$ line describe train $$$ i $$$ -th line contain two integers $$$ s_i t_i $$$ ( $$$ 1\le s_i\le n $$$ $$$ 1\le t_1 < t_2 < \cdots < <unknown> 1000000000 $$$ ) — destination station time $$$ i $$$ -th train enter station $$$ 1 $$$ respectively output two integers : latest possible time first explosion ( $$$ -1 $$$ possible never explosion ) minimum number switch change achieve first test 's example timeline : second test switch nothing time $$$ 4 $$$ train $$$ 2 $$$ direct station $$$ 5 $$$ train $$$ 4 $$$ direct station $$$ 3 $$$ explode impossible prevent explosion time $$$ 4 $$$ third test denote a switch change $$$ ( <unknown> v t ) $$$ make station $$$ u $$$ point station $$$ v $$$ time $$$ t $$$ one solution make $$$ 4 $$$ switch change : $$$ ( 1\to 2,1 ) $$$ $$$ ( 1\to 3,2 ) $$$ $$$ ( <unknown> <unknown> ) $$$ $$$ ( <unknown> 6,8 ) $$$ time $$$ 11 $$$ train $$$ 4 $$$ $$$ 5 $$$ $$$ 6 $$$ explode impossible prevent explosion time $$$ 11 $$$",['data structures'],3100.0
1249/F,give a tree consist $$$ n $$$ vertices recall a tree a connect undirected graph without cycle vertices number $$$ 1 $$$ $$$ n $$$ vertices weight weight vertex $$$ v $$$ $$$ a_v $$$ recall distance two vertices tree number edge a simple path task find subset vertices maximum total weight ( weight subset sum weight vertices ) pair vertices distance $$$ k $$$ less subset first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n k \le 200 $$$ ) — number vertices tree distance restriction respectively second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 100000 $$$ ) $$$ a_i $$$ weight vertex $$$ i $$$ next $$$ n - 1 $$$ line contain edge tree edge $$$ i $$$ denote two integers $$$ u_i $$$ $$$ v_i $$$ — label vertices connect ( $$$ 1 \le u_i v_i \le n $$$ $$$ u_i \ne v_i $$$ ) guarantee give edge form a tree print one integer — maximum total weight subset pair vertices distance $$$ k $$$,['dp'],2200.0
1083/C,grisha find a tree ( connect graph without cycle ) a root node $$$ 1 $$$ tree a tree a permutation $$$ p $$$ integers $$$ 0 $$$ $$$ n - 1 $$$ write nod a number $$$ p_i $$$ write node $$$ i $$$ grisha like invent strange interest problems always solve need help deal two type query tree let 's define a function $$$ mex ( s ) $$$ $$$ s $$$ a set non - negative integers a smallest non - negative integer include set let $$$ l $$$ a simple path tree let 's define indices nod lie $$$ l $$$ $$$ u_1 $$$ $$$ u_2 $$$ $$$ \ldots $$$ $$$ u_k $$$ define $$$ v ( l ) $$$ a set { $$$ p _ { u_1 } $$$ $$$ p _ { u_2 } $$$ $$$ \ldots $$$ $$$ p _ { u_k } $$$ } query : first line contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 200000 $$$ ) — number nod a tree second line contain $$$ n $$$ integers — $$$ p_1 $$$ $$$ p_2 $$$ $$$ \ldots $$$ $$$ p_n $$$ ( $$$ 0\leq p_i < n $$$ ) — permutation $$$ p $$$ 's guarantee number different third line contain $$$ n - 1 $$$ integers — $$$ d_2 $$$ $$$ d_3 $$$ $$$ \ldots $$$ $$$ d_n $$$ ( $$$ 1 \leq d_i < i $$$ ) $$$ d_i $$$ a direct ancestor node $$$ i $$$ a tree fourth line contain a single integer $$$ q $$$ ( $$$ 1 \leq q \leq 200000 $$$ ) — number query follow $$$ q $$$ line contain description query : begin next $$$ q $$$ line a single integer $$$ t $$$ ( $$$ 1 $$$ $$$ 2 $$$ ) — type a query : type 2 query print a single integer — answer query number write bracket a permutation value a node,['data structures'],2900.0
1076/E,vasya a tree consist $$$ n $$$ vertices root vertex $$$ 1 $$$ first vertices $$$ 0 $$$ write let $$$ d ( i j ) $$$ distance vertices $$$ i $$$ $$$ j $$$ i.e number edge shortest path $$$ i $$$ $$$ j $$$ also let 's denote $$$ k $$$ -subtree vertex $$$ x $$$ — set vertices $$$ y $$$ next two condition meet : vasya need process $$$ m $$$ query $$$ i $$$ -th query a triple $$$ v_i $$$ $$$ d_i $$$ $$$ x_i $$$ query vasya add value $$$ x_i $$$ vertex $$$ d_i $$$ -subtree $$$ v_i $$$ report vasya value write vertices tree process query first line contain single integer $$$ n $$$ ( $$$ 1 \le n \le 300000 $$$ ) — number vertices tree next $$$ n - 1 $$$ line contain two integers $$$ x $$$ $$$ y $$$ ( $$$ 1 \le x y \le n $$$ ) — edge vertices $$$ x $$$ $$$ y $$$ guarantied give graph a tree next line contain single integer $$$ m $$$ ( $$$ 1 \le m \le 300000 $$$ ) — number query next $$$ m $$$ line contain three integers $$$ v_i $$$ $$$ d_i $$$ $$$ x_i $$$ ( $$$ 1 \le v_i \le n $$$ $$$ 0 \le d_i \le 1000000000 $$$ $$$ 1 \le x_i \le 1000000000 $$$ ) — description $$$ i $$$ -th query print $$$ n $$$ integers $$$ i $$$ -th integers value write $$$ i $$$ -th vertex process query first <unknown> initial value vertices $$$ 0 0 0 0 0 $$$ first query value equal $$$ 1 1 1 0 0 $$$ second query value equal $$$ 1 11 1 0 0 $$$ third query value equal $$$ 1 11 1 100 0 $$$,['data structures'],1900.0
1023/G,"a group researchers study fish population a natural system lakes rivers system contain $$$ n $$$ lakes connect $$$ n - 1 $$$ rivers river integer length ( kilometers ) traverse directions possible travel pair lakes traverse rivers ( network lakes rivers form a tree ) unknown number indistinguishable fish live lakes day $$$ 1 $$$ fish arbitrary lakes fish travel lakes swim rivers fish swim a river $$$ l $$$ kilometers long direction $$$ l $$$ days , fish stay number days particular lake visit fish ever appear disappear lake system lake <unknown> number fish time researchers make several observations $$$ j $$$ -th observations ` ` day $$$ d_j $$$ least $$$ f_j $$$ distinct fish lake $$$ p_j $$$ ` ` help researchers determine smallest possible total number fish live lake system n't contradict observations first line contain a single integer $$$ n $$$ ( $$$ 1 \leq n \leq 100000 $$$ ) — number lakes system next $$$ n - 1 $$$ line describe rivers $$$ i $$$ -th line contain three integers $$$ u_i $$$ $$$ v_i $$$ $$$ l_i $$$ ( $$$ 1 \leq u_i v_i \leq n $$$ $$$ u_i \neq v_i $$$ $$$ 1 \leq l_i \leq 1000 $$$ ) — $$$ 1 $$$ -based indices lakes connect $$$ i $$$ -th river length river next line contain a single integer $$$ k $$$ ( $$$ 1 \leq k \leq 100000 $$$ ) — number observations next $$$ k $$$ line describe observations $$$ j $$$ -th line contain three integers $$$ d_j $$$ $$$ f_j $$$ $$$ p_j $$$ ( $$$ 1 \leq d_j \leq 100000000 $$$ $$$ 1 \leq f_j \leq 10000 $$$ $$$ 1 \leq p_j \leq n $$$ ) — day number fish lake index $$$ j $$$ -th observation two observations happen day lake simultaneously print one integer — smallest total number fish contradict observations first example could one fish swim lakes $$$ 2 $$$ $$$ 1 $$$ $$$ 4 $$$ second fish swim lakes $$$ 3 $$$ $$$ 1 $$$ $$$ 2 $$$ second example a single fish possibly part observations simultaneously two fish swim $$$ 2 \to 1 \to 4 $$$ $$$ 3 \to 1 \to 5 $$$ third example one fish move lake $$$ 1 $$$ lake $$$ 5 $$$ others stay lakes time : two fish lake $$$ 4 $$$ six fish lake $$$ 5 $$$ one fish lake $$$ 3 $$$ system lakes show picture",['data structures'],3400.0
980/E,nation panel hold annual show call number game district nation represent one contestant nation $$$ n $$$ district number $$$ 1 $$$ $$$ n $$$ district exactly one path connect every district number fan a contestant district $$$ i $$$ equal $$$ 2^i $$$ year president decide reduce cost want remove $$$ k $$$ contestants game however district remove contestants furious allow anyone cross district president want ensure remain contestants district reach one another also wish maximize total number fan participate contestants contestants president remove ? first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \leq k < n \leq 1000000 $$$ ) — number district panel number contestants president wish remove respectively next $$$ n-1 $$$ line contain two integers $$$ a $$$ $$$ b $$$ ( $$$ 1 \leq a b \leq n $$$ $$$ a \ne b $$$ ) describe a road connect two different district $$$ a $$$ $$$ b $$$ nation guarantee exactly one path every two district print $$$ k $$$ space - separated integers : number district contestants remove increase order district number first sample maximum possible total number fan $$$ 2 ^ 2 + 2 ^ 5 + 2 ^ 6 = 100 $$$ achieve remove contestants district 1 3 4,"['data structures', 'greedy']",2200.0
960/H,santa infinite number candy $$$ m $$$ flavour give a root tree $$$ n $$$ vertices root tree vertex $$$ 1 $$$ vertex contain exactly one candy $$$ i $$$ -th vertex a candy flavour $$$ f_i $$$ sometimes santa fear candy flavour $$$ k $$$ melt choose vertex $$$ x $$$ randomly send subtree $$$ x $$$ bakers a replacement a replacement candy flavour $$$ k $$$ replace a new candy flavour candy flavour $$$ k $$$ leave unchanged replacement tree restore actual cost replace one candy flavour $$$ k $$$ $$$ c_k $$$ ( give $$$ k $$$ ) baker keep price fix order make calculation simple every time a subtree come a replacement baker charge $$$ c $$$ matter subtree flavour suppose a give flavour $$$ k $$$ probability santa choose a vertex replacement vertices need find expect value error calculate cost replacement flavour $$$ k $$$ error calculate cost define follow $$$ $$$ <unknown> e ( k ) = \ ( actual <unknown> – \ <unknown> <unknown> <unknown> <unknown> bakers ) ^ 2 $$$ $$$ note actual cost cost replacement one candy flavour $$$ k $$$ multiply number candy subtree also sometimes santa may wish replace a candy vertex $$$ x $$$ a candy flavour pocket need handle two type operations : first line input contain four integers $$$ n $$$ ( $$$ 2 \leqslant n \leqslant 50000 $$$ ) $$$ m $$$ $$$ q $$$ $$$ c $$$ ( $$$ 1 \leqslant m q \leqslant 50000 $$$ $$$ 0 \leqslant c \leqslant 1000000 $$$ ) — number nod total number different flavour candy number query price charge bakers replacement respectively second line contain $$$ n $$$ integers $$$ f_1 f_2 \dots f_n $$$ ( $$$ 1 \leqslant f_i \leqslant m $$$ ) $$$ f_i $$$ initial flavour candy $$$ i $$$ -th node third line contain $$$ n - 1 $$$ integers $$$ p_2 p_3 \dots p_n $$$ ( $$$ 1 \leqslant p_i \leqslant n $$$ ) $$$ p_i $$$ parent $$$ i $$$ -th node next line contain $$$ m $$$ integers $$$ c_1 c_2 \dots c_m $$$ ( $$$ 1 \leqslant c_i \leqslant 100 $$$ ) $$$ c_i $$$ cost replace one candy flavour $$$ i $$$ next $$$ q $$$ line describe query line start integer $$$ t $$$ ( $$$ 1 \leqslant t \leqslant 2 $$$ ) — type query $$$ t = 1 $$$ line describe a query first type two integers $$$ x $$$ $$$ w $$$ follow ( $$$ 1 \leqslant x \leqslant n $$$ $$$ 1 \leqslant w \leqslant m $$$ ) mean santa replace candy vertex $$$ x $$$ flavour $$$ w $$$ otherwise $$$ t = 2 $$$ line describe a query second type integer $$$ k $$$ ( $$$ 1 \leqslant k \leqslant m $$$ ) follow mean print expect value error calculate cost replacement a give flavour $$$ k $$$ vertices index $$$ 1 $$$ $$$ n $$$ vertex $$$ 1 $$$ root output answer query second type a separate line answer consider correct absolute relative error exceed $$$ 10^ { -6 } $$$ formally let answer $$$ a $$$ jury 's answer $$$ b $$$ checker program consider answer correct $$$ \frac { |a - b| } { max ( 1 b ) } \leqslant 10^ { -6 } $$$ $$$ 1 $$$ -st query error calculate cost replacement flavour $$$ 1 $$$ vertex $$$ 1 $$$ $$$ 2 $$$ $$$ 3 $$$ choose $$$ 66 ^ 2 $$$ $$$ 66 ^ 2 $$$ $$$ ( -7 ) ^2 $$$ respectively since probability choose vertex therefore expect value error $$$ \frac { 66 ^ 2 + 66 ^ 2 + ( -7 ) ^2 } { 3 } $$$ similarly $$$ 2 $$$ -nd query expect value error $$$ \frac { 41 ^ 2 + ( -7 ) ^2 + ( -7 ) ^2 } { 3 } $$$ $$$ 3 $$$ -rd query flavour vertex $$$ 2 $$$ change $$$ 1 $$$ $$$ 3 $$$ $$$ 4 $$$ -th query expect value error $$$ \frac { ( -7 ) ^2 + ( -7 ) ^2 + ( -7 ) ^2 } { 3 } $$$ similarly $$$ 5 $$$ -th query expect value error $$$ \frac { 89 ^ 2 + 41 ^ 2 + ( -7 ) ^2 } { 3 } $$$,['data structures'],3100.0
925/E,'s may flatland $$$ m $$$ days month despite fact may holiday cancel long time ago employees software company still a habit take short long vacation may course managers company like $$$ n $$$ employees company form a tree - like structure subordination : employee a unique integer i d $$$ i $$$ $$$ 1 $$$ $$$ n $$$ employee i d $$$ i $$$ ( except head manager whose i d 1 ) exactly one direct manager i d $$$ p_i $$$ structure subordination cyclic i.e start move employee direct manager eventually reach head manager define employee $$$ u $$$ a subordinate employee $$$ v $$$ $$$ v $$$ a direct manager $$$ u $$$ direct manager $$$ u $$$ a subordinate $$$ v $$$ let $$$ s_i $$$ number subordinate $$$ i $$$ -th employee ( example $$$ s_1 = n - 1 $$$ employees except subordinate head manager ) employee $$$ i $$$ a bear limit $$$ t_i $$$ integer $$$ 0 $$$ $$$ s_i $$$ denote maximum number subordinate $$$ i $$$ -th employee vacation moment bear moment strictly $$$ t_i $$$ subordinate $$$ i $$$ -th employee vacation $$$ i $$$ -th employee a vacation become displease $$$ m $$$ days may exactly one event follow two type happen : either one employee leave a vacation begin day one employee return a vacation begin day know sequence events follow $$$ m $$$ days task compute $$$ m $$$ days number displease employees day first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 2 \leq n m \leq 100000 $$$ ) — number employees company number days may second line contain $$$ n - 1 $$$ integers $$$ p_2 p_3 \ldots p_n $$$ ( $$$ 1 \leq p_i \leq n $$$ ) denote direct managers employees third line contain $$$ n $$$ integers $$$ t_1 t_2 \ldots t_n $$$ ( $$$ 0 \leq t_i \leq s_i $$$ ) denote bear limit <unknown> fourth line contain $$$ m $$$ integers $$$ q_1 q_2 \ldots q_m $$$ ( $$$ 1 \leq <unknown> \leq n $$$ $$$ q_i \ne 0 $$$ ) denote events $$$ q_i $$$ positive employee i d $$$ q_i $$$ leave a vacation start day $$$ q_i $$$ negative employee $$$ -q_i $$$ return a vacation start day begin may employee vacation guarantee employee leave a vacation a vacation moment vice versa print a sequence $$$ m $$$ integers $$$ a_1 a_2 \ldots a_m $$$ $$$ a_i $$$ number displease employees $$$ i $$$ -th day first sample test employee i d 2 leave a vacation first day head manager i d 1 become displease want subordinate go a vacation fourth day employee i d 5 become displease last remain employee i d 7 leave a vacation fifth day employee i d 2 return vacation affect number displease employees employees 5 1 still displease sixth day employee i d 3 return back vacation prevent employee i d 5 displease last day head manager i d 1 leave a vacation leave company without displease people,['data structures'],2900.0
916/E,surprise jamie final boss ! <unknown> jamie give a tree n vertices number 1 n. initially root tree vertex number 1 . also vertex a value jamie also give three type query <unknown> v — change tree 's root vertex number <unknown> u v x — vertex subtree smallest size contain u v add x <unknown> v — find sum value vertices subtree vertex number v. a subtree vertex v a set vertices v lie shortest path vertex root tree pay attention subtree a vertex change change tree 's root show strength program jamie perform query accurately ! first line input contain two space - separated integers n q ( 1 ≤ n ≤ 105 1 ≤ q ≤ 105 ) — number vertices tree number query process respectively second line contain n space - separated integers a1 a2 ... ( - 108 ≤ ai ≤ 108 ) — initial value vertices next n - 1 line contain two space - separated integers ui vi ( 1 ≤ ui vi ≤ n ) describe edge vertices ui vi tree follow q line describe query query one follow format depend <unknown> v ( 1 ≤ v ≤ n ) query first <unknown> u v x ( 1 ≤ u v ≤ n - 108 ≤ x ≤ 108 ) query second <unknown> v ( 1 ≤ v ≤ n ) query third type number query ' descriptions integers query must carry give order guarantee tree valid query third type output require answer guarantee least one query third type give jamie follow picture show tree vary query first sample,['data structures'],2400.0
724/F,a tree a connect graph without cycle two tree consist n vertices call isomorphic exist a permutation p : { 1 ... n } → { 1 ... n } edge ( u v ) present first tree edge ( pu pv ) present second tree vertex tree call internal degree greater equal two count number different non - isomorphic tree consist n vertices degree internal vertex exactly d. print answer give prime modulo mod single line input contain three integers n d mod ( 1 ≤ n ≤ 1000 2 ≤ d ≤ 10 108 ≤ mod ≤ 109 ) — number vertices tree degree internal vertices prime modulo print number tree modulo mod,['dp'],2700.0
675/D,"program class vasya assign a difficult problem however n't know code unable find solution internet ask help give a sequence $$$ a $$$ consist $$$ n $$$ distinct integers use construct binary search tree formal description construction process first line input contain a single integer $$$ n $$$ ( $$$ 2 \leq n \leq 100\,000 $$$ ) — length sequence $$$ a $$$ second line contain $$$ n $$$ distinct integers $$$ a_i $$$ ( $$$ 1 \leq a_i \leq 1000000000 $$$ ) — sequence $$$ a $$$ output $$$ n - 1 $$$ integers $$$ i > 1 $$$ print value write node parent node value $$$ a_i $$$",['data structures'],1800.0
620/F,give array n integers ai m query query describe two integers ( lj rj ) let 's define function function define u ≤ v. query print maximal value function f ( ax ay ) lj ≤ x y ≤ rj ax ≤ ay first line contain two integers n m ( 1 ≤ n ≤ 5·104 1 ≤ m ≤ 5·103 ) — size array number query second line contain n integers ai ( 1 ≤ ai ≤ 106 ) — elements array a. next m line contain two integers lj rj ( 1 ≤ lj ≤ rj ≤ n ) – parameters j - th query query print value aj a separate line — maximal value function f ( ax ay ) lj ≤ x y ≤ rj ax ≤ ay,"['data structures', 'strings']",2800.0
526/G,spiders om nom 's old enemies love eat candy much 's keep try keep monster away favorite candy come evil plan trap om nom let 's consider a rope structure consist n nod n - 1 rope connect nod structure connect thus rope nod form a tree rope form structure associate length a candy tie node x structure om nom really want eat candy y spiders try stop decide entangle candy part structure a web thus attach candy large possible part rope structure spider use web cover rope path two arbitrary nod a b. thus y spiders cover set rope a union y paths give tree y paths arbitrarily intersect spiders want follow condition hold : spiders n't yet decide node structure tie candy many spiders cover structure web ask help help calculate optimal plan multiple value x y. first line contain number n q ( 1 ≤ n q ≤ 105 ) — number nod structure number question spiders want ask next n - 1 line determine rope structure i - th line contain three integers ui vi li ( 1 ≤ ui vi ≤ n ui ≠ vi 1 ≤ li ≤ 1000 ) show a rope length li nod ui vi next q line describe spiders ' question want answer question online encode message a special manner next q line contain two number xi yi first question spiders x = x1 y = y1 calculate value x y spiders ' i - th ( 2 ≤ i ≤ q ) question need use follow formulas : ansi - 1 total length rope cover a web answer ( i - 1 ) -th question follow inequality hold : 1 ≤ xi yi ≤ n. question spiders print a separate line a single integer ansi — total length rope cover web optimal plan,['greedy'],3300.0
482/D,a root tree consist n vertices let 's number integers 1 n inclusive root tree vertex 1 . i > 1 direct parent vertex i pi say vertex i child direct parent pi initially paint vertices red color like repaint vertices tree perform paint use function paint call root tree argument pseudocode function : a result function vertices may change color white black may remain red task determine number distinct possible color vertices tree assume color possible a nonzero probability get color a single call paint ( 1 ) assume color different a pair vertices paint different color color since require number may large find remainder division 1000000007 ( 109 + 7 ) first line contain a single integer n ( 2 ≤ n ≤ 105 ) — number vertexes tree second line contain n - 1 integers p2 p3 ... pn ( 1 ≤ pi < i ) number pi parent vertex i. print a single integer — answer problem modulo 1000000007 ( 109 + 7 ) possible color pattern first sample give,['dp'],2700.0
442/D,adam get a root tree ( connect non - directed graph without cycle ) immediately start color formally assign a color edge tree meet follow two condition : tree paint equally good adam let 's consider path vertex root let 's call number distinct color path cost vertex cost tree 's color maximum cost among vertexes help adam determine minimum possible cost paint tree initially adam 's tree consist a single vertex number one root one move adam add a new vertex already exist one new vertex get number equal minimum positive available integer operation need calculate minimum cost color result tree first line contain integer n ( 1 ≤ n ≤ 106 ) — number time a new vertex add second line contain n number pi ( 1 ≤ pi ≤ i ) — number vertexes add another vertex print n integers — minimum cost tree paint addition figure show one possible variants paint a tree sample last moment cost vertexes number 11 12 equal 3,['data structures'],2600.0
813/D,alice a beginner <unknown> ready create another masterpiece even single one two time ! alice a sheet n note write want take two non - empty non - intersecting subsequences form a melody sum lengths maximal subsequence a sequence derive another sequence delete elements without change order remain elements subsequence form a melody two adjacent note either differ 1 congruent modulo 7 . write a program calculate maximum sum lengths two non - empty non - intersecting subsequences form a melody first line contain one integer number n ( 2 ≤ n ≤ 5000 ) second line contain n integer number a1 a2 ... ( 1 ≤ ai ≤ 105 ) — note write a sheet print maximum sum lengths two non - empty non - intersecting subsequences form a melody first example subsequences [ 1 2 ] [ 4 5 ] give length 4 total second example subsequences [ 62 48 49 ] [ 60 61 ] give length 5 total choose subsequence [ 62 61 ] first place second melody maximum length 2 give result 4 maximal,['dp'],2600.0
1814/E,give undirected graph consist $$$ n $$$ vertices $$$ n-1 $$$ edge $$$ i $$$ -th edge weight $$$ a_i $$$ ; connect vertices $$$ i $$$ $$$ i+1 $$$ initially vertex contain a chip chip integer write ; integer write chip $$$ i $$$ -th vertex $$$ i $$$ one operation choose a chip ( multiple chip a single vertex may choose one ) move along one edge graph cost operation equal weight edge cost graph minimum cost a sequence operations meet follow condition : give $$$ q $$$ query form : query print cost graph note n't actually move chip ; compute cost chip initial position first line contain one integer $$$ n $$$ ( $$$ 2 \le n \le 200000 $$$ ) second line contain $$$ n-1 $$$ integers $$$ a_1 a_2 \dots a _ { n-1 } $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) third line contain one integer $$$ q $$$ ( $$$ 1 \le q \le 200000 $$$ ) $$$ q $$$ line follow $$$ i $$$ -th contain two integers $$$ k $$$ $$$ x $$$ ( $$$ 1 \le k \le n-1 $$$ ; $$$ 1 \le x \le 1000000000 $$$ ) $$$ i $$$ -th query query print one integer — cost graph query perform,"['data structures', 'dp']",2300.0
821/E,"okabe like take walk know spy organization could anywhere ; 's want know many different walk take city safely okabe 's city represent point ( x y ) x y non - negative okabe start origin ( point ( 0 0 ) ) need reach point ( k 0 ) okabe currently point ( x y ) one step go ( x + 1 y + 1 ) ( x + 1 y ) ( x + 1 y - 1 ) additionally n horizontal line segment i - th go x = ai x = bi inclusive y = ci guarantee a1 = 0 ≤ k ≤ bn ai = bi - 1 2 ≤ i ≤ n. i - th line segment force okabe walk y - value range 0 ≤ y ≤ ci x value satisfy ai ≤ x ≤ bi else might spy also mean require two line segment one segment end another begin okabe want know many walk origin point ( k 0 ) satisfy condition modulo 109 + 7 . first line input contain integers n k ( 1 ≤ n ≤ 100 1 ≤ k ≤ 1018 ) — number segment destination x coordinate next n line contain three space - separated integers ai bi ci ( 0 ≤ ai < bi ≤ 1018 0 ≤ ci ≤ 15 ) — leave right end a segment y coordinate guarantee a1 = 0 ≤ k ≤ bn ai = bi - 1 2 ≤ i ≤ n. print number walk satisfy condition modulo 1000000007 ( 109 + 7 ) graph correspond sample 1 . possible walk : graph correspond sample 2 . one walk okabe reach ( 3 0 ) , possible walk :",['dp'],2100.0
621/E,b block digits one consist n digits give input wet shark must choose exactly one digit block concatenate digits together form one large integer example choose digit 1 first block digit 2 second block get integer 12 . wet shark take number modulo x. please tell many ways choose one digit block get exactly k final result number may large print modulo 109 + 7 . note number ways choose digit block equal number 's occurrences example 3 ways choose digit 5 block 3 5 6 7 8 9 5 1 1 1 1 5 . first line input contain four space - separated integers n b k x ( 2 ≤ n ≤ 50 000 1 ≤ b ≤ 109 0 ≤ k < x ≤ 100 x ≥ 2 ) — number digits one block number block interest remainder modulo x modulo x next line contain n space separate integers ai ( 1 ≤ ai ≤ 9 ) give digits contain block print number ways pick exactly one digit block result integer equal k modulo x. second sample possible integers 22 26 62 66 . none give remainder 1 modulo 2 . third sample integers 11 13 21 23 31 33 remainder 1 modulo 2 . exactly one way obtain integers total answer 6,['dp'],2000.0
576/D,country exactly n cities number positive integers 1 n. city airport locate also one airline make m flight unfortunately use need a regular customer company namely opportunity enjoy flight i city ai city bi already make least di flight please note flight i fly exactly city ai city bi use fly city bi city ai interest fact may possibly <unknown> flight a beautiful view sky begin end city need get city 1 city n. unfortunately ' ve never travel plane minimum number flight perform order get city n ? note flight use multiple time first line contain two integers n m ( 2 ≤ n ≤ 150 1 ≤ m ≤ 150 ) — number cities country number flight company provide next m line contain number ai bi di ( 1 ≤ ai bi ≤ n 0 ≤ di ≤ 109 ) represent flight number i city ai city bi accessible clients make least di flight print ` ` impossible '' ( without quote ) impossible get city 1 city n use <unknown> least one way print a single integer — minimum number flight need make get destination point,['dp'],2700.0
453/D,elements harmony six <unknown> artifacts represent <unknown> aspects harmony <unknown> powerful force equestria inside elements harmony see a complete graph n vertices label 0 n - 1 n a power two equal 2 m energy elements harmony constant movement accord ancient book energy vertex u time i ( ei [ u ] ) equal : b [ ] transformation coefficient — array m + 1 integers f ( u v ) number ones binary representation number ( u xor v ) give transformation coefficient energy distribution time 0 ( e0 [ ] ) help twilight sparkle predict energy distribution time t ( et [ ] ) answer quite large output modulo p. first line contain three integers m t p ( 1 ≤ m ≤ 20 ; 0 ≤ t ≤ 1018 ; 2 ≤ p ≤ 109 ) follow line contain n ( n = 2 m ) integers e0 [ i ] ( 1 ≤ e0 [ i ] ≤ 109 ; 0 ≤ i < n ) next line contain m + 1 integers b [ i ] ( 0 ≤ b [ i ] ≤ 109 ; 0 ≤ i ≤ m ) output n line i - th line must contain a single integer et [ i ] modulo p,['dp'],3000.0
222/E,recently a top secret mission mar take place a result scientists manage obtain information martian dna know martian dna contain m different nucleotides number 1 m. special characteristics martian dna prevent nucleotide pair follow consecutively chain example nucleotide 1 nucleotide 2 follow consecutively martian dna chain nucleotides [ 1 2 ] a valid chain martian dna chain nucleotides [ 2 1 ] a valid chain ( correspond restriction ) number nucleotide pair ca n't follow dna chain consecutively k. need gene research require information quantity correct n - long chain martian dna task write a program calculate value first line contain three space - separated integers n m k ( 1 ≤ n ≤ 1015 1 ≤ m ≤ 52 0 ≤ k ≤ m2 ) next k line contain two character without a space represent a forbid nucleotide pair first character represent first nucleotide forbid pair second character represent second nucleotide nucleotides assign number 1 26 represent english alphabet letter ` ` a '' ` ` z '' ( 1 ` ` a '' 2 a ` ` b '' ... 26 a ` ` z '' ) nucleotides assign number 27 52 represent english alphabet letter ` ` a '' ` ` z '' ( 27 ` ` a '' 28 a ` ` b '' ... 52 a ` ` z '' ) guarantee forbid pair occur input guarantee nucleotide 's number forbid pair m. note order important nucleotide pair please use % lld specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d specifier print a single integer — seek number modulo 1000000007 ( 109 + 7 ) second test case possible three - nucleotide dnas permit nucleotide take one three value thus total 27 distinct three nucleotide dnas third test sample make dna two nucleotides — possible nucleotide ` ` a '' occur two time consecutively,['dp'],1900.0
1799/C,give a string $$$ s $$$ reorder character form a string $$$ t $$$ define $$$ t _ { \mathrm { max } } $$$ lexicographical maximum $$$ t $$$ $$$ t $$$ reverse order give $$$ s $$$ determine lexicographically minimum value $$$ t _ { \mathrm { max } } $$$ reorder $$$ t $$$ $$$ s $$$ a string $$$ a $$$ lexicographically smaller a string $$$ b $$$ one follow hold : first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 100000 $$$ ) — number test case descriptions test case follow first line test case contain a string $$$ s $$$ ( $$$ 1 \leq |s| \leq 100000 $$$ ) $$$ s $$$ consist lowercase english letter guarantee sum $$$ |s| $$$ test case exceed $$$ 100000 $$$ test case print lexicographically minimum value $$$ t _ { \mathrm { max } } $$$ reorder $$$ t $$$ $$$ s $$$ first test case one reorder $$$ s $$$ namely ` ` a '' second test case three reorder $$$ s $$$ lexicographical minimum $$$ t _ { \mathrm { max } } $$$ case ` ` aba '',"['greedy', 'strings']",1700.0
1784/C,hard version problem version need find answer every prefix monster array a computer game fight $$$ n $$$ monsters monster number $$$ i $$$ $$$ a_i $$$ health point $$$ a_i $$$ integers a monster alive least $$$ 1 $$$ health point cast spell two type : deal $$$ 1 $$$ damage a monster reduce health $$$ 1 $$$ spell type 1 cast number time a spell type 2 cast game every $$$ k = 1 2 \ldots n $$$ answer follow question suppose first $$$ k $$$ monsters number $$$ 1 2 \ldots k $$$ present game smallest number time need cast spell type 1 kill $$$ k $$$ monsters ? test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) description test case follow test case consist two line first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number monsters second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — monsters ' health point guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case print $$$ n $$$ integers $$$ k $$$ -th integers must equal smallest number time need cast spell type 1 kill $$$ k $$$ monsters monsters number $$$ 1 2 \ldots k $$$ present game first test case $$$ k = n $$$ initial health point monsters $$$ [ 3 1 2 ] $$$ enough cast a spell type 2 : since possible use spell type 1 answer $$$ 0 $$$ second test case $$$ k = n $$$ initial health point monsters $$$ [ 4 1 5 4 1 1 ] $$$ one optimal action sequence : spell type 1 cast $$$ 4 $$$ time total show smallest possible number,"['data structures', 'greedy']",2200.0
1765/N,give a positive integer $$$ x $$$ apply follow operation number : remove one occurrence digit a way result number contain lead zero still a positive integer example $$$ <unknown> $$$ convert $$$ <unknown> $$$ $$$ <unknown> $$$ $$$ 1012 $$$ $$$ 1014 $$$ ( note $$$ <unknown> $$$ a valid outcome ) ; $$$ 10 $$$ convert $$$ 1 $$$ ( $$$ 0 $$$ since positive ) task find minimum positive integer obtain $$$ x $$$ apply aforementioned operation exactly $$$ k $$$ time first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case first line test case contain a single integer $$$ x $$$ ( $$$ 1 \le x < 10^ { 500000 } $$$ ) second line contain a single integer $$$ k $$$ ( $$$ 0 \le k < |x| $$$ ) $$$ |x| $$$ length number $$$ x $$$ sum $$$ |x| $$$ test case exceed $$$ 500000 $$$ test case print one integer — minimum positive number obtain $$$ x $$$ apply operation exactly $$$ k $$$ time,['greedy'],1500.0
1733/D2,hard version problem version $$$ n \le 5000 $$$ hold version restriction $$$ x $$$ $$$ y $$$ make hack versions problem solve give two binary string $$$ a $$$ $$$ b $$$ length $$$ n $$$ follow operation number time ( possibly zero ) find minimum cost need make $$$ a $$$ equal $$$ b $$$ say way first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case test case consist three line first line test case contain three integers $$$ n $$$ $$$ x $$$ $$$ y $$$ ( $$$ 5 \le n \le 5000 $$$ $$$ 1 \le x y \le 1000000000 $$$ ) — length string cost per operation second line test case contain string $$$ a $$$ length $$$ n $$$ string consist digits $$$ 0 $$$ $$$ 1 $$$ third line test case contain string $$$ b $$$ length $$$ n $$$ string consist digits $$$ 0 $$$ $$$ 1 $$$ guarantee sum $$$ n $$$ test case n't exceed $$$ 5000 $$$ test case way make $$$ a $$$ equal $$$ b $$$ print $$$ -1 $$$ otherwise print minimum cost need make $$$ a $$$ equal $$$ b $$$ first test case select indices $$$ 2 $$$ $$$ 3 $$$ cost $$$ 8 $$$ minimum second test case perform follow operations total cost $$$ 10 $$$ third test case make $$$ a $$$ equal $$$ b $$$ use number operations fourth test case perform follow operations total cost $$$ 6 $$$ fifth test case perform follow operations total cost $$$ 7 $$$ sixth test case n't perform operation,"['dp', 'greedy']",2000.0
1714/C,find minimum number give sum digits $$$ s $$$ digits distinct ( i.e digits unique ) example $$$ <unknown> $$$ answer $$$ 389 $$$ minimum number digits different sum digits $$$ 20 $$$ ( $$$ 3 + 8 + <unknown> $$$ ) give $$$ s $$$ print require number first line contain integer $$$ t $$$ ( $$$ 1 \le t \le 45 $$$ ) — number test case test case specify a line contain integer $$$ s $$$ ( $$$ 1 \le s \le 45 $$$ ) print $$$ t $$$ integers — answer give test case,['greedy'],800.0
1702/D,let $$$ s $$$ a string lowercase latin letter price sum indices letter ( integer 1 26 ) include example price string abca $$$ 1 + 2 + 3 + 1=7 $$$ string $$$ w $$$ integer $$$ p $$$ give remove minimal number letter $$$ w $$$ price become less equal $$$ p $$$ print result string note result string may empty delete arbitrary letter go a row price a give string $$$ w $$$ less equal $$$ p $$$ nothing need delete $$$ w $$$ must output note delete a letter $$$ w $$$ order remain letter preserve example delete letter e string test get tst first line input contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number test case test follow descriptions $$$ t $$$ test case case consist two line first string $$$ w $$$ non - empty consist lowercase latin letter length exceed $$$ 2\cdot100000 $$$ second line contain integer $$$ p $$$ ( $$$ 1 \le p \le <unknown> $$$ ) guarantee sum string lengths $$$ w $$$ test case exceed $$$ 200000 $$$ output exactly $$$ t $$$ row $$$ i $$$ -th contain answer $$$ i $$$ -th set input data print longest string obtain $$$ w $$$ delete letter price less equal $$$ p $$$ several answer output note empty string — one possible answer case output empty string,['greedy'],1000.0
1686/A,give array $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ watch amaze film ` ` everything everywhere '' come follow operation one operation choose $$$ n-1 $$$ elements array replace arithmetic mean ( n't integer ) example array $$$ [ 1 2 3 1 ] $$$ get array $$$ [ 2 2 2 1 ] $$$ choose first three elements get array $$$ [ \frac { 4 } { 3 } \frac { 4 } { 3 } 3 \frac { 4 } { 3 } ] $$$ choose elements except third possible make elements array equal perform a finite number operations ? first line input contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 200 $$$ ) — number test case description test case follow first line test case contain a single integer $$$ n $$$ ( $$$ 3 \le n \le 50 $$$ ) — number integers second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 100 $$$ ) test case possible make elements equal number operations output $$$ \texttt { yes } $$$ otherwise output $$$ \texttt { } $$$ output $$$ \texttt { yes } $$$ $$$ \texttt { } $$$ case ( example string $$$ \texttt { yes } $$$ $$$ \texttt { yes } $$$ $$$ \texttt { yes } $$$ recognize a positive response ) first test case elements already equal second test case choose elements except third average $$$ \frac { 1 + 2 + 4 + 5 } { 4 } = 3 $$$ array become $$$ [ 3 3 3 3 3 ] $$$ 's possible show 's impossible make elements equal third fourth test case,['greedy'],800.0
1682/A,give a palindromic string $$$ s $$$ length $$$ n $$$ count number indices $$$ i $$$ $$$ ( 1 \le i \le n ) $$$ string remove $$$ s_i $$$ $$$ s $$$ still remain a palindrome example consider $$$ s $$$ = ` ` aba '' a palindrome a string read backward forward example ` ` abba '' ` ` a '' ` ` <unknown> '' palindromes whereas ` ` codeforces '' ` ` acd '' ` ` xy '' input consist multiple test case first line input contain a single integer $$$ t $$$ $$$ ( 1 \leq t \leq 1000 ) $$$ — number test case description test case follow first line testcase contain a single integer $$$ n $$$ $$$ ( 2 \leq n \leq 100000 ) $$$ — length string $$$ s $$$ second line test case contain a string $$$ s $$$ consist lowercase english letter guarantee $$$ s $$$ a palindrome guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output a single integer — number indices $$$ i $$$ $$$ ( 1 \le i \le n ) $$$ string remove $$$ s_i $$$ $$$ s $$$ still remain a palindrome first test case describe statement second test case indices $$$ i $$$ result palindrome remove $$$ s_i $$$ $$$ 3 4 5 6 $$$ hence answer $$$ 4 $$$ third test case removal indices result ` ` d '' a palindrome hence answer $$$ 2 $$$,"['greedy', 'strings']",800.0
1660/C,a string $$$ a = <unknown> a_n $$$ call even consist a concatenation ( join ) string length $$$ 2 $$$ consist character word a string $$$ a $$$ even two condition satisfy time : example follow string even : ` ` '' ( empty string ) ` ` tt '' ` ` aabb '' ` ` <unknown> '' ` ` <unknown> '' follow string even : ` ` aaa '' ` ` abab '' ` ` abba '' give a string $$$ s $$$ consist lowercase latin letter find minimum number character remove string $$$ s $$$ make even delete character consecutive first line input data contain integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — the number test case test descriptions test case follow test case consist one string $$$ s $$$ ( $$$ 1 \le |s| \le 200000 $$$ ) $$$ |s| $$$ — length string $$$ s $$$ string consist lowercase latin letter guarantee sum $$$ |s| $$$ test case exceed $$$ 200000 $$$ test case print a single number — minimum number character must remove make $$$ s $$$ even first test case remove character indices $$$ 6 $$$ $$$ 7 $$$ $$$ 9 $$$ get even string ` ` <unknown> '' second test case character occur exactly order get even string must remove character string third test case get even string ` ` aaaabb '' remove example $$$ 4 $$$ -th $$$ 6 $$$ -th character a string ` ` aabbbb '' remove $$$ 5 $$$ -th character first three,"['dp', 'greedy', 'strings']",1300.0
1634/A,give a string $$$ s $$$ length $$$ n $$$ a number $$$ k $$$ let 's denote $$$ rev ( s ) $$$ reverse string $$$ s $$$ ( i.e $$$ rev ( s ) = s_n s _ { n-1 } ... s_1 $$$ ) apply one two kinds operations string : many different string get a result perform exactly $$$ k $$$ operations ( possibly different kinds ) original string $$$ s $$$ ? statement denote concatenation string $$$ s $$$ $$$ t $$$ $$$ s + t $$$ word $$$ s + t = s_1 s_2 ... s_n t_1 t_2 ... t_m $$$ $$$ n $$$ $$$ m $$$ lengths string $$$ s $$$ $$$ t $$$ respectively first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case next $$$ 2 \cdot t $$$ line contain $$$ t $$$ test case : first line a test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n \le 100 $$$ $$$ 0 \le k \le 1000 $$$ ) — length string number operations respectively second string a test case contain one string $$$ s $$$ length $$$ n $$$ consist lowercase latin letter test case print answer ( number different string get exactly $$$ k $$$ operations ) a separate line show answer exceed $$$ 1000000000 $$$ give constraints first test case example : first operation string $$$ s $$$ become either aabbaa baaaab second operation 2 possibilities $$$ s $$$ : <unknown> <unknown>,"['greedy', 'strings']",800.0
1631/B,give array $$$ a $$$ $$$ n $$$ elements apply follow operation number time : example $$$ a = [ 2 1 3 4 5 3 ] $$$ choose $$$ l = 1 $$$ $$$ k = 2 $$$ apply operation array become $$$ a = [ 3 4 3 4 5 3 ] $$$ find minimum number operations ( possibly zero ) need make elements array equal input consist multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \leq t \leq 20000 $$$ ) — number test case description test case follow first line test case contain integer $$$ n $$$ ( $$$ 1 \leq n \leq 200000 $$$ ) — length array second line test case consist $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \leq a_i \leq n $$$ ) — elements array $$$ a $$$ guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ print $$$ t $$$ line line contain answer correspond test case — minimum number operations need make equal elements array give operation first test elements equal therefore operations need second test apply one operation $$$ k=1 $$$ $$$ l=1 $$$ set $$$ a_1 : = a_2 $$$ array become $$$ [ 1 1 ] $$$ $$$ 1 $$$ operation third test apply one operation $$$ k=1 $$$ $$$ l=4 $$$ set $$$ a_4 : = a_5 $$$ array become $$$ [ 4 4 4 4 4 ] $$$ fourth test apply one operation $$$ k=1 $$$ $$$ l=3 $$$ set $$$ a_3 : = a_4 $$$ array become $$$ [ 4 2 3 3 ] $$$ apply another operation $$$ k=2 $$$ $$$ l=1 $$$ set $$$ a_1 : = a_3 $$$ $$$ a_2 : = a_4 $$$ array become $$$ [ 3 3 3 3 ] $$$ fifth test one element therefore operations need,"['dp', 'greedy']",1100.0
1626/B,give a decimal representation integer $$$ x $$$ without lead zero perform follow reduction exactly : take two neighbor digits $$$ x $$$ replace sum without lead zero ( sum $$$ 0 $$$ 's represent a single $$$ 0 $$$ ) example $$$ x = <unknown> $$$ possible <unknown> : 's largest number obtain ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases testcase consist a single integer $$$ x $$$ ( $$$ 10 \le x < 10^ { 200000 } $$$ ) $$$ x $$$ n't contain lead zero total length decimal representations $$$ x $$$ testcases n't exceed $$$ 200000 $$$ testcase print a single integer — largest number obtain reduction apply exactly number contain lead zero first testcase example already explain statement second testcase one possible reduction : first second digits,"['greedy', 'strings']",1100.0
1620/F,give a permutation $$$ p $$$ consist $$$ n $$$ integers $$$ 1 2 \dots n $$$ ( a permutation array element $$$ 1 $$$ $$$ n $$$ occur exactly ) let 's call array $$$ a $$$ bipartite follow undirected graph bipartite : task find a bipartite array integers $$$ a $$$ size $$$ n $$$ $$$ a_i = p_i $$$ $$$ a_i = -p_i $$$ report array exist multiple answer print first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 200000 $$$ ) — number test case first line test case contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 1000000 $$$ ) — size permutation second line contain $$$ n $$$ integers $$$ p_1 p_2 \dots p_n $$$ sum $$$ n $$$ test case n't exceed $$$ 1000000 $$$ test case print answer follow format array $$$ a $$$ exist print ` ` '' a single line otherwise print ` ` yes '' first line $$$ n $$$ integers — array $$$ a $$$ second line,"['dp', 'greedy']",2800.0
1601/E,"students one unknown college n't pe course 's $$$ q $$$ decide visit a gym nearby gym open $$$ n $$$ days a ticket system $$$ i $$$ -th day cost one ticket equal $$$ a_i $$$ free buy one ticket per day activate a ticket purchase day $$$ i $$$ either day $$$ i $$$ day later activate ticket valid $$$ k $$$ days word activate ticket day $$$ t $$$ valid days $$$ t t + 1 \dots t + k - 1 $$$ know $$$ j $$$ -th student want visit gym day $$$ l_j $$$ $$$ r_j $$$ inclusive student use follow strategy visit gym day $$$ i $$$ ( $$$ l_j \le i \le r_j $$$ ) : note student visit gym start $$$ l_j $$$ student buy least one ticket day $$$ l_j $$$ help students calculate minimum amount money spend order go gym first line contain three integers $$$ n $$$ $$$ q $$$ $$$ k $$$ ( $$$ 1 \le n q \le 300\,000 $$$ ; $$$ 1 \le k \le n $$$ ) — number days number students number days ticket still valid second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 1000000000 $$$ ) — cost one ticket correspond day next $$$ q $$$ line contain two integers $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1 \le l_i \le r_i \le n $$$ ) — segment days correspond student want visit gym student print minimum possible amount money spend order go gym desire days let 's see student spend money :","['data structures', 'dp', 'greedy']",2900.0
1585/C,a total $$$ n $$$ depots locate a number line depot $$$ i $$$ lie point $$$ x_i $$$ $$$ 1 \le i \le n $$$ a salesman $$$ n $$$ bag goods attempt deliver one bag $$$ n $$$ depots $$$ n $$$ bag initially origin $$$ 0 $$$ carry $$$ k $$$ bag a time must collect require number goods origin deliver respective depots return origin collect next batch goods calculate minimum distance need cover deliver bag goods depots return origin deliver bag test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le <unknown> $$$ ) description test case follow first line test case contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le k \le n \le 200000 $$$ ) second line test case contain $$$ n $$$ integers $$$ x_1 x_2 \ldots x_n $$$ ( $$$ -1000000000 \le x_i \le 1000000000 $$$ ) possible depots share position guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output a single integer denote minimum distance need cover deliver bag goods depots first test case carry one bag a time thus follow a solution sequence give a minimum travel distance : $$$ 0 \to 2 \to 0 \to 4 \to 0 \to 3 \to 0 \to 1 \to 0 \to 5 $$$ $$$ 0 $$$ mean go origin grab one bag positive integer mean deliver bag a depot coordinate give a total distance $$$ 25 $$$ units must note sequence give distance second test case follow follow sequence among multiple sequence travel minimum distance : $$$ 0 \to 6 \to 8 \to 7 \to 0 \to 5 \to 4 \to 3 \to 0 \to ( -5 ) \to ( -10 ) \to ( -15 ) $$$ distance $$$ 41 $$$ show $$$ 41 $$$ optimal distance test case,['greedy'],1300.0
1559/B,story unravel a <unknown> tale tell ... shirahime a friend mocha 's keen play music game <unknown> share mocha interest puzzle solve day shirahime come a new simple puzzle want mocha solve however puzzle easy mocha solve want solve tell answer puzzle describe follow $$$ n $$$ square arrange a row paint either red blue among square paint already others blank decide color paint blank square pair adjacent square may color <unknown> define imperfectness number pair adjacent square share color example imperfectness ` ` <unknown> '' $$$ 3 $$$ ` ` bb '' occur ` ` rr '' occur twice goal minimize imperfectness print color square paint test contain multiple test case first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — number test case test case consist two line first line test case contain integer $$$ n $$$ ( $$$ 1\leq n\leq 100 $$$ ) — length square row second line test case contain a string $$$ s $$$ length $$$ n $$$ contain character ' b ' ' r ' ' ? ' ' b ' stand a blue square ' r ' a red square ' ? ' a blank square test case print a line a string contain ' b ' ' r ' color square paint imperfectness minimize multiple solutions print first test case square paint ` ` <unknown> '' imperfectness $$$ 1 $$$ ( since square $$$ 2 $$$ $$$ 3 $$$ color ) minimum possible imperfectness,"['dp', 'greedy']",900.0
1556/E,william two array $$$ a $$$ $$$ b $$$ consist $$$ n $$$ items segment $$$ l .. r $$$ array william want know possible equalize value items segment use a balance operation formally value equalize $$$ i $$$ $$$ l $$$ $$$ r $$$ hold $$$ a_i = b_i $$$ perform a balance operation even number indices must select $$$ l \le pos_1 < pos_2 < \dots < pos_k \le r $$$ next items array a position $$$ pos_1 <unknown> <unknown> \dots $$$ get incremented one items array b position $$$ pos_2 <unknown> <unknown> \dots $$$ get incremented one william want find possible equalize value elements two array segment use number balance operations minimal number operations require note segment operations perform independently first line contain a two integers $$$ n $$$ $$$ q $$$ ( $$$ 2 \le n \le 100000 $$$ $$$ 1 \le q \le 100000 $$$ ) size array $$$ a $$$ $$$ b $$$ number segment second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ $$$ ( 0 \le a_i \le 1000000000 ) $$$ third line contain $$$ n $$$ integers $$$ b_1 b_2 \dots b_n $$$ $$$ ( 0 \le b_i \le 1000000000 ) $$$ next $$$ q $$$ line contain two integers $$$ l_i $$$ $$$ r_i $$$ $$$ ( 1 \le l_i < r_i \le n ) $$$ edge segment segment output a single number — minimal number balance operations need ` ` -1 '' impossible equalize segment array first segment $$$ 2 $$$ $$$ 6 $$$ one operation $$$ pos = [ 2 3 5 6 ] $$$ operation array : $$$ a = [ 0 2 2 9 4 2 7 5 ] $$$ $$$ b = [ 2 2 2 9 4 2 5 8 ] $$$ array equal a segment $$$ 2 $$$ $$$ 6 $$$ operation second segment $$$ 1 $$$ $$$ 7 $$$ three follow operations : operations array : $$$ a = [ 2 2 2 9 4 2 7 5 ] $$$ $$$ b = [ 2 2 2 9 4 2 7 8 ] $$$ array equal a segment $$$ 1 $$$ $$$ 7 $$$ operations third segment $$$ 2 $$$ $$$ 4 $$$ one operation $$$ pos = [ 2 3 ] $$$ operation array : $$$ a = [ 0 2 2 9 3 2 7 5 ] $$$ $$$ b = [ 2 2 2 9 4 1 5 8 ] $$$ array equal a segment $$$ 2 $$$ $$$ 4 $$$ operation impossible equalize fourth fifth segment,"['data structures', 'dp', 'greedy']",2200.0
1511/A,upcoming movie director release first movie also launch a simple review site two button press — upvote downvote however site simple inside two servers separate count upvotes downvotes $$$ n $$$ reviewers enter site one one reviewer one follow type : reviewer vote movie exactly since two servers actually manipulate vote movie get many upvotes possible a reviewer enter a site know type send either first server second one maximum total number upvotes gather servers decide server send reviewer ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) — number testcases descriptions $$$ t $$$ testcases follow first line testcase contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — number reviewers second line testcase contain $$$ n $$$ integers $$$ r_1 r_2 \dots r_n $$$ ( $$$ 1 \le r_i \le 3 $$$ ) — type reviewers order enter site testcase print a single integer — maximum total number upvotes gather servers decide server send reviewer first testcase example send reviewer either servers — 'll downvote anyway movie wo n't receive upvotes second testcase example send reviewers first server : two upvotes total <unknown> send first second reviewers first server last reviewer — second server :,['greedy'],800.0
1488/B,a bracket sequence a string contain character ` ` ( ` ` ` ` ) '' a regular bracket sequence ( shortly rbs ) a bracket sequence transform a correct arithmetic expression insert character ` ` 1 '' ` ` + '' original character sequence example : give a string $$$ s $$$ rbs apply number operations string operation one follow type : operation $$$ 2 $$$ apply $$$ k $$$ time calculate maximum number operations apply $$$ s $$$ become empty first line contain one integer $$$ t $$$ ( $$$ 1 \le t \le 100000 $$$ ) — number test case test case describe two line first line contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 2 \le n \le 200000 $$$ ; $$$ 1 \le k \le n $$$ ; $$$ n $$$ even ) — length $$$ s $$$ maximum number operations type $$$ 2 $$$ apply second line contain a string $$$ s $$$ $$$ n $$$ character ' ( ' ' ) ' string rbs sum $$$ n $$$ test case n't exceed $$$ 200000 $$$ test case print one integer — maximum number operations apply,['greedy'],1800.0
1477/E,"famous oh - suit - <unknown> tournament two team play grand prize precious pepper point first team consist $$$ n $$$ players second team consist $$$ m $$$ players player a potential : potential $$$ i $$$ -th player first team $$$ a_i $$$ potential $$$ i $$$ -th player second team $$$ b_i $$$ tournament players stage order a score device initially assign integer $$$ k $$$ use value performance players score players assign order appear stage let potential current player $$$ x $$$ potential previous player $$$ y $$$ ( $$$ y $$$ equal $$$ x $$$ first player ) , $$$ x - y $$$ add value score device afterwards value score device become negative value reset $$$ 0 $$$ lastly player 's score assign current value score device score a team sum score members insane fan first team nezzar <unknown> want biggest win first team wonder maximum difference score first team second team formally let score first team $$$ score_f $$$ score second team $$$ score_s $$$ nezzar want find maximum value $$$ score_f - score_s $$$ possible order players stage however situation often change $$$ q $$$ events happen three type events : help nezzar answer query third type ? first line contain three integers $$$ n $$$ $$$ m $$$ $$$ q $$$ ( $$$ 1 \le n m \le 2 \cdot 100000 1 \le q \le 500000 $$$ ) second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 0 \le a_i \le 1000000 $$$ ) third line contain $$$ m $$$ integers $$$ b_1 b_2 \ldots b_m $$$ ( $$$ 0 \le b_i \le 1000000 $$$ ) follow $$$ q $$$ line contain descriptions events describe statement one three possible format : query third type print answer query first query first test tournament hold $$$ k = 5 $$$ would optimal arrange players way ( potentials write ) : $$$ \underline { 7 } $$$ $$$ 3 $$$ $$$ 5 $$$ $$$ 4 $$$ $$$ 6 $$$ $$$ \underline { 1 } $$$ $$$ \underline { 2 } $$$ ( underline number potentials players first team ) individual score players number order appearance : $$$ score_f = 5 + 0 + 1 = 6 $$$ $$$ score_s = 1 + 3 + 2 + 4 = 10 $$$ score difference $$$ 6 - 10 = -4 $$$ prove maximum possible score difference","['data structures', 'greedy']",3300.0
1468/A,let 's call a sequence $$$ b_1 b_2 b_3 \dots b _ { k - 1 } b_k $$$ almost increase $$$ $$$ \min ( b_1 b_2 ) \le \min ( b_2 b_3 ) \le \dots \le \min ( b _ { k - 1 } b_k ) $$$ $$$ particular sequence two elements almost increase give a sequence integers $$$ a_1 a_2 \dots a_n $$$ calculate length longest almost increase subsequence 'll give $$$ t $$$ test case solve test case independently reminder : a subsequence a sequence derive another sequence delete elements without change order remain elements first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number independent test case first line test case contain a single integer $$$ n $$$ ( $$$ 2 \le n \le 500000 $$$ ) — length sequence $$$ a $$$ second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le n $$$ ) — sequence 's guarantee total sum $$$ n $$$ test case n't exceed $$$ 500000 $$$ test case print one integer — length longest almost increase subsequence first test case one optimal answer subsequence $$$ 1 2 7 2 2 3 $$$ second third test case whole sequence $$$ a $$$ already almost increase,"['data structures', 'dp', 'greedy']",2200.0
1452/C,give a string $$$ s $$$ consist bracket two type : ' ( ' ' ) ' ' [ ' ' ] ' a string call a regular bracket sequence ( rbs ) 's one follow type : plus a concatenation two string one move choose a non - empty subsequence string $$$ s $$$ ( necessarily consecutive ) rbs remove string concatenate remain part without change order maximum number move perform ? first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number testcases next $$$ t $$$ line contain a non - empty string consist character ' ( ' ' ) ' ' [ ' ' ] ' total length string testcases n't exceed $$$ 200000 $$$ testcase print a single integer — maximum number move perform a give string $$$ s $$$ first example erase whole string second example first erase bracket position $$$ 1 $$$ $$$ 2 $$$ : ` ` [ ] ( ) '' ` ` ( ) '' leave erase whole could erase whole string begin would get one move instead two third example first erase bracket position $$$ 1 $$$ $$$ 3 $$$ : ` ` ( [ ) ] '' form rbs ` ` ( ) '' ` ` [ ] '' leave erase whole fourth example subsequence rbs ca n't perform a move fifth example erase bracket position $$$ 2 $$$ $$$ 4 $$$ : ` ` ) [ ( ] '' get ` ` ) ( ` ` a result erase nothing,['greedy'],800.0
1392/D,omkar play favorite <unknown> video game bed war ! bed war $$$ n $$$ players arrange a circle $$$ j $$$ $$$ 2 \leq j \leq n $$$ player $$$ j - 1 $$$ leave player $$$ j $$$ player $$$ j $$$ right player $$$ j - 1 $$$ additionally player $$$ n $$$ leave player $$$ 1 $$$ player $$$ 1 $$$ right player $$$ n $$$ currently player attack either player leave player right mean player currently attack either $$$ 0 $$$ $$$ 1 $$$ $$$ 2 $$$ players a key element bed war strategy a player attack exactly $$$ 1 $$$ player logically attack player response instead a player attack $$$ 0 $$$ $$$ 2 $$$ players bed war strategy say player logically attack either adjacent players unfortunately might players game follow bed war strategy correctly omkar aware player currently attack talk amount $$$ n $$$ players game make instead attack another player — i. e. currently attack player leave omkar convince instead attack player right ; currently attack player right omkar convince instead attack player leave omkar would like players act logically calculate minimum amount players omkar need talk players talk ( ) change player attack players act logically accord bed war strategy test contain multiple test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 10000 $$$ ) descriptions test case follow first line test case contain one integer $$$ n $$$ ( $$$ 3 \leq n \leq 200000 $$$ ) — amount players ( therefore bed ) game bed war second line test case contain a string $$$ s $$$ length $$$ n $$$ $$$ j $$$ -th character $$$ s $$$ equal l $$$ j $$$ -th player attack player leave r $$$ j $$$ -th player attack player right guarantee sum $$$ n $$$ test case exceed $$$ 200000 $$$ test case output one integer : minimum number players omkar need talk make players act logically accord bed war strategy prove always possible omkar achieve give constraints first test case players $$$ 1 $$$ $$$ 2 $$$ attack players $$$ 3 $$$ $$$ 4 $$$ attack player attack exactly $$$ 1 $$$ player player attack player attack players already logical accord bed war strategy omkar need talk make answer $$$ 0 $$$ second test case every player act logically : example player $$$ 3 $$$ attack player $$$ 2 $$$ n't attack response omkar talk player $$$ 3 $$$ convert attack arrangement <unknown> see players logical accord bed war strategy make answer $$$ 1 $$$,"['dp', 'greedy']",1700.0
1385/C,give array $$$ a $$$ consist $$$ n $$$ integers find length smallest ( shortest ) prefix elements need erase $$$ a $$$ make a good array recall prefix array $$$ a= [ a_1 a_2 \dots a_n ] $$$ a subarray consist several first elements : prefix array $$$ a $$$ length $$$ k $$$ array $$$ [ a_1 a_2 \dots a_k ] $$$ ( $$$ 0 \le k \le n $$$ ) array $$$ b $$$ length $$$ m $$$ call good obtain a non - decreasing array $$$ c $$$ ( $$$ c_1 \le c_2 \le \dots \le c _ { m } $$$ ) repeat follow operation $$$ m $$$ time ( initially $$$ c $$$ empty ) : example $$$ 4 $$$ operations : take $$$ b_1 $$$ $$$ b _ { m } $$$ $$$ b _ { m-1 } $$$ last $$$ b_2 $$$ $$$ b $$$ become $$$ [ b_3 b_4 \dots b _ { <unknown> } ] $$$ $$$ c = [ b_1 b _ { m } b _ { m-1 } b_2 ] $$$ consider follow example : $$$ b = [ 1 2 3 4 4 2 1 ] $$$ array good obtain non - decreasing array $$$ c $$$ follow sequence operations : note array consist one element good print length shortest prefix $$$ a $$$ delete ( erase ) make $$$ a $$$ a good array note require length $$$ 0 $$$ answer $$$ t $$$ independent test case first line input contain one integer $$$ t $$$ ( $$$ 1 \le t \le 20000 $$$ ) — number test case $$$ t $$$ test case follow first line test case contain one integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — length $$$ a $$$ second line test case contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 1 \le a_i \le 200000 $$$ ) $$$ a_i $$$ $$$ i $$$ -th element $$$ a $$$ guarantee sum $$$ n $$$ exceed $$$ 200000 $$$ ( $$$ \sum n \le 200000 $$$ ) test case print answer : length shortest prefix elements need erase $$$ a $$$ make a good array first test case example array $$$ a $$$ already good n't need erase prefix second test case example initial array $$$ a $$$ good let 's erase first $$$ 4 $$$ elements $$$ a $$$ result $$$ [ 4 5 2 ] $$$ result array good prove erase fewer number first elements result good,['greedy'],1200.0
1380/B,"recently find a bot play ` ` rock paper scissor '' unfortunately bot use quite a simple algorithm play : a string $$$ s = s_1 s_2 \dots s _ { n } $$$ length $$$ n $$$ letter either r s p. initialize bot choose a start index $$$ pos $$$ ( $$$ 1 \le pos \le n $$$ ) play number round first round choose ` ` rock '' ` ` scissor '' ` ` paper '' base value $$$ s _ { pos } $$$ : second round bot 's choice base value $$$ s _ { pos + 1 } $$$ third round — $$$ s _ { pos + 2 } $$$ $$$ s_n $$$ bot return $$$ s_1 $$$ continue game plan play $$$ n $$$ round ' ve already figure string $$$ s $$$ still n't know start index $$$ pos $$$ since bot 's tactic bore ' ve decide find $$$ n $$$ choices round maximize average number win word let 's suggest choices $$$ c_1 c_2 \dots c_n $$$ bot start index $$$ pos $$$ 'll win $$$ win ( pos ) $$$ round find $$$ c_1 c_2 \dots c_n $$$ $$$ \frac { win ( 1 ) + win ( 2 ) + \dots + win ( n ) } { n } $$$ maximum possible first line contain a single integer $$$ t $$$ ( $$$ 1 \le t \le 1000 $$$ ) — number test case next $$$ t $$$ line contain test case — one per line first line test case contain string $$$ s = s_1 s_2 \dots s _ { n } $$$ ( $$$ 1 \le n \le 200000 $$$ ; $$$ s_i \in \ { \text { r } \text { s } \text { p } \ } $$$ ) — string bot 's guarantee total length string one test n't exceed $$$ 200000 $$$ test case print $$$ n $$$ choices $$$ c_1 c_2 \dots c_n $$$ maximize average number win print manner string $$$ s $$$ multiple optimal answer print first test case bot ( wherever start ) always choose ` ` rock '' always choose ` ` paper '' , case win $$$ n = 4 $$$ round average also equal $$$ 4 $$$ second test case : a picture wikipedia explain ` ` rock paper scissor '' game :",['greedy'],1400.0
1315/C,give a sequence $$$ b_1 b_2 \ldots b_n $$$ find lexicographically minimal permutation $$$ a_1 a_2 \ldots a _ { 2n } $$$ $$$ b_i = \min ( a _ { 2i-1 } a _ { 2i } ) $$$ determine impossible test contain one test case first line contain number test case $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) first line test case consist one integer $$$ n $$$ — number elements sequence $$$ b $$$ ( $$$ 1 \le n \le 100 $$$ ) second line test case consist $$$ n $$$ different integers $$$ b_1 \ldots b_n $$$ — elements sequence $$$ b $$$ ( $$$ 1 \le b_i \le 2n $$$ ) guarantee sum $$$ n $$$ test case n't exceed $$$ 100 $$$ test case appropriate permutation print one number $$$ -1 $$$ otherwise print $$$ 2n $$$ integers $$$ a_1 \ldots a _ { 2n } $$$ — require lexicographically minimal permutation number $$$ 1 $$$ $$$ 2n $$$,['greedy'],1200.0
1251/B,a palindrome a string $$$ t $$$ read backward forward ( formally $$$ t [ i ] = t [ |t| + 1 - i ] $$$ $$$ i \in [ 1 |t| ] $$$ ) $$$ |t| $$$ denote length a string $$$ t $$$ example string 010 1001 0 palindromes $$$ n $$$ binary string $$$ s_1 s_2 \dots s_n $$$ ( $$$ s_i $$$ consist zero and/or ones ) swap pair character number time ( possibly zero ) character either string different string — restrictions formally one move : maximum number string make palindromic simultaneously ? first line contain single integer $$$ q $$$ ( $$$ 1 \le q \le 50 $$$ ) — number test case first line test case contain single integer $$$ n $$$ ( $$$ 1 \le n \le 50 $$$ ) — number binary string next $$$ n $$$ line contain binary string $$$ s_1 s_2 \dots s_n $$$ — one per line 's guarantee $$$ 1 \le |s_i| \le 50 $$$ string <unknown> zero and/or ones print $$$ q $$$ integers — one per test case $$$ i $$$ -th integer maximum number palindromic string achieve simultaneously perform zero swap string $$$ i $$$ -th test case first test case $$$ s_1 $$$ palindrome answer $$$ 1 $$$ second test case ca n't make three string palindromic time make pair string palindromic example let 's make $$$ s_1 = \text { 0110 } $$$ $$$ s_2 = \text { 111111 } $$$ $$$ s_3 = \text { <unknown> } $$$ third test case make string palindromic example $$$ s_1 = \text { 11011 } $$$ $$$ s_2 = \text { 100001 } $$$ last test case $$$ s_2 $$$ palindrome make $$$ s_1 $$$ palindrome example swap $$$ s_1 [ 2 ] $$$ $$$ s_1 [ 3 ] $$$,"['greedy', 'strings']",1400.0
1216/F,work a system administrator a dormitory $$$ n $$$ room one another along a straight hallway room number $$$ 1 $$$ $$$ n $$$ connect $$$ n $$$ room internet connect room internet directly cost connection $$$ i $$$ -th room $$$ i $$$ coin room also a spot a router cost place a router $$$ i $$$ -th room also $$$ i $$$ coin place a router a room a spot place a router room $$$ i $$$ connect room number $$$ max ( 1 ~i - k ) $$$ $$$ min ( n ~i + k ) $$$ inclusive internet $$$ k $$$ range router value $$$ k $$$ routers calculate minimum total cost connect $$$ n $$$ room internet assume number room a spot a router greater number routers first line input contain two integers $$$ n $$$ $$$ k $$$ ( $$$ 1 \le n k \le 200000 $$$ ) — number room range router second line input contain one string $$$ s $$$ length $$$ n $$$ consist zero ones $$$ i $$$ -th character string equal ' 1 ' a spot a router $$$ i $$$ -th room $$$ i $$$ -th character string equal ' 0 ' place a router $$$ i $$$ -th room print one integer — minimum total cost connect $$$ n $$$ room internet first example enough place router room $$$ 3 $$$ room connect internet total cost connection $$$ 3 $$$ second example place routers nowhere need connect room directly thus total cost connection room $$$ 1 + 2 + 3 + 4 + 5 + 6 = 21 $$$ third example need connect room $$$ 1 $$$ directly place router room $$$ 3 $$$ thus total cost connection room $$$ 1 + 3 = 4 $$$ fourth example need place routers room $$$ 5 $$$ $$$ 10 $$$ room connect internet total cost connection $$$ 5 + 10 = 15 $$$,"['data structures', 'dp', 'greedy']",2100.0
1214/C,"petya 's friends make a birthday present — a bracket sequence petya quite disappoint gift dream correct bracket sequence yet tell friends nothing dream decide fix present make everything right petya go move one bracket original place sequence position reverse bracket ( e.g turn ` ` ( ` ` ` ` ) '' vice versa ) n't allow remind bracket sequence $$$ s $$$ call correct : example ` ` ( ( ) ( ) ) '' ` ` ( ) '' correct ` ` ) ( ` ` ` ` ( ) ) '' help petya fix birthday present understand whether move one bracket sequence become correct first line input contain a single number $$$ n $$$ ( $$$ 1 \leq n \leq 200\,000 $$$ ) — length sequence petya receive birthday second line input contain bracket sequence length $$$ n $$$ contain symbols ` ` ( ` ` ` ` ) '' print ` ` yes '' petya make sequence correct move one bracket otherwise print ` ` '' first example petya move first bracket end thus turn sequence ` ` ( ) '' correct bracket sequence second example way move one bracket sequence become correct third example sequence already correct 's need move bracket","['data structures', 'greedy']",1200.0
1203/F1,difference easy hard versions complete project easy version necessary hard version polycarp a famous freelancer current rat $$$ r $$$ units rich customers ask complete project company complete $$$ i $$$ -th project polycarp need least $$$ a_i $$$ units rat ; complete project rat change $$$ b_i $$$ ( rat increase decrease $$$ b_i $$$ ) ( $$$ b_i $$$ positive negative ) polycarp 's rat fall zero people wo n't trust a low rat freelancer possible complete project ? formally write a program check order project exist polycarp enough rat start project non - negative rat complete project word check exist order project polycarp complete enough rat start project non - negative rat complete project first line input contain two integers $$$ n $$$ $$$ r $$$ ( $$$ 1 \le n \le 100 1 \le r \le 30000 $$$ ) — number project initial rat polycarp respectively next $$$ n $$$ line contain project one per line $$$ i $$$ -th project represent a pair integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i \le 30000 $$$ $$$ -300 \le b_i \le 300 $$$ ) — rat require complete $$$ i $$$ -th project rat change project completion print ` ` yes '' ` ` '' first example possible order : $$$ 1 2 3 $$$ second example possible order : $$$ 2 3 1 $$$ third example possible order : $$$ 3 1 4 2 $$$,['greedy'],2100.0
1182/C,give $$$ n $$$ word consist lowercase alphabet letter word contain least one vowel go choose give word make many beautiful lyric possible lyric consist two line line consist two word separate whitespace a lyric beautiful satisfy condition also letter ` ` a '' ` ` e '' ` ` o '' ` ` i '' ` ` u '' vowels note ` ` y '' never vowel example a beautiful lyric ` ` <unknown> <unknown> '' example a beautiful lyric ` ` <unknown> mcdic '' many beautiful lyric write give word ? note use a word time give example a word give three time use three time first line contain single integer $$$ n $$$ ( $$$ 1 \le n \le 10^ { 5 } $$$ ) — number word $$$ i $$$ -th next $$$ n $$$ line contain string $$$ s _ { i } $$$ consist lowercase alphabet letter — $$$ i $$$ -th word guarantee sum total word length equal less $$$ 10^ { 6 } $$$ word contain least one vowel first line print $$$ m $$$ — number maximum possible beautiful lyric next $$$ 2 m $$$ line print $$$ m $$$ beautiful lyric ( two line per lyric ) multiple answer print first example beautiful lyric one possible answer let 's look first lyric sample output first example ` ` proud hooray round '' form a beautiful lyric ` ` '' ` ` hooray '' number vowels ` ` proud '' ` ` round '' number vowels line last vowel hand form beautiful lyric word ` ` codeforces '' second example form beautiful lyric give word third example use word ` ` '' three time,"['data structures', 'greedy', 'strings']",1700.0
1090/A,a conglomerate consist $$$ n $$$ company make manage easier owners decide merge company one law possible merge two company owners plan select two company merge one continue one company leave anti - monopoly service forbid merge company suspect unfriendly <unknown> criterion use difference maximum salaries two company merge allow maximum salaries equal fulfill anti - monopoly requirements owners change salaries company merge labor union insist two condition : allow increase salaries moreover employees one company must get increase sure enough owners want minimize total increase salaries company help find minimal possible increase allow merge company one first line contain a single integer $$$ n $$$ — number company conglomerate ( $$$ 1 \le n \le 200000 $$$ ) next $$$ n $$$ line describe a company a company description start integer $$$ m_i $$$ — number employees ( $$$ 1 \le m_i \le 200000 $$$ ) $$$ m_i $$$ integers follow : salaries employees salaries positive exceed $$$ 1000000000 $$$ total number employees company exceed $$$ 200000 $$$ output a single integer — minimal total increase employees allow merge company one optimal merge strategies follow first increase salaries second company $$$ 2 $$$ merge first second company conglomerate consist two company salaries $$$ [ 4 3 4 3 ] $$$ $$$ [ 1 1 1 ] $$$ merge increase salaries second $$$ 3 $$$ total increase $$$ 2 + 2 + 3 + 3 + 3 = 13 $$$,['greedy'],1300.0
1077/B,a house $$$ n $$$ flats situate main street berlatov vova watch house every night house represent array $$$ n $$$ integer number $$$ a_1 a_2 \dots a_n $$$ $$$ a_i = 1 $$$ $$$ i $$$ -th flat light $$$ a_i = 0 $$$ otherwise vova think people $$$ i $$$ -th flats disturb sleep $$$ 1 < i < n $$$ $$$ a _ { i - 1 } = a _ { i + 1 } = 1 $$$ $$$ a_i = 0 $$$ vova concern follow question : minimum number $$$ k $$$ people exactly $$$ k $$$ pairwise distinct flats turn light nobody disturb ? task find number $$$ k $$$ first line input contain one integer $$$ n $$$ ( $$$ 3 \le n \le 100 $$$ ) — number flats house second line input contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ a_i \in \ { 0 1\ } $$$ ) $$$ a_i $$$ state light $$$ i $$$ -th flat print one integer — minimum number $$$ k $$$ people exactly $$$ k $$$ pairwise distinct flats turn light nobody disturb first example people flats $$$ 2 $$$ $$$ 7 $$$ $$$ 4 $$$ $$$ 7 $$$ turn light nobody disturb show better answer example disturb people second third examples,['greedy'],1000.0
1051/G,suppose give a sequence $$$ s $$$ $$$ k $$$ pair integers $$$ ( a_1 b_1 ) ( a_2 b_2 ) \dots ( a_k b_k ) $$$ perform follow operations : operation perform arbitrary number time ( possibly zero ) let $$$ f ( s ) $$$ minimum possible $$$ x $$$ exist a sequence operations total cost $$$ x $$$ $$$ a_i $$$ $$$ s $$$ pairwise distinct task ... give a sequence $$$ p $$$ consist $$$ n $$$ pair integers $$$ ( a_1 b_1 ) ( a_2 b_2 ) \dots ( a_n b_n ) $$$ $$$ b_i $$$ pairwise distinct let $$$ p_i $$$ sequence consist first $$$ i $$$ pair $$$ p $$$ task calculate value $$$ f ( p_1 ) f ( p_2 ) \dots f ( p_n ) $$$ first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — number pair sequence $$$ p $$$ next $$$ n $$$ line contain elements $$$ p $$$ : $$$ i $$$ -th next $$$ n $$$ line contain two integers $$$ a_i $$$ $$$ b_i $$$ ( $$$ 1 \le a_i \le 200000 $$$ $$$ 1 \le b_i \le n $$$ ) guarantee value $$$ b_i $$$ pairwise distinct print $$$ n $$$ integers — $$$ i $$$ -th number equal $$$ f ( p_i ) $$$,"['data structures', 'greedy']",2900.0
1037/B,give array $$$ a $$$ $$$ n $$$ integers integer $$$ s $$$ guarantee $$$ n $$$ odd one operation either increase decrease single element one calculate minimum number operations require make median array equal $$$ s $$$ median array odd length value element locate middle position array sort example median array $$$ 6 5 8 $$$ equal $$$ 6 $$$ since sort array get $$$ 5 6 8 $$$ $$$ 6 $$$ locate middle position first line contain two integers $$$ n $$$ $$$ s $$$ ( $$$ 1\le n\le 2\cdot 100000 - 1 $$$ $$$ 1\le s\le 1000000000 $$$ ) — length array require value median second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1\le a_i \le 1000000000 $$$ ) — elements array $$$ a $$$ guarantee $$$ n $$$ odd a single line output minimum number operations make median equal $$$ s $$$ first sample $$$ 6 $$$ increase twice array transform $$$ 8 5 8 $$$ become $$$ 5 8 8 $$$ sort hence median equal $$$ 8 $$$ second sample $$$ 19 $$$ increase $$$ 15 $$$ increase five time array become equal $$$ 21 20 12 11 20 20 12 $$$ sort array get $$$ 11 12 12 20 20 20 21 $$$ way median $$$ 20 $$$,['greedy'],1300.0
978/B,take file send polycarp try send a file social network ` ` codehorses '' encounter unexpected problem name file contain three ` ` x '' ( lowercase latin letter ` ` x '' ) a row system consider file content correspond social network topic case file send error message display determine minimum number character remove file name name contain ` ` xxx '' a substring print 0 file name initially contain a forbid substring ` ` xxx '' delete character arbitrary position ( necessarily consecutive ) delete a character length a string reduce $$$ 1 $$$ example delete character position $$$ 2 $$$ string ` ` <unknown> '' result string ` ` <unknown> '' first line contain integer $$$ n $$$ $$$ ( 3 \le n \le 100 ) $$$ — length file name second line contain a string length $$$ n $$$ consist lowercase latin letter — file name print minimum number character remove file name name contain ` ` xxx '' a substring initially file name <unknown> contain a forbid substring ` ` xxx '' print 0 . first example polycarp try send a file name contain number $$$ 33 $$$ write roman numerals send file name contain three letter ` ` x '' a row send file need remove one letter,"['greedy', 'strings']",800.0
924/C,arkady decide observe a river n consecutive days river 's water level day equal real value arkady go <unknown> day make a mark side channel height water level coincide a mark make new mark create water wash mark away arkady write number mark strictly water level day i - th day value equal mi define di number mark strictly water level i - th day find minimum possible sum di days mark channel first day first line contain a single positive integer n ( 1 ≤ n ≤ 105 ) — number days second line contain n space - separated integers m1 m2 ... mn ( 0 ≤ mi < i ) — number mark strictly water day output one single integer — minimum possible sum number mark strictly water level among days first example follow figure show optimal case note day 3 a new mark create 3 mark water day 4 . total number mark <unknown> 0 + 0 + 2 + 0 + 3 + 1 = 6 . second example follow figure show optimal case,"['data structures', 'dp', 'greedy']",1700.0
720/A,close ceremony <unknown> code cup hold big hall n × m seat arrange n row m seat a row seat two coordinate ( x y ) ( 1 ≤ x ≤ n 1 ≤ y ≤ m ) two queue people wait enter hall : k people stand ( 0 0 ) n·m - k people stand ( 0 m + 1 ) person a ticket a specific seat person p ( x y ) ticket seat ( xp yp ) walk |x - <unknown> + |y - <unknown> get seat person a stamina — maximum distance person agree walk find possible distribute n·m ticket a way person enough stamina get seat first line input contain two integers n m ( 1 ≤ n·m ≤ 104 ) — size hall second line contain several integers first integer k ( 0 ≤ k ≤ n·m ) — number people ( 0 0 ) follow k integers indicate stamina person third line also contain several integers first integer l ( l = n·m - k ) — number people ( 0 m + 1 ) follow l integers indicate stamina person stamina person a positive integer less equal n + m. possible distribute ticket people describe manner print ` ` yes '' otherwise print ` ` '',['greedy'],2000.0
645/E,get kick report job know alphabet bessie decide attend school <unknown> egg <unknown> academy make good progress study know first k english letter morning bessie travel school along a sidewalk consist m + n tile order help bessie review mr . moozing label first m sidewalk tile one first k lowercase english letter spell a string t. mr . moozing impress bessie 's <unknown> knowledge farm animals plan let finish label last n tile sidewalk consider result string s ( |s| = m + n ) consist letter label tile order home school sequence indices p1 < p2 < ... < <unknown> define subsequence string s string sp1sp2 ... <unknown> two subsequences consider distinct differ string bessie want label remain part sidewalk number distinct subsequences tile maximum possible however since bessie n't even finish learn alphabet need help ! note empty subsequence also count first line input contain two integers n k ( 0 ≤ n ≤ 1 000 000 1 ≤ k ≤ 26 ) second line contain a string t ( |t| = m 1 ≤ m ≤ 1 000 000 ) consist first k lowercase english letter determine maximum number distinct subsequences bessie form label last n sidewalk tile one first k lowercase english letter since number rather large print modulo 109 + 7 . please note ask maximize remainder modulo 109 + 7 ! goal maximize initial value print remainder first sample optimal label give 8 different subsequences : ` ` '' ( empty string ) ` ` a '' ` ` c '' ` ` b '' ` ` ac '' ` ` ab '' ` ` cb '' ` ` acb '' second sample entire sidewalk already label 10 possible different subsequences : ` ` '' ( empty string ) ` ` a '' ` ` b '' ` ` aa '' ` ` ab '' ` ` ba '' ` ` aaa '' ` ` aab '' ` ` aba '' ` ` aaba '' note string include ` ` aa '' obtain multiple sequence tile count,"['dp', 'greedy', 'strings']",2200.0
637/D,a sportsman start point <unknown> = 0 run point coordinate <unknown> = m ( a straight line ) also sportsman jump — jump first take a run length less s meter ( case s meter path obstacles ) jump a length d meter run jump permit direction leave right start <unknown> a jump point integer coordinate obstacles overcome obstacle necessary land a point strictly right obstacle way athlete n obstacles coordinate x1 x2 ... xn go obstacles jump task determine whether athlete able get finish point first line input <unknown> four integers n m s d ( 1 ≤ n ≤ 200 000 2 ≤ m ≤ 109 1 ≤ s d ≤ 109 ) — number obstacles runner 's way coordinate finish point length run jump maximum length jump correspondingly second line contain a sequence n integers a1 a2 ... ( 1 ≤ ai ≤ m - 1 ) — coordinate obstacles guarantee start finish point obstacles also point one obstacle coordinate obstacles give arbitrary order runner reach finish point print first line output ` ` impossible '' ( without quote ) athlete get start finish print way follow format : command ` ` run '' ` ` jump '' strictly alternate start ` ` run '' besides print chronologically allow jump finish point allow land a jump athlete stop soon reach finish,"['data structures', 'dp', 'greedy']",1600.0
588/A,duff addict meat ! malek want keep happy n days order happy i - th day need eat exactly ai kilograms meat a big shop <unknown> malek want buy meat i - th day sell meat pi dollars per kilogram malek know number a1 ... p1 ... pn day buy arbitrary amount meat also keep meat future malek a little tire cook meat ask help help minimize total money spend keep duff happy n days first line input contain integer n ( 1 ≤ n ≤ 105 ) number days next n line i - th line contain two integers ai pi ( 1 ≤ ai pi ≤ 100 ) amount meat duff need cost meat day print minimum money need keep duff happy n days one line first sample case : optimal way would buy 1 kg first day 2 kg second day 3 kg third day second sample case : optimal way would buy 1 kg first day 5 kg ( need meat second third day ) second day,['greedy'],900.0
545/C,little susie listen fairy tales bed every day today 's fairy tale wood <unknown> little girl immediately start imagine <unknown> cut wood imagine situation describe n tree locate along road point coordinate x1 x2 ... xn tree height hi woodcutters cut a tree fell leave right occupy one segment [ xi - hi xi ] [ xi ; xi + hi ] tree cut occupy a single point coordinate xi woodcutters fell a tree segment occupy fall tree n't contain occupy point woodcutters want process many tree possible susie wonder maximum number tree fell first line contain integer n ( 1 ≤ n ≤ 105 ) — number tree next n line contain pair integers xi hi ( 1 ≤ xi hi ≤ 109 ) — coordinate height і - th tree pair give order ascend xi two tree locate point coordinate print a single number — maximum number tree cut give rule first sample fell tree like : second sample also fell 4 - th tree right occupy segment [ 10 ; 19 ],"['dp', 'greedy']",1500.0
521/D,vasya play one well - known extremely popular mmorpg game game character k skill ; currently i - th equal ai also game a common rat table participants rank accord product skills a hero descend order vasya decide ' upgrade ' character via game store store offer n possible ways improve hero 's skills ; ways belong one three type : unfortunately a ) every improvement use ; b ) money vasya 's card enough purchase m n improvements help vasya reach highest rank game tell vasya improvements purchase order use make rat become high possible several ways achieve print first line contain three number — k n m ( 1 ≤ k ≤ 105 0 ≤ m ≤ n ≤ 105 ) — number skills number improvements sale number vasya afford second line contain k space - separated number ai ( 1 ≤ ai ≤ 106 ) initial value skills next n line contain 3 space - separated number tj ij bj ( 1 ≤ tj ≤ 3 1 ≤ ij ≤ k 1 ≤ bj ≤ 106 ) — type j - th improvement ( 1 assign 2 add 3 multiply ) skill apply value b improvement first line contain a number l ( 0 ≤ l ≤ m ) — number improvements use second line contain l distinct space - separated number vi ( 1 ≤ vi ≤ n ) — indices improvements order apply improvements number start 1 order appear input,['greedy'],2800.0
494/A,malek recently find a treasure map look a treasure find a lock door a string s write door consist character ' ( ' ' ) ' ' # ' a manual open door spend a long time malek manage decode manual find goal replace ' # ' one ' ) ' character final string become beautiful also write a string call beautiful i ( 1 ≤ i ≤ |s| ) ' ) ' character ' ( ' character among first i character s also total number ' ( ' character equal total number ' ) ' character help malek open door tell ' # ' character many ' ) ' character must replace first line input contain a string s ( 1 ≤ |s| ≤ 105 ) character string one character ' ( ' ' ) ' ' # ' guarantee s contain least one ' # ' character way replace ' # ' character lead a beautiful string print - 1 . otherwise character ' # ' print a separate line contain a positive integer number ' ) ' character character must replace several possible answer may output <unknown> denote length string s,['greedy'],1500.0
294/B,shaass n book want make a bookshelf book want bookshelf 's dimension small possible thickness i - th book ti page ' width equal wi thickness book either 1 2 . book page heights shaass put book bookshelf follow way first select book put vertically put rest book horizontally vertical book sum widths horizontal book must total thickness vertical book a sample arrangement book depict figure help shaass find minimum total thickness vertical book achieve first line input contain integer n ( 1 ≤ n ≤ 100 ) next n line contain two integers ti wi denote thickness width i - th book correspondingly ( 1 ≤ ti ≤ 2 1 ≤ wi ≤ 100 ) line output print minimum total thickness vertical book achieve,"['dp', 'greedy']",1700.0
174/C,polycarpus amateur programmer analyze a friend 's program already find function rangeincrement ( l r ) add 1 element array a index segment [ l r ] word function follow : polycarpus know state array a a series function call want determine minimum number function call lead state addition want find function call need case guarantee require number call exceed 105 . call function rangeincrement ( l r ) array elements equal zero first input line contain a single integer n ( 1 ≤ n ≤ 105 ) — length array a [ 1 ... n ] second line contain integer space - separated elements a [ 1 ] a [ 2 ] ... a [ n ] ( 0 ≤ a [ i ] ≤ 105 ) series function call rangeincrement ( l r ) guarantee least one element array positive guarantee answer contain 105 call function rangeincrement ( l r ) print first line t — minimum number call function rangeincrement ( l r ) lead array input data guarantee number turn 105 . print t line — descriptions function call one per line line contain two integers li ri ( 1 ≤ li ≤ ri ≤ n ) — arguments i - th call rangeincrement ( l r ) call apply order multiple solutions allow print first sample require a call entire array four additional call :,"['data structures', 'greedy']",1800.0
123/C,a two dimensional array call a bracket array grid contain one two possible bracket — ` ` ( ` ` ` ` ) '' a path two dimensional array cells call monotonous two consecutive cells path side - adjacent cell path locate right previous one a two dimensional array whose size equal n × m call a correct bracket array string form write bracket monotonous way cell ( 1 1 ) cell ( n m ) form a correct bracket sequence let 's define operation compare two correct bracket array equal size ( a b ) like let 's consider a give two dimensional array priorities ( c ) — a two dimensional array size contain different integers 1 nm let 's find position ( i j ) two dimensional array ai j ≠ bi j. several position let 's choose one number ci j minimum ai j = ` ` ( ` ` a < b otherwise a > b. position ( i j ) find array consider equal task find a k - th two dimensional correct bracket array guarantee give size n m less k two dimensional correct bracket array first line contain integers n m k — size array number seek correct bracket array ( 1 ≤ n m ≤ 100 1 ≤ k ≤ 1018 ) array priorities give n line contain m number number pi j show priority character j line i ( 1 ≤ pi j ≤ nm pi j different ) please use % lld specificator read write 64 - bit integers с++ prefer use cin cout stream % i64d specificator print k - th two dimensional correct bracket array first sample exist one correct two - dimensional bracket array second third sample two array exist a bracket sequence call regular possible obtain correct arithmetic expression insert character « + » « 1 » sequence example sequence « ( ( ) ) ( ) » « ( ) » « ( ( ) ( ( ) ) ) » regular « ) ( » « ( ( ) » « ( ( ) ) ) ( »,"['dp', 'greedy']",2300.0
39/B,petya work a pr manager a successful berland company bersoft need prepare a presentation company income growth since 2001 ( year found ) till petya know 2001 company income amount a1 billion bourles 2002 — a2 billion ... current ( 2000 + n ) -th year — billion bourles base information petya decide show presentation linear progress history opinion perfect accord a graph petya already make first year bersoft company income must amount 1 billion bourles second year — 2 billion bourles etc . follow year income increase 1 billion bourles unfortunately real number different perfect ones among number ai even occur negative ones a sign company ’ s losses years petya want ignore data word cross number ai sequence leave subsequence perfect growth thus petya choose a sequence years y1 y2 ... yk year y1 company income amount 1 billion bourles year y2 — 2 billion bourles etc . accordance perfect growth <unknown> help choose longest sequence first line contain integer n ( 1 ≤ n ≤ 100 ) next line contain n integers ai ( - 100 ≤ ai ≤ 100 ) number ai determine income bersoft company ( 2000 + i ) -th year number line separate space output k — maximum possible length a perfect sequence next line output sequence years y1 y2 ... yk separate number space answer unique output solution exist output one number 0,['greedy'],1300.0
1575/M,"mr . chanek 's city represent a plane want build a house complex city telephone pole plane represent a grid $$$ a $$$ size $$$ ( n + 1 ) \times ( m + 1 ) $$$ a telephone pole $$$ ( x y ) $$$ $$$ a _ { x y } = 1 $$$ point $$$ ( x y ) $$$ define $$$ s ( x y ) $$$ square euclidean distance nearest pole $$$ ( x y ) $$$ formally square euclidean distance two point $$$ ( x_1 y_1 ) $$$ $$$ ( x_2 y_2 ) $$$ $$$ ( x_2 - x_1 ) ^2 + ( y_2 - y_1 ) ^2 $$$ optimize build plan project supervisor ask sum $$$ s ( x y ) $$$ $$$ 0 \leq x \leq n $$$ $$$ 0 \leq y \leq m $$$ help find value $$$ \sum _ { x=0 } ^ { n } { \sum _ { y=0 } ^ { m } { s ( x y ) } } $$$ first line contain two integers $$$ n $$$ $$$ m $$$ ( $$$ 0 \leq n m < 2000 $$$ ) — size grid $$$ ( n + 1 ) $$$ line follow contain $$$ ( m + 1 ) $$$ integers $$$ a _ { i j } $$$ ( $$$ 0 \leq a _ { i j } \leq 1 $$$ ) — grid denote position telephone pole plane least one telephone pole give grid output integer denote value $$$ \sum _ { x=0 } ^ { n } { \sum _ { y=0 } ^ { m } { s ( x y ) } } $$$ first example nearest telephone pole point $$$ ( 0,0 ) $$$ $$$ ( 1,0 ) $$$ $$$ ( 2,0 ) $$$ $$$ ( 0,1 ) $$$ $$$ ( 1,1 ) $$$ $$$ ( 2,1 ) $$$ $$$ ( 0 0 ) $$$ nearest telephone pole point $$$ ( 0 2 ) $$$ $$$ ( 1,2 ) $$$ $$$ ( 2,2 ) $$$ $$$ ( 0 2 ) $$$ thus $$$ \sum _ { x=0 } ^ { n } { \sum _ { y=0 } ^ { m } { s ( x y ) } } = ( 0 + 1 + 4 ) + ( 1 + 2 + 5 ) + ( 0 + 1 + 4 ) = 18 $$$","['data structures', 'geometry']",2400.0
1083/E,fair nut get stack planar world solve task get give $$$ n $$$ rectangles vertexes $$$ ( 0 0 ) $$$ $$$ ( x_i 0 ) $$$ $$$ ( x_i y_i ) $$$ $$$ ( 0 y_i ) $$$ rectangle also give a number $$$ a_i $$$ choose area union minus sum $$$ a_i $$$ choose ones maximum guarantee nest rectangles nut idea find answer ask help first line contain one integer $$$ n $$$ ( $$$ 1 \leq n \leq 1000000 $$$ ) — number rectangles next $$$ n $$$ line contain three integers $$$ x_i $$$ $$$ y_i $$$ $$$ a_i $$$ ( $$$ 1 \leq x_i y_i \leq 1000000000 $$$ $$$ 0 \leq a_i \leq x_i \cdot y_i $$$ ) guarantee nest rectangles a single line print answer problem — maximum value achieve first example right answer achieve choose first second rectangles second example right answer also achieve choose first second rectangles,"['data structures', 'dp', 'geometry']",2400.0
792/F,vova play a computer game know <unknown> monsters vova 's character a mage though start character know spell vova 's character learn new spell game every spell characterize two value xi yi — damage per second mana cost per second respectively vova n't use a spell integer amount second formally use a spell damage x mana cost y z second deal <unknown> damage spend y·z mana ( round ) mana leave ( mana amount set start game remain begin every fight ) character wo n't able use spell prohibit use multiple spell simultaneously also vova fight monsters every monster characterize two value tj hj — monster kill vova 's character tj second hj health point mana refill every fight ( vova 's character revive full mana reserve ) previous fight influence ones vova 's character kill a monster deal hj damage tj second use spell ( allow use one spell a fight ) spend mana begin fight monster 's health become zero exactly tj second ( mean monster vova 's character kill time ) vova win fight write a program answer two type query : note query give a different form also remember vova 's character know spell begin game every query second type determine vova able win fight correspond monster first line contain two integer number q m ( 2 ≤ q ≤ 105 1 ≤ m ≤ 1012 ) — number query amount mana begin every <unknown> - th next q line contain three number ki ai bi ( 1 ≤ ki ≤ 2 1 ≤ ai bi ≤ 106 ) use restore query way : let j index last query second type positive answer ( j = 0 none ) every query second type print yes vova able win fight correspond monster otherwise first example vova 's character first learn spell 5 damage 10 mana cost per second next query a fight monster kill character 20 second 50 health point vova kill 10 second ( spend 100 mana ) next monster 52 health vova ca n't deal much damage 100 mana,"['data structures', 'geometry']",3100.0
319/C,"kalila dimna two <unknown> live a huge jungle one day decide join a log factory order make money manager log factory want go jungle cut n tree heights a1 a2 ... , buy a chain saw a shop time use chain saw tree number i decrease height tree one unit time kalila dimna use chain saw need recharge cost charge depend i d tree cut completely ( a tree cut completely height equal 0 ) maximum i d a tree cut completely i ( tree height ai begin ) cost charge chain saw would bi tree cut completely kalila dimna charge chain saw <unknown> charge begin know i < j ai < aj bi > bj also bn = 0 a1 = 1 . kalila dimna want cut tree completely minimum cost want help ! ? first line input contain integer n ( 1 ≤ n ≤ 105 ) second line input contain n integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) third line input contain n integers b1 b2 ... bn ( 0 ≤ bi ≤ 109 ) 's guarantee a1 = 1 bn = 0 a1 < a2 < ... < b1 > b2 > ... > bn line output must contain minimum cost cut tree completely please write % lld specifier read write 64 - bit integers с++ prefer use cin cout stream % i64d specifier","['dp', 'geometry']",2100.0
501/B,misha hack codeforces site decide let users change handle a user change handle number time new handle must equal handle already use use point misha a list handle change request complete request want understand relation original new handle users help first line contain integer q ( 1 ≤ q ≤ 1000 ) number handle change request next q line contain descriptions request one per line query consist two non - empty string old new separate a space string consist lowercase uppercase latin letter digits string old new distinct lengths string exceed 20 . request give chronologically word moment a query a single person handle old handle new use use anyone first line output integer n — number users change handle least next n line print map old new handle users must contain two string old new separate a space mean user handle old request complete handle new may output line order user change handle must occur exactly description,"['data structures', 'strings']",1100.0
1819/F,"long dream work a large company finally get a job study exist modern technologies a long time ready apply knowledge practice sit desk see a sheet paper company 's motto print large letter : <unknown> .... company 's motto contain four main principles — a ( <unknown> ) b ( <unknown> ) c ( crack ) d ( release ) therefore consider string length $$$ n $$$ consist four latin letter unordered pair letter ` ` ab '' ` ` bc '' ` ` cd '' ` ` da '' motto adjacent call pair symbols good , give a string $$$ s $$$ length $$$ n $$$ know unordered pair symbols $$$ \ { x y \ } $$$ good perform one follow operations string : example string <unknown> replace one string <unknown> <unknown> <unknown> string aac replace aab <unknown> a non - empty sequence operations string $$$ s $$$ call correct follow two condition meet : ready move problem statement ! a set string initially empty , $$$ q $$$ query add another string $$$ t_i $$$ set remove string $$$ t_i $$$ set query need output minimum maximum size a correct sequence operations word occur least choice initial string $$$ s $$$ first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 1 \le n \le 20 $$$ $$$ 1 \le q \le 100\,000 $$$ ) — length string consideration number query modify set string next $$$ q $$$ line contain a string $$$ t_i $$$ ( $$$ \lvert t_i \rvert = n $$$ ) string consist character ` ` a '' ` ` b '' ` ` c '' ` ` d '' string $$$ t_i $$$ set query add set otherwise remove set $$$ q $$$ query output two integers : minimum maximum size a correct sequence operations word set appear least sequence operations satisfy condition problem output a single number $$$ -1 $$$ let 's consider first test example","['data structures', 'dp']",3500.0
1776/E,"isona a train station station two platforms $$$ m $$$ parallel railways view infinite straight line railway identify integer $$$ 1 $$$ $$$ m $$$ railway $$$ 1 $$$ closest first platform railway $$$ m $$$ farthest a $$$ 1 $$$ meter distance consecutive railways well platform closest railway isona stand inner border first platform realize forget validate ticket ! a validate machine second platform exactly opposite current position ( thus distance isona validate machine $$$ m + 1 $$$ meter ) $$$ s $$$ second leave validate ticket bridge designate cross railways far validate machine therefore isona ( brave a little bite careless ) cross railways run a straight line perpendicular railways isona run forward ( backward ) stay still run maximum speed need $$$ v $$$ second traverse $$$ 1 $$$ meter run speed less equal maximum speed one problem : $$$ n $$$ train program transit railways $$$ i $$$ -th train use railway $$$ r_i $$$ start cross straight line isona validate machine $$$ a_i $$$ second end $$$ b_i $$$ second course isona cross a railway a train pass formally every $$$ i = 1 \ 2 \ \dots \ n $$$ isona allow railway $$$ r_i $$$ time $$$ t $$$ $$$ a_i < t < b_i $$$ ( allow cross time $$$ a_i $$$ $$$ b_i $$$ ) follow picture summarize situation picture $$$ m = 4 $$$ railways two train visible ; train go railway $$$ 3 $$$ currently cross line isona validate machine isona a really good runner get tire every time change run speed minimum number speed change perform get validate machine platform within $$$ s $$$ second ? note begin isona run start run anytime instant start run ( i.e speed become positive ) count a speed change first line input contain four integers $$$ n $$$ $$$ m $$$ $$$ s $$$ $$$ v $$$ ( $$$ 1 \leq n \leq 500 $$$ $$$ 1 \leq m \leq 10 $$$ $$$ 1 \leq s v \leq 1000000000 $$$ ) — number train number railways maximum time second isona spend cross railways number second need traverse $$$ 1 $$$ meter maximum speed next $$$ n $$$ line contain three integers $$$ a_i $$$ $$$ b_i $$$ $$$ r_i $$$ ( $$$ 1 \leq a_i < b_i \leq 1000000000 $$$ $$$ 1 \leq r_i \leq m $$$ ) — start end time $$$ i $$$ -th train cross straight line isona validate machine railway use guarantee two train $$$ i $$$ $$$ j $$$ go railway ( i.e $$$ r_i = r_j $$$ ) least $$$ 1 $$$ second ( either $$$ a_j \ge b_i + 1 $$$ $$$ a_i \ge b_j + 1 $$$ ) print minimum number speed change isona perform get validate machine time impossible print $$$ -1 $$$ first sample isona start run time $$$ t=0 $$$ maximum speed ( $$$ 1 $$$ m / s ) cross railway a train traverse arrive platform time $$$ 4 = s - 1 $$$ without change speed second sample a possible solution $$$ 2 $$$ speed change follow : first $$$ 2 $$$ second isona go maximum speed ( $$$ 0.5 $$$ m / s ) slow $$$ 0.25 $$$ m / s $$$ 4 $$$ second reach second railway point go maximum speed reach platform third sample isona wait $$$ 2 $$$ second start run run $$$ 5 $$$ second maximum speed ( $$$ 0.5 $$$ m / s ) , wait $$$ 1 $$$ second run ( run $$$ 0 $$$ m / s ) finally run maximum speed last $$$ 5 $$$ second overall change speed twice","['data structures', 'dp']",3500.0
1725/L,pak chanek participate a <unknown> cook competition competition pak chanek cook lempers $$$ n $$$ stoves arrange sequentially stave $$$ 1 $$$ stave $$$ n $$$ initially stave $$$ i $$$ a temperature $$$ a_i $$$ degrees a stave a negative temperature pak chanek realise order lempers cook need keep temperature stave a non - negative value make happen pak chanek zero operations one operation pak chanek choose one stave $$$ i $$$ $$$ 2 \leq i \leq n-1 $$$ : pak chanek want know minimum number operations need temperatures stoves non - negative value help pak chanek tell minimum number operations need report possible first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 100000 $$$ ) — number stoves second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -1000000000 \leq a_i \leq 1000000000 $$$ ) — initial temperatures stoves output integer represent minimum number operations need make temperatures stoves non - negative value output $$$ -1 $$$ possible first example a sequence operations do follow : sequence operations number operations need fewer $$$ 4 $$$,['data structures'],2400.0
1545/E2,note differences easy hard versions constraints $$$ n $$$ time limit make hack versions solve aquamoon know foresight ghost want curse tourists a pedestrian street unfortunately time ghost hide a barrier could n't enter barrier a short time destroy therefore do save unfortunate person street ghost pedestrian street represent a one - dimensional coordinate system one person hang pedestrian street time $$$ 0 $$$ coordinate $$$ x $$$ move a speed $$$ 1 $$$ unit per second particular time $$$ i $$$ person coordinate $$$ x+i $$$ ghost go cast $$$ n $$$ curse street $$$ i $$$ -th curse last time $$$ tl_i-1 + 10^ { -18 } $$$ time $$$ tr_i+1 - 10^ { -18 } $$$ ( exclusively ) kill people coordinate $$$ l_i-1 + 10^ { -18 } $$$ $$$ r_i+1 - 10^ { -18 } $$$ ( exclusively ) formally mean person whose coordinate $$$ ( l_i-1 + 10^ { -18 } r_i+1 - 10^ { -18 } ) $$$ time range $$$ ( tl_i-1 + 10^ { -18 } tr_i+1 - 10^ { -18 } ) $$$ die save person street aquamoon stop time moment $$$ t $$$ move person current coordinate $$$ x $$$ coordinate $$$ y $$$ ( $$$ t $$$ $$$ x $$$ $$$ y $$$ necessarily integers ) movement cost aquamoon $$$ |x - y| $$$ energy movement continuous exist curse area point $$$ x $$$ $$$ y $$$ time $$$ t $$$ person die aquamoon want know minimum amount energy need spend order save person street $$$ n $$$ curse good program friend help ? first line contain a single integer $$$ n $$$ ( $$$ 1\le n\le 200000 $$$ ) — number curse next line contain a single integer $$$ x $$$ ( $$$ 1\le x\le 1000000 $$$ ) — initial coordinate person follow $$$ n $$$ line contain four integers $$$ tl_i $$$ $$$ tr_i $$$ $$$ l_i $$$ $$$ r_i $$$ ( $$$ 1\le tl_i\le tr_i\le 1000000 $$$ $$$ 1\le l_i\le r_i\le 1000000 $$$ ) print a single integer — minimum energy aquamoon need spend round nearest integer ( case two nearest integers round answer highest ),"['data structures', 'dp']",3500.0
1488/H,"give integer $$$ n $$$ a sequence $$$ a $$$ $$$ n-1 $$$ integers element either $$$ 0 $$$ $$$ 1 $$$ ask build a string length $$$ n $$$ : ask $$$ q $$$ query form : query print number different string satisfy give constraints modulo $$$ 998\,244\,353 $$$ first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 2 \le n \le 100000 $$$ ; $$$ 1 \le q \le 100000 $$$ ) — length string number query second line contain $$$ n-1 $$$ integers $$$ a_1 a_2 \dots a _ { n-1 } $$$ ( $$$ a_i \in \ { 0 1\ } $$$ ) — constraints suffix string next $$$ q $$$ line contain a query : integer $$$ i $$$ ( $$$ 1 \le i \le n - 1 $$$ ) — flip value $$$ a_i $$$ ( $$$ a_i=0 $$$ set $$$ a_i $$$ $$$ 1 $$$ vice versa ) query print number different string satisfy give constraints modulo $$$ 998\,244\,353 $$$ $$$ i $$$ -th suffix a string a continuous substring start $$$ i $$$ -th position end last position a string $$$ a $$$ lexicographically smaller a string $$$ b $$$ one follow hold : two string $$$ a $$$ $$$ b $$$ length $$$ n $$$ differ exist a position $$$ i $$$ $$$ a_i \neq b_i $$$",['data structures'],2800.0
1423/G,sarah always a lover nature a couple years ago save enough money travel world explore things build nature lifetime earth time visit truly special place leave untouched centuries watch <unknown> freeze weather <unknown> - <unknown> <unknown> admire sea life reside unseen experience enhance breathtaking view build mountains time leave visitors see years end time <unknown> take a toll sarah <unknown> decision settle suburbs live a quiet life however sarah 's love nature never <unknown> start grow flower garden attempt stay connect nature begin plant blue <unknown> time start use different flower type add variety collection flower collection flower represent array $$$ n $$$ flower $$$ i $$$ -th a type associate denote $$$ a_i $$$ resident pass collection limit width view see $$$ k $$$ contiguous flower moment time see whole collection resident look first $$$ k $$$ contiguous flower $$$ a_1 a_2 ... a_k $$$ shift view one flower look next section k contiguous flower $$$ a_2 a_3 ... a _ { k+1 } $$$ scan whole collection end section $$$ a _ { n - k+1 } ... a _ { n-1 } a_n $$$ resident determine beautiness a section $$$ k $$$ flower number distinct flower type section furthermore beautiness whole collection calculate sum beautiness value contiguous section formally beautiness $$$ b_i $$$ a section start $$$ i $$$ -th position calculate $$$ b_i = distinct ( a_i a _ { i+1 } ... a _ { i+k-1 } ) $$$ beautiness collection $$$ b $$$ calculate $$$ b = b_1 + b_2 + ... + b _ { n - k+1 } $$$ addition sarah want keep collection flower a fresh feel also pick two point $$$ l $$$ $$$ r $$$ dispose flower two point plant new flower type give $$$ q $$$ query query follow two type : query second type print result – beautiness $$$ b $$$ collection first line contain two integers $$$ n $$$ $$$ q \ ; ( 1 \leq n q \leq 100000 ) \ $$$ — number flower number query respectively second line contain $$$ n $$$ integers $$$ a_1 a_2 ... a_n\ ; ( 1 \leq a_i \leq 1000000000 ) \ $$$ — $$$ a_i $$$ represent type $$$ i $$$ -th flower next $$$ q $$$ line describe query start integer $$$ <unknown> { 1 2\ } $$$ query second type print beautiness $$$ b $$$ collection let 's look example initially collection $$$ [ 1 2 3 4 5 ] $$$ first query $$$ k = 3 $$$ consider section three flower first $$$ [ 1 2 3 ] $$$ since beautiness section number distinct flower type section $$$ b_1 = 3 $$$ second section $$$ [ 2 3 4 ] $$$ $$$ b_2 = 3 $$$ third section $$$ [ 3 4 5 ] $$$ $$$ b_3 = 3 $$$ since flower type distinct beautiness value resident associate collection $$$ b = b_1 + b_2 + b_3 = 3 + 3 + 3 = 9 $$$ second query collection become $$$ [ 5 5 3 4 5 ] $$$ third query $$$ k = 4 $$$ consider section four flower first $$$ [ 5 5 3 4 ] $$$ three distinct flower type $$$ [ 5 3 4 ] $$$ section $$$ b_1 = 3 $$$ second section $$$ [ 5 3 4 5 ] $$$ also $$$ 3 $$$ distinct flower type $$$ b_2 = 3 $$$ beautiness value resident associate collection $$$ b = b_1 + b_2 = 3 + 3 = 6 $$$ fourth query collection become $$$ [ 5 5 5 5 5 ] $$$ fifth query $$$ k = 2 $$$ case four section $$$ [ 5 5 ] $$$ beautiness $$$ [ 5 5 ] $$$ $$$ 1 $$$ since one distinct element section $$$ [ 5 ] $$$ beautiness whole collection $$$ b = b_1 + b_2 + b_3 + b_4 = 1 + 1 + 1 + 1 = 4 $$$,['data structures'],3500.0
1332/G,"give a sequence integers $$$ a $$$ length $$$ n $$$ a tuple $$$ ( i j k ) $$$ call monotone triple example $$$ a= [ <unknown> ] $$$ $$$ ( 2,3,4 ) $$$ monotone triple sequence $$$ a $$$ $$$ ( 1,3,4 ) $$$ bob give a sequence integers $$$ a $$$ length $$$ n $$$ a math exam exams contain question form $$$ l r $$$ ask find subsequence $$$ b $$$ size greater $$$ 2 $$$ ( i.e $$$ |b| \ge 3 $$$ ) sequence $$$ a_l a _ { l+1 } \ldots a _ { r } $$$ recall sequence $$$ b $$$ a subsequence sequence $$$ a $$$ $$$ b $$$ obtain deletion several ( possibly zero ) elements however hat monotone stuff want find a subsequence free monotone triple besides want find one subsequence largest length among subsequences free monotone triple every query please help bob find subsequences meet constraints first line contain two integers $$$ n $$$ $$$ q $$$ ( $$$ 3 \le n \le 200000 $$$ $$$ 1 \le q \le 200000 $$$ ) — length sequence $$$ a $$$ number query second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1 \le a_i \le 10^ { 9 } $$$ ) represent sequence $$$ a $$$ follow $$$ q $$$ line contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l r \le n $$$ $$$ r - <unknown> 2 $$$ ) query output $$$ 0 $$$ subsequence $$$ b $$$ satisfy constraints mention legend print empty line 's mandatory otherwise output one integer $$$ k $$$ ( $$$ k > 2 $$$ ) denote length sequence $$$ b $$$ output $$$ k $$$ integers $$$ i_1 i_2 \ldots i_k $$$ ( $$$ l \le i_1 < i_2 < \ldots < <unknown> r $$$ ) satisfy $$$ b_j = a _ { i_j } $$$ $$$ 1 \le j \le k $$$ multiple answer maximum length print first query give sequence monotone triple free second query show subsequence $$$ b $$$ length greater $$$ 2 $$$ $$$ b $$$ monotone triple free",['data structures'],3100.0
1172/F,nauuo a girl love cod one day solve a problem require calculate a sum number modulo $$$ p $$$ write follow code get verdict ` ` wrong answer '' soon discover bug — modadd function work number range $$$ [ 0 p ) $$$ number problem may range curious wrong function want know result however original code work slow ask help give array $$$ a_1 a_2 \ldots a_n $$$ a number $$$ p $$$ nauuo make $$$ m $$$ query query give $$$ l $$$ $$$ r $$$ calculate result sum ( a l r p ) see definition sum function pseudocode note integers wo n't overflow code first line contain three integers $$$ n $$$ $$$ m $$$ $$$ p $$$ ( $$$ 1 \le n \le 1000000 $$$ $$$ 1 \le m \le 200000 $$$ $$$ 1 \le p \le 1000000000 $$$ ) — length give array number query modulus note modulus use modadd function second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ -1000000000\le <unknown> $$$ ) — give array follow $$$ m $$$ line line contain two integers $$$ l $$$ $$$ r $$$ ( $$$ 1\le l\le r\le n $$$ ) — calculate result sum ( a l r p ) output contain $$$ m $$$ integers answer query give order,['data structures'],3300.0
1106/E,lunar new year approach bob go receive red envelop countless money ! collect money red envelop a time - consuming process let 's describe problem a mathematical way consider a timeline time $$$ 1 $$$ $$$ n $$$ $$$ i $$$ -th red envelope available time $$$ s_i $$$ $$$ t_i $$$ inclusive contain $$$ w_i $$$ coin bob choose collect coin $$$ i $$$ -th red envelope integer point time $$$ s_i $$$ $$$ t_i $$$ inclusive ca n't collect envelop time $$$ d_i $$$ ( inclusive ) $$$ s_i \leq t_i \leq d_i $$$ hold bob a greedy man collect coin greedily — whenever collect coin integer time $$$ x $$$ collect available red envelope maximum number coin multiple envelop maximum number coin bob would choose one whose parameter $$$ d $$$ largest still multiple choices bob choose one randomly however alice — daughter — n't want father get many coin could disturb bob $$$ m $$$ integer time moments alice decide disturb bob time $$$ x $$$ could anything time $$$ x $$$ resume usual strategy time $$$ x + 1 $$$ ( inclusive ) may lead miss red envelop calculate minimum number coin bob would get alice disturb optimally first line contain three non - negative integers $$$ n $$$ $$$ m $$$ $$$ k $$$ ( $$$ 1 \leq n \leq 100000 $$$ $$$ 0 \leq m \leq 200 $$$ $$$ 1 \leq k \leq 100000 $$$ ) denote length timeline number time alice disturb bob total number red envelop respectively follow $$$ k $$$ line describe $$$ k $$$ red envelop $$$ i $$$ -th line contain four positive integers $$$ s_i $$$ $$$ t_i $$$ $$$ d_i $$$ $$$ w_i $$$ ( $$$ 1 \leq s_i \leq t_i \leq d_i \leq n $$$ $$$ 1 \leq w_i \leq 1000000000 $$$ ) — time segment $$$ i $$$ -th envelope available time moment bob continue collect collect $$$ i $$$ -th envelope number coin envelope respectively output one integer — minimum number coin bob would get alice disturb optimally first sample alice chance disturb bob therefore bob collect coin red envelop time $$$ 1 $$$ $$$ 5 $$$ collect $$$ 13 $$$ coin total second sample alice disturb bob time $$$ 1 $$$ therefore bob skip first envelope collect second one anything answer $$$ 2 $$$,"['data structures', 'dp']",2100.0
1098/D,"vasya a big fish lover parent give aquarium new year vasya a degree <unknown> think fill a new aquarium eels a good idea unfortunately eels <unknown> vasya decide find dangerous idea get one aquarium eels fight exactly one fish remain two eels fight big one eat smaller one ( weight equal one still eat ) namely let $$$ n $$$ eels initially aquarium $$$ i $$$ -th a weight $$$ x_i $$$ $$$ n-1 $$$ battle occur a result one eel survive a battle two eels weight $$$ a $$$ $$$ b $$$ $$$ a \le b $$$ eel weight $$$ a $$$ eat disappear aquarium eel weight $$$ b $$$ increase weight $$$ a+b $$$ a battle two eels weight $$$ a $$$ $$$ b $$$ $$$ a \le b $$$ consider dangerous $$$ b \le 2 a $$$ a give set eels danger define maximum number dangerous battle occur among eels place one aquarium vasya plan eels want put aquarium set eels ( initially empty ) make a series operations set operation either add one eel set remove one eel set vasya ask calculate danger current set eels operation first line input contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 500\,000 $$$ ) number operations vasya make next $$$ q $$$ line describe operations operation one two type : operation output single integer danger set eels operation third example perform operations set eels look like $$$ \ { 1 1 4\ } $$$ set eels several possible scenarios place one aquarium : thus danger set eels 2",['data structures'],2800.0
1039/E,"people enjoy spend time solve program contest dina prefer take beautiful picture soon byteland <unknown> garden announce summer oenothera exhibition decide test new camera exhibition consist $$$ l = 10^ { 100 } $$$ oenothera species arrange a row consecutively number integers $$$ 0 $$$ $$$ l - 1 $$$ camera <unknown> allow take a photo $$$ w $$$ species i.e dina take a photo contain flower indices $$$ x $$$ $$$ x + w - 1 $$$ integer $$$ x $$$ $$$ 0 $$$ $$$ l - w $$$ denote photo $$$ [ x x + w - 1 ] $$$ take $$$ n $$$ photos $$$ i $$$ -th ( chronological order ) $$$ [ x_i x_i + w - 1 ] $$$ notation decide build a time - <unknown> video photos discover oenothera <unknown> open even dina take photo truncate leave segment contain exactly $$$ k $$$ flower compose a video photos keep original order <unknown> a beautiful <unknown> create ! a scene a contiguous sequence photos set flower change two scenes call a cut example consider first photo contain flower $$$ [ 1 5 ] $$$ second photo contain flower $$$ [ 3 7 ] $$$ third photo contain flower $$$ [ 8 12 ] $$$ $$$ k = 3 $$$ dina truncate first second photo $$$ [ 3 5 ] $$$ third photo $$$ [ 9 11 ] $$$ first two photos form a scene third photo also form a scene transition two scenes happen second third photos a cut $$$ k = 4 $$$ transition photos a cut dina want number cut small possible please help ! calculate minimum possible number cut different value $$$ k $$$ first line contain three positive integer $$$ n $$$ $$$ w $$$ $$$ q $$$ ( $$$ 1 \leq n q \leq 100\,000 $$$ $$$ 1 \leq w \leq 1000000000 $$$ ) — number take photos number flower a single photo number query next line contain $$$ n $$$ non - negative integers $$$ x_i $$$ ( $$$ 0 \le x_i \le 1000000000 $$$ ) — indices leftmost flower photos next line contain $$$ q $$$ positive integers $$$ k_i $$$ ( $$$ 1 \le k_i \le w $$$ ) — value $$$ k $$$ solve problem 's guarantee $$$ k_i $$$ distinct print $$$ q $$$ integers — width truncate photo $$$ k_i $$$ minimum number cut possible",['data structures'],3400.0
939/F,arkady want a dinner return a shop buy a <unknown> cutlet need fry cutlet fry 2n second particular fry n second one side n second side arkady already get a fry pan turn fire understand maybe wo n't able flip cutlet exactly n second begin cook arkady busy sort sticker pack favorite messenger flip cutlet periods time namely k periods time i - th interval time li second start cook till ri second inclusive arkady decide 's require flip cutlet exactly middle cook instead flip several time a way cutlet fry exactly n second one side n second side total help arkady find 's possible cook cutlet able flip cutlet give periods time ; yes find minimum number flip need cook cutlet first line contain two integers n k ( 1 ≤ n ≤ 100 000 1 ≤ k ≤ 100 ) — number second cutlet cook side number periods time arkady flip next k line contain descriptions intervals line contain two integers li ri ( 0 ≤ li ≤ ri ≤ 2·n ) mean arkady flip cutlet moment start li second begin cook finish ri second begin cook particular li = ri arkady flip cutlet moment li = ri 's guarantee li > ri - 1 2 ≤ i ≤ k. output ` ` hungry '' arkady wo n't able fry cutlet exactly n second one side exactly n second side otherwise output ` ` full '' first line minimum number time flip cutlet second line first example arkady flip cutlet time moment 3 second start cook time moment 13 second start cook second example arkady flip cutlet 10 second start cook,"['data structures', 'dp']",2400.0
799/F,butler ostin want show arkady row odd number fountains beautiful row even number fountains butler want show arkady n garden garden a row m cells i - th garden one fountain cells li ri inclusive fountains garden issue garden contain even number fountains wrong show arkady ostin want choose two integers a ≤ b show part garden start cell a end cell b. course segment suit ostin garden either zero odd number fountains segment also necessary least one garden least one fountain segment a b. help ostin find total length segment i.e sum value ( b - a + 1 ) suitable pair ( a b ) first line contain two integers n m ( 1 ≤ n m ≤ 2·105 ) — number garden length <unknown> line follow i - th line contain two integers li ri ( 1 ≤ li ≤ ri ≤ m ) — bound segment contain fountains i - th garden print one integer : total length suitable segment first example follow pair suit ostin : ( a b ) : ( 1 2 ) ( 1 4 ) ( 1 5 ) ( 2 2 ) ( 2 4 ) ( 2 5 ) ( 3 3 ) ( 4 4 ) ( 4 5 ) second example follow pair suit ostin : ( a b ) : ( 1 2 ) ( 1 5 ) ( 2 2 ) ( 2 5 ) ( 3 3 ) ( 4 4 ) ( 4 6 ) ( 5 5 ) ( 6 6 ),['data structures'],3500.0
739/C,alyona build n tower put small cub top others cube size 1 × 1 × 1 . a tower a non - zero amount cub stand top tower next form a row sometimes alyona choose segment tower put top tower several cub formally <unknown> choose segment tower li ri add di cub top let sequence a1 a2 ... heights tower leave right let 's call a segment tower al al + 1 ... ar a hill follow condition hold : integer k ( l ≤ k ≤ r ) al < al + 1 < al + 2 < ... < ak > ak + 1 > ak + 2 > ... > ar addition di cub top tower li ri alyona want know maximum width among hill width a hill number tower first line contain single integer n ( 1 ≤ n ≤ 3·105 ) — number tower second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 109 ) — number cub tower third line contain single integer m ( 1 ≤ m ≤ 3·105 ) — number additions next m line contain 3 integers i - th line contain integers li ri di ( 1 ≤ l ≤ r ≤ n 1 ≤ di ≤ 109 ) mean alyona put di cub <unknown> tower li ri print m line i - th line print maximum width hill i - th addition first sample follow : addition 2 cub top tower first third number cub tower become equal [ 7 7 7 5 5 ] hill maximum width [ 7 5 ] thus maximum width 2 . addition 1 cube second tower number cub tower become equal [ 7 8 7 5 5 ] hill maximum width [ 7 8 7 5 ] thus maximum width 4 . addition 1 cube fourth tower number cub tower become equal [ 7 8 7 6 5 ] hill maximum width [ 7 8 7 6 5 ] thus maximum width 5,['data structures'],2500.0
617/E,bob a favorite number k ai length n. ask answer m query query give a pair li ri ask count number pair integers i j l ≤ i ≤ j ≤ r xor number ai ai + 1 ... aj equal k. first line input contain integers n m k ( 1 ≤ n m ≤ 100 000 0 ≤ k ≤ 1 000 000 ) — length array number query bob 's favorite number respectively second line contain n integers ai ( 0 ≤ ai ≤ 1 000 000 ) — bob 's array m line follow i - th line contain integers li ri ( 1 ≤ li ≤ ri ≤ n ) — parameters i - th query print m line answer query order appear input first sample suitable pair i j first query : ( 1 2 ) ( 1 4 ) ( 1 5 ) ( 2 3 ) ( 3 6 ) ( 5 6 ) ( 6 6 ) a single pair suitable second query second sample xor equal 1 subarrays odd length,['data structures'],2200.0
597/C,give sequence n different elements find number increase subsequences k + 1 elements guarantee answer greater <unknown> first line contain two integer value n k ( 1 ≤ n ≤ 105 0 ≤ k ≤ 10 ) — length sequence number elements increase subsequences next n line contain one integer ai ( 1 ≤ ai ≤ n ) — elements sequence value ai different print one integer — answer problem,"['data structures', 'dp']",1900.0
568/E,note memory limit problem less usual let 's consider array consist positive integers position contain gap a collection number use fill gap number give collection use task determine way fill gap longest increase subsequence form array a maximum size first line contain a single integer n — length array ( 1 ≤ n ≤ 105 ) second line contain n space - separated integers — elements sequence a gap mark ` ` -1 '' elements gap positive integers exceed 109 . guarantee sequence contain 0 ≤ k ≤ 1000 gap third line contain a single positive integer m — number elements fill gap ( k ≤ m ≤ 105 ) fourth line contain m positive integers — number fill gap number a positive integer exceed 109 . number may equal print n space - separated number a single line — result sequence multiple possible answer print first sample gap correct answer initial sequence second sample one way get increase subsequence length 3 . third sample answer ` ` 4 2 '' would also correct note strictly increase subsequences consider fifth sample answer ` ` 1 1 1 2 '' consider correct number 1 use replace two time,"['data structures', 'dp']",3000.0
515/E,"drazil a monkey live a circular park n tree around park distance i - th tree ( i + 1 ) -st tree di distance n - th tree first tree dn height i - th tree hi drazil start day morning run morning run consist follow step : always children play around consecutive tree drazil ca n't stand children ca n't choose tree close children even ca n't stay close tree two tree drazil choose x - th y - th estimate energy morning run take 2 ( <unknown> + <unknown> ) + dist ( x y ) since children exactly one two arc connect x y distance dist ( x y ) tree x y uniquely define , know i - th day children play ai - th tree bi - th tree formally ai ≤ bi children play around tree indices range [ ai bi ] otherwise play around tree indices please help drazil determine two tree choose order consume energy ( since want become fit cool - looking monkey ) report result amount energy day first line contain two integer n m ( 3 ≤ n ≤ 105 1 ≤ m ≤ 105 ) denote number tree number days respectively second line contain n integers d1 d2 ... dn ( 1 ≤ di ≤ 109 ) distance consecutive tree third line contain n integers h1 h2 ... hn ( 1 ≤ hi ≤ 109 ) heights tree follow m line contain two integers ai bi ( 1 ≤ ai bi ≤ n ) describe new day always least two different tree drazil choose affect children day print answer a separate line",['data structures'],2300.0
477/E,"dreamoon create a document hard problems use notepad.exe document consist n line text ai denote length i - th line want know fastest way move cursor around document really long let ( r c ) a current cursor position r row number c position cursor row 1 ≤ r ≤ n 0 ≤ c ≤ ar use follow six operations notepad.exe move cursor assume current cursor position ( r c ) : 're give document description ( n sequence ai ) q query dreamoon query ask minimal number key press need move cursor ( r1 c1 ) ( r2 c2 ) first line contain integer n ( 1 ≤ n ≤ 400 000 ) — number line text second line contain n integers a1 a2 ... ( 1 ≤ ai ≤ 108 ) third line contain integer q ( 1 ≤ q ≤ 400 000 ) next q line contain four integers r1 c1 r2 c2 represent a query ( 1 ≤ r1 r2 ≤ n 0 ≤ c1 ≤ ar1 0 ≤ c2 ≤ ar2 ) query print result query first sample first query solve key : home right second query solve key : , end , third query solve key : end , fourth query solve key : end ,",['data structures'],3100.0
418/E,"order ensure confidentiality access ` ` russian code cup '' problems password protect problem development process select a password jury generate a special table contain n columns infinite number row construct a table first row fix others obtain follow rule : row i position p a number equal number time a [ i - 1 ] [ p ] occur prefix a [ i - 1 ] [ 1 ... p ] ensure require level confidentiality jury must able perform follow operations : step manually tedious jury ask help write a program respond request jury first line contain integer n ( 1 ≤ n ≤ 100000 ) — number columns second line contain description first row table , n integers less 1 exceed 109 . third line input contain integer m ( 1 ≤ m ≤ 100000 ) — number request next row contain a description request consist three integers : print answer request second type order receive",['data structures'],3100.0
351/D,"<unknown> a sequence consist n integers : a1 a2 ... , jeff perform follow operation sequence a : a beauty a sequence a minimum number operations need delete elements sequence a. jeff 's write a sequence m integers b1 b2 ... bm want ask q question question describe two integers li ri answer question beauty sequence bli bli + 1 ... <unknown> give sequence b question help jeff answer question first line contain integer m ( 1 ≤ m ≤ 105 ) next line contain m integers b1 b2 ... bm ( 1 ≤ bi ≤ 105 ) third line contain integer q ( 1 ≤ q ≤ 105 ) — number question next q line contain pair integers i - th contain a pair integers li ri ( 1 ≤ li ≤ ri ≤ m ) — description i - th question q line print answer jeff 's query print answer accord order question input",['data structures'],2700.0
323/C,give two permutations p q consist n elements m query form : l1 r1 l2 r2 ( l1 ≤ r1 ; l2 ≤ r2 ) response query number integers 1 n position first permutation segment [ l1 r1 ] ( border include ) position second permutation segment [ l2 r2 ] ( border include ) a permutation n elements sequence n distinct integers less 1 greater n. position number v ( 1 ≤ v ≤ n ) permutation g1 g2 ... <unknown> number i gi = v. first line contain one integer n ( 1 ≤ n ≤ 106 ) number elements permutations follow line contain n integers separate space : p1 p2 ... pn ( 1 ≤ pi ≤ n ) elements first permutation next line contain second permutation q1 q2 ... qn format follow line contain integer m ( 1 ≤ m ≤ 2·105 ) number query follow m line contain descriptions query one a line description i - th query consist four integers : a b c d ( 1 ≤ a b c d ≤ n ) query parameters l1 r1 l2 r2 obtain number a b c d use follow algorithm : print a response query a separate line,['data structures'],2400.0
45/C,n people take dance lessons every person characterize his / her dance skill ai begin lesson line leave right least one couple a boy a girl line follow process repeat : boy girl stand next minimal difference dance skills start dance several couple one first leave start dance a couple leave dance line close i.e a result line always continuous difference dance skills understand absolute value difference ai variable task find pair order start dance first line contain integer n ( 1 ≤ n ≤ 2·105 ) — number people next line contain n symbols b g without space b stand a boy g stand a girl third line contain n space - separated integers ai ( 1 ≤ ai ≤ 107 ) — dance skill people specify leave right order line print result number couple k. print k line contain two numerals — number people form couple people number integers 1 n leave right a couple leave dance n't renumber people number one couple sort increase order print couple order leave dance,['data structures'],1900.0
1842/C,tenzing $$$ n $$$ ball arrange a line color $$$ i $$$ -th ball leave $$$ a_i $$$ tenzing follow operation number time : tenzing want know maximum number ball remove test contain multiple test case first line input contain a single integer $$$ t $$$ ( $$$ 1\leq t\leq 1000 $$$ ) — number test case description test case follow first line contain a single integer $$$ n $$$ ( $$$ 1\leq n\leq 2\cdot 100000 $$$ ) — number ball second line contain $$$ n $$$ integers $$$ a_1 a_2 \ldots a_n $$$ ( $$$ 1\leq a_i \leq n $$$ ) — color ball guarantee sum $$$ n $$$ test case exceed $$$ 2\cdot 100000 $$$ test case output maximum number ball tenzing remove first example tenzing choose $$$ i=2 $$$ $$$ j=3 $$$ first operation $$$ a= [ <unknown> ] $$$ tenzing choose $$$ i=2 $$$ $$$ j=3 $$$ second operation $$$ a= [ 1 ] $$$ tenzing remove $$$ 4 $$$ ball total second example tenzing choose $$$ i=1 $$$ $$$ j=3 $$$ first operation $$$ a= [ 2 ] $$$ tenzing remove $$$ 3 $$$ ball total,['dp'],1500.0
1769/C2,в этой версии задачи $$$ n \le 200000 $$$ и $$$ a_i \le 1000000 $$$ ( а также есть <unknown> на <unknown> $$$ n $$$ по наборам входных данных <unknown> одного теста ) вика за время работы в компании vk уже сделала $$$ n $$$ коммитов в системе контроля версий $$$ i $$$ -й коммит был сделан в $$$ a_i $$$ -й день работы вики в компании в некоторые дни вика могла сделать несколько коммитов а в другие — не сделать ни одного вику интересуют такие отрезки подряд идущих дней что в каждый из этих дней у неё есть хотя бы один коммит чем длиннее будет самый длинный такой отрезок тем более продуктивным сотрудником она будет себя ощущать недавно вика нашла способ подкрутить время любого коммита вперёд но не более чем на сутки таким образом $$$ i $$$ -й коммит теперь может быть « сделан » либо в $$$ a_i $$$ -й либо в $$$ ( a_i + 1 ) $$$ -й день время каждого коммита можно подкрутить независимо от других — в частности можно как оставить всем коммитам исходное время так и перенести все коммиты ровно на день вперёд найдите длину самого длинного возможного отрезка подряд идущих дней в каждый из которых у вики в профиле будет отображаться хотя бы один коммит после возможной подкрутки времени некоторых коммитов каждый тест состоит из нескольких наборов входных данных в первой строке находится одно целое число $$$ t $$$ ( $$$ 1 \le t \le 100 $$$ ) — количество наборов входных данных далее следует описание наборов входных данных первая строка каждого набора входных данных содержит одно целое число $$$ n $$$ ( $$$ 1 \le n \le 200000 $$$ ) — число коммитов вторая строка содержит $$$ n $$$ целых чисел $$$ a_1 a_2 \ldots a_n $$$ в неубывающем порядке ( $$$ 1 \le a_1 \le a_2 \le \ldots \le a_n \le 1000000 $$$ ) — номера дней в которые были сделаны коммиты гарантируется что <unknown> $$$ n $$$ по всем наборам входных данных не превосходит $$$ 200000 $$$ для каждого набора входных данных выведите одно целое число — максимальную возможную длину отрезка дней в каждый из которых у вики в профиле будет отображаться хотя бы один коммит после возможной подкрутки времени некоторых коммитов вперёд не более чем на сутки в первом наборе входных данных можно поменять дату коммита в день $$$ 3 $$$ на день $$$ 4 $$$ дату коммита в день $$$ 4 $$$ — на день $$$ 5 $$$ а дату любого из коммитов в день $$$ 6 $$$ — на день $$$ 7 $$$ тогда в каждый из дней $$$ 4 $$$ $$$ 5 $$$ $$$ 6 $$$ $$$ 7 $$$ и $$$ 8 $$$ в профиле вики будет отображаться хотя бы один коммит и наибольший отрезок из подряд идущих дней с коммитами — $$$ [ 4 ; 8 ] $$$ — будет иметь длину $$$ 5 $$$ во втором наборе входных данных можно либо оставить все коммиты как есть либо перенести каждый коммит на день вперёд в любом случае длина отрезка дней составит $$$ 6 $$$ в третьем наборе входных данных вика сделала много коммитов но все в один и тот же день с номером $$$ 10 $$$ в лучшем случае отрезок дней достигнет длины $$$ 2 $$$ — если какие - то коммиты оставить на день $$$ 10 $$$ а другие перенести на день $$$ 11 $$$,['dp'],1300.0
1605/F,integer array $$$ a $$$ length $$$ n $$$ say a palindorme ( $$$ a _ { 1 } $$$ $$$ | $$$ $$$ a _ { 2 } $$$ $$$ | $$$ $$$ \ldots $$$ $$$ | $$$ $$$ a _ { i } ) = ( a _ { { n - i + 1 } } $$$ $$$ | $$$ $$$ \ldots $$$ $$$ | $$$ $$$ a _ { { n - 1 } } $$$ $$$ | $$$ $$$ a _ { n } ) $$$ $$$ 1 \leq i \leq n $$$ $$$ | $$$ denote bitwise operation integer array $$$ a $$$ length $$$ n $$$ consider good elements rearrange form a palindorme formally array $$$ a $$$ good exist a permutation $$$ p_1 p_2 \ldots p_n $$$ ( array integer $$$ 1 $$$ $$$ n $$$ appear exactly ) $$$ a _ { p_1 } a _ { p_2 } \ldots a _ { p_n } $$$ a palindorme find number good array length $$$ n $$$ consist integers range $$$ [ 0 2^ { k } - 1 ] $$$ print modulo prime $$$ m $$$ two array $$$ a_1 a_2 \ldots a_n $$$ $$$ b_1 b_2 \ldots b_n $$$ consider different exist $$$ i $$$ $$$ ( 1 \leq i \leq n ) $$$ $$$ a_i \ne b_i $$$ first line input contain three integers $$$ n $$$ $$$ k $$$ $$$ m $$$ ( $$$ 1 \leq n k \leq 80 $$$ $$$ 100000000 \lt m \lt 1000000000 $$$ ) guarantee $$$ m $$$ prime print a single integer — number good array modulo $$$ m $$$ first sample possible array $$$ [ 0 ] $$$ $$$ [ 1 ] $$$ good second sample examples good array : note $$$ [ 1 1 0 ] $$$ $$$ [ 1 0 1 ] $$$ $$$ [ 0 1 1 ] $$$ good array consider different accord definition statement third sample example a good array $$$ [ 1 0 1 4 2 5 4 ] $$$ rearrange array $$$ b = [ 1 5 0 2 4 4 1 ] $$$ a palindorme : $$$ \mathrm { } ( l r ) $$$ denote $$$ b _ { l } $$$ $$$ | $$$ $$$ b _ { l+1 } $$$ $$$ | $$$ $$$ \ldots $$$ $$$ | $$$ $$$ b _ { r } $$$,['dp'],2900.0
1218/C,", mighty blackout stand upper - left $$$ ( 0,0 ) $$$ corner $$$ n $$$ x $$$ m $$$ matrix must move either right second $$$ k $$$ transformers jump around matrix follow way transformer start jump position $$$ ( x y ) $$$ time $$$ t $$$ jump next position second $$$ x $$$ -axes grow downwards $$$ y $$$ -axes grow right order jump position define $$$ { ( x y ) ( x+d y - d ) ( x+d y ) ( x <unknown> ) } $$$ periodic time $$$ t $$$ transformer matrix want arrive bottom - right corner $$$ ( n-1 m-1 ) $$$ slay transformers lose least possible amount energy meet transformer ( ) matrix field must kill lose sum energy amount require kill transformer transformer kill course stop jump fall aby leave matrix world output minimum possible amount energy waste first line integers $$$ n $$$ $$$ m $$$ ( $$$ 1 \leq n m \leq 500 $$$ ) represent size matrix $$$ k $$$ ( $$$ 0 \leq k \leq 5 * 100000 $$$ ) number jump transformers next $$$ k $$$ line transformer number $$$ x $$$ $$$ y $$$ $$$ d $$$ ( $$$ d \geq 1 $$$ ) $$$ t $$$ ( $$$ 0 \leq t \leq n+m-2 $$$ ) $$$ e $$$ ( $$$ 0 \leq e \leq 1000000000 $$$ ) represent start coordinate transformer jump position distance pattern describe time transformer start jump energy require kill guarantee 4 jump point transformers within matrix <unknown> single integer minimum possible amount energy waste blackout arrive bottom - right corner blackout take path ( 0 0 ) ( 2 0 ) ( 2 0 ) ( 2 2 ) need kill first third transformer a total energy cost 9 . exist path less energy value",['dp'],2600.0
1194/G,let 's call a fraction $$$ \frac { x } { y } $$$ good exist least one another fraction $$$ \frac { x ' } { y ' } $$$ $$$ \frac { x } { y } = \frac { x ' } { y ' } $$$ $$$ 1 \le x ' y ' \le 9 $$$ digit denote $$$ x ' $$$ contain decimal representation $$$ x $$$ digit denote $$$ y ' $$$ contain decimal representation $$$ y $$$ example $$$ \frac { 26 } { 13 } $$$ a good fraction $$$ \frac { 26 } { 13 } = \frac { 2 } { 1 } $$$ give integer number $$$ n $$$ please calculate number good fraction $$$ \frac { x } { y } $$$ $$$ 1 \le x \le n $$$ $$$ 1 \le y \le n $$$ answer may really large print modulo $$$ 998244353 $$$ line input contain one integer $$$ n $$$ ( $$$ 1 \le n < 10^ { 100 } $$$ ) print number good fraction $$$ \frac { x } { y } $$$ $$$ 1 \le x \le n $$$ $$$ 1 \le y \le n $$$ answer may really large print modulo $$$ 998244353 $$$,['dp'],2700.0
1067/A,ivan unexpectedly saw a present one previous birthdays array $$$ n $$$ number $$$ 1 $$$ $$$ 200 $$$ array old number hard read ivan remember elements least one neighbour <unknown> less formally : $$$ a _ { 1 } \le a _ { 2 } $$$ $$$ a _ { n } \le a _ { n-1 } $$$ $$$ a _ { i } \le max ( a _ { i-1 } \ \ a _ { i+1 } ) $$$ $$$ i $$$ $$$ 2 $$$ $$$ n-1 $$$ ivan remember array ask find number ways restore restore elements also integers $$$ 1 $$$ $$$ 200 $$$ since number ways big print modulo $$$ 998244353 $$$ first line input contain one integer $$$ n $$$ ( $$$ 2 \le n \le 10^ { 5 } $$$ ) — size array second line input contain $$$ n $$$ integers $$$ a _ { i } $$$ — elements array either $$$ a _ { i } = -1 $$$ $$$ 1 \le a _ { i } \le 200 $$$ $$$ a _ { i } = -1 $$$ mean $$$ i $$$ -th element ca n't read print number ways restore array modulo $$$ 998244353 $$$ first example possible value $$$ a _ { 2 } $$$ $$$ 2 $$$ second example $$$ a _ { 1 } = a _ { 2 } $$$ $$$ 200 $$$ different value restore elements integers $$$ 1 $$$ $$$ 200 $$$,['dp'],1900.0
983/B,"array $$$ b $$$ length $$$ m $$$ define function $$$ f $$$ $$$ \oplus $$$ bitwise exclusive example $$$ f ( <unknown> ) = f ( <unknown> ) = f ( 3,6,12 ) = f ( <unknown> ) = f ( 5,10 ) = f ( <unknown> ) = f ( 15 ) = 15 $$$ give array $$$ a $$$ a query query represent two integers $$$ l $$$ $$$ r $$$ answer maximum value $$$ f $$$ continuous subsegments array $$$ a_l a _ { l+1 } \ldots a_r $$$ first line contain a single integer $$$ n $$$ ( $$$ 1 \le n \le 5000 $$$ ) — length $$$ a $$$ second line contain $$$ n $$$ integers $$$ a_1 a_2 \dots a_n $$$ ( $$$ 0 \le a_i \le 2^ { 30 } -1 $$$ ) — elements array third line contain a single integer $$$ q $$$ ( $$$ 1 \le q \le 100\,000 $$$ ) — number query next $$$ q $$$ line contain a query represent two integers $$$ l $$$ $$$ r $$$ ( $$$ 1 \le l \le r \le n $$$ ) print $$$ q $$$ line — answer query first sample query maximum value function reach subsegment equal whole segment second sample optimal segment first query $$$ [ 3,6 ] $$$ second query — $$$ [ 2,5 ] $$$ third — $$$ [ 3,4 ] $$$ fourth — $$$ [ 1,2 ] $$$",['dp'],1800.0
979/E,kuro recently ` ` intelligent cat ever '' contest three friends decide go katie 's home celebrate kuro 's win a big meal take a small break start play game kuro challenge katie create a game a white paper a pencil a pair scissor a lot arrows ( assume number arrows infinite ) immediately katie come game call <unknown> parity paper divide $$$ n $$$ piece enumerate $$$ 1 $$$ $$$ n $$$ shiro paint piece color specifically $$$ i $$$ -th piece color $$$ c _ { i } $$$ $$$ c _ { i } = 0 $$$ define black color $$$ c _ { i } = 1 $$$ define white color $$$ c _ { i } = -1 $$$ mean piece n't color yet rule game simple players must put arrows pair different piece a way arrow number piece start less number piece end also two different piece connect one arrow players must choose color ( $$$ 0 $$$ $$$ 1 $$$ ) unpainted piece score a valid way put arrows color piece define number paths piece alternate color example $$$ [ 1 \to 0 \to 1 \to 0 ] $$$ $$$ [ 0 \to 1 \to 0 \to 1 ] $$$ $$$ [ 1 ] $$$ $$$ [ 0 ] $$$ valid paths count travel piece $$$ x $$$ piece $$$ y $$$ arrow $$$ x $$$ $$$ y $$$ kuro fun yet love parity let 's call favorite parity $$$ p $$$ $$$ p = 0 $$$ stand ` ` even '' $$$ p = 1 $$$ stand ` ` odd '' want put arrows choose color a way score parity $$$ p $$$ seem like many ways satisfy kuro want count number could a large number let 's help problem print modulo $$$ 10^ { 9 } + 7 $$$ first line contain two integers $$$ n $$$ $$$ p $$$ ( $$$ 1 \leq n \leq 50 $$$ $$$ 0 \leq p \leq 1 $$$ ) — number piece kuro 's want parity second line contain $$$ n $$$ integers $$$ c _ { 1 } c _ { 2 } ... c _ { n } $$$ ( $$$ -1 \leq c _ { i } \leq 1 $$$ ) — color piece print a single integer — number ways put arrows choose color number valid paths alternate color parity $$$ p $$$ first example $$$ 6 $$$ ways color piece add arrows show figure score $$$ 3 3 5 $$$ first row $$$ 5 3 3 $$$ second row leave right,['dp'],2400.0
958/C2,heidi break first level encryption death star plan star screen present description next code enter look surprisingly similar first one – seem like empire engineer quite lazy ... heidi give a sequence a also give two integers k p. need find encryption key s let x a sequence integers p a positive integer define score x sum elements x modulo p. heidi give a sequence a consist n integers also give integers k p. goal split a k part : output sum s – encryption code first line input contain three space - separated integer n k p ( k ≤ n ≤ 20 000 2 ≤ k ≤ 50 2 ≤ p ≤ 100 ) – number elements a number part a split modulo compute score respectively second line contain n space - separated integers elements a. integer interval [ 1 1 000 000 ] output number s describe problem statement first example input sequence split ( 3 4 ) ( 7 ) ( 2 ) total score would easy see score maximum second example one possible way obtain score 37 make follow split : ( 16 3 24 ) ( 13 9 ) ( 8 ) ( 7 ) ( 5 12 12 ),['dp'],2000.0
852/E,"john buy a new car plan a journey around country country n cities connect bidirectional roads n - 1 roads every city reachable city cities label 1 n. john first select city start journey , spend one day a city travel a randomly choosen city directly connect current one yet visit ca n't continue obey rule select start city call friend jack advice jack also start a big casino business want open casinos cities ( max 1 per city maybe nowhere ) jack know john well know visit a city a casino gamble exactly continue journey also know john enter a casino a good mood leave a bad mood vice versa since john 's friend want a good mood moment finish journey john a good mood start journey many ways jack select a start city john cities build casinos matter john travel a good mood end ? print answer modulo 109 + 7 . first line a positive integer n ( 1 ≤ n ≤ 100000 ) number cities next n - 1 line two number a b ( 1 ≤ a b ≤ n ) separate a single space mean cities a b connect a bidirectional road output one number answer problem modulo 109 + 7 . example 1 : jack select city 1 john 's start city either build 0 casinos john happy time build a casino cities john would visit a casino city 1 become unhappy go city 2 visit a casino become happy journey end ca n't go back city 1 . jack select city 2 start everything symmetrical answer 4 . example 2 : jack tell john start city 1 either build casinos 0 2 cities ( total 4 possibilities ) tell start city 2 john 's journey either contain cities 2 1 2 3 . therefore jack either build casinos build three cities options risk john end journey unhappy start 3 symmetric start 1 total 4 + 2 + 4 = 10 options",['dp'],2100.0
808/G,berland a long glorious history increase <unknown> among younger citizens king berland decide compose anthem though lot lot victories history berland one stand king want mention anthem many time possible already compose major part anthem need fill letter king ask help work anthem string s 105 small latin letter question mark glorious victory string t 105 small latin letter replace question mark small latin letter a way number occurrences string t string s maximal note occurrences string t s overlap check third example clarification first line contain string small latin letter question mark s ( 1 ≤ |s| ≤ 105 ) second line contain string small latin letter t ( 1 ≤ |t| ≤ 105 ) product lengths string <unknown> wo n't exceed 107 . output maximum number occurrences string t achieve replace question mark string s small latin letter first example result string s ` ` <unknown> '' second example result string s ` ` <unknown> '' last letter string arbitrary third example occurrences string t overlap string s maximal number occurrences t ` ` <unknown> '',"['dp', 'strings']",2300.0
771/D,bear limak prepare problems a program competition course would <unknown> mention sponsor name statement limak take seriously go change word make still possible read try modify word little possible limak a string s consist uppercase english letter one move swap two adjacent letter string example transform a string ` ` abbc '' ` ` babc '' ` ` abcb '' one move limak want obtain a string without a substring ` ` vk '' ( i.e letter ' v ' immediately follow letter ' k ' ) easily prove 's possible initial string s. minimum possible number move limak ? first line input contain integer n ( 1 ≤ n ≤ 75 ) — length string second line contain a string s consist uppercase english letter length string equal n. print one integer denote minimum possible number move limak order obtain a string without a substring ` ` vk '' first sample initial string ` ` <unknown> '' minimum possible number move 3 . one optimal sequence move : second sample two optimal sequence move one ` ` bvvkv '' → ` ` <unknown> '' → ` ` <unknown> '' ` ` bvvkv '' → ` ` <unknown> '' → ` ` <unknown> '' fifth sample swap necessary,['dp'],2500.0
706/C,vasiliy fond solve different task today find one n't able solve ask help vasiliy give n string consist lowercase english letter want sort lexicographical order ( dictionary ) allow swap operation allow reverse ( first character become last second become one last ) reverse i - th string vasiliy spend ci units energy interest minimum amount energy spend order string sort lexicographical order string a lexicographically smaller string b shorter b ( |a| < |b| ) prefix none a prefix first position differ character a smaller character b. purpose problem two equal string nearby break condition sequence sort lexicographically first line input contain a single integer n ( 2 ≤ n ≤ 100 000 ) — number string second line contain n integers ci ( 0 ≤ ci ≤ 109 ) i - th equal amount energy vasiliy spend order reverse i - th string follow n line contain a string consist lowercase english letter total length string n't exceed 100 000 . impossible reverse string locate lexicographical order print - 1 . otherwise print minimum total amount energy vasiliy spend second sample one reverse string 2 string 3 . amount energy require reverse string 3 smaller third sample string change reverse go wrong order answer - 1 . fourth sample string consist character ' a ' sort order string ` ` aa '' go string ` ` aaa '' thus answer - 1,"['dp', 'strings']",1600.0
690/D3,many wall design choose ! even modulo 106 + 3 's enormous number give recently heidi acquire unlimited supply bricks choices endless ! really need something narrow heidi quick come criteria a useful wall : rule a fair amount possibilities right ? help heidi compute number useless wall confirm either criteria word a wall useless every segment width w height h. parameter c total width wall mean easy version however note number bricks unlimited output number useless wall modulo 106 + 3 . first line input contain three space - separated integers c w h ( 1 ≤ c ≤ 108 1 ≤ w h ≤ 100 ) output number different wall modulo 106 + 3 useless accord heidi 's criteria brick columns structure consider a useless wall,['dp'],2100.0
612/F,give a circular array n elements elements number element value 1 n clockwise order i - th cell contain value ai robot simba cell s. moment time robot n cells ( begin s ) one turn robot write number write current cell move adjacent cell clockwise counterclockwise direction write number cell simba n't spend time move adjacent cell simba spend one unit time simba want write number cell one time number write a non decrease order find least number time units write number first line contain two integers n s ( 1 ≤ s ≤ n ≤ 2000 ) — number cells circular array start position simba second line contain n integers ai ( - 109 ≤ ai ≤ 109 ) — number write i - th cell number give cells order 1 n. number ai equal first line print number t — least number time units next n line contain direction robot movement number cells move direction movement robot write number cell turn direction number cells print form + x case clockwise movement -x case counterclockwise movement x cells ( 0 ≤ x ≤ n - 1 ) note sum absolute value x equal t,['dp'],2600.0
570/E,peppa pig walk walk forest a strange coincidence ! forest shape a rectangle consist n row m columns enumerate row rectangle top bottom number 1 n columns — leave right number 1 m. let 's denote cell intersection r - th row c - th column ( r c ) initially pig stand cell ( 1 1 ) end want cell ( n m ) since pig a hurry get home go cell ( r c ) either cell ( r + 1 c ) ( r c + 1 ) leave forest forest pig unusual cells forest similar look different peppa enjoy take picture every step take a picture cell path forest consider beautiful photograph take way view forward reverse order show sequence photos formally line form cells order visit a palindrome ( read a formal definition a palindrome previous problem ) count number beautiful paths cell ( 1 1 ) cell ( n m ) since number large determine remainder divide 109 + 7 . first line contain two integers n m ( 1 ≤ n m ≤ 500 ) — height width field follow n line contain m lowercase english letter identify type cells forest identical cells represent identical letter different cells represent different letter print a single integer — number beautiful paths modulo 109 + 7 . picture illustrate possibilities sample test,['dp'],2300.0
494/B,ham recently find a string t suddenly become quite fond spend several days try find occurrences t string finally become tire start think follow problem give a string s many ways extract k ≥ 1 non - overlapping substrings contain string t a substring ? formally need calculate number ways choose two sequence a1 a2 ... ak b1 b2 ... bk satisfy follow requirements : number ways rather large print modulo 109 + 7 . input consist two line contain string s t ( 1 ≤ |s| |t| ≤ 105 ) string consist lowercase latin letter print answer a single line,"['dp', 'strings']",2000.0
474/D,"saw little game marmot make mole 's lunch 's marmot 's dinner time know marmot eat flower every dinner eat red white flower therefore a dinner represent a sequence several flower white red , a dinner tasty a rule : marmot want eat white flower group size k. marmot wonder many ways eat a b flower number ways could large print modulo 1000000007 ( 109 + 7 ) input contain several test case first line contain two integers t k ( 1 ≤ t k ≤ 105 ) t represent number test case next t line contain two integers ai bi ( 1 ≤ ai ≤ bi ≤ 105 ) describe i - th test print t line standard output i - th line contain number ways marmot eat ai bi flower dinner modulo 1000000007 ( 109 + 7 )",['dp'],1700.0
346/B,mathematics a subsequence a sequence derive another sequence delete elements without change order remain elements example sequence <unknown> a subsequence abcdef a substring a string a continuous subsequence string example bcd a substring abcdef give two string s1 s2 another string call virus task find longest common subsequence s1 s2 n't contain virus a substring input contain three string three separate line : s1 s2 virus ( 1 ≤ |s1| |s2| <unknown> ≤ 100 ) string consist uppercase english letter output longest common subsequence s1 s2 without virus a substring multiple answer accept valid common subsequence output 0,"['dp', 'strings']",2000.0
296/B,yaroslav think two string s w consist digits length n non - comparable two number i j ( 1 ≤ i j ≤ n ) si > wi sj < wj sign si represent i - th digit string s similarly wj represent j - th digit string w. a string 's template a string consist digits question mark ( ` ` ? ` ` ) yaroslav two string templates length n. yaroslav want count number ways replace question mark integers templates make result string incomparable note obtain string contain lead zero distinct question mark replace distinct integers help yaroslav calculate remainder divide describe number ways 1000000007 ( 109 + 7 ) first line contain integer n ( 1 ≤ n ≤ 105 ) — length templates second line contain first template — a string consist digits character ` ` ? ` ` string 's length equal n. third line contain second template format a single line print remainder divide answer problem number 1000000007 ( 109 + 7 ) first test contain question mark string incomparable answer 1 . second test question mark give string comparable answer 0,['dp'],2000.0
182/E,vasya recently buy land decide surround a wooden fence go a company call ` ` wooden board '' produce wooden board fence vasya read catalog products company disposal n different type wood company use i - th type wood produce a board type a rectangular ai bi block vasya decide order board company build a fence turn storehouse company large vasya order arbitrary number board every type note vasya allow turn board build fence however vasya turn square board vasya require construct a fence length l however arbitrary fence wo n't vasya want fence look beautiful 'll say a fence beautiful follow two condition fulfil : word fence consider beautiful type i - th board fence different i - 1 - th board 's type ; besides i - th board 's length equal i - 1 - th board 's width ( i start 2 ) vasya wonder many variants arrange a fence land exist task count number different beautiful fence length l. two fence consider correspond sequence fence board type rotations otherwise fence different since seek number large enough need calculate answer modulo 1000000007 ( 109 + 7 ) first line contain two integers n l ( 1 ≤ n ≤ 100 1 ≤ l ≤ 3000 ) — number different board type fence length correspondingly next n line contain descriptions board type : i - th line contain two integers ai bi ( 1 ≤ ai bi ≤ 100 ) — size board i - th type number line separate space print a single integer — seek number variants modulo 1000000007 ( 109 + 7 ) first sample exactly two variants arrange a beautiful fence length 3 :,['dp'],1800.0
176/D,paul <unknown> 's prediction come true finally alien force land earth contrary expectation n't ask humans compute value a ramsey number ( maybe solve ) ask another question seem hard calculate ramsey number alien threaten humans n't solve problem less 2 hours destroy earth tell problem introduce concept hyper string a hyper string make concatenation base string suppose give a list base string b1 b2 ... bn hyper string make indices list i1 i2 ... i m concatenation base string bi1 bi2 ... <unknown> a hyper string large operations costly computers alien ask humans compute length longest common sub - sequence a hyper string t a string s. first line input contain single integer n ( 1 ≤ n ≤ 2000 ) — number base string next n line contain value base string base string make lowercase latin letter a base string empty string sum lengths n base string n't exceed 106 . next line contain single integer m ( 1 ≤ m ≤ 2000 ) — number base string give hyper string t. next line contain m space - separated integer number i1 i2 ... i m ( 1 ≤ ij ≤ n ) — indices base string hyper string t. last line contain a non - empty string s. string s make lowercase latin letter length 2000 character print length longest common sub - sequence hyper string t string s. common sub - sequence print 0 . length string s number character length string s mark |s| string s represent s = s1s2 ... s|s| a non - empty string y = s [ p1p2 ... p|y| ] = sp1sp2 ... sp|y| ( 1 ≤ p1 < p2 < ... < p|y| ≤ |s| ) a subsequence string s. example ` ` coders '' a subsequence ` ` codeforces '',['dp'],2500.0
176/B,let 's consider one interest word game game transform one word another special operations let 's say word w let 's split word two non - empty part x y w = xy a split operation transform word w = xy word u = yx example a split operation transform word ` ` <unknown> '' word ` ` <unknown> '' give two word start end count many ways transform word start word end apply exactly k split operations consecutively word start two ways consider different sequence apply operations differ two operation sequence different exist number i ( 1 ≤ i ≤ k ) i - th operation first sequence word split part x y i - th operation second sequence word split part a b additionally x ≠ a hold first line contain a non - empty word start second line contain a non - empty word end word consist lowercase latin letter number letter word start equal number letter word end least 2 n't exceed 1000 letter third line contain integer k ( 0 ≤ k ≤ 105 ) — require number operations print a single number — answer problem number rather large print modulo 1000000007 ( 109 + 7 ) seek way first sample : ab → a|b → ba → <unknown> → <unknown> second sample two seek ways :,['dp'],1700.0
149/D,petya read a problem a bracket sequence give much think n't find a solution today face give string s. represent a correct bracket sequence a correct bracket sequence sequence open ( ` ` ( ` ` ) close ( ` ` ) '' ) bracket possible obtain a correct mathematical expression insert number operators bracket example sequence ` ` ( ( ) ) ( ) '' ` ` ( ) '' correct bracket sequence sequence ` ` ) ( ) '' ` ` ( ( ) '' a correct bracket sequence bracket correspond match bracket ( open bracket correspond match close bracket vice versa ) example a bracket sequence show figure third bracket correspond match sixth one fifth bracket correspond fourth one allow color bracket bracket sequence three condition fulfil : find number different ways color bracket sequence ways meet above - given condition two ways color consider different differ color least one bracket result quite large print modulo 1000000007 ( 109 + 7 ) first line contain single string s ( 2 ≤ |s| ≤ 700 ) represent a correct bracket sequence print number — number ways color bracket sequence meet give condition modulo 1000000007 ( 109 + 7 ) let 's consider first sample test bracket sequence sample color example show two figure two ways color show incorrect,['dp'],1900.0
119/C,yet another education system reform carry berland recently <unknown> follow : academic year consist n days day pupils study exactly one m subject besides subject study one day lessons i - th subject pupils get home task contain less ai bi exercise besides subject a special attribute complexity ( ci ) a school make timetable consider follow condition satisfy : limitations separately set school turn many case ai bi reach 1016 ( however berland minister education famous love half - <unknown> value bi - ai n't exceed 100 ) also happen berland school № 256 nevertheless school 's principal still work timetable next academic year ... first line contain three integers n m k ( 1 ≤ n ≤ m ≤ 50 1 ≤ k ≤ 100 ) represent number days academic year number subject k parameter correspondingly follow m line contain description a subject three integers ai bi ci ( 1 ≤ ai ≤ bi ≤ 1016 bi - ai ≤ 100 1 ≤ ci ≤ 100 ) — two limitations number exercise i - th subject complexity i - th subject correspondingly distinct subject complexity subject number integers 1 m. please use % lld specificator read write 64 - bit number с++ prefer use cin stream % i64d specificator valid solution exist print single word ` ` '' ( without quote ) otherwise first line contain word ` ` yes '' ( without quote ) next n line contain timetable satisfy condition i + 1 - th line contain two positive integers : number subject study i - th day number home task exercise give subject timetable contain exactly n subject,['dp'],2000.0
111/D,little petya love count want count number ways paint a rectangular checker board size n × m ( n row m columns ) k color besides color follow property : vertical line pass along grid line divide board two non - empty part number distinct color part help petya count color first line contain space - separated integers n m k ( 1 ≤ n m ≤ 1000 1 ≤ k ≤ 106 ) — board 's vertical horizontal size number color respectively print answer problem answer quite a large number print modulo 109 + 7 ( 1000000007 ),['dp'],2300.0
49/E,dna sequence every live creature berland represent a non - empty line consist lowercase latin letter berland scientists find creatures evolve stag one stage exactly one symbol dna line replace exactly two ones overall n permissible substitutions substitution ai- > bici mean one symbol ai replace two symbols bici every substitution could happen unlimited number time say two creatures dna sequence s1 s2 a common ancestor exist a dna sequence s3 throughout evolution result s1 s2 perhaps a different number stag task find give s1 s2 whether creatures possess dna sequence a common ancestor answer positive find length shortest sequence common ancestor ’ s dna first line contain a non - empty dna sequence s1 second line contain a non - empty dna sequence s2 lengths line exceed 50 line contain lowercase latin letter third line contain integer n ( 0 ≤ n ≤ 50 ) — number permissible substitutions follow n line describe a substitution format ai- > bici character ai bi ci lowercase latin letter line s1 s2 coincide list substitutions contain similar substitutions s1 s2 a common ancestor print -1 . otherwise print length shortest sequence s3 s1 s2 could evolve,['dp'],2300.0
44/E,anfisa monkey learn type yet unfamiliar ` ` space '' key type lower - case latin letter type a fairly long line anfisa understand would great divide write k line shorter a longer b text resemble human speech help anfisa first line contain three integers k a b ( 1 ≤ k ≤ 200 1 ≤ a ≤ b ≤ 200 ) second line contain a sequence lowercase latin letter — text type anfisa guarantee give line empty length exceed 200 symbols print k line contain less a b symbols — anfisa 's text divide line allow perform change text : delete add symbols change order etc solution unique print solution print ` ` solution '' ( without quote ),['dp'],1400.0
